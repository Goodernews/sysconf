[1] L. Adhianto, S. Banerjee, M. Fagan, M. Krentel, G. Marin, J. Mellor-Crummey,
and N. R. Tallent. 2010. HPCToolkit: Tools for performance analysis of optimized
parallel programs. Concurr. Comput.: Pract. Exper. 22, 6 (2010), 685–701. https:
//doi.org/10.1002/cpe.1553
[2] C. Alexander, D. Reese, and J. Harden. 1994. Near-critical path analysis of program
activity graphs. In Proc. of the Second Intl. Workshop on Modeling, Analysis, and
Simulation of Computer and Telecommunication Systems. IEEE, Los Alamitos, CA,
USA, 308–317. https://doi.org/10.1109/MASCOT.1994.284406
[3] Glenn Ammons, Thomas Ball, and James R. Larus. 1997. Exploiting Hardware
Performance Counters with Flow and Context Sensitive Profiling. In Proc. of the
1997 ACM SIGPLAN Conf. on Programming Language Design and Implementation.
ACM, New York, NY, USA, 85–96. https://doi.org/10.1145/258915.258924
[4] Satish Balay, Shrirang Abhyankar, Mark F. Adams, Jed Brown, Peter Brune, Kris
Buschelman, Lisandro Dalcin, Victor Eijkhout, William D. Gropp, Dinesh Kaushik,
Matthew G. Knepley, Lois Curfman McInnes, Karl Rupp, Barry F. Smith, Stefano
Zampini, and Hong Zhang. 2016. PETSc Web page. http://www.mcs.anl.gov/petsc.
(2016).
[5] Paul Barford and Mark Crovella. 2000. Critical Path Analysis of TCP Transactions.
SIGCOMM Comput. Commun. Rev. 30, 4 (Aug. 2000), 127–138. https://doi.org/10.
1145/347057.347416
[6] D. Bohme, F. Wolf, B.R. De Supinski, M. Schulz, and M. Geimer. 2012. Scalable
Critical-Path Based Performance Analysis. In Proc. of the 26th IEEE Intl. Parallel
and Distributed Processing Symp. IEEE Computer Society, Los Alamitos, CA, USA,
1330–1340. https://doi.org/10.1109/IPDPS.2012.120
[7] Sergey Brin and Lawrence Page. 1998. The anatomy of a large-scale hypertextual Web search engine. Computer Networks and ISDN Systems: Proc. of the 7th
Intl. World Wide Web Conference 30, 1 (1998), 107–117. https://doi.org/10.1016/
S0169-7552(98)00110-X
[8] K. Mani Chandy and J. Misra. 1982. Distributed Computation on Graphs: Shortest
Path Algorithms. Commun. ACM 25, 11 (Nov. 1982), 833–837. https://doi.org/10.
1145/358690.358717
[9] Jian Chen and R.M. Clapp. 2015. Critical-path candidates: Scalable performance
modeling for MPI workloads. In Proc. of the 2015 IEEE Intl. Symp. on Performance
Analysis of Systems and Software. IEEE, Los Alamitos, CA, USA, 1–10. https:
//doi.org/10.1109/ISPASS.2015.7095779
[10] Jack Dongarra, Michael A Heroux, and Piotr Luszczek. 2016. High-performance
Conjugate-gradient Benchmark. Int. J. High Perform. Comput. Appl. 30, 1 (Feb.
2016), 3–10. https://doi.org/10.1177/1094342015593158
[11] I Dooley and L.V. Kale. 2010. Detecting and using critical paths at runtime in
message driven parallel programs. In Proc. of the 12th Workshop on Advances
in Parallel and Distributed Computational Models (held in conjuction with IPDPS
2010). IEEE Computer Society, Los Alamitos, CA, USA, 1–8. https://doi.org/10.
1109/IPDPSW.2010.5470844
[12] Kristof Du Bois, Stijn Eyerman, Jennifer B. Sartor, and Lieven Eeckhout. 2013.
Criticality Stacks: Identifying Critical Threads in Parallel Programs Using Synchronization Behavior. SIGARCH Comput. Archit. News 41, 3 (June 2013), 511–522.
https://doi.org/10.1145/2508148.2485966
[13] Brian A. Fields, Rastislav Bodik, Mark D. Hill, and Chris J. Newburn. 2004. Interaction Cost and Shotgun Profiling. ACM Trans. Archit. Code Optim. 1, 3 (Sept.
2004), 272–304. https://doi.org/10.1145/1022969.1022971
[14] G. E. Hammond, P. C. Lichtner, and R. T. Mills. 2014. Evaluating the performance
of parallel subsurface simulators: An illustrative example with PFLOTRAN. Water
Resources Research 50, 1 (2014), 208–228. https://doi.org/10.1002/2012WR013483
[15] Debra Hensgen, Raphael Finkel, and Udi Manber. 1988. Two algorithms for
barrier synchronization. Intl. Journal of Parallel Programming 17, 1 (1988), 1–17.
https://doi.org/10.1007/BF01379320
[16] J.K. Hollingsworth. 1998. Critical path profiling of message passing and sharedmemory programs. IEEE Trans. Parallel Distrib. Syst. 9, 10 (Oct 1998), 1029–1040.
[17] Jeffrey K. Hollingsworth. 1996. An Online Computation of Critical Path Profiling.
In Proc. of the SIGMETRICS Symposium on Parallel and Distributed Tools. ACM,
New York, NY, USA, 11–20. https://doi.org/10.1145/238020.238024
[18] Intel Corporation. 2017. Intel VTune Amplifier. https://software.intel.com/en-us/
intel-vtune-amplifier-xe. (March 2017).
[19] Ian Karlin, Jeff Keasler, and Rob Neely. 2013. LULESH 2.0 Updates and Changes.
Technical Report LLNL-TR-641973. Lawrence Livermore National Laboratory.
1–9 pages.
[20] Zhihong Lin, Stephane Ethier, and Jerome Lewandowski. 2010. Gyrokinetic
Toroidal Code, v. 2. http://phoenix.ps.uci.edu/GTC/. (2010).
[21] Message Passing Interface Forum. 1999. MPI: A Message Passing Interface Standard.
University of Tennessee, Knoxville. http://www.mpi-forum.org/docs/mpi-11.ps.
[22] John F. Monahan. 2011. Numerical Methods of Statistics (2nd ed.). Cambridge
University Press, New York, NY, USA.
[23] A. Panyala, S. Krishnamoorthy, and D. Chavarria-Miranda. 2016. Efficient Approximation of the Iterative PageRank Algorithm. Technical Report. Pacific Northwest
National Laboratory.
[24] Barry Rountree, David K. Lownenthal, Bronis R. de Supinski, Martin Schulz, Vincent W. Freeh, and Tyler Bletsch. 2009. Adagio: Making DVS Practical for Complex
HPC Applications. In Proceedings of the 23rd Intl. Conf. on Supercomputing (ICS
’09). ACM, New York, NY, USA, 460–469. https://doi.org/10.1145/1542275.1542340
[25] A.G. Saidi, N.L. Binkert, S.K. Reinhardt, and T. Mudge. 2008. Full-System Critical
Path Analysis. In Proc. of the 2008 IEEE Intl. Symp. on Performance Analysis of
Systems and Software. IEEE, Los Alamitos, CA, USA, 63–74. https://doi.org/10.
1109/ISPASS.2008.4510739
[26] Ali G. Saidi, Nathan L. Binkert, Steven K. Reinhardt, and Trevor Mudge. 2009.
End-to-end Performance Forecasting: Finding Bottlenecks Before They Happen.
SIGARCH Comput. Archit. News 37, 3 (June 2009), 361–370. https://doi.org/10.
1145/1555815.1555800
[27] Martin Schulz. 2005. Extracting Critical Path Graphs from MPI Applications. In
Proc. of the 2005 IEEE Intl. Conf. on Cluster Computing. IEEE, Los Alamitos, CA,
USA, 1–10. https://doi.org/10.1109/CLUSTR.2005.347035
[28] Martin Schulz, Greg Bronevetsky, and Bronis R. Supinski. 2008. Recent Advances in
Parallel Virtual Machine and Message Passing Interface: Proc. of the 15th European
PVM/MPI Users’ Group Meeting. Springer Berlin Heidelberg, Berlin, Heidelberg,
Chapter On the Performance of Transparent MPI Piggyback Messages, 194–201.
https://doi.org/10.1007/978-3-540-87475-1_28
[29] ChunYi Su, Dong Li, Dimitrios S. Nikolopoulos, Matthew Grove, Kirk Cameron,
and Bronis R. de Supinski. 2012. Critical Path-based Thread Placement for
NUMA Systems. SIGMETRICS Perform. Eval. Rev. 40, 2 (Oct. 2012), 106–112.
https://doi.org/10.1145/2381056.2381079
[30] Nathan R. Tallent, Laksono Adhianto, and John M. Mellor-Crummey. 2010. Scalable Identification of Load Imbalance in Parallel Executions Using Call Path
Profiles. In Proc. of the 2010 ACM/IEEE Conf. on Supercomputing. IEEE Computer
Society, Washington, DC, USA, 1–11. https://doi.org/10.1109/SC.2010.47
[31] Nathan R. Tallent and John Mellor-Crummey. 2009. Effective Performance
Measurement and Analysis of Multithreaded Applications. In Proc. of the 14th
ACM SIGPLAN Symp. on Principles and Practice of Parallel Programming. ACM,
New York, NY, USA, 229–240. https://doi.org/10.1145/1504176.1504210
[32] Nathan R. Tallent, John Mellor-Crummey, and Michael W. Fagan. 2009. Binary
Analysis for Measurement and Attribution of Program Performance. In Proc. of the
2009 ACM SIGPLAN Conf. on Programming Language Design and Implementation.
ACM, New York, NY, USA, 441–452. https://doi.org/10.1145/1542476.1542526
[33] Ohio State University. 2017. MVAPICH2 2.3 User Guide. http://mvapich.cse.
ohio-state.edu. (March 2017).
[34] A. Vishnu, J. Narasimhan, L. Holder, D. Kerbyson, and A. Hoisie. 2015. Fast and
Accurate Support Vector Machines on Large Scale Systems. In Proc. of the 2015
IEEE Intl. Conf. on Cluster Computing. IEEE, Los Alamitos, CA, USA, 110–119.
https://doi.org/10.1109/CLUSTER.2015.26
[35] Jeffrey S. Vitter. 1985. Random Sampling with a Reservoir. ACM Trans. Math.
Softw. 11, 1 (March 1985), 37–57. https://doi.org/10.1145/3147.3165
[36] Jr. Wagner Meira, Thomas J. LeBlanc, and Alexandros Poulos. 1996. Waiting
time analysis and performance visualization in Carnival. In Proc. of the 1996
SIGMETRICS Symp. on Parallel and Distributed Tools. ACM, New York, NY, USA,
1–10. https://doi.org/10.1145/238020.238023
[37] Harvey Wasserman. 1995. ASCI Sweep3D Benchmark Code, v. 2.2b. http://wwwc3.
lanl.gov/pal/software/sweep3d/sweep3d_readme.html. (December 1995).
[38] C.-Q. Yang and Barton P. Miller. 1988. Critical path analysis for the execution
of parallel and distributed programs. In Proc. of the 8th Intl. Conf. on Distributed
Computing Systems. IEEE, Los Alamitos, CA, USA, 366–373. https://doi.org/10.
1109/DCS.1988.12538
[39] Wenbin Zhu, P.G. Bridges, and AB. Maccabe. 2005. Online Critical Path Profiling
for Parallel Applications. In Proc. of the 2005 IEEE Intl. Conf. on Cluster Computing.
IEEE, Los Alamitos, CA, USA, 1–9. https://doi.org/10.1109/CLUSTR.2005.347048
