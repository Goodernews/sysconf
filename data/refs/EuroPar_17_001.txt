[1] Brown, T., Helga, J.: Source code for non-blocking k-ary search trees. http://www.

cs.toronto.edu/∼tabrown/ksts/

[2] Brown, T., Helga, J.: Non-blocking k -ary search trees. In: Fernàndez Anta, A.,

Lipari, G., Roy, M. (eds.) OPODIS 2011. LNCS, vol. 7109, pp. 207–221. Springer,

Heidelberg (2011). doi:10.1007/978-3-642-25873-2 15

[3] Corbet, J.: Trees I: Radix trees. Linux kernel data structures. Linux Weekly News

(2006). http://lwn.net/Articles/175432

[4] Ellen, F., Fatourou, P., Ruppert, E., van Breugel, F.: Non-blocking binary search

trees. In: Proceedings of ACM PODC, pp. 131–140 (2010)

[5] Gramoli, V.: More than you ever wanted to know about synchronization: synchrobench. In: Proceedings of ACM PPoPP, pp. 1–10 (2015)

[6] Guthaus, M.R., Ringenberg, J.S., Ernst, D., Austin, T.M., Mudge, T., Brown,

R.B.: Mibench: a free, commercially representative embedded benchmark suite.

In: Proceedings of the Workload Characterization, WWC 2001, pp. 3–14 (2001)

[7] Natarajan, A., Mittal, N.: Fast concurrent lock-free binary search trees. In: Proceedings of ACM PPoPP, pp. 317–328 (2014)

[8] Nethercote, N., Seward, J.: Valgrind: a framework for heavyweight dynamic binary

instrumentation. SIGPLAN Not. 42(6), 89–100 (2007)

[9] Prokopec, A., Bronson, N.G., Bagwell, P., Odersky, M.: Concurrent tries with

eﬃcient non-blocking snapshots. In: Proceedings of ACM PPoPP, pp. 151–160

(2012)

[10]  Shaﬁei, N.: Non-blocking patricia tries with replace operations. In: Proceedings of

IEEE ICDCS, pp. 216–225 (2013)

[11]  Repetti, T.J., Herlihy, M.P.: A Case Study in Optimizing HTM-Enabled Dynamic

Data Structures: Patricia Tries (2015). https://cs.brown.edu/research/pubs/

theses/masters/

[12]  Velamuri, V.: Appendix and source code for eﬃcient non-blocking radix trees

(2017). https://github.com/varun1312/RadixTrees
