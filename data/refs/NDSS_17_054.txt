[1] “Chutney - The Chutney tool for testing and automating Tor network
setup,” https://gitweb.torproject.org/chutney. git.

[2]“FreeTDS: Making the leap to SQL Server,” http://www.freetds.org/.
[3] “Graphene-SGX Library OS - A Library OS for Linux Multi-process
Applications, with Intel SGX support,” https://github.com/oscarlab/
graphene, (Accessed on 12/06/2016, Commit 9958214).

[4] “h2load - HTTP/2 Benchmarking Tool,”  https://nghttp2.org/
documentation/h2load-howto. html.

[5] “H20 Neverbleed: Privilege Separation Engine for OpenSSL / LibreSSL,” https://github.com/h2o0/neverbleed.

[6] “Intel SGX for Linux,” https://github.com/01org/linux-sgx.

[7] “Intel SGX Linux Driver,” https://github.com/01 org/linux-sgx- driver.
[8] “Intel Software Guard Extensions SDK - Documentation — Intel
Software,” https://software.intel .com/en-us/sgx-sdk/documentation.
[9] “[MS-TDS]: Tabular Data Stream Protocol,” https://
msdn.microsoft.com/en-us/library/dd304523.aspx.

[10] “Tor Network Is Under Attack through Directory Authority Servers
Seizures,” http://thehackernews.com/2014/12/tor- network-hacked. html.

[11] “Tor Project: Anonymity Online,” https://Awww.torproject.org/.
[12]“CVE-2009-3555 TLS Session Renegotiation Vulnerability,” https://
cve.mitre.org/cgi-bin/cvename.cgi?name=C VE- 2009-3555, 2009.
[13] “RFC 5746 - Transport Layer Security (TLS) Renegotiation Indication
Extension,” https://tools.ietf.org/html/rfc5746, February 2010.

[14] “Tor Project Infrastructure Updates in Response to Security Breach,”
http://archives.seul.org/or/talk/Jan-2010/msg00161.html, 01 2010.

[15] “Possible Upcoming Attempts to Disable the Tor Network — The
Tor Blog,” https://blog.torproject.org/blog/possible-upcoming-attemptsdisable-tor-network, 12 2014.

[16] “Software Guard Extensions Programming Reference Rev. 2.”
software.intel.com/sites/default/files/329298-002.pdf, Oct 2014.

[17] “Intel Software Guard Extensions Enclave Writer’s Guide,”
https://software.intel .com/sites/default/files/managed/ae/48/SoftwareGuard-Extensions-Enclave- Writers-Guide.pdf, 2015.

[18] I. Anati, §. Gueron, S. PB. Johnson, and V. R. Scarlata, “Innovative
Technology for CPU Based Attestation and Sealing,” in HASP 2013.
[19] S. Amautov, B. Trach, F. Gregor, T. Knauth, A. Martin, C. Priebe,
J. Lind, D. Muthukumaran, D. O’ Keeffe, M. L. Stillwell, D. Goltzsche,
D. Eyers, R. Kapitza, P. Pietzuch, and C. Fetzer, “SCONE: Secure Linux
Containers with Intel SGX,” in OSDI 2016.

[20] A. Atamli-Reineh and A. Martin, ch. Securing Application with Software Partitioning: A Case Study Using SGX.

[21] A. Baumann, M. Peinado, and G. Hunt, “Shielding Applications from
an Untrusted Cloud with Haven,” in OSDI 2014.

[22] A. Bittau, P. Marchenko, M. Handley, and B. Karp, “Wedge: Splitting
Applications into Reduced-privilege Compartments,” in NSDI 2008.
[23] E. Brickell, J. Camenisch, and L. Chen, “Direct Anonymous Attestation,” in CCS 2004.

[24] D. Brumley and D. X. Song, “Privtrans: Automatically Partitioning
Programs for Privilege Separation,” in USENIX Security 2004.

[25] M. Castro and B. Liskov, “Practical Byzantine Fault Tolerance,” in
OSDI 1999.

[26] 8. Checkoway and H. Shacham, “Iago Attacks: Why the System Call
API is a Bad Untrusted RPC Interface,” in ASPLOS 2013.

[27] A. Clement, E. Wong, L. Alvisi, M. Dahlin, and M. Marchetti, “Making
Byzantine Fault Tolerant Systems Tolerate Byzantine Faults,” in NSDI
2009.

[28] V. Costan and S. Devadas, “Intel SGX Explained,” Cryptology ePrint
Archive, Report 2016/086, 2016, http://eprint.iacr.org/201 6/086.

[29]V. Costan, I. Lebedev, and S. Devadas, “Sanctum: Minimal Hardware
Extensions for Strong Software Isolation,” in USENIX Security 2016.
[30] T. T. A. Dinh, P, Saxena, E.-C. Chang, B. C. Ooi, and C. Zhang, “M2R:
Enabling Stronger Privacy in MapReduce Computation,” in USENIX
Security 715.

[31] T. Hunt, Z. Zhu, Y. Xu, S. Peter, and E. Witchel, “Ryoan: A Distributed
Sandbox for Untrusted Computation on Secret Data,” in OSDI 2016.

[32] P. Jain, 8. Desai, 8. Kim, M.-W. Shih, J. Lee, C. Choi, Y. Shin,
T. Kim, B. Kang, and D. Han, “OpenSGX: An Open Platform for SGX
Research,” in NDSS 2016.

[33] S. Johnson, V. Scarlata, C. Rozas, E. Brickell, and F. Mckeen, “Intel
Software Guard Extensions: EPID Provisioning and Attestation Services,” ser. Intel Corporation.

[34] L. M. JP Aumasson, “SGX Secure Enclaves in Practice: Security and
Crypto Review — Kudelski Security,” Black Hat USA, 2016.

[35] D. Kilpatrick, “Privman: A Library for Partitioning Applications,” in
USENIX ATC 2003.

[36] 8. Kim, Y. Shin, J. Ha, T. Kim, and D. Han, “A First Step Towards
Leveraging Commodity Trusted Execution Environments for Network
Applications,” in HotNets 2015.

[37] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish, T. Sewell,
H. Tuch, and 8S. Winwood, “sel4: Formal Verification of an OS Kernel,”
in SOSP 2009.

[38] S. Lee, M. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring
fine-grained control flow inside SGX enclaves with branch shadowing,”
2016. [Online]. Available: http://arxiv.org/abs/161 1.06952

[39] FE McKeen, I. Alexandrovich, I. Anati, D. Caspi, S. Johnson, R. LeslieHurd, and C. Rozas, “Intel Software Guard Extensions Support for
Dynamic Memory Management Inside an Enclave,” in HASP 2016.

[40] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shafi,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative Instructions and
Software Model for Isolated Execution,” in HASP 2013.

[41] D.E. Porter, S. Boyd-Wickizer, J. Howell, R. Olinsky, and G. C. Hunt,
“Rethinking the Library OS from the Top Down,” in ASPLOS 2011.
[42] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado,
G. Mainar-Ruiz, and M. Russinovich, “VC3: Trustworthy Data Analytics in the Cloud,” in IEEE Symposium on Security and Privacy 2015.
[43] M.-W. Shih, S. Lee, T. Kim, and M. Peinado., “T-SGX: Eradicating
Controlled-Channel Attacks Against Enclave Programs,” in NDSS 2017.
[44] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing page
faults from telling your secrets,” in AsiaCCS 2016.

[45] Shweta Shinde and Dat Le Tien and Shruti Tople and Prateek Saxena,
“Panoply: Low-TCB Linux Applications With SGX Enclaves,” National
University of Singapore, Tech. Rep., Dec 2016.

[46] Shweta Shinde and Shruti Tople and Deepak Kathayat and Prateek Saxena, “PodArch: Protecting Legacy Applications with a Purely Hardware
TCB,” National University of Singapore, Tech. Rep., Feb 2015.

[47] R. Sinha, M. Costa, A. Lal, N. P. Lopes, S$. Rajamani, S. A. Seshia,
and K. Vaswani, “A Design and Verification Methodology for Secure
Isolated Regions,” in PLDI 2016.

[48] R. Sinha, §. Rajamani, §. Seshia, and K. Vaswani, “Moat: Verifying
Confidentiality of Enclave Programs,” in CCS 2015.

[49] R. Strackx, B. Jacobs, and F. Piessens, “ICE: A Passive, High-speed,
State-continuity Scheme,” in ACSAC 2014.

[50] R. Strackx and F, Piessens, “Ariadne: A Minimal Approach to State
Continuity,” in USENIX Security 2016.

[51] FE Tramer, F. Zhang, H. Lin, J.-P. Hubaux, A. Juels, and E. Shi,
“Sealed-Glass Proofs: Using Transparent Enclaves to Prove and Sell
Knowledge,” Cryptology ePrint Archive, Report 2016/635, 2016.
[52] C.-C. Tsai, K. §. Arora, N. Bandi, B. Jain, W. Jannen, J. John, H. A.
Kalodner, V. Kulkarni, D. Oliveira, and D. E. Porter, “Cooperation and
Security Isolation of Library OSes for Multi-Process Applications,” in
EuroSys 2014.

[53] N. Weichbrodt, A. Kurmus, P. Pietzuch, and R. Kapitza, “AsyncShock:
Exploiting Synchronisation Bugs in Intel SGX Enclaves,” in ESORICS
2016.

[54] D. Wheeler, “SLOCcount,” http://www.dwheeler.com/sloccount/.

[55] Y. Xu, W. Cui, and M. Peinado, “Controlled-Channel Attacks: Deterministic Side Channels for Untrusted Operating Systems,” in IEEE
Symposium on Security and Privacy 2015.

[56] F Zhang, E. Cecchetti, K. Croman, A. Juels, and E. Shi, “Town Crier:
An Authenticated Data Feed for Smart Contracts,” Cryptology ePrint
Archive, Report 2016/168, 2016, http://eprint.iacr.org/2016/168.