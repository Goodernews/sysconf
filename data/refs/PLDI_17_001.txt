[1] J. Agat. Transforming out timing leaks. In POPL, 2000.

[2] J. B. Almeida, M. Barbosa, J. S. Pinto, and B. Vieira. Formal verification of side-channel countermeasures using selfcomposition. Science of Computer Programming, 78(7),
2013.
[3] J. B. Almeida, M. Barbosa, G. Barthe, F. Dupressoir, and
M. Emmi. Verifying constant-time implementations. In
USENIX Security Symposium, 2016.

[4] M. S. Alvim, K. Chatzikokolakis, C. Palamidessi, and
G. Smith. Measuring information leakage using generalized
gain functions. In CSF, 2012.

[5] M. Assaf, D. A. Naumann, J. Signoles, E. Totel, and FE. Tronel.
Hypercollecting semantics and its application to static analysis of information flow. In POPL, 2017.

[6] R. Bagnara, P. M. Hill, and E. Zaffanella. The Parma Polyhedra Library: Toward a complete set of numerical abstractions
for the analysis and verification of hardware and software systems. Science of Compututer Programming, 72(1-2), 2008.

[7] G. Barthe, P. R. D’Argenio, and T. Rezk. Secure information
flow by self-composition. In CSFW, 2004.

[8] G. Barthe, J. M. Crespo, and C. Kunz. Relational verification
using product programs. In FM, 2011.

[9] N. Benton. Simple relational correctness proofs for static
analyses and program transformations. In POPL, 2004.

[10] J. Berdine, A. Chawdhary, B. Cook, D. Distefano, and P. W.
O’Hearn. Variance analyses from invariance analyses. In
POPL, 2007.

[11] E. Cigek, G. Barthe, M. Gaboardi, D. Garg, and J. Hoffmann.
Relational cost analysis. In POPL, 2017.

[12] A. Darvas, R. Hahnle, and D. Sands. A theorem proving
approach to analysis of secure information flow. In SPC, 2005.

[13] dk.brics.automaton. Finite-state automata and regular expressions for Java. http://www. brics.dk/automaton/, 2017.

[14] G. Doychev, B. Képf, L. Mauborgne, and J. Reineke.
CacheAudit: A tool for the static analysis of cache side channels. ACM Transactions on Information and System Security,
18(1), 2015.

[15] D. Genkin, I. Pipman, and E. Tromer. Get your hands off my
laptop: Physical side-channel key-extraction attacks on PCs.
In CHES, 2014.

[16] S. Gulwani and F. Zuleger. The reachability-bound problem.
In PLDI, 2010.

[17] S. Gulwani, S. Jain, and E. Koskinen. Control-flow refinement
and progress invariants for bound analysis. In PLDI, 2009.

[18] S. Gulwani, K. K. Mehra, and T. M. Chilimbi. SPEED: precise and efficient static estimation of program computational
complexity. In POPL, 2009.

[19] D. Hedin and D. Sands. Timing aware information flow security for a JavaCard-like bytecode. In Workshop on Bytecode
Semantics, Verification, Analysis and Transformation, 2005.

[20] J. Henry. Static analysis by path focusing. Master’s thesis,
Grenoble INP, 2011.

[21] J. Henry, D. Monniaux, and M. Moy. PAGAI: A path sensitive
static analyser. In TAPAS, 2012.

[22] P. C. Kocher. Timing attacks on implementations of DiffieHellman, RSA, DSS, and other systems. In CRYPTO, 1996.

[23] B. Kopf and D. A. Basin. Automatically deriving informationtheoretic bounds for adaptive side-channel attacks. Journal of
Computer Security, 19(1), 2011.

375

[24] S. Langkemper. The password guessing bug in Tenex.
https: //www.sjoerdlangkemper .n1/2016/11/01/
tenex-password-bug/, 2016.

[25] P. Malacaria. Assessing security threats of looping constructs.
In POPL, 2007.

[26] L. Mauborgne and X. Rival. Trace partitioning in abstract
interpretation based static analyzers. In ESOP, 2005.

[27] D. A. Naumann. From coupling relations to mated invariants
for checking information flow. In ESORICS, 2006.

[28] N. Partush and E. Yahav. Abstract semantic differencing for
numerical programs. In SAS, 2013.

[29] C. S. Pasareanu, Q. Phan, and P. Malacaria. Multi-run sidechannel analysis using symbolic execution and max-SMT. In
CSF, 2016.

[30] A. Podelski and A. Rybalchenko. Transition invariants. In
LICS, 2004.

[31] J. C. Reynolds. The Craft of Programming. Prentice Hall
International series in computer science. Prentice Hall, 1981.

[32] G. Smith. On the foundations of quantitative information flow.
In FOSSACS, 2009.

[33] G. Snelting, D. Giffhorn, J. Graf, C. Hammer, M. Hecker,
M. Mohr, and D. Wasserrab. Checking probabilistic noninterference using JOANA. it - Information Technology, 56(6),
2014.

[34] M. Sousa and I. Dillig. Cartesian Hoare logic for verifying
k-safety properties. In PLDI, 2016.

[35] STAC. DARPA space/time analysis for cybersecurity
(STAC) program. http://www.darpa.mil/program/
space-time-analysis-for-cybersecurity, 2017.

[36] T. Terauchi and A. Aiken. Secure information flow as a safety
problem. In SAS, 2005.

[37] H. Unno, N. Kobayashi, and A. Yonezawa. Combining typebased analysis and model checking for finding counterexamples against non-interference. In PLAS, 2006.

[38] D. M. Volpano, C. E. Irvine, and G. Smith. A sound type system for secure flow analysis. Journal of Computer Security, 4
(2/3), 1996.

[39] WALA. IBM T.J. Watson Libraries for Analysis (WALA).
http: //wala.sourceforge.net/, 2017.

[40] H. Yang. Relational separation logic. Theoretical Computer
Science, 375(1-3), 2007.

[41] H. Yasuoka and T. Terauchi. Quantitative information flow verification hardness and possibilities. In CSF, 2010.

[42] H. Yasuoka and T. Terauchi. On bounding problems of quantitative information flow. Journal of Computer Security, 19
(6), 2011.

[43] H. Yasuoka and T. Terauchi. Quantitative information flow
as safety and liveness hyperproperties. Theoretical Computer
Science, 538, 2014.

[44] A. Zaks and A. Pnueli. CoVaC: Compiler validation by program analysis of the cross-product. In FM, 2008.

[45] D. Zhang, A. Askarov, and A. C. Myers. Language-based
control and mitigation of timing channels. In PLDI, 2012.
