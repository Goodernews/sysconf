[1] Periklis Akritidis. 2010. Cling: A Memory Allocator to Mitigate Dangling Pointers. In Proceedings of the 19th USENIX Conference on Security (USENIX Security’10). USENIX Association, Berkeley, CA, USA, 12–12. http://dl.acm.org/citation.cfm? id=1929820.1929836
[2] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Castro. 2008. Preventing Memory Error Exploits with WIT. In Proceedings of the 2008 IEEE Symposium on Security and Privacy (SP ’08). IEEE Computer Society, Washington, DC, USA, 263–277. https://doi.org/10.1109/SP.2008.30
[3] Periklis Akritidis, Manuel Costa, Miguel Castro, and Steven Hand. 2009. Baggy bounds checking: an efficient and backwards-compatible defense against out-of- bounds errors. In Proceedings of the 18th conference on USENIX security symposium (SSYM’09). USENIX Association, Berkeley, CA, USA, 51–66. http://dl.acm.org/ citation.cfm?id=1855768.1855772
[4] Emery D. Berger, Kathryn S. McKinley, Robert D. Blumofe, and Paul R. Wilson. 2000. Hoard: a scalable memory allocator for multithreaded applications. In ASPLOS-IX: Proceedings of the ninth international conference on Architectural support for programming languages and operating systems. ACM Press, New York, NY, USA, 117–128. https://doi.org/10.1145/378993.379232
[5] Emery D. Berger and Benjamin G. Zorn. 2006. DieHard: Probabilistic Memory Safety for Unsafe Languages. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’06). ACM, New York, NY, USA, 158–168. https://doi.org/10.1145/1133981.1134000
[6] Emery D. Berger, Benjamin G. Zorn, and Kathryn S. McKinley. 2002. Recon- sidering Custom Memory Allocation. In Object-oriented Programming, Systems, Languages, and Applications (OOPSLA ’02). https://doi.org/10.1145/582419.582421
[7] Eep Bhatkar, Daniel C. Duvarney, and R. Sekar. 2003. Address obfuscation: an efficient approach to combat a broad range of memory error exploits. In In Proceedings of the 12th USENIX Security Symposium. 105–120.
[8] Christian Bienia and Kai Li. 2009. PARSEC 2.0: A New Benchmark Suite for Chip-Multiprocessors. In Proceedings of the 5th Annual Workshop on Modeling, Benchmarking and Simulation.
[9] Juan Caballero, Gustavo Grieco, Mark Marron, and Antonio Nappa. 2012. Un- dangle: early detection of dangling pointers in use-after-free and double-free vulnerabilities. In Proceedings of the 2012 International Symposium on Soft- ware Testing and Analysis (ISSTA 2012). ACM, New York, NY, USA, 133–143. https://doi.org/10.1145/2338965.2336769
[10] SQL Developers. [n. d.]. How SQLite Is Tested. https://www.sqlite.org/testing. html. ([n. d.]).
[11] Dinakar Dhurjati, Sumant Kowshik, Vikram Adve, and Chris Lattner. 2003. Memory Safety Without Runtime Checks or Garbage Collection. In Proceed- ings of the 2003 ACM SIGPLAN Conference on Language, Compiler, and Tool for Embedded Systems (LCTES ’03). ACM, New York, NY, USA, 69–80. https: //doi.org/10.1145/780732.780743
[12] Jason Evans. [n. d.]. jemalloc. http://www.canonware.com/jemalloc/. ([n. d.]).
[13] Jason Evans. [n. d.]. Scalable memory allocation using jemalloc. https:// krebsonsecurity.com/2016/10/ddos-on-dyn-impacts-twitter-spotify-reddit/. ([n.
d.]).
[14] Yi Feng and Emery D. Berger. 2005. A Locality-improving Dynamic Memory
Allocator. In Proceedings of the 2005 Workshop on Memory System Performance (MSP ’05). ACM, New York, NY, USA, 68–77. https://doi.org/10.1145/1111583. 1111594
[15] The Apache Software Foundation. [n. d.]. ab - Apache HTTP server benchmark- ing tool. https://httpd.apache.org/docs/2.4/programs/ab.html. ([n. d.]).
[16] Sanjay Ghemawat and Paul Menage. [n. d.]. TCMalloc : Thread-Caching Malloc. http://goog-perftools.sourceforge.net/doc/tcmalloc.html. ([n. d.]).
[17] David R. Hanson. 1980. A portable storage management system for the icon programming language. (1980), 489–500 pages. https://doi.org/10.1002/spe. 4380100607
[18] Ryan Iwahashi, Daniela A. Oliveira, S. Felix Wu, Jedidiah R. Crandall, Young-Jun Heo, Jin-Tae Oh, and Jong-Soo Jang. 2008. Towards Automatically Generating Double-Free Vulnerability Signatures Using Petri Nets. In Proceedings of the 11th International Conference on Information Security (ISC ’08). Springer-Verlag, Berlin, Heidelberg, 114–130. https://doi.org/10.1007/978- 3- 540- 85886- 7_8
[19] Poul-Henning Kamp. [n. d.]. malloc (3) Revisited. http://www-public.tem-tsp. eu/~thomas_g/research/biblio/2015/gidra15asplos- numagic.pdf . ([n. d.]).
[20] Mazen Kharbutli, Xiaowei Jiang, Yan Solihin, Guru Venkataramani, and Mi-
los Prvulovic. 2006. Comprehensively and Efficiently Protecting the Heap. In
Proceedings of the 12th International Conference on Architectural Support for Pro- gramming Languages and Operating Systems (ASPLOS XII). ACM, New York, NY, USA, 207–218. https://doi.org/10.1145/1168857.1168884
[21] Chris Lattner and Vikram Adve. 2005. Automatic Pool Allocation: Improving Performance by Controlling Data Structure Layout in the Heap. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’05). ACM, New York, NY, USA, 129–142. https://doi.org/ 10.1145/1065010.1065027
[22] Doug Lea. [n. d.]. The GNU C Library. http://www.gnu.org/software/libc/libc. html. ([n. d.]).
[23] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, Tielei Wang, Taesoo Kim, Long Lu, and Wenke Lee. 2015. Preventing Use-after-free with Dangling Pointers Nullification.. In NDSS.
[24] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type Casting Verification: Stopping an Emerging Attack Vector. In Proceedings of the 24th USENIX Conference on Security Symposium (SEC’15). USENIX Association, Berkeley, CA, USA, 81–96. http://dl.acm.org/citation.cfm?id=2831143.2831149
[25] Linux Comunity. 2015. time - time a simple command or give resource usage.
[26] Tongping Liu and Emery D. Berger. 2011. SHERIFF: precise detection and auto- matic mitigation of false sharing. In Proceedings of the 2011 ACM international conference on Object oriented programming systems languages and applications (OOPSLA ’11). ACM, New York, NY, USA, 3–18. https://doi.org/10.1145/2048066.
2048070
[27] Shan Lu, Zhenmin Li, Feng Qin, Lin Tan, Pin Zhou, and Yuanyuan Zhou. 2005.
Bugbench: Benchmarks for evaluating bug detection tools. In In Workshop on
the Evaluation of Software Defect Detection Tools.
[28] Vitaliy B. Lvin, Gene Novark, Emery D. Berger, and Benjamin G. Zorn. 2008.
Archipelago: Trading Address Space for Reliability and Security. In Proceedings of the 13th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XIII). ACM, New York, NY, USA, 115–124. https://doi.org/10.1145/1346281.1346296
[29] Otto Moerbeek. 2009. A new malloc(3) for OpenBSD. https://www.openbsd.org/ papers/eurobsdcon2009/otto-malloc.pdf. (2009).
[30] NIST. [n. d.]. National Vulnerability Database. ([n. d.]). http://nvd.nist.gov/
[31] Gene Novark and Emery D. Berger. 2010. DieHarder: securing the heap. In Proceedings of the 17th ACM conference on Computer and communications security (CCS ’10). ACM, New York, NY, USA, 573–584. https://doi.org/10.1145/1866307.
1866371
[32] Kipp Owens and Rajiv Parikh. 2012. Fast Random Number Generator on
the Intel® Pentium® 4 Processor. https://software.intel.com/en- us/articles/ fast- random- number- generator- on- the- intel- pentiumr- 4- processor/. (March 2012).
[33] Jon Rafkind, Adam Wick, John Regehr, and Matthew Flatt. 2009. Precise Garbage Collection for C. In Proceedings of the 2009 International Symposium on Memory Management (ISMM ’09). ACM, New York, NY, USA, 39–48. https://doi.org/10. 1145/1542431.1542438
[34] Sean Reifschneider. [n. d.]. "Pure python memcached client". https://pypi.python. org/pypi/python-memcached. ([n. d.]).
[35] William Robertson, Christopher Kruegel, Darren Mutz, and Fredrik Valeur. 2003. Run-time Detection of Heap-based Overflows. In Proceedings of the 17th USENIX Conference on System Administration (LISA ’03). USENIX Association, Berkeley, CA, USA, 51–60. http://dl.acm.org/citation.cfm?id=1051937.1051947
[36] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. 2013. SoK: Eternal War in Memory. In Proceedings of the 2013 IEEE Symposium on Security and Privacy (SP ’13). IEEE Computer Society, Washington, DC, USA, 48–62. https: //doi.org/10.1109/SP.2013.13
[37] The PaX Team. [n. d.]. Address Space Layout Randomization. https://pax. grsecurity.net/docs/aslr.txt. ([n. d.]).
[38] Yves Younan. 2015. FreeSentry: protecting against use-after-free vulnerabilities due to dangling pointers. In NDSS.
[39] Yves Younan, Wouter Joosen, and Frank Piessens. 2006. Efficient Protection Against Heap-based Buffer Overflows Without Resorting to Magic. In Proceedings of the 8th International Conference on Information and Communications Security (ICICS’06). Springer-Verlag, Berlin, Heidelberg, 379–398. https://doi.org/10.1007/ 11935308_27
[40] Yves Younan, Yves Younan, Wouter Joosen, Wouter Joosen, Frank Piessens, Frank Piessens, Hans Van Den Eynden, and Hans Van Den Eynden. 2005. Security of memory allocators for C and C++. Technical Report.
[41] Qin Zhao, David Koh, Syed Raza, Derek Bruening, Weng-Fai Wong, and Saman Amarasinghe. 2011. Dynamic Cache Contention Detection in Multi-threaded Applications. In The International Conference on Virtual Execution Environ- ments. Newport Beach, CA. http://groups.csail.mit.edu/commit/papers/2011/ zhao- vee11- cache- contention.pdf
