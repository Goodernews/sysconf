[1] C. Allauzen, M. Riley, J. Schalkwyk, W. Skut, and M. Mohri.
OpenFst: A general and efficient weighted finite-state transducer
library. In CIAA, 2007. URL http://www. openfst .org.

[2] R. Alur and P. Madhusudan. Adding nesting structure to
words. In Developments in Language Theory, 10th International
Conference, DLT 2006, Santa Barbara, CA, USA, volume 4036
of Lecture Notes in Computer Science, pages 1-13. Springer,

2006. ISBN 3-540-35428-X. URL http://dx.doi.org/10.

1007/11779148_1.

[3] R. Alur, A. Bouajjani, and J. Esparza. Model checking
procedural programs. Handbook of Model Checking. Springer,
2015.

[4] D. M. Berris, A. Veitch, N. Heintze, E. Anderson, and N. Wang.
XRay: A function call tracing system. Technical report, Google
Inc., 2016.

[5] Y. Cao, H. Zhang, and S. Ding. SymCrash: selective recording for reproducing crashes. In ACM/IEEE International
Conference on Automated Software Engineering, ASE ’14,
Vasteras, Sweden. ACM, 2014. ISBN 978-1-4503-3013-8.
URL http: //doi.acm.org/10.1145/2642937 .2642993.

[6] N. Chen and S. Kim. STAR: stack trace based automatic crash
reproduction via symbolic execution. [EEE Trans. Software
Eng., 41(2):198-220, 2015. URL http: //dx.doi.org/10.
1109/TSE.2014.2363469.

[7] J. Clause and A. Orso. A technique for enabling and supporting
debugging of field failures. In Proceedings of the 29th
international conference on Software Engineering, ICSE ’07,
pages 261-270. IEEE Computer Society, 2007. ISBN 0-76952828-7. URL http://dx.doi.org/10.1109/ICSE. 2007.
10.

[8] O. Crameri, R. Bianchini, and W. Zwaenepoel. Striking a new
balance between program instrumentation and debugging time.
In Proceedings of the sixth conference on Computer systems,
EuroSys ’11. ACM, 2011. ISBN 978-1-4503-0634-8. URL
http: //doi.acm.org/10.1145/1966445 . 1966464.

[9] V. Dallmeier, C. Lindig, and A. Zeller. Lightweight defect
localization for Java. In ECOOP 2005 - Object-Oriented
Programming, 19th European Conference, Glasgow, UK,
volume 3586 of Lecture Notes in Computer Science, pages
528-550. Springer, 2005. ISBN 3-540-27992-X. URL
http: //dx.doi.org/10.1007/11531142_23.

[10] L. D’Antoni. The symbolic automata library. https://
github. com/lorisdanto/symbolicautomata, 2016.

[11] L. D’Antoni and R. Alur. Symbolic visibly pushdown automata.
In Computer Aided Verification - 26th International Conference,
CAV 2014, Held as Part of the Vienna Summer of Logic,
VSL 2014, Vienna, Austria, volume 8559 of Lecture Notes
in Computer Science, pages 209-225. Springer, 2014. ISBN
978-3-319-08866-2. URL http: //dx.doi.org/10.1007/
978-3-319-08867-9_14.

[12] H. Do, S. G. Elbaum, and G. Rothermel. Supporting controlled.
experimentation with testing techniques: An infrastructure
and its potential impact. Empirical Software Engineering, 10
(4):405-435, 2005. URL http://dx.doi.org/10.1007/
$10664-005- 3861-2.

[13] Y. Feng, X. Wang, I. Dillig, and C. Lin. Explorer: queryand demand-driven exploration of interprocedural control flow
properties. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems,
Languages, and Applications, OOPSLA 2015, Pittsburgh, PA,
USA, pages 520-534. ACM, 2015. ISBN 978-1-4503-3689-5.
URL http: //doi.acm.org/10.1145/2814270.2814284.

[14] H. N. Gabow, S. N. Maheswari, and L. J. Osterweil. On
two problems in the generation of program test paths. JEEE
Trans. Software Eng., 2(3):227-231, 1976. URL http:
//ax.doi .org/10.1109/TSE. 1976.233819.

[15] R. Gupta, M. L. Soffa, and J. Howard. Hybrid slicing:
integrating dynamic information with static analysis. ACM
Trans. Softw. Eng. Methodol., 6(4):370-397, 1997. ISSN
1049-331X. URL http: //doi.acm.org/10.1145/261640.
261644,

[16] W. Jin and A. Orso. BugRedux: reproducing field failures for
in-house debugging. In Proceedings of the 2012 International
Conference on Software Engineering, ICSE 2012, pages 474—484. IEEE Press, 2012. ISBN 978-1-4673-1067-3. URL http:
//dl.acm.org/citation.cfm?id=2337223 .2337279.

[17] B. Kasikci, T. Ball, G. Candea, J. Erickson, and M. Musuvathi. Efficient tracing of cold code via bias-free sampling. In
2014 USENIX Annual Technical Conference, USENIX ATC
’14, Philadelphia, PA, USA, pages 243-254. USENIX Association, 2014. URL https: //www.usenix.org/conference/
atc14/technical-sessions/presentation/kasikci.

[18] O. Klima and L. Polak. Hierarchies of piecewise testable
languages. In Developments in Language Theory, 12th
International Conference, DLT 2008, Kyoto, Japan, volume
5257 of Lecture Notes in Computer Science, pages 479490. Springer, 2008. ISBN 978-3-540-85779-2. URL http:
//ax.doi .org/10. 1907/978- 3-540-85780-8_38.

[19] A. J. Ko and B. A. Myers. Extracting and answering why
and why not questions about Java program output. ACM
Trans. Softw. Eng. Methodol., 20(2), 2010. URL http:
//doi .acm.org/10.1145/1824760 . 1824761.

[20] D. Kozen. Lower bounds for natural proof systems. In
18th Annual Symposium on Foundations of Computer Science,
Providence, Rhode Island, USA, pages 254-266. IEEE, 1977.
URL http: //dx.doi-.org/10.1109/SFCS. 1977.16.

[21] A. Lal, J. Lim, M. Polishchuk, and B. Liblit. BTRracs: Path
optimization for debugging. Technical Report 1535, University
of Wisconsin-Madison, Oct. 2005.

[22] T. D. LaToza and B. A. Myers. Developers ask reachability
questions. In Proceedings of the 32nd ACM/IEEE International
Conference on Software Engineering - Volume 1, ICSE 2010,
Cape Town, South Africa, pages 185-194. ACM, 2010. ISBN
978-1-60558-719-6. URL http: //doi.acm.org/10.1145/
1806799. 1806829.

[23] C. Lattner and V. Adve. LLVM: A compilation framework for
lifelong program analysis & transformation. In Proceedings
of the 2004 International Symposium on Code Generation
and Optimization (CGO’04). IEEE, Mar. 2004. URL http:
//dl.acm.org/citation.cfm?id=977395 .977673.
[24] B. Liblit, A. Aiken, A. X. Zheng, and M. I. Jordan. Bug
isolation via remote program sampling. In PLDI 2003. ACM,
2003. ISBN 1-58113-662-5. URL http://doi.acm.org/
10.1145/781131. 781148.

[25] R. Manevich, M. Sridharan, $. Adams, M. Das, and Z. Yang.
PSE: Explaining program failures via postmortem static analysis. In Proceedings of the 12th ACM SIGSOFT Twelfth
International Symposium on Foundations of Software Engineering, SIGSOFT ’04/FSE-12, pages 63-72, New York,
NY, USA, 2004. ACM. ISBN 1-58113-855-5. URL http:
//doi.acm.org/19.1145/1029894 . 1029907.

[26] S. S. Muchnick. Advanced Compiler Design and Implementation. Morgan Kaufmann, 1997. ISBN 1-55860-320-4.

[27] A. Nishimatsu, M. Jihira, S$. Kusumoto, and K. Inoue. Callmark slicing: an efficient and economical way of reducing
slice. In Proceedings of the 21st international conference
on Software engineering, ICSE ’99, pages 422-431, New
York, NY, USA, 1999. ACM. ISBN 1-58113-074-0. URL
http://doi.acm.org/10.1145/302405 . 302674.

[28] P. Ohmann and B. Liblit. Lightweight control-flow instrumentation and postmortem analysis in support of debugging.
In 28th International Conference on Automated Software Engineering (ASE 2013). IEEE and ACM, Nov. 2013. URL
http: //dx.doi.org/10.1109/ASE.2013 .6693096.

[29] P. Ohmann and B. Liblit. CSIclipse: presenting crash analysis
data to developers. In Proceedings of the 2015 Workshop on
Eclipse Technology eXchange, ETX 2015, Pittsburgh, PA, USA,
pages 7-12. ACM, 2015. ISBN 978-1-4503-3904-9. URL
http: //doi.acm.org/10.1145/2846650.2846651.

[30] P. Ohmann, D. B. Brown, B. Liblit, and T. W. Reps. Recovering
execution data from incomplete observations. In Proceedings of
the 13th International Workshop on Dynamic Analysis, WODA
2015, Pittsburgh, PA, USA, pages 19-24. ACM, 2015. ISBN
978-1-4503-3909-4. URL http: //doi.acm.org/10.1145/
2823363 . 2823368.

[31] P. Ohmann, D. B. Brown, N. Neelakandan, J. Linderoth, and
B. Liblit. Optimizing customized program coverage. In
Proceedings of the 31st IEEE/ACM International Conference
on Automated Software Engineering, ASE 2016, Singapore,
pages 27-38. ACM, 2016. ISBN 978-1-4503-3845-5. URL
http: //doi.acm.org/10.1145/2970276.2970351.

[32] P. Ohmann, A. Brooks, L. D’Antoni, and B. Liblit. Supporting
proofs for control-flow recovery from partial failure reports.
Technical Report 1845, University of Wisconsin—Madison, Apr.
2017.

[33] A. Orso, D. Liang, M. J. Harrold, and R. Lipton. Gamma
system: continuous evolution of software after deployment.
In Proceedings of the 2002 ACM SIGSOFT international
symposium on Software testing and analysis, ISSTA ’02, pages
65-69, New York, NY, USA, 2002. ACM. ISBN 1-58113-562-9.
URL http://doi.acm.org/10.1145/566172 . 566182.

[34] C. Pavlopoulou and M. Young. Residual test coverage monitoring. In Proceedings of the 1999 International Conference on
Software Engineering, ICSE’ 99, Los Angeles, CA, USA, pages

277-284. ACM, 1999. ISBN 1-58113-074-0. URL http:
//portal.acm.org/citation. cfm?id=302405 . 302637.

[35] J.-E. Pin. Syntactic semigroups. In Handbook of formal
languages, pages 679-746. Springer, 1997.

[36] T. Place, L. van Rooijen, and M. Zeitoun. Separating regular
languages by piecewise testable and unambiguous languages.
In Mathematical Foundations of Computer Science - 38th International Symposium, MFCS 2013, Klosterneuburg, Austria,
volume 8087 of Lecture Notes in Computer Science, pages 729740. Springer, 2013. ISBN 978-3-642-40312-5. URL http:
//ax.doi .org/10. 1907/978- 3-642-40313-2_64.

[37] J. R6Bler, A. Zeller, G. Fraser, C. Zamfir, and G. Candea.
Reconstructing core dumps. In ICST ’13: Proceedings
of the Sixth IEEE International Conference on Software
Testing, Verification and Validation. TEEE, Mar. 2013. URL
http: //dx.doi.org/10.1109/ICST. 2013.18.

[38] G. Rothermel, S. Elbaum, A. Kinneer, and H. Do. Software—
artifact infrastructure repository, Sept. 2006. URL http:
//sir.unl.edu/portal/.

[39] A. Rountev, S. Kagan, and M. Gibas. Static and dynamic analysis of call chains in Java. In Proceedings of the ACM/SIGSOFT
International Symposium on Software Testing and Analysis,
ISSTA 2004, pages 1-11. ACM, 2004. ISBN 1-58113-820-2.
URL http: //doi.acm. org/10.1145/1007512. 1007514.

[40] I. Simon. Piecewise testable events. In Automata Theory
and Formal Languages, 2nd GI Conference, Kaiserslautern,
volume 33 of Lecture Notes in Computer Science, pages
214-222. Springer, 1975. ISBN 3-540-07407-4. URL
http: //dx.doi.org/10.1007/3-540-07407-4_23.

[41] M. M. Tikir and J. K. Hollingsworth. Efficient online
computation of statement coverage. Journal of Systems and
Software, 78(2):146-165, 2005.

[42] M. Veanes. Applications of symbolic finite automata. In
Implementation and Application of Automata - 18th International Conference, CIAA 2013, Halifax, NS, Canada, volume 7982 of Lecture Notes in Computer Science, pages
16-23. Springer, 2013. ISBN 978-3-642-39273-3. URL
http: //dx.doi.org/10. 1007/978-3-642-39274-0_3.

[43] M. Veanes, P. de Halleux, and N. Tillmann. Rex: Symbolic
regular expression explorer. In 3rd International Conference on
Software Testing, Verification and Validation, ICST 2010, Paris,
France, pages 498-507. IEEE, 2010. ISBN 978-0-7695-3990-4.
URL http://dx.doi-.org/10.1109/ICST. 2010.15.

[44] R. Wu, X. Xiao, S. Cheung, H. Zhang, and C. Zhang. Casper:
an efficient approach to call trace collection. In Proceedings
of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, POPL 2016, pages
678-690. ACM, 2016. ISBN 978-1-4503-3549-2. URL
http: //doi.acm.org/10.1145/2837614.2837619.

[45] C. Zamfir and G. Candea. Execution synthesis: a technique
for automated software debugging. In Proceedings of the
5th European conference on Computer systems, EuroSys ’ 10,
pages 321-334. ACM, 2010. ISBN 978-1-60558-577-2. URL
http: //doi.acm.org/10.1145/1755913.1755946.

