[1] D. Ancona et al. RPython: Towards Reconciling Dynamically &
Statically Typed OO Languages. Symp. on Dynamic Lang., Oct 2007.
[2] O. Anderson et al. Checked Load: Architectural Support for JavaScript
Type-Checking on Mobile Processors. Int’l Symp. on
High-Performance Computer Architecture (HPCA), Feb 2011.
[3] D. Beazley. Understanding the Python GIL. PyCon, Feb 2010.
[4] C. F. Bolz. Meta-Tracing Just-In-Time Compilation for RPython.
Ph.D. Thesis, Mathematisch-Naturwissenschaftliche Fakultät,
Heinrich-Heine-Universität Düsseldorf, 2012.
[5] C. F. Bolz et al. Allocation Removal by Partial Evaluation in a Tracing
JIT. Workshop on Partial Evaluation and Prog. Manipulation, Jan 2011.
[6] C. F. Bolz et al. Tracing the Meta-Level: PyPy’s Tracing JIT Compiler.
Workshop on the Implementation, Compilation, Optimization of
Object-Oriented Languages and Programming Systems, Jul 2009.
[7] C. F. Bolz et al. Back to the Future in One Week: Implementing a
Smalltalk VM in PyPy. Workshop on Self-Sustaining Sys., May 2008.
[8] C. F. Bolz, M. Leuschel, and D. Schneider. Towards a Jitting VM for
Prolog Execution. Int’l Symp. on Principles and Practice of Declarative
Programming, Jul 2010.
[9] C. F. Bolz et al. Meta-Tracing Makes a Fast Racket. Workshop on
Dynamic Languages and Applications (DYLA), Jun 2014.
[10] C. F. Bolz and L. Tratt. The Impact of Meta-Tracing on VM Design &
Implementation. Science of Computer Prog., 98:408–421, Aug 2015.
[11] S. Brunthaler. Virtual-Machine Abstraction & Optimization Techniques.
Electronic Notes in Theoretical Computer Science, Dec 2009.
[12] S. Cass. 2016 Top Programming Languages. IEEE Spectrum, Jul 2016.
[13] J. Castanos et al. On the benefits and pitfalls of extending a statically
typed language JIT compiler for dynamic scripting languages.
SIGPLAN Not., Oct 2012.
[14] J. Choi et al. ShortCut: Architectural Support for Fast Object Access in
Scripting Languages. Int’l Symp. on Computer Architecture (ISCA), Jun
2017.
[15] G. Dot, A. Martínez, and A. González. Analysis and Optimization of
Engines for Dynamically Typed Languages. Int’l Symp. on Computer
Architecture and High Performance Computing (SBAC-PAD), Oct 2015.
[16] M. Ertl and D. Gregg. The Behavior of Efficient Virtual Machine
Interpreters on Modern Architectures. Euro-Par 2001, Aug 2001.
[17] A. Gal et al. Trace-based Just-in-Time Type Specialization for Dynamic
Languages. ACM SIGPLAN Conf. on Programming Language Design
and Implementation (PLDI), Jun 2009.
[18] D. Gope, D. J. Schalis, and M. H. Lipasti. Architectural Support for
Server-Side PHP Processing. Int’l Symp. on Computer Architecture
(ISCA), Jun 2017.
[19] I. Gouy. The Computer Language Benchmarks Game.
http://benchmarksgame.alioth.debian.org/.

[20] HippyVM PHP. https://github.com/hippyvm/hippyvm.
[21] A. Holkner and J. Harland. Evaluating the dynamic behaviour of
Python applications. Proceedings of the Thirty-Second Australasian
Conference on Computer Science - Volume 91, 2009.
[22] M. Hölttä. Crankshafting from the Ground Up. Google Technical
Report, 2013.
[23] U. Hölzle, C. Chambers, and D. Ungar. Debugging optimized code with
dynamic deoptimization. ACM SIGPLAN Conf. on Programming
Language Design and Implementation (PLDI), 1992.
[24] Mozilla IonMonkey. https://wiki.mozilla.org/IonMonkey.
[25] R. Jones and R. D. Lins. Garbage Collection: Algorithms for Automatic
Dynamic Memory Management. Wiley, Sep 1996.
[26] Julia. http://julialang.org.
[27] T. Kotzmann and H. Mössenböck. Escape analysis in the context of
dynamic compilation and deoptimization. ACM/USENIX Int’l Conf. on
Virtual Execution Environments (VEE), 2005.
[28] C.-K. Luk et al. Pin: Building Customized Program Analysis Tools with
Dynamic Instrumentation. ACM SIGPLAN Conf. on Programming
Language Design and Implementation (PLDI), Jun 2005.
[29] S. Marr and S. Ducasse. Tracing vs. Partial Evaluation: Comparing
Meta-Compilation Approachess for Self-Optimizing Interpreters.
Conf. on Object-Oriented Programming Systems Languages and
Applications (OOPSLA), Dec 2015.
[30] P. J. Mucci et al. PAPI: A Portable Interface to Hardware Performance
Counters. DoD HPCMP Users Gp. Conf., 1999.
[31] PyPy Benchmark Suite.
https://bitbucket.org/pypy/benchmarks.
[32] P. Ratanaworabhan, B. Livshits, and B. G. Zorn. JSMeter: Comparing
the Behavior of JavaScript Benchmarks with Real Web Applications.
WebApps 2010, Jun 2010.
[33] G. Richards et al. An Analysis of the Dynamic Behavior of JavaScript
Programs. ACM SIGPLAN Conf. on Programming Language Design
and Implementation (PLDI), Jun 2010.
[34] E. Rohou, B. N. Swamy, and A. Seznec. Branch Prediction and the
Performance of Interpreters: Don’t Trust Folklore. Int’l Symp. on Code
Generation and Optimization, Feb 2015.
[35] A. Sarimbekov et al. Characteristics of Dynamic JVM Languages.
Workshop on Virtual Machines and Intermediate Lang., Oct 2013.
[36] D. Schneider and C. F. Bolz. The Efficient Handling of Guards in the
Design of RPython’s Tracing JIT. Workshop on Virtual Machines and
Intermediate Lang., 2012.
[37] C. Seaton. Specialising Dynamic Techniques for Implementing the Ruby
Programming Language. Ph.D. Thesis, School of Computer Science,
University of Manchester, 2015.
[38] G. Southern and J. Renau. Overhead of Deoptimization Checks in the
V8 JavaScript Engine. Int’l Symp. on Workload Characterization
(IISWC), Sep 2016.
[39] L. Stadler, T. Würthinger, and H. Mössenböck. Partial Escape Analysis
and Scalar Replacement for Java. Int’l Symp. on Code Generation and
Optimization, Feb 2014.
[40] Topaz Ruby. http://github.com/topazproject/topaz.
[41] FastR. https://github.com/graalvm/truffleruby.
[42] TruffleRuby. https://github.com/graalvm/truffleruby.
[43] V8 JavaScript Engine. https://code.google.com/p/v8.
[44] P. R. Wilson. Uniprocessor Garbage Collection Techniques. Int’l
Workshop on Memory Management, 1992.
[45] T. Würthinger et al. Practical Partial Evaluation for High-Performance
Dynamic Language Runtimes. ACM SIGPLAN Conf. on Programming
Language Design and Implementation (PLDI), Jun 2017.
[46] T. Würthinger et al. One VM to Rule Them All. Int’l Symp. on New
Ideas, New Paradigms, and Reflections on Programming & Software
(Onward!), Oct 2013.
[47] T. Würthinger et al. Self-Optimizing AST Interpreters. Symp. on
Dynamic Languages, Oct 2012.
