[1] K. Agrawal, C. E. Leiserson, and J. Sukha, “Executing task graphs using
work-stealing,” in IPDPS, 2010, pp. 1–12.
[2] J. M. Perez, R. M. Badia, and J. Labarta, “A dependency-aware
task-based programming environment for multi-core architectures,” in
CLUSTER, 2008, pp. 142–151.
[3] T. Cormen, C. Leiserson, R. Rivest, and C. Stein, Introduction to
Algorithms. MIT Press, 2009.
[4] “Laboratory for web algorithmics,” http://law.di.unimi.it/datasets.php.
[5] P. Boldi and S. Vigna, “The WebGraph framework I: Compression
techniques,” in WWW, 2004, pp. 595–601.

[6] P. Boldi, M. Rosa, M. Santini, and S. Vigna, “Layered label propagation: A multiresolution coordinate-free ordering for compressing social
networks,” in WWW, 2011, pp. 587–596.
[7] L. Page, S. Brin, R. Motwani, and T. Winograd, “The PageRank citation
ranking: bringing order to the web,” 1999.
[8] T. F. Smith and M. S. Waterman, “Identiﬁcation of common molecular
subsequences,” Journal of molecular biology, vol. 147, no. 1, pp. 195–
197, 1981.
[9] Y. Kwok and I. Ahmad, “Static scheduling algorithms for allocating
directed task graphs to multiprocessors,” ACM Comput. Surv., vol. 31,
no. 4, pp. 406–471, Dec. 1999.
[10] G. Liu, K.-L. Poh, and M. Xie, “Iterative list scheduling for heterogeneous computing,” JPDC, vol. 65, no. 5, pp. 654–665, 2005.
[11] T. Yang and A. Gerasoulis, “PYRROS: static task scheduling and code
generation for message passing multiprocessors,” in SC, 1992, pp. 428–
437.
[12] N. Vydyanathan, S. Krishnamoorthy, G. M. Sabin, Ü. V. Çatalyürek,
T. M. Kurç, P. Sadayappan, and J. H. Saltz, “An integrated approach to
locality-conscious processor allocation and scheduling of mixed-parallel
applications,” TPDS, vol. 20, no. 8, pp. 1158–1172, 2009.
[13] M. Frigo, C. Leiserson, and K. Randall, “The implementation of the
Cilk-5 multithreaded language,” in PLDI, 1998, pp. 212–223.
[14] Y. Guo, J. Zhao, V. Cave, and V. Sarkar, “SLAW: a scalable localityaware adaptive work-stealing scheduler for multi-core systems,” in
IPDPS, 2010, pp. 341–342.
[15] S.-J. Min, C. Iancu, and K. Yelick, “Hierarchical work stealing on
manycore clusters,” in PGAS, 2011.
[16] J.-N. Quintin and F. Wagner, “Hierarchical work-stealing,” in Euro-Par
2010-Parallel Processing, 2010, pp. 217–229.
[17] J. Lifﬂander, S. Krishnamoorthy, and L. V. Kale, “Optimizing data
locality for fork/join programs using constrained work stealing,” in SC,
2014, pp. 857–868.
[18] S. Chatterjee, S. Tasirlar, Z. Budimlic, V. Cavé, M. Chabbi, M. Grossman, V. Sarkar, and Y. Yan, “Integrating asynchronous task parallelism
with MPI,” in IPDPS, 2013, pp. 712–725.
[19] G. Bosilca, A. Bouteiller, A. Danalis, M. Faverge, T. Hérault, and J. J.
Dongarra, “PaRSEC: Exploiting heterogeneity to enhance scalability,”
Computing in Science & Engineering, vol. 15, no. 6, pp. 36–45, 2013.
[20] E. Chan, E. S. Quintana-Orti, G. Quintana-Orti, and R. Van De Geijn,
“SuperMatrix out-of-order scheduling of matrix operations for smp and
multi-core architectures,” in SPAA, 2007, pp. 116–125.
[21] C. Augonnet, S. Thibault, R. Namyst, and P.-A. Wacrenier, “StarPU:
a uniﬁed platform for task scheduling on heterogeneous multicore
architectures,” CCPE, vol. 23, no. 2, pp. 187–198, 2011.
[22] G. Bosilca, A. Bouteiller, A. Danalis, T. Herault, P. Lemarinier, and
J. Dongarra, “Dague: A generic distributed dag engine for high performance computing,” ParCo, vol. 38, no. 1, pp. 37–51, 2012.
[23] T. Gautier, J. V. Lima, N. Maillard, and B. Rafﬁn, “XKaapi: A runtime
system for data-ﬂow task programming on heterogeneous architectures,”
in IPDPS, 2013, pp. 1299–1308.
[24] M. Bauer, S. Treichler, E. Slaughter, and A. Aiken, “Legion: expressing
locality and independence with logical regions,” in SC, 2012, p. 66.
[25] Z. Budimlić, M. Burke, V. Cavé, K. Knobe et al., “Concurrent collections,” Scientiﬁc Programming, vol. 18, no. 3-4, pp. 203–217, 2010.
[26] S. L. Olivier, A. K. Porterﬁeld, K. B. Wheeler, and J. F. Prins,
“Scheduling task parallelism on multi-socket multicore systems,” in
ROSS, 2011, pp. 49–56.
[27] E. Bugnion, J. M. Anderson, T. C. Mowry, M. Rosenblum, and M. S.
Lam, “Compiler-directed page coloring for multiprocessors,” in ACM
SIGPLAN Notices, vol. 31, no. 9. ACM, 1996, pp. 244–255.
[28] T. M. Chilimbi and R. Shaham, “Cache-conscious coallocation of hot
data streams,” in PLDI, 2006, pp. 252–262.
[29] S. Chen, P. B. Gibbons, M. Kozuch, V. Liaskovitis, A. Ailamaki, G. E.
Blelloch et al., “Scheduling threads for constructive cache sharing on
cmps,” in SPAA, 2007, pp. 105–115.
[30] M. K. Qureshi and Y. N. Patt, “Utility-based cache partitioning: A
low-overhead, high-performance, runtime mechanism to partition shared
caches,” in MICRO, 2006, pp. 423–432.
[31] G. Suh, L. Rudolph, and S. Devadas, “Dynamic partitioning of shared
cache memory,” Journal of Supercomp., vol. 28, no. 1, pp. 7–26, 2004.
[32] F. Mueller, “Compiler support for software-based cache partitioning,” in
ACM Sigplan Notices, vol. 30, no. 11. ACM, 1995, pp. 125–133.