[1] Mohamed Abbadi. 2017. Casanova 2, A domain specific language for
general game development. Ph.D. Dissertation. Università Ca’ Foscari,
Tilburg University.
[2] Mohamed Abbadi, Francesco Di Giacomo, Agostino Cortesi, Pieter
Spronck, Giulia Costantini, and Giuseppe Maggiore. 2015. Casanova:
a simple, high-performance language for game development. In Joint
International Conference on Serious Games. Springer, 123–134.

[3] Alfred V Aho, Ravi Sethi, and Jeffrey D Ullman. 1986. Compilers,

Principles, Techniques. Addison wesley Boston.

[4] Erwin Book, Dewey Val Shorre, and Steven J Sherman. 1970. The
cwic/36o system, a compiler for writing and implementing compilers.
ACM SIGPLAN Notices 5, 6 (1970), 11–29.

[5] Martin Bravenboer, Karl Trygve Kalleberg, Rob Vermaas, and Eelco
Visser. 2008. Stratego/XT 0.17. A language and toolset for program
transformation. Science of computer programming 72, 1 (2008), 52–70.
[6] WR Campbell. 1978. A compiler definition facility based on the syn-

tactic macro. Comput. J. 21, 1 (1978), 35–41.

[7] Luca Cardelli. 1996. Type systems. Comput. Surveys 28, 1 (1996),

263–264.

[8] Krzysztof Czarnecki, Ulrich W Eisenecker, G Goos, J Hartmanis, and J
van Leeuwen. 2000. Generative programming. Edited by G. Goos, J.
Hartmanis, and J. van Leeuwen 15 (2000).

[9] Francesco Di Giacomo, Mohamed Abbadi, Agostino Cortesi, Pieter
Spronck, and Giuseppe" Maggiore. 2017. Building Game Scripting
DSL’s with the Metacasanova Metacompiler. In INTETAIN 2016, Utrecht,
The Netherlands, June 28–30. Springer, 231–242.

Figure 1. Execution time of the different memory models

[10] Plotkin G.D. 1981. A structural approach to operational semantics.
Technical Report. Computer science department, Aarhus University.
[11] F. Di Giacomo, M. Abbadi, A. Cortesi, P. Spronck, G. Costantini, and
G. Maggiore. 2017. High performance encapsulation and networking
in Casanova 2. Entertainment Computing 20 (2017), 25 – 41.

[12] Gilles Kahn. 1987. Natural semantics. STACS 87 (1987), 22–39.
[13] Samuel N Kamin. 1998. Research on domain-specific embedded lan-
guages and program generators. Electronic Notes in Theoretical Com-
puter Science 14 (1998), 149–168.

[14] O. Kiselyov. 2016. Free and Freer Monads: Putting Monads Back into
Closet. http://okmij.org/ftp/Computation/free-monad.html. (2016).
[15] Jan Willem Klop et al. 1992. Term rewriting systems. Handbook of

logic in computer science 2 (1992), 1–116.

[16] Marjan Mernik, Jan Heering, and Anthony M Sloane. 2005. When and
how to develop domain-specific languages. ACM computing surveys
(CSUR) 37, 4 (2005), 316–344.

[17] Mikael Pettersson. 1996. A compiler for natural semantics. In Compiler

Construction. Springer, 177–191.

[18] Tim Sheard and Simon Peyton Jones. 2002.

Template meta-
programming for Haskell. In Proceedings of the 2002 ACM SIGPLAN
workshop on Haskell. ACM, 1–16.

[19] Anthony M Sloane. 2002. Post-design domain-specific language em-
bedding: A case study in the software engineering domain. In System
Sciences, 2002. HICSS. Proceedings of the 35th Annual Hawaii Interna-
tional Conference on. IEEE, 3647–3655.

[20] Arie Van Deursen, Paul Klint, Joost Visser, et al. 2000. Domain-specific
languages: An annotated bibliography. Sigplan Notices 35, 6 (2000),
26–36.

[21] Markus Voelter, Sebastian Benz, Christian Dietrich, Birgit Engelmann,
Mats Helander, Lennart CL Kats, Eelco Visser, and Guido Wachsmuth.
2013. DSL engineering: Designing, implementing and using domain-
specific languages. dslbook. org.

[22] Daniel Weise and Roger Crew. 1993. Programmable syntax macros. In

ACM SIGPLAN Notices, Vol. 28. ACM, 156–165.

