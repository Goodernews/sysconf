[1]  Almasi G. PGAS (Partitioned Global Address Space) 

Languages. In Encyclopedia of Parallel Computing 2011 
(pp. 1539-1545). Springer US. 

[2]  Carlson WW, et al. Introduction to UPC and language 
specification. Technical Report CCS-TR-99-157, IDA 
Center for Computing Sciences; 1999 May 13. 

[3]  Numrich RW, Reid J. Co-Array Fortran for parallel 

programming. In ACM Sigplan Fortran Forum 1998 Aug 
1 (Vol. 17, No. 2, pp. 1-31). ACM. 

[4]  Krishnamurthy, et al. Titanium: a high performance Java 

dialect. In PPSC 1999. 

[5]  Chamberlain BL, Callahan D, Zima HP. Parallel 

programmability and the chapel language. International 
Journal of High Performance Computing Applications. 
2007 Aug 1;21(3):291-312. 

[6]  Lydia Duncan, “Chapel: A Productive Parallel 
Programming Language”, Women Techmakers 

Community Talks, January 19, 2016. [Online] Available: 
http://chapel.cray.com/presentations/Duncan-
WomenTechmakers.pdf 

[7]  Shende SS, Malony AD. The TAU parallel performance 

system. International Journal of High Performance 
Computing Applications. 2006 May 1;20(2):287-311. 

[8]  Müller MS, et al. Developing Scalable Applications with 

Vampir, VampirServer, and VampirTrace. In PARCO 
2007 Sep (Vol. 15, pp. 637-644). 

[9]  Adhianto L, et al. HPCToolkit: Tools for performance 
analysis of optimized parallel programs. Concurrency 
and Computation: Practice and Experience. 2010 Apr 
25;22(6):685-701. 

[10] Tallent NR, Kerbyson D. Data-centric performance 

analysis of PGAS applications. InProc. of the Second Intl. 
Workshop on High-performance Infrastructure for 
Scalable Tools (WHIST), San Servolo Island, Venice, 
Italy 2012. 

[11] Su HH, Billingsley M, George AD. Parallel performance 

wizard: A performance analysis tool for partitioned 
global-address-space programming. In Parallel and 
Distributed Processing, 2008. IPDPS 2008. IEEE 
International Symposium on 2008 Apr 14 (pp. 1-8). 
IEEE. 

[12] Itahashi S, Sato Y, Chiba S. Toward a profiling tool for 

visualizing implicit behavior in X10. In 2014 X10 
Workshop (X10'14) co-located with PLDI'14, Edinburgh, 
UK, 2014 June 12 

[13] Oeste S, Knüpfer A, Ilsche T. Towards Parallel 

Performance Analysis Tools for the OpenSHMEM 
Standard. In Workshop on OpenSHMEM and Related 
Technologies 2014 Mar 4 (pp. 90-104). Springer 
International Publishing. 

[14] Liu X, Mellor-Crummey J. A data-centric profiler for 

parallel programs. In 2013 SC-International Conference 
for High Performance Computing, Networking, Storage 
and Analysis (SC) 2013 Nov 17 (pp. 1-12). IEEE. 

[15] Rutar NJ. Foo's To Blame: Techniques For Mapping 

Performance Data To Program Variables. Ph.D. 
dissertation, University of Maryland, 2011 

[16] Mucci PJ, Browne S, Deane C, Ho G. PAPI: A portable 

interface to hardware performance counters. In 
Proceedings of the department of defense HPCMP users 
group conference 1999 Jun 7 (pp. 7-10). 

[17] Dean J, Hicks JE, Waldspurger CA, Weihl WE, Chrysos 

G. ProfileMe: Hardware support for instruction-level 
profiling on out-of-order processors. InProceedings of 
the 30th annual ACM/IEEE international symposium on 
Microarchitecture 1997 Dec 1 (pp. 292-302). IEEE 
Computer Society. 

[18] Buck B, Hollingsworth JK. An API for runtime code 

patching. The International Journal of High Performance 
Computing Applications. 2000 Nov;14(4):317-29. 

[19] Johnson RB, Hollingsworth JK. Optimizing Chapel for 
single-node environments. In2016 IEEE International 
Parallel and Distributed Processing Symposium 
Workshops (IPDPSW) 2016 May 23 (pp. 1558-1567). 
IEEE. 

[20] “CORAL Collaboration Benchmark Codes,” Oak Ridge, 

Argonne, Livermore. [Online]. Available: 
https://asc.llnl.gov/CORAL-benchmarks/ 
