[1] ALON, N., MATIAS, Y., AND SZEGEDY, M. The space
complexity of approximating the frequency moments. In
Proceedings of the Twenty-eighth Annual ACM Symposium
on Theory of Computing (1996), STOC ’96, pp. 20-29.

[2] ALuR, R., Bopik, R., DALLAL, E., FISMAN, D., GARG,
P., JUNIWAL, G., KRESS-GAZIT, H., MADHUSUDAN, P.,
MARTIN, M. M. K., RAGHOTHAMAN, M., SAHA, S., SESHIA, S. A., SINGH, R., SOLAR-LEZAMA, A., TORLAK,
E., AND UbuPA, A. Syntax-guided synthesis. In Dependable Software Systems Engineering. 2015, pp. 1-25.

[3] APPEL, A. W. SSA is functional programming. SIGPLAN
Not. 33, 4 (Apr. 1998), 17-20.

[4] BABCOCK, B., BABU, S., DATAR, M., MOTWANI, R., AND
WIpDoM, J. Models and issues in data stream systems. In Proceedings of the Twenty-first ACM SIGMOD-SIGACT-SIGART
Symposium on Principles of Database Systems (2002), PODS
°02, pp. 1-16.

[5] BACON, D. F., GRAHAM, S. L., AND SHARP, O. J. Compiler transformations for high-performance computing. ACM
Comput. Surv. 26, 4 (Dec. 1994), 345-420.

[6] BASTOUL, C. Efficient code generation for automatic parallelization and optimization. In Proceedings of the Second
International Conference on Parallel and Distributed Computing (2003), ISPDC’03, pp. 23-30.

[7] BASTOUL, C. Code generation in the polyhedral model is
easier than you think. In Proceedings of the 13th International Conference on Parallel Architectures and Compilation
Techniques (2004), PACT *04, pp. 7-16.

[8] BEN-ASHER, Y., AND HABER, G. Parallel solutions of
simple indexed recurrence equations. IEEE Trans. Parallel
Distrib. Syst. 12, 1 Jan. 2001), 22-37.

[9] BrrbD, R. S. An introduction to the theory of lists. In Proceedings of the NATO Advanced Study Institute on Logic of
Programming and Calculi of Discrete Design (1987), pp. 5—
42.

[10] BLELLOCH, G. E. Prefix sums and their applications.

[11] BLUME, W., DOALLO, R., EIGENMANN, R., GROUT, J.,
HOEFLINGER, J., LAWRENCE, T., LEE, J., PADUA, D.,
PAEK, Y., POTTENGER, B., RAUCHWERGER, L., AND TU,
P. Parallel programming with Polaris. Computer 29, 12 (Dec.
1996), 78-82.

[12] BOONE, W. W. The word problem. Proceedings of the
National Academy of Sciences of the United States of America
44 (1958), 1061-1065.

[13] CHIN, W.-N., TAKANO, A., AND Hu, Z. Parallelization
via context preservation. In Proceedings of the 1998 International Conference on Computer Languages (1998), ICCL
°98, pp. 153-162.

[14] CONTRERAS, G., AND MARTONOSI, M. Characterizing
and improving the performance of Intel Threading Building Blocks. In 4th International Symposium on Workload
Characterization (IISWC 2008), Seattle, Washington, USA,
September 14-16, 2008 (2008), pp. 57-66.

[15] FARZAN, A., AND NICOLET, V. Automated synthesis of
divide and conquer parallelism.

[16] FEDYUKOVICH, G., MAAZ BIN SAFEER, A., AND BODIK,
R. Gradual synthesis for static parallelization of single-pass
array-processing programs. In PLDI (2017).

[17] FisHER, A. L., AND GHULOUM, A. M. Parallelizing complex scans and reductions. In Proceedings of the ACM SIGPLAN 1994 Conference on Programming Language Design
and Implementation (1994), PLDI ’94, pp. 135-146.

[18] GESER, A., AND GORLATCH, S. Parallelizing functional
programs by generalization. In Proceedings of the 6th International Joint Conference on Algebraic and Logic Programming (1997), ALP ’97-HOA ’97, pp. 46-60.

[19] GIBBONS, J. The third homomorphism theorem. J. Funct.
Program. 6, 4 (1996), 657-665.

[20] GORLATCH, S. Systematic extraction and implementation
of divide-and-conquer parallelism. In Proceedings of the
Sth International Symposium on Programming Languages:
Implementations, Logics, and Programs (1996), PLILP *96,
pp. 274-288.

[21] GORLATCH, S. Extracting and implementing list homomorphisms in parallel program development. Sci. Comput. Program. 33, 1 (Jan. 1999), 1-27.

[22] HILLIS, W. D., AND STEELE JR, G. L. Data parallel algorithms. Communications of the ACM 29, 12 (1986), 11701183.

[23] HWANSOO, H., AND CHAU-WEN, T. A comparison of
parallelization techniques for irregular reductions. In Parallel
and Distributed Processing Symposium., Proceedings 15th
International (2001), p. 27.

[24] KAMIL, S., CHEUNG, A., ITZHAKY, S., AND SOLARLEZAMA, A. Verified lifting of stencil computations. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (2016), PLDI
"16, pp. 711-726.

[25] KEJARIWAL, A., D’ALBERTO, P., NICOLAU, A., AND
POLYCHRONOPOULOS, C. D. A geometric approach for partitioning n-dimensional non-rectangular iteration spaces. In
Proceedings of the 17th International Conference on Languages and Compilers for High Performance Computing
(2005), LCPC’ 04, pp. 102-116.

[26] KELSEY, R. A. A correspondence between continuation
passing style and static single assignment form. In Papers
from the 1995 ACM SIGPLAN Workshop on Intermediate
Representations (1995), IR 95, pp. 13-22.

[27] LADNER, R. E., AND FISCHER, M. J. Parallel prefix computation. Journal of the ACM (JACM) 27, 4 (1980), 831-838.

[28] LEINO, K. R. M. Dafny: An automatic program verifier for
functional correctness. In Logic for Programming, Artificial
Intelligence, and Reasoning (LPAR) (2010), pp. 348-370.

[29] MARCHE, C. Normalized rewriting: an alternative to rewriting modulo a set of equations. Journal of Symbolic Computation 21, 3 (1996), 253-288.

[30] MARCHE, C., AND URBAIN, X. Termination of associativecommutative rewriting by dependency pairs. Springer Berlin
Heidelberg, Berlin, Heidelberg, 1998, pp. 241-255.

[31] MorRIHATA, A. A short cut to parallelization theorems.
In ACM SIGPLAN International Conference on Functional
Programming, ICFP’13, Boston, MA, USA - September 25 27, 2013 (2013), pp. 245-256.

[32] MORIHATA, A., AND MATSUZAKI, K. Automatic parallelization of recursive functions using quantifier elimination.
In Functional and Logic Programming, 10th International
Symposium, FLOPS 2010, Sendai, Japan, April 19-21, 2010.
Proceedings (2010), pp. 321-336.

[33] MoRIHATA, A., MATSUZAKI, K., Hu, Z., AND TAKEICHI,
M. The third homomorphism theorem on trees: downward &
upward lead to divide-and-conquer. In Proceedings of the
36th ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages, POPL 2009, Savannah, GA, USA,
January 21-23, 2009 (2009), pp. 177-185.

[34] MorITA, K., MORTHATA, A., MATSUZAKI, K., HU, Z.,
AND TAKEICHI, M. Automatic inversion generates divideand-conquer parallel programs. In Proceedings of the 28th
ACM SIGPLAN Conference on Programming Language Design and Implementation (2007), PLDI ’07, pp. 146-155.

[35] NARENDRAN, P., AND RUSINOWITCH, M. Any ground
associative-commutative theory has a finite canonical system. Springer Berlin Heidelberg, Berlin, Heidelberg, 1991,
pp. 423-434.

[36] NECULA, G. C., MCPEAK, S., RAHUL, S. P., AND
WEIMER, W. CIL: Intermediate Language and Tools for
Analysis and Transformation of C Programs. 2002.

[37] PADUA, D. A., AND WOLFE, M. J. Advanced compiler
optimizations for supercomputers. Commun. ACM 29, 12
(Dec. 1986), 1184-1201.

[38] PAPADIMITRIOU, C. H., AND SIPSER, M. Communication
complexity. J. Comput. Syst. Sci. 28, 2 (1984), 260-269.

[39] PHEATT, C. Intel® threading building blocks. Journal of
Computing Sciences in Colleges 23, 4 (2008), 298-298.

[40] PINGALI, K., NGUYEN, D., KULKARNI, M., BURTSCHER,
M., HASSAAN, M. A., KALEEM, R., LEE, T.-H.,
LENHARTH, A., MANEVICH, R., MENDEZ-LOJO, M.,
PROUNTZOS, D., AND SUI, X. The tao of parallelism in
algorithms. SIGPLAN Not. 46, 6 (June 2011), 12-25.

[41] RADOI, C., FINK, S. J., RABBAH, R., AND SRIDHARAN,
M. Translating imperative code to mapreduce. In Proceed
555

ings of the 2014 ACM International Conference on Object
Oriented Programming Systems Languages & Applications
(2014), OOPSLA ’ 14, pp. 909-927.

[42] RAYCHEV, V., MUSUVATHI, M., AND MYTKOWICZ, T. Parallelizing user-defined aggregations using symbolic execution. In Proceedings of the 25th Symposium on Operating
Systems Principles (2015), SOSP ’15, pp. 153-167.

[43] SATO, S., AND IWASAKI, H. Automatic parallelization via
matrix multiplication. SIGPLAN Not. 46, 6 June 2011), 470479.

[44] SMITH, C., AND ALBARGHOUTHI, A. Mapreduce program

synthesis. SIGPLAN Not. 51, 6 June 2016), 326-340.

[45] SOLAR-LEZAMA, A., ARNOLD, G., TANCAU, L., BODIK,
R., SARASWAT, V., AND SESHIA, S. Sketching stencils.
SIGPLAN Not. 42, 6 June 2007), 167-178.

[46] SOLAR-LEZAMA, A., JONES, C. G., AND BODIK, R.
Sketching concurrent data structures. In Proceedings of the
29th ACM SIGPLAN Conference on Programming Language
Design and Implementation (2008), PLDI ’08, pp. 136-148.

[47] ToORLAK, E., AND Bopik, R. Growing solver-aided languages with rosette. In ACM Symposium on New Ideas in
Programming and Reflections on Software, Onward! 2013,
part of SPLASH ’13, Indianapolis, IN, USA, October 26-31,
2013 (2013), pp. 135-152.

[48] VASILACHE, N., BASTOUL, C., AND COHEN, A. Polyhedral code generation in the real world. In Proceedings of
the 15th International Conference on Compiler Construction
(2006), CC’06, pp. 185-201.

[49] CERNY, P., HENZINGER, T. A., RADHAKRISHNA, A.,
RYZHYK, L., AND TARRACH, T. Regression-free synthesis for concurrency. In Proceedings of the 16th International
Conference on Computer Aided Verification - Volume 8559
(2014), pp. 568-584.

[50] WILSON, R., FRENCH, R., WILSON, C., AMARASINGHE,
S., ANDERSON, J., TJIANG, S., LIAO, S., TSENG, C.,
HALL, M., LAM, M., AND HENNESSY, J. The suif compiler system: A parallelizing and optimizing research compiler. Tech. rep., Stanford, CA, USA, 1994.

[51] Zuck, L. D., PNUELI, A., FANG, Y., GOLDBERG, B., AND
Hu, Y. Translation and run-time validation of optimized
code. Electr. Notes Theor. Comput. Sci. 70, 4 (2002), 179200.
