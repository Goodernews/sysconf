[1] S. Eyerman, K. Du Bois, and L. Eeckhout, “Speedup stacks: Identifying
scaling bottlenecks in multi-threaded applications,” in Proceedings of
the International Symposium on Performance Analysis of Software and
Systems (ISPASS), Apr. 2012, pp. 145–155.
[2] B. Alpern, C. R. Attanasio, A. Cocchi, D. Lieber, S. Smith, T. Ngo,
J. J. Barton, S. F. Hummel, J. C. Sheperd, and M. Mergen, “Implementing Jalapeño in Java,” in Proceedings of the Annual ACM SIGPLAN
Conference on Object-Oriented Programming, Systems, Languages and
Applications (OOPSLA), Nov. 1999, pp. 314–324.
[3] K. Du Bois, S. Eyerman, and L. Eeckhout, “Per-thread cycle accounting
in multicore processors,” ACM Transactions on Architecture and Code
Optimization (TACO), vol. 9, no. 4, pp. 1–22, Jan. 2013.
[4] T. Cao, S. M. Blackburn, T. Gao, and K. S. McKinley, “The yin and
yang of power and performance for asymmetric hardware and managed
software,” in Proceedings of the International Symposium on Computer
Architecture (ISCA), 2012, pp. 225–236.

[5] G. M. Amdahl, “Validity of the single-processor approach to achieving
large-scale computing capabilities,” in Proceedings of the American
Federation of Information Processing Societies Conference (AFIPS),
Sep. 1967, pp. 483–485.
[6] X. Liu and B. Wu, “ScaAnalyzer: A tool to identify memory scalability
bottlenecks in parallel programs,” in International Conference for High
Performance Computing, Networking, Storage and Analysis, 2015, pp.
47:1–47:12.
[7] S. M. Blackburn, R. Garner, C. Hoffmann, A. M. Khan, K. S. McKinley,
R. Bentzur, A. Diwan, D. Feinberg, D. Frampton, S. Z. Guyer, M. Hirzel,
A. L. Hosking, M. Jump, H. B. Lee, J. Moss, A. Phansalkar, D. Stefanovic, T. VanDrunen, D. von Dincklage, and B. Wiedermann, “The
DaCapo benchmarks: Java benchmarking development and analysis,” in
ACM SIGPLAN Conference on Object-Oriented Programming, Systems,
Languages and Applications (OOPSLA), Oct. 2006, pp. 169–190.
[8] K. Du Bois, J. B. Sartor, S. Eyerman, and L. Eeckhout, “Bottle graphs:
Visualizing scalability bottlenecks in multi-threaded applications,” in
Proceedings of the ACM SIGPLAN International Conference on Object
Oriented Programming Systems Languages & Applications (OOPSLA),
Oct. 2013, pp. 355–372.
[9] J. B. Sartor and L. Eeckhout, “Exploring multi-threaded Java application
performance on multicore hardware,” in Proceedings of the Annual
ACM SIGPLAN Conference on Object-Oriented Programming, Systems,
Languages and Applications (OOPSLA), Oct. 2012, pp. 281–296.
[10] S. M. Blackburn and K. S. McKinley, “Immix: A mark-region garbage
collector with space efficiency, fast collection, and mutator performance,” in ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), Jun. 2008, pp. 22–32.
[11] S. Akram, J. B. Sartor, K. Van Craeynest, W. Heirman, and L. Eeckhout,
“Boosting the priority of garbage: Scheduling collection on heterogeneous multicore processors,” ACM Transactions on Architecture and
Code Optimization, vol. 13, no. 1, pp. 4:1–4:25, Mar. 2016.
[12] Intel, “Intel VTuneTM Amplifier XE 2013,” http://software.intel.com/enus/articles/intel-vtune-amplifier-xe/, 2013.
[13] M. Itzkowitz and Y. Maruyama, “HPC Profiling with the Sun StudioTM
Performance Tools,” in Tools for High Performance Computing.
Springer, 2010, pp. 67–93.
[14] STMicroelectronics, “PGProf: parallel profiling for scientists and engineers,” http://www.pgroup.com/products/pgprof.htm, 2011.
[15] A. Bhattacharjee and M. Martonosi, “Thread criticality predictors
for dynamic performance, power, and resource management in chip
multiprocessors,” in Proceedings of the International Symposium on
Computer Architecture (ISCA), Jun. 2009, pp. 290–301.
[16] J. Demme and S. Sethumadhavan, “Rapid identication of architectural
bottlenecks via precise event counting,” in International Symposium on
Computer Architecture (ISCA), Jun. 2011, pp. 353–364.
[17] M. Kambadur, K. Tang, and M. A. Kim, “Harmony: Collection and
Analysis of Parallel Block Vectors,” in International Symposium on
Computer Architecture (ISCA), Jun. 2012, pp. 452–463.
[18] S. Garcia, D. Jeon, C. M. Louie, and M. B. Taylor, “Kremlin: Rethinking
and rebooting gprof for the multicore age,” in Proceedings of the Annual
ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), Jun. 2011, pp. 458–469.
[19] K. Du Bois, S. Eyerman, J. B. Sartor, and L. Eeckhout, “Criticality
stacks: Identifying critical threads in parallel programs using synchronization behavior,” in Proceedings of the Annual International Symposium on Computer Architecture (ISCA), Jun. 2013, pp. 511–522.
[20] E. Altman, M. Arnold, S. Fink, and N. Mitchell, “Performance analysis of idle programs,” in Proceedings of the Annual ACM SIGPLAN
Conference on Object-Oriented Programming, Systems, Languages and
Applications (OOPSLA), Oct. 2010, pp. 739–753.
[21] T. Kalibera, M. Mole, R. Jones, and J. Vitek, “A black-box approach to
understanding concurrency in DaCapo,” in Proceedings of the Annual
ACM SIGPLAN Conference on Object-Oriented Programming, Systems,
Languages and Applications (OOPSLA), Oct. 2012, pp. 335–354.
[22] L. Gidra, G. Thomas, J. Sopena, and M. Shapiro, “Assessing the
Scalability of Garbage Collectors on Many Cores,” ACM SIGOPS:
Operating Systems Review, vol. 45, no. 3, Dec. 2011.
[23] ——, “A study of the scalability of stop-the-world garbage collectors
on multicore,” in International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), Mar. 2013,
pp. 229–240.
[24] K. Y. Chen, J. M. Chang, and T. W. Hou, “Multithreading in Java:
Performance and scalability on multicore systems,” IEEE Transactions
on Computers, vol. 60, no. 11, pp. 1521–1534, Nov. 2011.