[1] H. Wong, S. Raoux, S. Kim, J. Liang, J. Reifenberg,
B. Rajendran, M. Asheghi, and K. Goodson, “Phase
change memory,” Proceedings of the IEEE, vol. 98,
pp. 2201–2227, 2010.
[2] I. Baek, M. Lee, S. Seo, M. Lee, D. Seo, D.-S. Suh,
J. Park, S. Park, H. Kim, and I. Yoo, “Highly scalable
nonvolatile resistive memory using simple binary oxide driven by asymmetric unipolar voltage pulses,” in
2004 IEEE International on Electron Devices Meeting,
IEDM’04, pp. 587–590, 2004.
[3] “Intel and Micron produce breakthrough memory
technology.”
https://newsroom.
intel.com/news-releases/intel-andmicron-produce-breakthrough\-memorytechnology/.
[4] M. K. Qureshi, V. Srinivasan, and J. A. Rivers, “Scalable
high performance main memory system using phasechange memory technology,” in Proceedings of the 36th
annual international symposium on Computer architecture, ISCA ’09, pp. 24–33, 2009.
[5] X. Jian and S. Steven, “NOVA: A log-structured file system for hybrid volatile/non-volatile main memories,” in
Proceedings of the 14th USENIX Conference on File and
Storage Technologies, FAST’16, pp. 323–338, 2016.
[6] J. Ou, J. Shu, and Y. Lu, “A high performance file system for non-volatile main memory,” in Proceedings of the
Eleventh European Conference on Computer Systems,
EuroSys ’16, pp. 12:1–12:16, 2016.
[7] F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach, M. Burrows, T. Chandra, A. Fikes, and R. E. Gruber, “Bigtable: A distributed storage system for structured data,” in Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation,
OSDI ’06, pp. 15–15, 2006.
[8] S. Ghemawat and J. Dean, “LevelDB.” https://
leveldb.org.
[9] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lakshman, A. Pilchin, S. Sivasubramanian,
P. Vosshall, and W. Vogels, “Dynamo: Amazon’s highly
available key-value store,” in Proceedings of Twenty-first
ACM SIGOPS Symposium on Operating Systems Principles, SOSP ’07, pp. 205–220, 2007.
[10] R. Sumbaly, J. Kreps, L. Gao, A. Feinberg, C. Soman, and S. Shah, “Serving large-scale batch computed
data with project voldemort,” in Proceedings of the 10th
USENIX conference on File and Storage Technologies,
FAST’12, pp. 18–18, 2012.
[11] Facebook, “RocksDB.” https://rocksdb.org.
[12] D. Beaver, S. Kumar, H. C. Li, J. Sobel, and P. Vajgel,
“Finding a needle in haystack: Facebook’s photo storage.,” in Proceedings of the 9th Symposium on Operating
Systems Design and Implementation, OSDI’10, pp. 1–8,
2010.
[13] C. Lai, S. Jiang, L. Yang, S. Lin, G. Sun, Z. Hou, C. Cui,
and J. Cong, “Atlas: Baidu’s key-value storage system
for cloud data,” in Proceedings of the 31st Symposium on Mass Storage Systems and Technologies, MSST’15,
pp. 1–14, IEEE, 2015.
[14] P. Shetty, R. P. Spillane, R. Malpani, B. Andrews, J. Seyster, and E. Zadok, “Building workloadindependent storage with VT-trees,” in Proceedings of
the 11th USENIX Conference on File and Storage Technologies, FAST’13, pp. 17–30, 2013.
[15] L. Marmol, S. Sundararaman, N. Talagala, and R. Rangaswami, “NVMKV: A scalable, lightweight, ftl-aware
key-value store,” in Proceedings of the 2015 USENIX Annual Technical Conference, USENIX ATC’15, pp. 207–
219, 2015.
[16] L. Lu, T. S. Pillai, A. C. Arpaci-Dusseau, and R. H.
Arpaci-Dusseau, “Wisckey: Separating keys from values
in SSD-conscious storage,” in Proceedings of the 14th
USENIX Conference on File and Storage Technologies,
FAST’16, pp. 133–148, Feb. 2016.
[17] B. Debnath, S. Sengupta, and J. Li, “Flashstore: High
throughput persistent key-value store,” Proceedings of
the VLDB Endowment, vol. 3, pp. 1414–1425, Sept.
2010.
[18] H. Lim, B. Fan, D. G. Andersen, and M. Kaminsky,
“SILT: A memory-efficient, high-performance key-value
store,” in Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles, SOSP ’11, pp. 1–
13, 2011.
[19] H. Zhang, D. G. Andersen, A. Pavlo, M. Kaminsky,
L. Ma, and R. Shen, “Reducing the storage overhead
of main-memory oltp databases with hybrid indexes,”
in Proceedings of the 2016 International Conference on
Management of Data, SIGMOD ’16, pp. 1567–1581,
2016.
[20] J. Levandoski, D. Lomet, and S. Sengupta, “The BwTree: A b-tree for new hardware platforms,” in Proceedings of the IEEE 29th International Conference on Data
Engineering, ICDE’13, pp. 302–313, 2013.
[21] G. Golan-Gueta, E. Bortnikov, E. Hillel, and I. Keidar,
“Scaling concurrent log-structured data stores,” in Proceedings of the Tenth European Conference on Computer
Systems, EuroSys ’15, pp. 32:1–32:14, 2015.
[22] P. Wang, G. Sun, S. Jiang, J. Ouyang, S. Lin, C. Zhang,
and J. Cong, “An efficient design and implementation of
lsm-tree based key-value store on open-channel ssd,” in
Proceedings of the Ninth European Conference on Computer Systems, EuroSys ’14, pp. 16:1–16:14, 2014.
[23] S. Chen, P. B. Gibbons, and S. Nath, “Rethinking
database algorithms for phase change memory,” in Proceedings of the 5th Biennial Conference on Innovative
Data Systems Research, CIDR’11, pp. 21–31, 2011.
[24] S. Venkataraman, N. Tolia, P. Ranganathan, and R. H.
Campbell, “Consistent and durable data structures for
non-volatile byte-addressable memory,” in Proceedings
of the 9th USENIX conference on File and stroage technologies, FAST’11, pp. 5–5, 2011.
[25] J. Ni, W. Hu, G. Li, K. Tan, and D. Sun, “Bp-tree: A
predictive b+-tree for reducing writes on phase change
memory,” IEEE Transactions on Knowledge and Data
Engineering, vol. PP, no. 99, pp. 1–1, 2014.
[26] P. Chi, W.-C. Lee, and Y. Xie, “Making b+-tree efficient
in pcm-based main memory,” in Proceedings of the 2014
International Symposium on Low Power Electronics and
Design, ISLPED ’14, pp. 69–74, 2014.
[27] S. Chen and Q. Jin, “Persistent b+-trees in non-volatile
main memory,” Proceedings of the VLDB Endowment,
vol. 8, pp. 786–797, Feb. 2015.
[28] J. Yang, Q. Wei, C. Chen, C. Wang, K. L. Yong, and
B. He, “NV-Tree: Reducing consistency cost for nvmbased single level systems,” in Proceedings of the 13th
USENIX Conference on File and Storage Technologies,
FAST’15, pp. 167–181, 2015.
[29] G. S. Choi, B. W. On, and I. Lee, “Pb+-tree: Pcm-aware
b+-tree,” IEEE Transactions on Knowledge and Data Engineering, vol. 27, no. 9, pp. 2466–2479, 2015.
[30] I. Oukid, J. Lasperas, A. Nica, T. Willhalm, and
W. Lehner, “FPTree: A hybrid scm-dram persistent and
concurrent b-tree for storage class memory,” in Proceedings of the 2016 International Conference on Management of Data, SIGMOD ’16, pp. 371–386, 2016.
[31] B. C. Lee, E. Ipek, O. Mutlu, and D. Burger, “Architecting phase change memory as a scalable dram alternative,” in Proceedings of the 36th Annual International
Symposium on Computer Architecture, ISCA ’09, pp. 2–
13, 2009.
[32] K. Suzuki and S. Swanson, “The non-volatile memory
technology database (NVMDB),” Tech. Rep. CS2015-
1011, Department of Computer Science & Engineering,
University of California, San Diego, 2015.
[33] M. F. Chang, J. J. Wu, T. F. Chien, Y. C. Liu, T. C.
Yang, W. C. Shen, Y. C. King, C. J. Lin, K. F. Lin,
Y. D. Chih, S. Natarajan, and J. Chang, “19.4 embedded 1mb reram in 28nm cmos with 0.27-to-1v read using
swing-sample-and-couple sense amplifier and self-boostwrite-termination scheme,” in 2014 IEEE International
Solid-State Circuits Conference Digest of Technical Papers, ISSCC’14, pp. 332–333, Feb 2014.
[34] Micron, “SLC NAND flash products.” http:
//www.micron.com/products/nandflash/slc-nand#fullPart,Dec.2014.
[35] “MyRocks: A space- and write-optimized mysql
database.” https://code.facebook.com/
posts/190251048047090/myrocks-aspace-and-write-optimized-mysqldatabase/.
[36] K. Ren and G. Gibson, “TABLEFS: Enhancing metadata
efficiency in the local file system,” in Proceedings of the
2013 USENIX Annual Technical Conference, USENIX
ATC’13, pp. 145–156, 2013.
[37] S. A. Weil, S. A. Brandt, E. L. Miller, D. D. E. Long,
and C. Maltzahn, “Ceph: A scalable, high-performance
distributed file system,” in Proceedings of the 7th Symposium on Operating Systems Design and Implementation,
OSDI ’06, pp. 307–320, 2006.
[38] K. Ren, Q. Zheng, S. Patil, and G. Gibson, “IndexFS:
Scaling file system metadata performance with stateless
caching and bulk insertion,” in Proceedings of the 2014
International Conference for High Performance Computing, Networking, Storage and Analysis, SC’14, pp. 237–
248, 2014.
[39] Y. Mao, E. Kohler, and R. T. Morris, “Cache craftiness
for fast multicore key-value storage,” in Proceedings of
the 7th ACM European Conference on Computer Systems, EuroSys ’12, pp. 183–196, 2012.
[40] S. Tu, W. Zheng, E. Kohler, B. Liskov, and S. Madden,
“Speedy transactions in multicore in-memory databases,”
in Proceedings of the Twenty-Fourth ACM Symposium
on Operating Systems Principles, SOSP ’13, pp. 18–32,
2013.
[41] “Memcached.” https://memcached.org.
[42] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky,
“MICA: A holistic approach to fast in-memory key-value
storage,” in Proceedings of the 11th USENIX Symposium on Networked Systems Design and Implementation,
NSDI’14, pp. 429–444, 2014.
[43] A. Lakshman and P. Malik, “Cassandra: a decentralized structured storage system,” ACM SIGOPS Operating Systems Review, vol. 44, no. 2, pp. 35–40, 2010.
[44] J. Baker, C. Bond, J. C. Corbett, J. Furman, A. Khorlin,
J. Larson, J.-M. Leon, Y. Li, A. Lloyd, and V. Yushprakh,
“Megastore: Providing scalable, highly available storage
for interactive services,” in Proceedings of the 5th Conference on Innovative Data system Research, CIDR’11,
pp. 223–234, 2011.
[45] A. Kejriwal, A. Gopalan, A. Gupta, Z. Jia, S. Yang, and
J. Ousterhout, “SLIK: Scalable low-latency indexes for
a key-value store,” in Proceedings of the 2016 USENIX
Annual Technical Conference, USENIX ATC’16, pp. 57–
70, 2016.
[46] “Intel64 software developers manual (vol 2, ch 3.2),”
2013.
[47] S. R. Dulloor, S. Kumar, A. Keshavamurthy, P. Lantz,
D. Reddy, R. Sankaran, and J. Jackson, “System software
for persistent memory,” in Proceedings of the Ninth European Conference on Computer Systems, EuroSys ’14,
pp. 15:1–15:15, ACM, 2014.
[48] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and
M. Paleczny, “Workload analysis of a large-scale keyvalue store,” in Proceedings of the 12th ACM SIGMETRICS/PERFORMANCE joint international conference on Measurement and Modeling of Computer Systems, SIGMETRICS ’12, pp. 53–64, 2012.
[49] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne:
lightweight persistent memory,” in Proceedings of the
sixteenth international conference on Architectural support for programming languages and operating systems,
ASPLOS ’11, pp. 91–104, 2011.
[50] X. Wu and A. L. N. Reddy, “Scmfs: a file system for storage class memory,” in Proceedings of 2011 International
Conference for High Performance Computing, Networking, Storage and Analysis, SC ’11, pp. 39:1–39:11, 2011.
[51] “Intel architecture instruction set extensions programming reference.” https://software.intel.
com/sites/default/files/managed/69/
78/319433-025.pdf.
[52] J. Huang, K. Schwan, and M. K. Qureshi, “Nvramaware logging in transaction systems,” Proceedings of the
VLDB Endowment, vol. 8, no. 4, pp. 389–400, 2014.
[53] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan,
and R. Sears, “Benchmarking cloud serving systems with
ycsb,” in Proceedings of the 1st ACM Symposium on
Cloud Computing, SoCC ’10, pp. 143–154, 2010.
[54] K. A. Bailey, P. Hornyack, L. Ceze, S. D. Gribble, and
H. M. Levy, “Exploring storage class memory with key
value stores,” in Proceedings of the 1st Workshop on Interactions of NVM/FLASH with Operating Systems and
Workloads, INFLOW ’13, pp. 4:1–4:8, 2013.
[55] Y. Zhang and S. Swanson, “A study of application performance with non-volatile main memory,” in Proceedings of the 31st Symposium on Mass Storage Systems and
Technologies, MSST’15, pp. 1–10, IEEE, 2015.
[56] B. Debnath, A. Haghdoost, A. Kadav, M. G. Khatib, and
C. Ungureanu, “Revisiting hash table design for phase
change memory,” ACM SIGOPS Operating System Review, vol. 49, pp. 18–26, Jan 2016.
[57] P. Zuo and Y. Hua, “A write-friendly hashing scheme
for non-volatile memory systems,” in Proceedings of the
33st Symposium on Mass Storage Systems and Technologies, MSST’17, pp. 1–10, 2017.
[58] R. Kapoor, G. Porter, M. Tewari, G. M. Voelker, and
A. Vahdat, “Chronos: Predictable low latency for data
center applications,” in Proceedings of the Third ACM
Symposium on Cloud Computing, SoCC ’12, pp. 9:1–
9:14, 2012.
[59] J. Sewall, J. Chhugani, C. Kim, N. Satish, and P. Dubey,
“PALM: Parallel architecture-friendly latch-free modifications to b+ trees on many-core processors,” Procedings
of the VLDB Endowment, vol. 4, no. 11, pp. 795–806,
2011.
[60] E. Lee, S. Yoo, J.-E. Jang, and H. Bahn, “Shortcut-jfs:
A write efficient journaling file system for phase change
memory,” in Proceedings of the IEEE 28th Symposium
on Mass Storage Systems and Technologies, MSST’12,
pp. 1–6, 2012.
[61] J. Chen, Q. Wei, C. Chen, and L. Wu, “FSMAC: A file
system metadata accelerator with non-volatile memory,”
in Proceedings of the IEEE 29th Symposium on Mass
Storage Systems and Technologies, MSST’13, pp. 1–11,
IEEE, 2013.
[62] W.-H. Kim, J. Kim, W. Baek, B. Nam, and Y. Won,
“Nvwal: Exploiting nvram in write-ahead logging,” in
Proceedings of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS ’16, pp. 385–
398, 2016.
[63] J. Lee, K. Kim, and S. K. Cha, “Differential logging: A
commutative and associative logging scheme for highly
parallel main memory database,” in Proceedings of the
17th International Conference on Data Engineering,
ICDE’01, pp. 173–182, IEEE, 2001.
[64] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee,
D. Burger, and D. Coetzee, “Better I/O through byteaddressable, persistent memory,” in Proceedings of the
Twenty-Second ACM Symposium on Operating Systems
Principles, SOSP ’09, pp. 133–146, 2009.
