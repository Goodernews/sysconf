[1] AdamBarth,CollinJackson,CharlesReis,andGoogleChrome.2008.Thesecurity architecture of the Chromium browser. Technical Report.
[2] David M. Beazley. 1997. SWIG Users Manual: Version 1.1.
[3] Andrea Bittau, Petr Marchenko, Mark Handley, and Brad Karp. 2008. Wedge:
splitting applications into reduced-privilege compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation. 309–322.
[4] Don Box. 1997. Essential COM. Addison-Wesley Professional.
[5] David Brumley and Dawn Song. 2004. Privtrans: Automatically Partitioning
Programs for Privilege Separation. In 13th Usenix Security Symposium. 57–72.
[6] Nathan Burow, Derrick McKee, Scott A. Carr, and Mathias Payer. 2017. CUP: Comprehensive User-Space Protection for C/C++. (2017). https://arxiv.org/abs/
1704.05004v1.
[7] StephenChong,JedLiu,AndrewMyers,XinQi,K.Vikram,LantianZheng,and
Xin Zheng. 2007. Secure Web Applications via Automatic Partitioning. In ACM
SIGOPS Symposium on Operating Systems Principles (SOSP). 31–44.
[8] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. 2007. Se- cure virtual architecture: a safe execution environment for commodity operating
systems. SIGOPS Oper. Syst. Rev. 41 (Oct. 2007), 351–366. Issue 6.
[9] DinakarDhurjatiandVikramS.Adve.2006.Backwards-compatiblearraybounds
checking for C with very low overhead. In ICSE. 162–171.
[10] Petros Efstathopoulos, Maxwell Krohn, Steve Vandebogart, Cliff Frey, David
Ziegler, Eddie Kohler, David Mazières, M. Frans Kaashoek, and Robert Morris. 2005. Labels and event processes in the Asbestos operating system. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP). 17–30.
[11] Jeanne Ferrante, Karl J. Ottenstein, and Joe D. Warren. 1987. The Program De- pendence Graph and its Use in Optimization. ACM Transactions on Programming
Languages and Systems 9, 3 (July 1987), 319–349.
[12] Google Inc. GRPC: A high performance, open-source universal RPC framework.
Google Inc. http://www.grpc.io.
[13] CharlesJacobsen,MukteshKhole,SarahSpall,ScottyBauer,andAntonBurtsev.
2016. Lightweight Capability Domains: Towards Decomposing the Linux Kernel.
SIGOPS Oper. Syst. Rev. 49, 2 (Jan. 2016), 44–50.
[14] Gregory J.Duck and Roland H.C. Yap. 2016. Heap Bounds Protection with Low
Fat Pointers. In CC.
[15] Gregory J.Duck, Roland H. C. Yap, and Lorenzo Cavallaro. 2017. Stack Bounds
Protection with Low Fat Pointers. In NDSS.
[16] Douglas Kilpatrick. 2003. Privman: A library for partitioning applications. In
USENIX Annual Technical Conference, FREENIX track. 273–284.
[17] MaxwellKrohn,AlexanderYip,MicahBrodsky,NatanCliffer,M.FransKaashoek, Eddie Kohler, and Robert Morris. 2007. Information flow control for standard OS abstractions. In ACM SIGOPS Symposium on Operating Systems Principles (SOSP).
321–334.
[18] C. Lattner, A. Lanharth, and V. Adve. 2007. Making context-sensitive points-to
analysis with heap cloning practical for the real world. In ACM Conference on
Programming Language Design and Implementation (PLDI). 278–289.
[19] D.LiangandM.J.Harrold.1998.Slicingobjectsusingsystemdependencegraphs.
In ICSM. 358–367.
[20] Joshua Lind, Christian Priebe, Divya Muthukumaran, Dan O’Keeffe, Pierre-Louis
Aublin, Florian Kelbert, Tobias Reiher, David Goltzsche, David M. Eyers, Rüdiger Kapitza, Christof Fetzer, and Peter R. Pietzuch. 2017. Glamdring: Automatic Application Partitioning for Intel SGX. In USENIX Annual Technical Conference (ATC). 285–298.
[21] YutaoLiu,TianyuZhou,KexinChen,HaiboChen,andYubinXia.2015.Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation. In 22nd ACM Conference on Computer and Communications Security (CCS). 1607– 1619.
[22] AndreaMambretti,KaanOnarlioglu,CollinMulliner,WilliamRobertson,Engin Kirda, Federico Maggi, and Stefano Zanero. 2016. Trellis: Privilege Separation for Multi-user Applications Made Easy. In International Symposium on Research in Attacks, Intrusions and Defenses. 437–456.
[23] Andrew Myers and Barbara Liskov. 2000. Protecting privacy using the decentral- ized label model. ACM Transactions on Software Engineering Methodology 9 (Oct. 2000), 410–442. Issue 4.
[24] SantoshNagarakatte,JianzhouZhao,MiloM.K.Martin,andSteveZdancewic. 2009. SoftBound: highly compatible and complete spatial memory safety for C. In PLDI. 245–258.
[25] George Necula, Scott McPeak, and Westley Weimer. 2002. CCured: type-safe retrofitting of legacy code. In 29th ACM Symposium on Principles of Programming Languages (POPL). 128–139.
[26] BenNiuandGangTan.2014.ModularControlFlowIntegrity.InACMConference on Programming Language Design and Implementation (PLDI). 577–587.
[27] Oracle. Introduction to TI-RPC. Oracle. https://docs.oracle.com/cd/E18752_01/ html/816- 1435/rpcintro- 46812.html.
[28] Niels Provos, Markus Friedl, and Peter Honeyman. 2003. Preventing privilege escalation. In 12th Usenix Security Symposium. 231–242.
[29] Charles Reis and Steven D. Gribble. 2009. Isolating web programs in modern browser architectures. In EuroSys. 219–232.
[30] KonstantinRubinov,LuciaRosculete,TulikaMitra,andAbhikRoychoudhury. 2016. Automated partitioning of Android applications for trusted execution environments. In International Conference on Software engineering (ICSE). 923– 934.
[31] Robert Watson, Jonathan Anderson, Ben Laurie, and Kris Kennaway. 2010. Cap- sicum: Practical Capabilities for UNIX. In 19th Usenix Security Symposium. 29–46.
[32] Yang Liu Yongzheng Wu, Jun Sun and Jin Song Dong. 2013. Automatically parti- tion software into least privilege components using dynamic data dependency analysis. In ASE. 323–333.
[33] SteveZdancewic,LantianZheng,NathanielNystrom,andAndrewMyers.2002. Secure program partitioning. ACM Transactions on Compututer Systems (TOCS) 20, 3 (2002), 283–328.
[34] NickolaiZeldovich,SilasBoyd-Wickizer,EddieKohler,andDavidMazières.2006. Making Information Flow Explicit in HiStar. In USENIX Symposium on Operating Systems Design and Implementation (OSDI). 263–278.
[35] Lantian Zheng, Stephen Chong, Andrew Myers, and Steve Zdancewic. 2003. Using Replication and Partitioning to Build Secure Distributed Systems. In IEEE Symposium on Security and Privacy (S&P). 236–250.
