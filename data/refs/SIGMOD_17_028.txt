
[1] I. Absalyamov et al. Fpga-accelerated group-by

aggregation using synchronizing caches. In DaMoN,
page 11, 2016.

[2] A. Appleby. https://github.com/aappleby /smhasher.
January 2016.

[3] C. Balkesen, G. Alonso, J. Teubner, and M. T. Ozsu.
Multi-core, main-memory joins: Sort vs. hash
revisited. VLDB, 7(1):85-96, 2013.

[4] C. Balkesen, J. Teubner, G. Alonso, and M. T. Ozsu.
Main-memory hash joins on multi-core cpus: Tuning
to the underlying hardware. In ICDE, pages 362-373,
2013.

[5] R. Barber et al. Memory-efficient hash joins. VLDB,
8(4):353-364, 2014.

[6] C. Barthels, S. Loesing, G. Alonso, and D. Kossmann.
Rack-scale in-memory join processing using rdma. In
Proceedings of the 2015 ACM SIGMOD International
Conference on Management of Data, pages 1463-1475.
ACM, 2015.

[7] C. Barthels, I. Miiller, T. Schneider, G. Alonso, and
T. Hoefler. Distributed join algorithms on thousands
of cores. Proceedings of the VLDB Endowment, 10(5),
2017.

[8] S. Blanas, Y. Li, and J. M. Patel. Design and
evaluation of main memory hash join algorithms for
multi-core cpus. In SIGMOD, pages 37-48, 2011.

[9] J. Casper and K. Olukotun. Hardware acceleration of
database operations. In FPGA, pages 151-160, 2014.

[10] R. Chen and V. K. Prasanna. Accelerating Equi-Join
on a CPU-FPGA Heterogeneous Platform. FCCM,
2016.

[11] R. J. Halstead, I. Absalyamov, W. A. Najjar, and
V. J. Tsotras. FPGA-based Multithreading for
In-Memory Hash Joins. In CIDR, 2015.

[12] R. J. Halstead, B. Sukhwani, H. Min, M. Thoennes,
P. Dube, S. Asaad, and B. Iyer. Accelerating join
operation for relational databases with FPGAs. In
FCCM, pages 17-20, 2013.

[13] J. He, S. Zhang, and B. He. In-cache query
co-processing on coupled cpu-gpu architectures.
VLDB, 8(4):329-340, 2014.

[14] Z. Istvan, D. Sidler, and G. Alonso. Runtime
parameterizable regular expression operators for
databases. 2016.

[15] Z. Istvan, L. Woods, and G. Alonso. Histograms as a
side effect of data movement for big data. In
SIGMOD, pages 1567-1578, 2014.

[16] S. Jha, B. He, M. Lu, X. Cheng, and H. P. Huynh.
Improving main memory hash joins on intel xeon phi
processors: An experimental approach. VLDB,
8(6):642-653, 2015.

[17] T. Kaldewey, G. Lohman, R. Mueller, and P. Volk.
Gpu join processing revisited. In DaMoN, pages
55-62, 2012.

[18] K. Kara and G. Alonso. Fast and robust hashing for
database operators. In FPL, pages 1-4, 2016.

[19] C. Kim et al. Sort vs. hash revisited: fast join
implementation on modern multi-core cpus. VEDB,
2(2):1378-1389, 2009.

[20] H. Lang, V. Leis, M.-C. Albutiu, T. Neumann, and
A. Kemper. Massively parallel numa-aware hash joins.
In In Memory Data Management and Analysis, pages
3-14. 2015.

[21] S. Manegold, P. Boncz, and M. Kersten. Optimizing
main-memory join on modern hardware. TKDE,
14(4):709-730, 2002.

[22] N. Mirzadeh, O. Kocberber, B. Falsafi, and B. Grot.
Sort vs. hash join revisited for near-memory
execution. In ASBD, 2015.

[23] R. Mueller, J. Teubner, and G. Alonso. Glacier: a
query-to-hardware compiler. In SIGMOD, pages
1159-1162, 2010.

[24] N. Oliver et al. A reconfigurable computing system
based on a cache-coherent fabric. In ReConFig, pages
80-85, 2011.

[25] H. Pirk, S. Manegold, and M. Kersten. Waste not...
efficient co-processing of relational data. In ICDE,
pages 508-519, 2014.

[26] O. Polychroniou, A. Raghavan, and K. A. Ross.
Rethinking SIMD vectorization for in-memory
databases. In SIGMOD, pages 1493-1508, 2015.

[27] O. Polychroniou and K. A. Ross. A comprehensive
study of main-memory partitioning and its application
to large-scale comparison- and radix-sort. In
SIGMOD, pages 755-766, 2014.

[28] A. Putnam et al. A reconfigurable fabric for
accelerating large-scale datacenter services. In [SCA,
pages 13-24, 2014.

[29] S. Richter, V. Alvarez, and J. Dittrich. A
seven-dimensional analysis of hashing methods and its
implications on query processing. VLDB, 9(3):96-107,
2015.

[30] N. Satish, C. Kim, J. Chhugani, A. D. Nguyen, V. W.
Lee, D. Kim, and P. Dubey. Fast sort on cpus and
gpus: a case for bandwidth oblivious simd sort. In
SIGMOD, pages 351-362, 2010.

[31] S. Schuh, X. Chen, and J. Dittrich. An Experimental
Comparison of Thirteen Relational Equi-Joins in Main
Memory. In SIGMOD, 2016.

[32] F. M. Schuhknecht, P. Khanchandani, and J. Dittrich.
On the surprising difficulty of simple things: the case
of radix partitioning. VLDB, 8(9):934-937, 2015.

[33] D. Sidler, Z. Istvan, M. Owaida, and G. Alonso.
Accelerating pattern matching queries in hybrid
cpu-fpga architectures.

[34] J. Stuecheli, B. Blaner, C. Johns, and M. Siegel. Capi:
A coherent accelerator processor interface. IBM
Journal of Research and Development, 59{1):7-1, 2015.

[35] B. Sukhwani, H. Min, M. Thoennes, P. Dube, B. Iyer,
B. Brezzo, D. Dillenberger, and S$. Asaad. Database
analytics acceleration using fpgas. In PACT, pages
411-420. ACM, 2012.

[36] T. Ueda, M. Ito, and M. Ohara. A Dynamically
Reconfigurable Equi-Joiner on FPGA. IBM Tehnical
Report RT0969, 2015.

[37] Z. Wang, B. He, and W. Zhang. A study of data
partitioning on OpenCL-based FPGAs. In FPL, pages
1-8, 2015.

[38] J. Wassenberg and P. Sanders. Engineering a
multi-core radix sort. In European Conference on
Parallel Processing, pages 160-169, 2011.

[39] S. Werner, S. Groppe, V. Linnemann, and T. Pionteck. Hardware-accelerated join processing in [41] L. Wu, R. J. Barker, M. A. Kim, and K. A. Ross.
large Semantic Web databases with FPGAs. In HPCS, Navigating big data with high-throughput,
pages 131-138, 2013. energy-efficient data partitioning. In SIGARCH,

[40] L. Woods, G. Alonso, and J. Teubner. Parallel volume 41, pages 249-260, 2013.
computation of skyline queries. In FCCM, pages 1-8,
2013.

[41] L. Wu, R. J. Barker, M. A. Kim, and K. A. Ross. Navigating big data with high-throughput, energy-efficient data partitioning. In SIGARCH, volume 41, pages 249â€“260, 2013.
