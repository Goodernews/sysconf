[1] C. Binnig et al. SQLScript: Efficiently Analyzing Big
Enterprise Data in SAP HANA. In BTW, 2013.

[2] C. Binnig et al. Sqlscript: Efficiently analyzing big
enterprise data in SAP HANA. In BTW, 2013.

[3] N. Bruno et al. An online approach to physical design
tuning. In ICDE, 2007.

[4] G. Candea et al. A Scalable, Predictable Join
Operator for Highly Concurrent Data Warehouses.
PVLDB, 2009.

[5] C. Chen et al. The Implementation and Performance
Evaluation of the ADMS Query Optimizer:
Integrating Query Result Caching and Matching. In
EDBT, 1994.

[6] A. Crotty et al. Tupleware: ”Big” Data, Big Analytics,
Small Clusters. In CIDR, 2015.

[7| 8. Dar et al. Semantic Data Caching and
Replacement. In VEDB, 1996.

[8] D. DeHaan et al. Optimal top-down join enumeration.
In ACM SIGMOD, 2007.

[9] K. Gao et al. Simultaneous Pipelining in QPipe:
Exploiting Work Sharing Opportunities Across
Queries. In ICDE, 2006.

[10] G. Giannikis et al. SharedDB: Killing One Thousand

Queries with One Stone. PVEDB, 2012.

[11] G. Giannikis et al. Shared Workload Optimization.

PVLDB, 2014.

[12] J. Goldstein et al. Optimizing Queries Using

Materialized Views: A practical, scalable solution. In

ACM SIGMOD, 2001.

[13] P. Hanrahan. Analytic database technologies for a new

kind of user: the data enthusiast. In Proc. of

SIGMOD, 2012.

[14] Harizopoulos et al. QPipe: A Simultaneously

Pipelined Relational Query Engine. In STGMOD, 2005.

[15] S. Idreos et al. Merging what’s cracked, cracking

what’s merged: Adaptive indexing in main-memory

column-stores. PVEDB, 2011.

[16] M. Ivanova et al. An architecture for recycling

intermediates in a column-store. In ACM SIGMOD,

2009.

[17] A. Kemper et al. HyPer: A hybrid OLTP&OLAP

main memory database system based on virtual

memory snapshots. In ICDE, 2011.

[18] C. Lei et al. Redoop: Supporting Recurring Queries in

Hadoop. In EDBT, 2014.

[19] V. Leis et al. How good are query optimizers, really?

PVLDB, 2015.

[20] F. Liu et al. Forecasting the cost of processing

multi-join queries via hashing for main-memory

databases. In SoCC, 2015.

[21] S. Manegold et al. Generic database cost models for

hierarchical memory systems. In VEDB, 2002.

[22] F. Nagel et al. Recycling in pipelined query

evaluation. In ICDE, 2013.

[23] T. Neumann. Efficiently Compiling Efficient Query

Plans for Modern Hardware. In VEDB, 2011.

[24] O. Polychroniou et al. A comprehensive study of
main-memory partitioning and its application to
large-scale comparison- and radix-sort. In SIGMOD,
2014.

 

[25] L. Qiao et al. Main-memory scan sharing for
multi-core CPUs. PVEDB, 2008.

[26] K. A. Ross. Cache-conscious query processing. In
Encyclopedia of Database Systems. Springer US, 2009.

[27] T. K. Sellis. Multiple-query Optimization. ACM
TODS, 1988.

[28] M. Stonebraker. The case for partial indexes.
SIGMOD Record, 1989.

[29] K. Tan et al. Cache-on-Demand: Recycling with
Certainty. In Proceedings of the 17th International
Conference on Data Engineering, April 2-6,
Heidelberg, Germany, 2001.

[30] TIBCO Spotfire. Retrieved on July 21, 2016.
http://spotfire.tibco.com.

[31] P. Unterbrunner et al. Predictable Performance for
Unpredictable Workloads. PVEDB, 2009.

[32] G. Wang et al. Multi-query Optimization in
MapReduce Framework. In VEDB, 2013.

[33] E. Zamanian et al. Locality-aware partitioning in
parallel database systems. In STGMOD, 2015.

[34] M. Zukowski et al. Cooperative Scans: Dynamic
Bandwidth Sharing in a DBMS. In PVEDB, 2007.

