[1] “Linux kernel vulnerabilities,” http://www.cvedetails.com/product/47/
Linux-Linux-Kernel.html?vendor id=33.
[2] “Xen: Vulnerability statistics,” http://www.cvedetails.com/vendor/6276/
XEN.html.

[3] D. Abramson, “Intel virtualization technology for directed i/o,” Intel

technology journal, 2006.

[4] R. B. J. M. W. S. R. W. Ahmed M. Azab, 1 Kirk Swidowski and
P. Ning, “Skee: A lightweight secure kernel-level execution environment
for arm,” in Proceedings of the Network and Distributed System Security
Symposium, 2016.

[5] ARM, “System memory management unit (smmu),” http://www.arm.

com/products/system-ip/controllers/system-mmu.php.

[6] ——, “Versatile express juno r1 development platform,” in ARM

100122 0100 00 en, 2015.

[7] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma,
and W. Shen, “Hypervision across worlds: Real-time kernel protection
from the arm trustzone secure world,” in Proceedings of the 21st ACM
SIGSAC Conference on Computer and Communications Security, 2014.
[8] A. M. Azab, P. Ning, Z. Wang, X. Jiang, X. Zhang, and N. C. Skalsky,
“Hypersentry: enabling stealthy in-context measurement of hypervisor
integrity,” in Proceedings of the 17th ACM conference on Computer
and communications security, 2010.

[9] A. M. Azab, P. Ning, and X. Zhang, “Sice: a hardware-level strongly
isolated computing environment for x86 multi-core platforms,” in Pro-
ceedings of the 18th ACM Conference on Computer and Communica-
tions Security, 2011.

[10] V. R. Basili and B. T. Perricone, “Software errors and complexity: an

empirical investigation,” Communications of the ACM, 1984.

[11] M. Becher, M. Dornseif, and C. N. Klein, “Firewire: all your memory

are belong to us,” Proceedings of CanSecWest, 2005.
[12] J. Bickford, R. O’Hare, A. Baliga, V. Ganapathy, and L. Iftode,
“Rootkits on smart phones: attacks, implications and opportunities,”
in Proceedings of the 11th workshop on mobile computing systems &
applications, 2010.

[13] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Don-
nelly, P. Barham, and R. Black, “Fast byte-granularity software fault
isolation,” in Proceedings of the 22nd ACM SIGOPS symposium on
Operating systems principles, 2009.
[14] J. Criswell, N. Dautenhahn, and V. Adve, “Virtual ghost: Protecting
applications from hostile operating systems,” Proceedings of the 19th
International Conference on Architectural Support for Programming
Languages and Operating Systems, 2014.

[15] N. Dautenhahn, T. Kasampalis, W. Dietz, J. Criswell, and V. Adve,
“Nested kernel: An operating system architecture for intra-kernel priv-
ilege separation,” in Proceedings of the 20th International Conference
on Architectural Support for Programming Languages and Operating
Systems, 2015.

[16] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C. Necula, “Xﬁ:
Software guards for system address spaces,” in Proceedings of the 7th
symposium on Operating systems design and implementation, 2006.

[17] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff, “A sense
of self for unix processes,” in Proceedings of the 17th IEEE Symposium
on Security and Privacy, 1996.

[18] T. Garﬁnkel, M. Rosenblum et al., “A virtual machine introspection
based architecture for intrusion detection,” in Proceedings of the Net-
work and Distributed System Security Symposium, 2003.

[19] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code

integrity on the trustzone architecture,” 2014.


[20] Intel, “Trusted execution technology: Software development guide,”
2008.

[21] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis, “ret2dir:
the 23rd USENIX

[22] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu, “Flipping bits in memory without accessing them:
An experimental study of dram disturbance errors,” in Proceeding of
the 41st Annual International Symposium on Computer Architecuture,
2014.

[23] S. T. King and P. M. Chen, “Subvirt: Implementing malware with virtual
machines,” in Proceedings of the 27th IEEE Symposium on Security and
Privacy, 2006.

[24] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin,
D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish et al., “sel4:
Formal veriﬁcation of an os kernel,” in Proceedings of the 22nd ACM
SIGOPS symposium on Operating systems principles, 2009.
[25] J. Liedtke, “On micro-kernel construction,” in Proceedings of the 15th
ACM Symposium on Operating Systems Principles, 1995.

[26] Y. Mao, H. Chen, D. Zhou, X. Wang, N. Zeldovich, and M. F. Kaashoek,
“Software fault isolation with api integrity and multi-principal mod-
ules,” in Proceedings of the 23rd ACM SIGOPS Symposium on Oper-
ating Systems Principles, 2011.
[26] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for TCB minimization,” in Pro-
ceedings of the ACM European Conference in Computer Systems, 2008.
[28] S. C. Misra and V. C. Bhavsar, “Relationships between selected software
measures and latent bug-density: Guidelines for improving quality,” in
Computational Science and Its ApplicationsICCSA, 2003.

[29] T. J. Ostrand and E. J. Weyuker, “The distribution of faults in a large
industrial software system,” in ACM SIGSOFT Software Engineering
Notes, 2002.

[30] D. R. Piegdon and L. Pimenidis, “hacking in physically address-
able memory,” in Seminar of Advanced Exploitation Techniques, WS
2006/2007, 2007.

[31] D. Rosenberg, “Qsee trustzone kernel integer overﬂow,” in Black Hat

USA, 2014.

[32] T. Roth, “Next generation mobile rootkits,” in Hack In Paris, 2013.

[33] J. H. Saltzer, “Protection and the control of information sharing in
multics,” Communications of the ACM, 1974.
[34] J. H. Saltzer and M. D. Schroeder, “The protection of information in
computer systems,” Proceedings of the IEEE, 1975.


[35] F. B. Schneider, G. Morrisett, and R. Harper, “A language-based

approach to security,” in Informatics, 2001.

[36] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “Secvisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity oses,” in Pro-
ceedings of the 21st ACM SIGOPS Symposium on Operating Systems
Principles, 2007.

[37] M. I. Sharif, W. Lee, W. Cui, and A. Lanzi, “Secure in-vm monitor-
ing using hardware virtualization,” in Proceedings of the 16th ACM
conference on Computer and communications security, 2009.

[38] D. Shen, “Attacking your trusted core: Exploiting trustzone on android,”

in Black Hat USA, 2015.

[39] A. Srivastava and J. T. Gifﬁn, “Efﬁcient monitoring of untrusted kernel-
mode execution,” in Proceedings of the Network and Distributed System
Security Symposium, 2011.

[40] U. Steinberg and B. Kauer, “Nova: a microhypervisor-based secure vir-
tualization architecture,” in Proceedings of the 5th European conference
on Computer systems, 2010.

[41] G. E. Suh, D. Clarke, B. Gassend, M. Van Dijk, and S. Devadas,
“Aegis: architecture for tamper-evident and tamper-resistant process-
ing,” in Proceedings of the 17th annual international conference on
Supercomputing, 2003.

[42] M. M. Swift, B. N. Bershad, and H. M. Levy, “Improving the reliability
of commodity operating systems,” in Proceedings of the 19th ACM
Symposium on Operating Systems Principles, 2003.
[43] J. Thomas and N. Keltner, “Here be dragons,” in RECON Canada, 2014.

[44] E. Uniﬁed, “Inc. uniﬁed extensible ﬁrmware interface speciﬁcation,”

2014.

[45] X. Wang, Y. Chen, Z. Wang, Y. Qi, and Y. Zhou, “Secpod: a framework
for virtualization-based security systems,” in USENIX Annual Technical
Conference, 2015.

[46] Z. Wang and X. Jiang, “Hypersafe: A lightweight approach to provide
lifetime hypervisor control-ﬂow integrity,” in Proceedings of the 31st
IEEE Symposium on Security and Privacy, 2010.

[47] C. Wu, Z. Wang, and X. Jiang, “Taming hosted hypervisors with
(mostly) deprivileged execution.” in Proceedings of the Network and
Distributed System Security Symposium, 2013.

[48] R. Xu, H. Sa¨ıdi, and R. Anderson, “Aurasium: Practical policy enforce-
ment for android applications,” in Proceedings of the 21st USENIX
Security Symposium, 2012.

[49] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu, “From
collision to exploitation: Unleashing use-after-free vulnerabilities in
linux kernel,” in Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security, 2015.

[50] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox for
portable, untrusted x86 native code,” in Proceedings of the 30th IEEE
Symposium on Security and Privacy, 2009.

[51] F. Zhang, J. Wang, K. Sun, and A. Stavrou, “Hypercheck: A hardware-
assisted integrity monitor,” Dependable and Secure Computing, IEEE
Transactions on, 2014.
