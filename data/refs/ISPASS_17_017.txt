[1] S. Fujita, K. Nomura, H. Noguchi, S. Takeda, and K. Abe, “Novel
Nonvolatile Memory Hierarchies to Realize ”Normally-Off Mobile
Processors”,” in Proc. ASP-DAC, 2014.
[2] M. S. Haque, A. Li, A. Kumar, and Q. Wei, “Accelerating NonVolatile/Hybrid Processor Cache Design Space Exploration for Application Specific Embedded Systems,” in Proc. ASP-DAC, 2015.
[3] A. Jog, A. K. Mishra, C. Xu, Y. Xie, V. Narayanan, R. Iyer, and
C. R. Das, “Cache Revive: Architecting Volatile STT-RAM Caches for
Enhanced Performance in CMPs,” in Proc. DAC, 2012.
[4] J. Zhao, S. Li, D. H. Yoon, Y. Xie, and N. P. Jouppi, “Kiln: Closing
the Performance Gap Between Systems With and Without Persistence
Support,” in Proc. MICRO, 2013.
[5] D. Narayanan and O. Hodson, “Whole-System Persistence,” in Proc.
ASPLOS, 2012.
[6] I. H. Doh, Y. J. Kim, E. Kim, J. Choi, D. Lee, and S. H. Noh, “Towards
Greener Data Centers with Storage Class Memory,” Future Generation
Computer Systems, 2013.
[7] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee, D. Burger, and
D. Coetzee, “Better I/O Through Byte-Addressable, Persistent Memory,”
in Proc. SOSP, 2009.
[8] X. Wu and A. Reddy, “SCMFS: A File System for Storage Class
Memory,” in Proc. SC, 2011.
[9] S. R. Dulloor, S. Kumar, A. Keshavamurthy, P. Lantz, D. Reddy,
R. Sankaran, and J. Jackson, “System Software for Persistent Memory,”
in Proc. EuroSys, 2014.
[10] H. Volos, S. Nalli, S. Panneerselvam, V. Varadarajan, P. Saxena, and
M. M. Swift, “Aerie: Flexible File-System Interfaces to Storage-Class
Memory,” in Proc. EuroSys, 2014.
[11] J. Xu and S. Swanson, “NOVA: A Log-structured File System for Hybrid
Volatile/Non-volatile Main Memories,” in Proc. FAST, 2016.
[12] J. Ou, J. Shu, and Y. Lu, “A High Performance File System for NonVolatile Main Memory,” in Proc. EuroSys, 2016.
[13] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp, R. K. Gupta, R. Jhala,
and S. Swanson, “NV-Heaps: Making Persistent Objects Fast and Safe
with Next-Generation, Non-Volatile Memories,” in Proc. ASPLOS, 2011.
[14] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne: Lightweight
persistent memory,” in Proc ASPLOS, 2011.
[15] T. Hwang, J. Jung, and Y. Won, “HEAPO: Heap-Based Persistent Object
Store,” ACM Transactions on Storage (TOS), 2014.
[16] Y. Zhang, J. Yang, A. Memaripour, and S. Swanson, “Mojim: A Reliable
and Highly-Available Non-Volatile Memory System,” in Proc. ASPLOS,
2015.
[17] S. Raoux, G. W. Burr, M. J. Breitwisch, C. T. Rettner, T. C. Chen, R. M.
Shelby, M. Salinga, D. Krebs, S. H. Chen, H. L. Lung, and C. H. Lam,
“Phase-Change Random Access Memory: A Scalable Technology,” IBM
Journal of Research and Development, 2008.
[18] M. Jung, J. Shalf, and M. Kandemir, “Design of a Large-Scale StorageClass RRAM System,” in Proc. ICS, 2013.
[19] E. Kultursay, M. Kandemir, A. Sivasubramaniam, and O. a. Mutlu,
“Evaluating STT-RAM as an Energy-Efficient Main Memory Alternative,” in Proc. ISPASS, 2013.
[20] Micron
Technology,
“3D
XPoint
Technology,”
http://www.micron.com/about/innovations/3d-xpoint-technology.
[21] AnandTech, “Intel’s 140GB Optane 3D XPoint PCIe SSD Spotted
at IDF,” http://www.anandtech.com/show/10604/intels-140gb-optane3d-xpoint-pcie-ssd-spotted-at-idf.
[22] J. Handy, “Understanding the Intel/Micron 3D XPoint Memory,” in Proc.
SDC, 2015.
[23] E. J. O’Sullivan, M. J. Gajek, J. J. Nowak, S. L. Brown, M. C. Gaidis,
G. Hu, J. Z. Sun, P. L. Trouilloud, D. W. Abraham, R. P. Robertazzi
et al., “Recent Developments in ST-MRAM, Including Scaling,” 224th
ECS Meeting Abstract, 2013.
[24] J. Corbet, “Supporting filesystems in persistent memory,”
https://lwn.net/Articles/610174/.
[25] M. Wilcox, “DAX: Page cache bypass for filesystems on memory
storage,” http://lwn.net/Articles/618064/.
[26] ——, “Support ext4 on nv-dimms,” https://lwn.net/Articles/588218/.
[27] Phoronix, “Xfs will get dax support in the linux 4.2 kernel,”
https://www.phoronix.com/scan.php?page=news item&px=XFS-Linux4.2-DAX-And-More.
[28] LWN.net, “Directly mapped persistent memory page cache,”
http://lwn.net/Articles/644120/.
[29] Anna Schumaker, “vfs:Add vfs copy file range() support for pagecache
copies,” http://www.spinics.net/lists/linux-btrfs/msg47738.html.
[30] LWN.net, “copy file range(),” https://lwn.net/Articles/659523/.
[31] ——,
“VFS:In-kernel
copy
system
call,”
https://lwn.net/Articles/663746/.
[32] Kernel
Documentation,
“Ext4
Filesystem,”
https://www.kernel.org/doc/Documentation/filesystems/ext4.txt.
[33] Persistent
Memory
Wiki,
“Persistent
memory,”
https://nvdimm.wiki.kernel.org/.
[34] GitHub,
“Porting
pmfs
to
the
latest
linux
kernel,”
https://github.com/Andiry/pmfs-3.19.
[35] ——, “Nova: Non-volatile memory accelerated log-structured file system,” https://github.com/Andiry/nova.
[36] J.
Corbet,
“The
High-Resolution
Timer
API,”
https://lwn.net/Articles/167897/.
[37] E. Lee, H. Bahn, S. Yoo, and S. H. Noh, “Empirical Study of NVRAM
Storage: An Operating System’s Perspective and Implications,” in Proc.
MASCOTS, 2014.
[38] E. Lee, H. Bahn, and S. H. Noh, “Unioning of the Buffer Cache and
Journaling Layers with Non-volatile Memory,” in Proc. FAST, 2013.
[39] ——, “A Unified Buffer Cache Architecture that Subsumes Journaling
Functionality via Nonvolatile Memory,” ACM Transactions of Storage
(TOS), 2014.
[40] S. Pelley, P. M. Chen, and T. F. Wenisch, “Memory Persistency,” in
Proc. ISCA, 2014.
[41] A. Rudoff, “In a world with persistent memory,” 6th Annual NonVolatile Memories Workshop (NVMW), 2015.
[42] Sourceforge, “Filebench,” http://filebench.sourceforge.net/wiki/index.php/
Main Page.
[43] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and R. Sears,
“Benchmarking Cloud Serving Systems with YCSB,” in Proc. SoCC,
2010.
[44] GitHub, “ForestDB-Benchmark,” https://github.com/couchbaselabs/ForestDB-Benchmark.
