[1] M. AdelsonVelskii and E. M. Landis, “An algorithm for the organization
of information,” DTIC Document, Tech. Rep., 1963.
[2] M. Arbel and H. Attiya, “Concurrent Updates with RCU: Search
Tree As an Example,” in Proceedings of the 2014 ACM Symposium
on Principles of Distributed Computing, ser. PODC ’14. New
York, NY, USA: ACM, 2014, pp. 196–205. [Online]. Available:
http://doi.acm.org/10.1145/2611462.2611471
[3] M. Arbel and A. Morrison, “Predicate rcu: An rcu for scalable
concurrent updates,” in Proceedings of the 20th ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming, ser.
PPoPP 2015. New York, NY, USA: ACM, 2015, pp. 21–30. [Online].
Available: http://doi.acm.org/10.1145/2688500.2688518
[4] H. Avni and B. C. Kuszmaul, “Improving htm scaling with consistencyoblivious programming,” TRANSACT, vol. 6, p. 5, 2014.
[5] R. Bayer and E. M. McCreight, “Organization and maintenance of
large ordered indexes,” Acta Informatica, vol. 1, no. 3, pp. 173–189,
1972. [Online]. Available: http://dx.doi.org/10.1007/BF00288683
[6] N. G. Bronson, J. Casper, H. Chafi, and K. Olukotun, “A
practical concurrent binary search tree,” in Proceedings of the 15th
ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming, ser. PPoPP ’10. New York, NY, USA: ACM, 2010,
pp. 257–268. [Online]. Available: http://doi.acm.org/10.1145/1693453.
1693488
[7] T. Brown, F. Ellen, and E. Ruppert, “A General Technique for
Non-blocking Trees,” in Proceedings of the 19th ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming, ser.
PPoPP ’14. New York, NY, USA: ACM, 2014, pp. 329–342. [Online].
Available: http://doi.acm.org/10.1145/2555243.2555267
[8] B. Chatterjee, N. N. Dang, and P. Tsigas, “Efficient lock-free binary
search trees,” CoRR, vol. abs/1404.3272, 2014. [Online]. Available:
http://arxiv.org/abs/1404.3272
[9] T. Crain, V. Gramoli, and M. Raynal, “A speculation-friendly binary
search tree,” in Proceedings of the 17th ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming, ser. PPoPP ’12.
New York, NY, USA: ACM, 2012, pp. 161–170. [Online]. Available:
http://doi.acm.org/10.1145/2145816.2145837
[10] T. Crain, V. Gramoli, and M. Raynal, “A contention-friendly binary
search tree,” in Proceedings of the 19th International Conference on
Parallel Processing, ser. Euro-Par’13. Berlin, Heidelberg: SpringerVerlag, 2013, pp. 229–240. [Online]. Available: http://dx.doi.org/10.
1007/978-3-642-40047-6 25
[11] T. David, R. Guerraoui, and V. Trigonakis, “Asynchronized Concurrency:
The Secret to Scaling Concurrent Search Data Structures,” in
Proceedings of the Twentieth International Conference on Architectural
Support for Programming Languages and Operating Systems, ser.
ASPLOS ’15. New York, NY, USA: ACM, 2015, pp. 631–644.
[Online]. Available: http://doi.acm.org/10.1145/2694344.2694359
[12] D. Drachsler, M. Vechev, and E. Yahav, “Practical Concurrent Binary
Search Trees via Logical Ordering,” in Proceedings of the 19th
ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming, ser. PPoPP ’14. New York, NY, USA: ACM, 2014,
pp. 343–356. [Online]. Available: http://doi.acm.org/10.1145/2555243.
2555269
[13] F. Ellen, P. Fatourou, E. Ruppert, and F. van Breugel, “Non-blocking
Binary Search Trees,” in Proceedings of the 29th ACM SIGACT-SIGOPS
Symposium on Principles of Distributed Computing, ser. PODC ’10.
New York, NY, USA: ACM, 2010, pp. 131–140. [Online]. Available:
http://doi.acm.org/10.1145/1835698.1835736

[14] L. J. Guibas and R. Sedgewick, “A dichromatic framework for balanced
trees,” in Foundations of Computer Science, 1978., 19th Annual Symposium on, Oct 1978, pp. 8–21.
[15] M. H. Halstead, Elements of Software Science (Operating and Programming Systems Series). New York, NY, USA: Elsevier Science Inc.,
1977.
[16] M. Herlihy and J. E. B. Moss, “Transactional memory: Architectural
support for lock-free data structures,” in Proceedings of the 20th Annual
International Symposium on Computer Architecture, ser. ISCA ’93.
New York, NY, USA: ACM, 1993, pp. 289–300. [Online]. Available:
http://doi.acm.org/10.1145/165123.165164
[17] M. Herlihy and N. Shavit, The Art of Multiprocessor Programming. San
Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2008.
[18] M. P. Herlihy and J. M. Wing, “Linearizability: A correctness
condition for concurrent objects,” ACM Trans. Program. Lang.
Syst., vol. 12, no. 3, pp. 463–492, Jul. 1990. [Online]. Available:
http://doi.acm.org/10.1145/78969.78972
[19] P. W. Howard and J. Walpole, “Relativistic red-black trees,” Concurrency
and Computation: Practice and Experience, vol. 26, no. 16, pp. 2684–
2712, 2014. [Online]. Available: http://dx.doi.org/10.1002/cpe.3157
[20] S. V. Howley and J. Jones, “A Non-blocking Internal Binary Search
Tree,” in Proceedings of the Twenty-fourth Annual ACM Symposium
on Parallelism in Algorithms and Architectures, ser. SPAA ’12. New
York, NY, USA: ACM, 2012, pp. 161–171. [Online]. Available:
http://doi.acm.org/10.1145/2312005.2312036
[21] H. T. Kung and J. T. Robinson, “On optimistic methods for concurrency
control,” ACM Trans. Database Syst., vol. 6, no. 2, pp. 213–226, Jun.
1981. [Online]. Available: http://doi.acm.org/10.1145/319566.319567
[22] V. Leis, A. Kemper, and T. Neumann, “The adaptive radix tree: Artful
indexing for main-memory databases,” in Proceedings of the 2013 IEEE
International Conference on Data Engineering (ICDE 2013), ser. ICDE
’13. Washington, DC, USA: IEEE Computer Society, 2013, pp. 38–49.
[Online]. Available: http://dx.doi.org/10.1109/ICDE.2013.6544812
[23] A. Matveev, N. Shavit, P. Felber, and P. Marlier, “Read-log-update: A
lightweight synchronization mechanism for concurrent programming,”
in Proceedings of the 25th Symposium on Operating Systems Principles,
ser. SOSP ’15. New York, NY, USA: ACM, 2015, pp. 168–183.
[Online]. Available: http://doi.acm.org/10.1145/2815400.2815406
[24] P. E. Mckenney and J. D. Slingwine, “Read-Copy Update: Using
Execution History to Solve Concurrency Problems,” in Parallel and
Distributed Computing and Systems, Las Vegas, NV, Oct. 1998, pp.
509–518.
[25] A. Natarajan and N. Mittal, “Fast Concurrent Lock-free Binary Search
Trees,” in Proceedings of the 19th ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, ser. PPoPP ’14.
New York, NY, USA: ACM, 2014, pp. 317–328. [Online]. Available:
http://doi.acm.org/10.1145/2555243.2555256
[26] R. Sedgewick, “Left-Leaning red black trees.” [Online]. Available:
http://www.cs.princeton.edu/\∼{}rs/talks/LLRB/LLRB.pdf
[27] D. Siakavaras, K. Nikas, G. Goumas, and N. Koziris, “Massively
Concurrent Red-Black Trees with Hardware Transactional Memory,” in
2016 24th Euromicro International Conference on Parallel, Distributed,
and Network-Based Processing (PDP), Feb 2016, pp. 127–134.
[28] D. Siakavaras, K. Nikas, G. Goumas, and N. Koziris, “Performance
analysis of concurrent red-black trees on htm platforms,” TRANSACT,
2015.
[29] Z. Wang, H. Qian, J. Li, and H. Chen, “Using restricted transactional
memory to build a scalable in-memory database,” in Proceedings of
the Ninth European Conference on Computer Systems, ser. EuroSys
’14. New York, NY, USA: ACM, 2014, pp. 26:1–26:15. [Online].
