[1] Apache Giraph. http://giraph.apache.org.

[2] L. Backstrom, D. Huttenlocher, J. Kleinberg, and X. Lan.
Group formation in large social networks: Membership,
growth, and evolution. In KDD ’06, pages 44-54, 2006.

[3] P. Boldi, M. Rosa, M. Santini, and S. Vigna. Layered label
propagation: A multiresolution coordinate-free ordering for
compressing social networks. In WWW’J1, 2011.

[4] P. Boldi and S. Vigna. The WebGraph framework I:
Compression techniques. In WWW’04, pages 595-601, 2004.

[5] Y. Bu, V. Borkar, J. Jia, M. J. Carey, and T. Condie. Pregelix:
Big(ger) graph analytics on a dataflow engine. PVLDB,
8(2):161-172, 2014.

[6] R. Chen, X. Ding, P. Wang, H. Chen, B. Zang, and H. Guan.
Computation and communication efficient graph processing
with distributed immutable view. In HPDC 714, pages
215-226, 2014.

[7] R. Chen, J. Shi, Y. Chen, and H. Chen. Powerlyra:
Differentiated graph computation and partitioning on skewed
graphs. In EuroSys ’15, pages 1:1-1:15, 2015.

[8] J. Cho, H. Garcia-Molina, T. Haveliwala, W. Lam,

A. Paepcke, S. Raghavan, and G. Wesley. Stanford webbase
components and applications. Technical Report 2004-34,
Stanford InfoLab, 2004.

[9] J. Cipar, Q. Ho, J. K. Kim, S. Lee, G. R. Ganger, G. Gibson,
K. Keeton, and E. Xing. Solving the straggler problem with
bounded staleness. In HotOS’13, pages 22-22, 2013.

[10] H. Cui, J. Cipar, Q. Ho, J. K. Kim, S$. Lee, A. Kumar, J. Wei,
W. Dai, G. R. Ganger, P. B. Gibbons, G. A. Gibson, and E. P.
Xing. Exploiting bounded staleness to speed up big data
analytics. In USENIX ATC’14, pages 37-48, 2014.

[11] DIMACS. 9th dimacs implementation challenge - shortest
paths.
http://www.dis.uniroma]_.it/challenge9/download.shtml.

[12] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin.
Powergraph: Distributed graph-parallel computation on
natural graphs. In OSDI’12, pages 17-30, 2012.

[13] J. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J.
Franklin, and I. Stoica. Graphx: Graph processing in a
distributed dataflow framework. In OSDI ’14, pages
599-613, Oct. 2014.
[14] M. Han and K. Daudjee. Giraph unchained: Barrierless
asynchronous parallel execution in pregel-like graph
processing systems. PVLDB, 8(9):950-961, May 2015.

[15] X. Ju, D. Williams, H. Jamjoom, and K. G. Shin. Version
traveler: Fast and memory-efficient version switching in
graph processing systems. In USENIX ATC’ 16, pages
523-536, 2016.

[16] Z. Khayyat, K. Awara, A. Alonazi, H. Jamjoom,

D. Williams, and P. Kalnis. Mizan: A system for dynamic
load balancing in large-scale graph processing. In EuroSys
’13, pages 169-182, 2013.

[17] H. Kwak, C. Lee, H. Park, and $. Moon. What is twitter, a
social network or a news media? In WWW ’10, pages
591-600, 2010.

[18] A. Kyrola, G. Blelloch, and C. Guestrin. Graphchi:
Large-scale graph computation on just a pc. In OSDI’12,
pages 31-46, 2012.

[19] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W. Mahoney.
Community structure in large networks: Natural cluster sizes
and the absence of large well-defined clusters. Internet
Mathematics, 6(1):29-123, 2009.

[20] M. Li, D. G. Andersen, J. W. Park, A. J. Smola, A. Ahmed,
V. Josifovski, J. Long, E. J. Shekita, and B.-Y. Su. Scaling
distributed machine learning with the parameter server. In
OSDI 14, pages 583-598, 2014.

[21] Y. Low. GraphLab: A Distributed Abstraction for Large
Scale Machine Learning. PhD thesis, Carnegie Mellon
University, 2013.

[22] Y. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and
J. M. Hellerstein. Distributed graphlab: A framework for
machine learning and data mining in the cloud. PVLDB,
5(8):716-727, Apr. 2012.

[23] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert,

I. Horn, N. Leiser, and G. Czajkowski. Pregel: A system for
large-scale graph processing. In SIGMOD ’10, pages
135-146, 2010.

[24] A. Roy, L. Bindschaedler, J. Malicevic, and W. Zwaenepoel.
Chaos: Scale-out graph processing from secondary storage.
In SOSP 715, pages 410-424, 2015.

[25] A. Roy, I. Mihailovic, and W. Zwaenepoel. X-stream:
Edge-centric graph processing using streaming partitions. In
SOSP ’13, pages 472-488, 2013.

[26] S. Salihoglu, J. Shin, V. Khanna, B. Q. Truong, and
J. Widom. Graft: A debugging tool for apache giraph. In
SIGMOD ’15, pages 1403-1408, 2015.

[27] S. Salihoglu and J. Widom. Gps: A graph processing system.
In SSDBM, pages 22:1-22:12, 2013.

[28] B. Shao, H. Wang, and Y. Li. Trinity: A Distributed Graph
Engine on a Memory Cloud. In SIGMOD’13.

[29] J. Shun and G. E. Blelloch. Ligra: A lightweight graph
processing framework for shared memory. In PPoPP ’13,
pages 135-146, 2013.

[30] Y. Tian, A. Balmin, S. A. Corsten, S. Tatikonda, and
J. McPherson. From “think like a vertex” to “think like a
graph”. PVLDB, 7(3), 2013.

[31] L. G. Valiant. A bridging model for parallel computation.
Commun. ACM, 33(8):103-111, Aug. 1990.

[32] G. Wang, W. Xie, A. J. Demers, and J. Gehrke.
Asynchronous large-scale graph processing made easy. In
CIDR ’13, 2013.

[33] M. Wu, F. Yang, J. Xue, W. Xiao, Y. Miao, L. Wei, H. Lin,

Y. Dai, and L. Zhou. Gram: Scaling graph computation to the
trillions. In SoCC ’15, pages 408-421, 2015.

[34] C. Xie, R. Chen, H. Guan, B. Zang, and H. Chen. Sync or
async: Time to fuse for distributed graph-parallel
computation. In PPoPP 2015, pages 194-204, 2015.

[35] W. Xie, G. Wang, D. Bindel, A. Demers, and J. Gehrke. Fast
iterative graph computation with block updates. PVLDB,
6(14):2014-2025, Sept. 2013.

[36] D. Yan, J. Cheng, Y. Lu, and W. Ng. Blogel: A block-centric
framework for distributed computation on real-world graphs.
PVLDB, 7(14):1981-1992, Oct. 2014.

[37] D. Yan, J. Cheng, Y. Lu, and W. Ng. Effective techniques for
message reduction and load balancing in distributed graph
computation. In WWW 715, 2015.

[38] D. Yan, J. Cheng, M. T. Ozsu, FE. Yang, Y. Lu, J.C. S. Lui,
Q. Zhang, and W. Ng. A general-purpose query-centric
framework for querying big graphs. PVLDB, 9(7):564-575,
Mar. 2016.

[39] P. Yuan, W. Zhang, C. Xie, H. Jin, L. Liu, and K. Lee. Fast
iterative graph computation: A path centric approach. In SC
14, pages 401-412, 2014.

[40] D. Zheng, D. Mhembere, R. Burns, J. Vogelstein, C. E.
Priebe, and A. S. Szalay. Flashgraph: Processing
billion-node graphs on an array of commodity ssds. In
FAST’15, pages 45-58, 2015.
