[1] Kevin Allix, Tegawendé F. Bissyandé, Jacques Klein, and Yves Le Traon. 2016. AndroZoo: collecting millions of Android

apps for the research community. In International Conference on Mining Software Repositories (MSR). 468-471.



[2] Rajeev Alur, Pavol Cerny, P. Madhusudan, and Wonhong Nam. 2005. Synthesis of interface specifications for Java classes.

In Symposium on Principles of Programming Languages (POPL). 98-109.



[3] Steven Arzt and Eric Bodden. 2016. StubDroid: automatic inference of precise data-flow summaries for the android

framework. In International Conference on Software Engineering (ICSE). 725-735.



[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien

Octeau, and Patrick McDaniel. 2014. FlowDroid: precise context, flow, field, object-sensitive and lifecycle-aware taint

analysis for Android apps. In Programming Language Design and Implementation (PLDI). 259-269.



[5] Stephen M. Blackburn, Robin Garner, Chris Hoffmann, Asjad M. Khan, Kathryn S. McKinley, Rotem Bentzur, Amer Diwan,

Daniel Feinberg, Daniel Frampton, Samuel Z. Guyer, Martin Hirzel, Antony L. Hosking, Maria Jump, Han Bok Lee,

J. Eliot B. Moss, Aashish Phansalkar, Darko Stefanovic, Thomas VanDrunen, Daniel von Dincklage, and Ben Wiedermann.

2006. The DaCapo benchmarks: Java benchmarking development and analysis. In Object-Oriented Programming Systems,

Languages and Applications (OOPSLA). 169-190.



[6] Sam Blackshear, Bor-Yuh Evan Chang, and Manu Sridharan. 2015. Selective control-flow abstraction via jumping. In

Object-Oriented Programming Systems, Languages and Applications (OOPSLA). 163-182.



[7] Eric Bodden, Reehan Shaikh, and Laurie J. Hendren. 2008. Relational aspects as tracematches. In International Conference on

Aspect-Oriented Software Development (AOSD). 84-95.



[8] Eric Bodden, Tarsis Tolédo, Marcio Ribeiro, Claus Brabrand, Paulo Borba, and Mira Mezini. 2013. spLLET, statically

analyzing software product lines in minutes instead of years. In Programming Language Design and Implementation

(PLDI), 355-364.



[9] Cristiano Calcagno, Dino Distefano, Peter W. O’Hearn, and Hongseok Yang. 2009. Compositional shape analysis by means

of bi-abduction. In Symposium on Principles of Programming Languages (POPL). 289-300.



[10] Nurit Dor, Michael Rodeh, and Shmuel Sagiv. 2000. Checking Cleanness in Linked Lists. In International Symposium on

Static Analysis (SAS). 115-134.



[11] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An empirical study of cryptographic

misuse in android applications. In 2013 ACM SIGSAC Conference on Computer and Communications Security, CCS’13,

Berlin, Germany, November 4-8, 2013. 73-84.



[12] Pietro Ferrara. 2014. Generic Combination of Heap and Value Analyses in Abstract Interpretation. In Verification, Model

Checking, and Abstract Interpretation (VMCAI). 302-321.



[13] Stephen J. Fink, Eran Yahav, Nurit Dor, G. Ramalingam, and Emmanuel Geay. 2006. Effective typestate verification in the

presence of aliasing. In International Symposium on Software Testing and Analysis (ISSTA). 133-144.



[14] Stephen J. Fink, Eran Yahav, Nurit Dor, G. Ramalingam, and Emmanuel Geay. 2008. Effective typestate verification in the

presence of aliasing. ACM Transactions on Software Engineering and Methodology (TOSEM) 17, 2 (2008).



[15] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 99. Publication date: October 2017.

IDE: Efficient and Precise Alias-Aware Dataflow Analysis 99:27



[16] Manuel Geffken, Hannes Saffrich, and Peter Thiemann. 2014. Precise Interprocedural Side-Effect Analysis. In International

Colloquium on Theoretical Aspects of Computing (ICTAC). 188-205.



[17] Rakesh Ghiya and Laurie J. Hendren. 1996. Is it a Tree, a DAG, or a Cyclic Graph? A Shape Analysis for Heap-Directed

Pointers in C. In Symposium on Principles of Programming Languages (POPL). 1-15.



[18] Alexey Gotsman, Josh Berdine, and Byron Cook. 2006. Interprocedural Shape Analysis with Separated Heap Abstractions.

In International Symposium on Static Analysis (SAS). 240—260.



[19] Bertrand Jeannet, Alexey Loginov, Thomas W. Reps, and Shmuel Sagiv. 2004. A Relational Approach to Interprocedural

Shape Analysis. In International Symposium on Static Analysis (SAS). 246-264.



[20] Vini Kanvar and Uday P. Khedker. 2016. Heap Abstractions for Static Analysis. ACM Computing Surveys (CSUR) 49, 2 (2016),

29:1-29:47,



[21] Uday P. Khedker, Amitabha Sanyal, and Amey Karkare. 2007. Heap reference analysis using access graphs. ACM Transactions

on Programming Languages and Systems (TOPLAS) 30, 1 (2007).



[22] Ondrej Lhotak and Kwok-Chiang Andrew Chung. 2011. Points-to analysis with efficient strong updates. In Symposium on

Principles of Programming Languages (POPL). 3-16.



[23] Magnus Madsen and Anders Moller. 2014. Sparse Dataflow Analysis with Pointers and Reachability. In International

Symposium on Static Analysis (SAS). 201-218.



[24] Sarah Nadi, Stefan Kriiger, Mira Mezini, and Eric Bodden. 2016. Jumping through hoops: why do Java developers struggle

with cryptography APIs?. In Proceedings of the 38th International Conference on Software Engineering, ICSE 2016, Austin,

TX, USA, May 14-22, 2016. 935-946.



[25] Nomair A. Naeem and Ondrej Lhotak. 2008. Typestate-like analysis of multiple interacting objects. In Object-Oriented

Programming Systems, Languages and Applications (OOPSLA). 347-366.



[26] Nomair A. Naeem and Ondrej Lhotak. 2011. Faster Alias Set Analysis Using Summaries. In Compiler Construction (CC).

82-103.



[27] Nomair A. Naeem, Ondrej Lhotak, and Jonathan Rodriguez. 2010. Practical Extensions to the IFDS Algorithm. In Compiler

Construction (CC). 124-144.



[28] Rohan Padhye and Uday P. Khedker. 2013. Interprocedural data flow analysis in Soot using value contexts. In International

Workshop on State Of the Art in Java Program analysis, (SOAP). 31-36.



[29] Marianna Rapoport, Ondrej Lhotak, and Frank Tip. 2015. Precise Data Flow Analysis in the Presence of Correlated Method

Calls. In International Symposium on Static Analysis (SAS). 54-71.



[30] Thomas W. Reps, Susan Horwitz, and Shmuel Sagiv. 1995. Precise Interprocedural Dataflow Analysis via Graph Reachability.

In Symposium on Principles of Programming Languages (POPL). 49-61.



[31] John C. Reynolds. 2002. Separation Logic: A Logic for Shared Mutable Data Structures. In Symposium on Logic in Computer

Science (LICS). 55-74.



[32] Shmuel Sagiv, Thomas W. Reps, and Susan Horwitz. 1996. Precise Interprocedural Dataflow Analysis with Applications to

Constant Propagation. Theoretical Computer Science 167, 1&2 (1996), 131-170.



[33] Shmuel Sagiv, Thomas W. Reps, and Reinhard Wilhelm. 1999. Parametric Shape Analysis via 3-Valued Logic. In Symposium

on Principles of Programming Languages (POPL). 105-118.



[34] Johannes Spath, Lisa Nguyen Quang Do, Karim Ali, and Eric Bodden. 2016. Boomerang: Demand-Driven Flow- and ContextSensitive Pointer Analysis for Java. In European Conference on Object-Oriented Programming (ECOOP). 22:1-22:26.



[35] Manu Sridharan, Satish Chandra, Julian Dolby, Stephen J. Fink, and Eran Yahav. 2013. Alias Analysis for Object-Oriented

Programs. In Aliasing in Object-Oriented Programming. Types, Analysis and Verification. 196-232.



[36] Manu Sridharan, Denis Gopan, Lexin Shan, and Rastislav Bodik. 2005. Demand-driven points-to analysis for Java. In

Object-Oriented Programming Systems, Languages and Applications (OOPSLA). 59-76.



[37] Omer Tripp, Marco Pistoia, Patrick Cousot, Radhia Cousot, and Salvatore Guarnieri. 2013. Andromeda: Accurate and

Scalable Security Analysis of Web Applications. In International Conference on Fundamental Approaches to Software

Engineering (FASE). 210-225.



[38] Octavian Udrea and Cristian Lumezanu. 2006. Rule-Based Static Analysis of Network Protocol Implementations. In USENIX

Security Symposium. 193-208.



[39] John Whaley, Michael C. Martin, and Monica S. Lam. 2002. Automatic extraction of object-oriented component interfaces.

In International Symposium on Software Testing and Analysis (ISSTA). 218-228.



[40] Eran Yahav and G. Ramalingam. 2004. Verifying safety properties using separation and heterogeneous abstractions. In

Programming Language Design and Implementation (PLDI). 25-34.



[41] Dacong Yan, Guoqing (Harry) Xu, and Atanas Rountev. 2011. Demand-driven context-sensitive alias analysis for Java. In

International Symposium on Software Testing and Analysis (ISSTA). 155-165.



[42] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 99, Publication date: October 2017.
