[1] Google Play has hundreds of Android apps that contain malware. http://
www.trustedreviews.com/news/malware-apps-downloaded-google-play,
2016.
[2] Y. Aafer, W. Du, and H. Yin. DroidAPIMiner: Mining API-Level
Features for Robust Malware Detection in Android. In SecureComm,
2013.
[3] S. Anand, M. Naik, M. J. Harrold, and H. Yang. Automated Concolic
Testing of Smartphone Apps. In ACM Symposium on the Foundations
of Software Engineering (FSE), 2012.
[4] P. Andriotis, M. A. Sasse, and G. Stringhini. Permissions snapshots:
Assessing users’ adaptation to the android runtime permission model. In
IEEE Workshop on Information Forensics and Security (WIFS), 2016.
[5] D. Arp, M. Spreitzenbarth, M. Hubner, H. Gascon, and K. Rieck.
DREBIN: Effective and Explainable Detection of Android Malware
in Your Pocket. In Annual Symposium on Network and Distributed
System Security (NDSS), 2014.
[6] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein, Y. Le Traon,
D. Octeau, and P. McDaniel. FlowDroid: Precise Context, Flow, Field,
Object-sensitive and Lifecycle-aware Taint Analysis for Android Apps.
In ACM SIGPLAN Conference on Programming Language Design and
Implementation, 2014.
[7] S. Bernard, S. Adam, and L. Heutte. Using random forests for
handwritten digit recognition. In Ninth International Conference on
Document Analysis and Recognition (ICDAR), 2007.
[8] R. Bhoraskar, S. Han, J. Jeon, T. Azim, S. Chen, J. Jung, S. Nath,
R. Wang, and D. Wetherall. Brahmastra: Driving Apps to Test the
Security of Third-Party Components. In USENIX Security Symposium,
2014.
[9] L. Breiman. Random forests. Machine Learning, 45, 2001.
[10] I. Burguera, U. Zurutuza, and S. Nadjm-Tehrani. Crowdroid: Behaviorbased Malware Detection System for Android. In ACM Workshop on
Security and Privacy in Smartphones and Mobile Devices (SPSM), 2011.
[11] G. Canfora, E. Medvet, F. Mercaldo, and C. A. Visaggio. Detecting
Android Malware Using Sequences of System Calls. In Workshop on
Software Development Lifecycle for Mobile, 2015.
[12] G. Canfora, E. Medvet, F. Mercaldo, and C. A. Visaggio. Acquiring
and Analyzing App Metrics for Effective Mobile Malware Detection.
In IWSPA, 2016.
[13] G. Canfora, F. Mercaldo, and C. A. Visaggio. An HMM and Structural
Entropy based Detector for Android malware: An Empirical Study.
Computers & Security, 61, 2016.
[14] S. Chakradeo, B. Reaves, P. Traynor, and W. Enck. MAST: Triage for
Market-scale Mobile Malware Analysis. In ACM Conference on Security
and Privacy in Wireless and Mobile Networks (WiSec), 2013.
[15] S. Chen, M. Xue, Z. Tang, L. Xu, and H. Zhu. StormDroid: A
Streaminglized Machine Learning-Based System for Detecting Android
Malware. In AsiaCCS, 2016.
[16] Y. Chen, M. Ghorbanzadeh, K. Ma, C. Clancy, and R. McGwier. A
hidden Markov model detection of malicious Android applications at
runtime. In Wireless and Optical Communication Conference (WOCC),
2014.
[17] J. Clay. Continued Rise in Mobile Threats for 2016. http://blog.
trendmicro.com/continued-rise-in-mobile-threats-for-2016/, 2016.
[18] S. Dai, A. Tongaonkar, X. Wang, A. Nucci, and D. Song. NetworkProfiler:
Towards automatic fingerprinting of Android apps. In IEEE INFOCOM,
2013.
[19] W. Enck, P. Gilbert, S. Han, V. Tendulkar, B.-G. Chun, L. P. Cox,
J. Jung, P. McDaniel, and A. N. Sheth. TaintDroid: An InformationFlow Tracking System for Realtime Privacy Monitoring on Smartphones.
ACM Trans. Comput. Syst., 32(2), 2014.
[20] W. Enck, M. Ongtang, and P. McDaniel. On Lightweight Mobile
Phone Application Certification. In ACM Conference on Computer and
Communications Security (CCS), 2009.
[21] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
Permissions Demystified. In ACM Conference on Computer and
Communications Security (CCS), 2011.
[22] E. Fix and J. Hodges. Discriminatory analysis, non-parametric discrimination. USAF School of Aviation Medicine, 31, 1951.

[23] J. Garcia, M. Hammad, B. Pedrood, A. Bagheri-Khaligh, and S. Malek.
Obfuscation-resilient, efficient, and accurate detection and family
identification of android malware. Department of Computer Science,
George Mason University, Tech. Rep, 2015.
[24] H. Gascon, F. Yamaguchi, D. Arp, and K. Rieck. Structural Detection
of Android Malware Using Embedded Call Graphs. In ACM Workshop
on Artificial Intelligence and Security (AISec), 2013.
[25] X. Ge, K. Taneja, T. Xie, and N. Tillmann. DyTa: Dynamic Symbolic
Execution Guided with Static Verification Results. In International
Conference on Software Engineering (ICSE), 2011.
[26] P. Godefroid, N. Klarlund, and K. Sen. DART: Directed Automated
Random Testing. SIGPLAN Not., 40(6), 2005.
[27] M. I. Gordon, D. Kim, J. H. Perkins, L. Gilham, N. Nguyen, and
M. C. Rinard. Information Flow Analysis of Android Applications in
DroidSafe. In Annual Symposium on Network and Distributed System
Security (NDSS), 2015.
[28] M. Grace, Y. Zhou, Q. Zhang, S. Zou, and X. Jiang. RiskRanker: Scalable
and Accurate Zero-day Android Malware Detection. In International
Conference on Mobile Systems, Applications, and Services (MobiSys),
2012.
[29] M. Hearst, S. Dumais, E. Osman, J. Platt, and B. Scholkopf. Support
Vector Machines. IEEE Intelligent Systems and their applications, 13,
1998.
[30] S. A. Hofmeyr, S. Forrest, and A. Somayaji. Intrusion detection using
sequences of system calls. Journal of Computer Security, 6(3), 1998.
[31] Y. Z. X. Jiang. Detecting passive content leaks and pollution in android
applications. In Annual Symposium on Network and Distributed System
Security (NDSS), 2013.
[32] I. Jolliffe. Principal Component Analysis. John Wiley & Sons, Ltd,
2002.
[33] M. J. Kearns. The computational complexity of machine learning. MIT
press, 1990.
[34] J. Kim, Y. Yoon, K. Yi, J. Shin, and S. Center. ScanDal: Static analyzer
for detecting privacy leaks in android applications. In MoST, 2012.
[35] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android Taint
Flow Analysis for App Sets. In SOAP, 2014.
[36] C. Kolbitsch, P. M. Comparetti, C. Kruegel, E. Kirda, X.-y. Zhou, and
X. Wang. Effective and Efficient Malware Detection at the End Host.
In USENIX security symposium, 2009.
[37] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. CHEX: Statically Vetting
Android Apps for Component Hijacking Vulnerabilities. In ACM
Conference on Computer and Communications Security (CCS), 2012.
[38] A. Machiry, R. Tahiliani, and M. Naik. Dynodroid: An Input Generation
System for Android Apps. In Joint Meeting on Foundations of Software
Engineering (ESEC/FSE), 2013.
[39] J. R. Norris. Markov chains. Cambridge University Press, 1998.
[40] J. Oberheide and C. Miller. Dissecting the Android Bouncer. In
SummerCon, 2012.
[41] D. Octeau, S. Jha, and P. McDaniel. Retargeting Android Applications
to Java Bytecode. In ACM Symposium on the Foundations of Software
Engineering (FSE), 2012.
[42] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna.
Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading
in Android Applications. In Annual Symposium on Network and
Distributed System Security (NDSS), 2014.
[43] I. Polakis, M. Diamantaris, T. Petsas, F. Maggi, and S. Ioannidis.
Powerslave: Analyzing the Energy Consumption of Mobile Antivirus
Software. In DIMVA, 2015.
[44] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos. Paranoid
Android: Versatile Protection for Smartphones. In Annual Computer
Security Applications Conference (ACSAC), 2010.
[45] V. Rastogi, Y. Chen, and X. Jiang. DroidChameleon: Evaluating Android
Anti-malware Against Transformation Attacks. In AsiaCCS, 2013.
[46] B. P. Sarma, N. Li, C. Gates, R. Potharaju, C. Nita-Rotaru, and I. Molloy.
Android Permissions: A Perspective Combining Risks and Benefits. In
ACM Symposium on Access Control Models and Technologies (SACMAT),
2012.
[47] P. Schulz. Code protection in android. Insititute of Computer Science,
Rheinische Friedrich-Wilhelms-Universitgt Bonn, Germany, 110, 2012.
[48] M. K. Shankarapani, S. Ramamoorthy, R. S. Movva, and S. Mukkamala.
Malware detection using assembly and API call sequences. Journal in
Computer Virology, 7(2), 2011.
[49] Statista. Global mobile OS market share in sales to end users from
1st quarter 2009 to 1st quarter 2016. http://www.statista.com/statistics/
266136/global-market-share-held-by-smartphone-operating-systems/,
2016.
[50] K. Tam, S. J. Khan, A. Fattori, and L. Cavallaro. CopperDroid: Automatic
Reconstruction of Android Malware Behaviors. In Annual Symposium
on Network and Distributed System Security (NDSS), 2015.
[51] The Register. Google AdSense abused to distribute Android spyware. http://www.theregister.co.uk/2016/08/15/android_trojan_abuses_
google_adsense/, 2016.
[52] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan.
Soot - a Java Bytecode Optimization Framework. In Conference of the
Centre for Advanced Studies on Collaborative Research, 1999.
[53] D. Venkatesan.
Android.Bankosy: All ears on voice
call-based
2FA.
http://www.symantec.com/connect/blogs/
androidbankosy-all-ears-voice-call-based-2fa, 2016.
[54] T. Vidas and N. Christin. Evading android runtime analysis via sandbox
detection. In AsiaCCS, 2014.
[55] N. Viennot, E. Garcia, and J. Nieh. A measurement study of google
play. 42(1), 2014.
[56] M. Y. Wong and D. Lie. IntelliDroid: A Targeted Input Generator for
the Dynamic Analysis of Android Malware. In Annual Symposium on
Network and Distributed System Security (NDSS), 2016.
[57] D. J. Wu, C. H. Mao, T. E. Wei, H. M. Lee, and K. P. Wu. DroidMat:
Android Malware Detection through Manifest and API Calls Tracing.
In Asia JCIS, 2012.
[58] M. Xia, L. Gong, Y. Lyu, Z. Qi, and X. Liu. Effective Real-Time
Android Application Auditing. In IEEE Symposium on Security and
Privacy, 2015.
[59] L. K. Yan and H. Yin. DroidScope: Seamlessly Reconstructing the OS
and Dalvik Semantic Views for Dynamic Android Malware Analysis.
In USENIX Security Symposium, 2012.
[60] C. Yang, Z. Xu, G. Gu, V. Yegneswaran, and P. Porras. Droidminer: Automated mining and characterization of fine-grained malicious behaviors
in Android applications. In ESORICS, 2014.
[61] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck. AppContext:
Differentiating Malicious and Benign Mobile App Behaviors Using
Context. In International Conference on Software Engineering (ICSE),
2015.
[62] Z. Yang, M. Yang, Y. Zhang, G. Gu, P. Ning, and X. S. Wang. AppIntent:
Analyzing Sensitive Data Transmission in Android for Privacy Leakage
Detection. In ACM Conference on Computer and Communications
Security (CCS), 2013.
[63] H. Ye, S. Cheng, L. Zhang, and F. Jiang. DroidFuzzer: Fuzzing the
Android Apps with Intent-Filter Tag. In International Conference on
Advances in Mobile Computing and Multimedia (MoMM), 2013.
[64] H. Zhang, Y. Cole, L. Ge, S. Wei, W. Yu, C. Lu, G. Chen, D. Shen,
E. Blasch, and K. D. Pham. ScanMe Mobile: A Cloud-based Android
Malware Analysis Service. SIGAPP Appl. Comput. Rev., 16(1), 2016.
[65] N. Zhang, K. Yuan, M. Naveed, X. Zhou, and X. Wang. Leave me
alone: App-level protection against runtime information gathering on
Android. In IEEE Symposium on Security and Privacy, 2015.
[66] Y. Zhou and X. Jiang. Dissecting Android Malware: Characterization
and Evolution. In IEEE Symposium on Security and Privacy, 2012.
[67] Y. Zhou, Z. Wang, W. Zhou, and X. Jiang. Hey, You, Get Off of My
Market: Detecting Malicious Apps in Official and Alternative Android
Markets. In Annual Symposium on Network and Distributed System
Security (NDSS), 2012.
