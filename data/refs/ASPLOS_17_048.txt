
[1] S. Amani, A. Hixon, Z. Chen, C. Rizkallah, P. Chubb,
L. O’Connor, J. Beeren, Y. Nagashima, J. Lim, T. Sewell,
J. Tuong, G. Keller, T. Murray, G. Klein, and G. Heiser. COGENT: Verifying High-Assurance File System Implementations. In ASPLOS’16, Atlanta, GA, Apr. 2016.

[2] Android Open Source Project.
https://source.android.com/index.html.

[3] Chromium: An Open-Source Browser Project.
https: //www.chromium.org/Home.

[4] clang: a C language family frontend for LLVM.
http://clang.11lvm.org/.

[5] D. Engler and M. Musuvathi. Static Analysis Versus Software
Model Checking for Bug Finding. In VMCAI’04, 2004.

[6] Fast Path.
https://en.wikipedia.org/wiki/Fast_path.

[7] D. Fryer, K. Sun, R. Mahmood, T. Cheng, S. Benjamin,
A. Goel, and A. D. Brown. Recon: Verifying file system consistency at runtime. Trans. Storage, 8(4), Dec. 2012.

[8] fs: Remove i_cindex from struct inode.
https://git.kernel .org/cgit/linux/kernel/
git/torvalds/linux.git/commit/drivers?id=
9fd5746fd3d7838bf6£f£991d50f1257057d1156f.

[9] H. S. Gunawi, C. Rubio-Gonzalez, A. C. Arpaci-Dusseau,
R. H. Arpaci-Dusseau, and B. Liblit. EIO: Error Handling
is Occasionally Correct. In FAST’08, 2008.

[10] H. S. Gunawi, M. Hao, T. Leesatapornwongsa, T. Patanaanake, T. Do, J. Adityatama, K. J. Eliazar, A. Laksono, J. F
Lukman, V. Martin, and A. D. Satria. What Bugs Live in
the Cloud? A Study of 3000+ Issues in Cloud Systems. In
SOCC’ 14, Seattle, WA, Nov. 2014.

[11] C. Hawblitzel, J. Howell, J. R. Lorch, A. Narayan, B. Parno,
D. Zhang, and B. Zill. Ironclad Apps: End-to-End Security
via Automated Full-System Verification. In OSDI’14, Broomfield, CO, Oct. 2014.

[12] J. Huang, X. Zhang, and K. Schwan. Understanding Issue Correlations: A Case Study of the Hadoop System. In
SOCC’15, Kohala Coast, HI, Aug. 2015.

[13] J. Huang, M. K. Qureshi, and K. Schwan. An Evolutionary
Study of Linux Memory Management for Fun and Profit. In
USENIX ATC’ 16, Denver, CO, June 2016.

[14] A. Hunter. A Brief Introduction to the Design of UBIFS.
Technical Report.

[15] K. Kelsey, T. Bai, C. Ding, and C. Zhang. Fast Track: A
Software System for Speculative Program Optimization. In
CGO’09, Seattle, WA, Mar. 2009.

[16] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock,
P. Derrin, D. Elkaduwe, K. Engelhardt, M. Norrish, R. Kolanski, T. Sewell, H. Tuch, and S. Winwood. seL4: Formal Verification of an OS Kernel. In SOSP’09, Big Sky, Montana, Oct.
2009.

[17] A. Kogan and E. Petrank. A Methodology for Creating
Fast Wait-Free Data Structures. In PPoPP’12, New Orleans,
Louisiana, USA, Feb. 2012.

[18] L. Kuhtz. Model Checking Finite Paths and Trees. PhD thesis,
Saarland University, 2010.

[19] T. Leesatapornwongsa, M. Hao, P. Joshi, J. F Lukman, and
H. S. Gunawi. SAMC: Semantic-Aware Model Checking for
Fast Discovery of Deep Bugs in Cloud Systems. In OSDI’14,
Broomfield, CO, Oct. 2014.

[20] T. Leesatapornwongsa, J. F. Lukman, S. Lu, and H. S. Gunawi. TaxDC: A Taxonomy of Non-Deterministic Concurrency Bugs in Datacenter Distributed Systems. In ASPLOS’ 16, Atlanta, GA, Apr. 2016.

[21] D. Lie, A. Chou, D. Engler, and D. L. Dill. A Simple Method
for Extracting Models from Protocol Code. In ISCA’0/, 2001.

[22] T. A. Limoncelli and D. Hughe. LISA’11 Theme — DevOps:
New Challenges, Proven Values. USENIX; login:, 36(4), Aug.
2011.

[23] X. Liu, C. Kreitz, R. van Renesse, J. Hickey, M. Hayden,
K. Birman, and R. Constable. Building Reliable, HighPerformance Communication Systems from Components. In
SOSP’99, Kiawah Island, SC, Dec. 1999.

[24] L. Lu, A. C. Arpaci-Dusseau, R. H. Arpaci-Dusseau, and
S. Lu. A Study of Linux File System Evolution. In FAST’/3,
Feb, 2013.

[25] S. Lu, S. Park, C. Hu, X. Ma, W. Jiang, Z. Li, R. A. Popa, and
Y. Zhou. MUVI: Automatically Inferring Multi-Variable Access Correlations and Detecting Related Semantic and Concurrency Bugs. In SOSP’07, stevenson, Washington, Oct.
2007.

[26] S. Lu, S. Park, E. Seo, and Y. Zhou. Learning from Mistakes
- A Comprehensive Study on Real World Concurrency Bug
Characteristics. In ASPLOS’08, Seattle, WA, Mar. 2008.

[27] N. Markey and P. Schnoebelen. Model Checking a Path.
Technical Report, 2003.

[28] D. McNamee, J. Walpole, C. Pu, C. Cowan, C. Krasic,
A. Goel, and P. Wagle. Specialization Tools and Techniques
for Systematic Optimization of System Software. ACM Transactions on Computer Systems, 19(2).

[29] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim. Crosschecking Semantic Correctness: The Case of Finding File
System Bugs. In SOSP’15, Monterey, CA, Oct. 2015.

[30] mm: page-alloc: spill to remote nodes before waking kswapd.
https://git.kernel.org/cgit/linux/kernel/git/
torvalds/linux. git/commit/mm/page_alloc.c?id=
3a025760fc158b37 26eac89ee95d7f 29599e9dfa

[31] mm:fix deferred congestion timeout if preferred zone is not
allowed.
https://git.kernel.org/cgit/linux/kernel/
git/torvalds/linux.git/commit/?id=
£33261d75b88f 55a08e6a9648cef73509979bfba.

[32] mm/memcontrol.c: fix uninitialized variable use in
mem_cgroup_move_parent().
https://git.kernel .org/cgit/linux/kernel/git/
torvalds/linux. git/commit/mm/memcontrol .c?id=
8dba474f034¢c322d96ada39cb20cac711d80dcb2.

[33] D. Mosberger and L. L. Peterson. Making Paths Explicit in
the Scout Operating System. In OSDI’96, Oct. 1996.
[34] net: Check rps_flow_table when RPS map length is 1.
https://git.kernel .org/cgit/linux/kernel/
git/torvalds/linux.git/commit/net?id=
8587523640441 a9f f2564ebc6efeb39497 ad6709.

[35] net: tcp: add key management to congestion control.
https://git.kernel .org/cgit/linux/kernel/
git/torvalds/linux.git/commit/net?id=
cic6a8ab45ec0f18733af b4aaade0d4al139d80b3.

[36] nfsd/create race fixes, infrastructure.
http://git.kernel.org/cgit/linux/kernel/
git/torvalds/linux.git/commit/fs/inode.c?id=
261bca86ed4£7£391d1938167624e78da61dcc6b.

[37] OCFS2 - Oracle Cluster File System for Linux.
http: //www.oracle.com/us/technologies/linux/
025995 .htm.

[38] ocfs2: fix disk file size and memory file size mismatch.
https://git.kernel .org/cgit/linux/kernel/
git/torvalds/linux.git/commit/fs?id=
ce170828e24959c69e7a40364731edc0535c550F.

[39] P. Olivier, J. Boukhobza, and E. Senn. On Benchmarking
Embedded Linux Flash File Systems. Technical Report.

[40] Production Quality, Multilayer Open Virtual Switch.
http: //openvswitch.org/.

[41] C. Pu, T. Autrey, A. Black, C. Consel, C. Cowan, J. Inouye,
L. Kethana, J. Walpole, and K. Zhang. Optimistic Incremen
tal Specialization: Streamlining a Commercial Operating System. In SOSP’95, CO, USA, Dec. 1995.

[42] slub: Add frozen check in __slab_alloc.
http://git.kernel.org/cgit/linux/kernel/
git/torvalds/linux.git/commit/mm/slub.c?id=
507ef feaba29bf7 24dfe38317fbd1i1d0fe25fa40

[43] tcp: Fix slab corruption with ipv6 and tcp6fuzz.
http://git .kernel.org/cgit/linux/kernel/git/
torvalds/linux. git/commit/net/ipv4/tcp_input .
c?id=9ae27 eQadbf 47 1¢c7a6b80102e38e1d5a346b3b38.

[44] Transmission Control Protocol.
https://tools .ietf .org/html/rfc793.

[45] W. Xu, S. Kumar, and K. Li. Fast Paths in Concurrent Programs. In PACT’04, 2004.

[46] J. Yang, P. Twohey, D. Engler, and M. Musuvathi. Using
Model Checking to Find Serious File System Errors. In
OSDI’04, San Francisco, CA, Dec. 2004.

[47] J. Yang, C. Sar, and D. Engler. EXPLODE: A Lightweight,
General System for Finding Serious Storage System Errors.
In OSDI’06, Seattle, WA, Nov. 2006.

[48] D. Yuan, Y. Luo, X. Zhuang, G. R. Rodrigues, X. Zhao,
Y. Zhang, P. U. Jain, and M. Stumm. Simple Testing Can
Prevent Most Critical Failures: An Analysis of Production
Failures in Distributed Data-Intensive Systems. In OSDI’14,
Broomfield, CO, Oct. 2014.