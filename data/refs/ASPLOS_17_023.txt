
[1] AKINAGA, H., AND SHIMA, H. Resistive random access
memory (ReRAM) based on metal oxides. Proc. IEEE 98,
12 (2010).

[2] APALKOV, D., KHVALKOVSKIY, A., WATTS, S., NIKITIN,
V., TANG, X., LOTTIS, D., MOON, K., LUO, X., CHEN,
E., ONG, A., DRISKILL-SMITH, A., AND KROUNBI, M.
Spin-transfer torque magnetic random access memory (STTMRAM). ACM J. Emerg. Technol. Comput. Syst. 9, 2. (May
2013), 13:1-13:35.

[3] ARULRAJ, J., PAVLO, A., AND DULLOOR, S. R. Let’s talk
about storage & recovery methods for non-volatile memory
database systems. In Proceedings of the 2015 ACM SIGMOD
International Conference on Management of Data (2015),
SIGMOD ’15, pp. 707-722.

[4] ATIKOGLU, B., XU, Y., FRACHTENBERG, E., JIANG, S.,
AND PALECZNY, M. Workload analysis of a large-scale keyvalue store. In Proceedings of the 12th ACM SIGMETRICS/PERFORMANCE Joint International Conference on Measurement and Modeling of Computer Systems (2012), SIGMETRICS °12, pp. 53-64.

[5] ATwoopD, G. Current and emerging memory technology
landscape. Flash memory summit (2011), 9-11.

[6] BELAY, A., BITTAU, A., MASHTIZADEH, A., TEREI, D.,
MAZIERES, D., AND KOZYRAKIS, C. Dune: Safe userlevel access to privileged cpu features. In Proceedings of
the 10th USENIX Conference on Operating Systems Design
and Implementation (2012), OSDI 12, pp. 335-348. https:
//github.com/ix-project/dune.

[7] CHATZISTERGIOU, A., CINTRA, M., AND VIGLAS, S. D.
Rewind: Recovery write-ahead system for in-memory nonvolatile data-structures. Proceedings of the VLDB Endowment
8, 5 (2015), 497-508.

[8] CHEN, S., GIBBONS, P. B., AND NATH, S._ Rethinking
database algorithms for phase change memory. In CIDR
2011, Fifth Biennial Conference on Innovative Data Systems
Research, Asilomar, CA, USA, January 9-12, 2011, Online
Proceedings (2011), pp. 21-31.

[9] CHI, P., LEE, W.-C., AND XIE, Y. Making B+-tree efficient
in PCM-based main memory. In Proceedings of the 2014 International Symposium on Low Power Electronics and Design
(2014), ISLPED ’14, pp. 69-74.

[10] CoBuRN, J., CAULFIELD, A. M., AKEL, A., GRUPP, L. M.,
GupTA, R. K., JHALA, R., AND SWANSON, S. NV-Heaps:
Making persistent objects fast and safe with next-generation,
non-volatile memories. In Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems (2011), ASPLOS
XVI, pp. 105-118.

[11] COLLET, Y. Lz4: Extremely fast compression algorithm.
code. google. com (2013).

[12] Cooper, B. F., SILBERSTEIN, A., TAM, E., RAMAKRISHNAN, R., AND SEARS, R. Benchmarking cloud serving systems with YCSB. In Proceedings of the Ist ACM Symposium
on Cloud Computing (2010), SoCC *10, pp. 143-154.

[13] CUNHA, C., BESTAVROS, A., AND CROVELLA, M. Characteristics of WWW client-based traces. Tech. rep., Technical Report BU-CS-95-010, Computer Science Department,
Boston University, 1995.

[14] DRAGOJEVIC, A., NARAYANAN, D., NIGHTINGALE, E. B.,

RENZELMANN, M., SHAMIS, A., BADAM, A., AND CASTRO, M. No compromises: distributed transactions with consistency, availability, and performance. In Proceedings of
the 25th Symposium on Operating Systems Principles (2015),
ACM, pp. 54-70.

[15] EILERT, S., LEINWANDER, M., AND CRISENZA, G. Phase
change memory: A new memory enables new memory usage models. In 2009 IEEE International Memory Workshop
(2009), IEEE, pp. 1-2.

[16] FELBER, P., FETZER, C., MARLIER, P., AND RIEGEL, T.
Time-based software transactional memory. JEEE Transactions on Parallel and Distributed Systems 21, 12 (2010),
1793-1807.

[17] FELBER, P., FETZER, C., AND RIEGEL, T. Dynamic performance tuning of word-based software transactional memory. In Proceedings of the 13th ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming (2008),
PPoPP ’08, pp. 237-246.

[18] FREITAS, R. F., AND WILCKE, W. W. Storage-class memory: The next storage system technology. IBM Journal of Research and Development 52, 4/5 (2008), 439.

[19] GILEs, E. R., DOSHI, K., AND VARMAN, P. Softwrap: A
lightweight framework for transactional support of storage
class memory. In 2015 31st Symposium on Mass Storage
Systems and Technologies (MSST) (2015), IEEE, pp. 1-14.

[20] HAERDER, T., AND REUTER, A. Principles of transactionoriented database recovery. ACM Computing Surveys (CSUR)
15, 4 (1983), 287-317.

[21] HERLIHY, M., AND Moss, J. E. B. Transactional memory: Architectural support for lock-free data structures. In
Proceedings of the 20th Annual International Symposium on
Computer Architecture (1993), ISCA ’93, pp. 289-300.

[22] INTEL. NVM Library . https: //github.com/pmem/nvn1.

[23] INTEL. Architecture instruction set extensions programming
reference. Intel Corporation, Feb (2012).

[24] INTEL CorpP. Intel and Micron Produce Breakthrough Memory Technology, 2015.

[25] INTERNATIONAL TECHNOLOGY ROADMAP FOR SEMICONDUCTORS (ITRS). Process, integration, devices
and structures. http: //www.itrs .net/Links/20111TRS/
2011Chapters/2011PIDS .pdf, 2011.

[26] JOHNSON, R., PANDIS, I., STOICA, R., ATHANASSOULIS,
M., AND AILAMAKI, A. Aether: A scalable approach to
logging. Proc. VLDB Endow. 3, 1-2 (Sept. 2010), 681-692.

[27] KimuRA, H. FOEDUS: OLTP engine for a thousand cores
and nvram. In Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data (2015), ACM,
pp. 691-706.

[28] KoLui, A., PELLEY, S., SAIDI, A., CHEN, P. M., AND
WENISCH, T. F. High-performance transactions for persistent
memories. In Proceedings of the Twenty-First International
Conference on Architectural Support for Programming Languages and Operating Systems (2016), ASPLOS 16, pp. 399411.

[29] KLTRSAY, E., KANDEMIR, M., SIVASUBRAMANIAM, A.,
AND MUTLU, O. Evaluating STT-RAM as an energy-efficient
main memory alternative. In Proceeding of the 2013 IEEE
International Symposium on Performance Analysis of Systems
and Software (Apr. 2013), ISPASS °13, pp. 256-267.

[30] LEE, B., ZHOU, P., YANG, J., ZHANG, Y., ZHAO, B., IPEK,
E., MUTLU, O., AND BURGER, D. Phase-change technology
and the future of main memory. IEEE Micro 30 (Jan. 2010),
131-141.

[31] Lim, H., FAN, B., ANDERSEN, D. G., AND KAMINSKY,
M. SILT: A memory-efficient, high-performance key-value
store. In Proceedings of the Twenty-Third ACM Symposium
on Operating Systems Principles (2011), SOSP ’11, pp. 1-13.

[32] NARAYANAN, D., AND HODSON, O. Whole-system persistence. In Proceedings of the Seventeenth International Conference on Architectural Support for Programming Languages
and Operating Systems (2012), ASPLOS XVII, pp. 401-410.

[33] PELLEY, S., CHEN, P. M., AND WENISCH, T. F. Memory
persistency. In Proceeding of the 41st Annual International
Symposium on Computer Architecuture (2014), ISCA ’14,
pp. 265-276.

[34] QURESHI, M. K., SRINIVASAN, V., AND RIVERS, J. A.
Scalable high performance main memory system using phasechange memory technology. In Proceedings of the 36th
Annual International Symposium on Computer Architecture
(2009), ISCA ’09, pp. 24-33.

[35] RAMADAN, H. E., ROSSBACH, C. J., AND WITCHEL, E.
Dependence-aware transactional memory for increased concurrency. In Proceedings of the 41st annual IEEE/ACM International Symposium on Microarchitecture (2008), IEEE Computer Society, pp. 246-257.

[36] RAoux, S., BURR, G. W., BREITWISCH, M. J., RETTNER, C. T., CHEN, Y.-C., SHELBY, R. M., SALINGA, M.,
KREBS, D., CHEN, S.-H., LUNG, H.-L., AND LAM, C. H.
Phase-change random access memory: A scalable technology.
IBM J. Res. Dev. 52, 4 July 2008), 465-479.

[37] REN, J., LIANG, C.-J. M., Wu, Y., AND MOSCIBRODA,
T. Memory-centric data storage for mobile systems. In
2015 USENIX Annual Technical Conference (USENIX ATC
15) (2015), pp. 599-611.

[38] REN, J., ZHAO, J., KHAN, S., CHOI, J., WU, Y., AND
MUTLU, O. ThyNVM: Enabling software-transparent crash
consistency in persistent memory systems. In Proceedings
of the 48th International Symposium on Microarchitecture
(2015), MICRO-48, pp. 672-685. http://persper.com/
thynvn/.

[39] RIEGEL, T., FETZER, C., AND FELBER, P. Time-based transactional memory with scalable time bases. In Proceedings
of the Nineteenth Annual ACM Symposium on Parallel Algorithms and Architectures (2007), SPAA ’07, ACM, pp. 221228.

[40] ROSENBLUM, M., AND OUSTERHOUT, J. K. The design and
implementation of a log-structured file system. ACM Trans.
Comput. Syst. 10, 1 (Feb. 1992), 26-52.

[41] RUDOFF, A. Deprecating the PCOMMIT instruction.
https: //software.intel.com/en-us/blogs/2016/

09/12/deprecate-pcommit—instruction, Sept. 2016.

[42] RUMBLE, S. M., KEJRIWAL, A., AND OUSTERHOUT, J.
Log-structured memory for DRAM-based storage. In Proceedings of the 12th USENIX Conference on File and Storage
Technologies (2014), FAST ’14, pp. 1-16.

[43] Stmo, N., ANTONI, W., MARKK, M., AND VILHO, R. Telecom application transaction processing benchmark. http:
//tatpbenchmark.sourceforge.net/.

[44] SUZUKI, K., AND SWANSON, S. A survey of trends in
non-volatile memory technologies: 2000-2014. In 20/5 IEEE
International Memory Workshop (IMW) (2015), IEEE, pp. 14,

[45] THE TRANSACTION PROCESSING COUNCIL. TPCC Benchmark V5. http: //www.tpc.org/tpcc/.

[46] Tu, S., ZHENG, W., KOHLER, E., LISKOv, B., AND
MADDEN, S. Speedy transactions in multicore in-memory
databases. In Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles (2013), ACM, pp. 1832.

[47] VoLos, H., Tack, A. J., AND SWIFT, M. M. Mnemosyne:
Lightweight persistent memory. In Proceedings of the Sixteenth International Conference on Architectural Support for
Programming Languages and Operating Systems (2011), ASPLOS XVI, pp. 91-104.

[48] WAN, H., Lu, Y., XU, Y., AND SHU, J. Empirical study
of redo and undo logging in persistent memory. In 2016 5th
Non-Volatile Memory Systems and Applications Symposium
(NVMSA) (Aug 2016), pp. 1-6.

[49] WANG, C., CHEN, W.-Y., WU, Y., SAHA, B., AND ADLTABATABAI, A.-R. Code generation and optimization for
transactional memory constructs in an unmanaged language.
In Proceedings of the International Symposium on Code Generation and Optimization (2007), CGO ’07, pp. 34-48.

[50] WANG, T., AND JOHNSON, R. Scalable logging through
emerging non-volatile memory. Proceedings of the VLDB
Endowment 7, 10 (2014), 865-876.

[51] WANG, Z., QIAN, H., Li, J., AND CHEN, H. Using restricted
transactional memory to build a scalable in-memory database.
In Proceedings of the Ninth European Conference on Computer Systems (2014), ACM, p. 26.

[52] WEI, X., SHI, J., CHEN, Y., CHEN, R., AND CHEN, H. Fast
in-memory transaction processing using RDMA and HTM.
In Proceedings of the 25th Symposium on Operating Systems
Principles (2015), ACM, pp. 87-104.

[53] Wu, M., AND ZWAENEPOEL, W. eNVy: A Non-volatile,
Main Memory Storage System. In Proceedings of the Sixth
International Conference on Architectural Support for Programming Languages and Operating Systems (1994), ASPLOS VI, pp. 86-97.

[54] Xu, J., AND SWANSON, S. NOVA: A log-structured file system for hybrid volatile/non-volatile main memories. In Proceedings of the 14th Usenix Conference on File and Storage
Technologies (2016), FAST ’16, pp. 323-338.

[55] YANG, J., WEI, Q., CHEN, C., WANG, C., YONG, K. L.,
AND HE, B. NV-Tree: Reducing consistency cost for
NVM-based single level systems. In Proceedings of the
13th USENIX Conference on File and Storage Technologies
(2015), FAST °15, pp. 167-181.

[56] Yoon, J. H., HUNTER, H. C., AND TRESSLER, G. A. Flash
& DRAM Si scaling challenges, emerging non-volatile memory technology enablement — implications to enterprise storage and server compute systems. Flash Memory Summit
(2013).

[57] ZHANG, Y., AND SWANSON, S. A study of application performance with non-volatile main memory. In Proceedings of
the 31st Symposium on Mass Storage Systems and Technologies (May 2015), MSST ’15, pp. 1-10.

[58] ZHAO, J., L1, S., YOON, D. H., XIE, Y., AND JOUPPI, N. P.
Kiln: Closing the performance gap between systems with and.
without persistence support. In Proceedings of the 46th Annual IEEE/ACM International Symposium on Microarchitecture (2013), ACM, pp. 421-432.