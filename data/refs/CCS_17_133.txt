REFERENCES
[1] #800564 - PHP5: trivial hash complexity DoS attack - Debian Bug report logs.
https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=800564.
[2] attackercan/regexp-security-cheatsheet. https://github.com/attackercan/regex
p-security-cheatsheet/tree/master/RegexpSecurityParser/WAF-regexps.
[3] bk2204/php-hash-dos: A PoC hash complexity DoS against PHP. https://github
.com/bk2204/php-hash-dos.
[4] bzip2. http://www.bzip.org/1.0.3/html/index.html.
[5] Controlling backtracking. https://msdn.microsoft.com/en-us/library/dsy130b
4(v=vs.110).aspx#controlling_backtracking.
[6] CVE-2011-5021.
http://cve.mitre.org/cgi-bin/cvename.cgi?name={CV
E}-2011-5021.
http://cve.mitre.org/cgi-bin/cvename.cgi?name={CV
[7] CVE-2013-2099.
E}-2013-2099.
http://cve.mitre.org/cgi-bin/cvename.cgi?name={CV
[8] CVE-2015-2526.
E}-2015-2526.
[9] gnulib/qsort.c at master coreutils/gnulib. https://github.com/coreutils/gnulib/bl
ob/master/lib/qsort.c.
[10] Hash algorithm and collisions - PHP Internals Book. http://www.phpinternals
book.com/hashtables/hash_algorithm.html.
[11] honggfuzz. https://github.com/google/honggfuzz.
[12] https://opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/kern/qsort.c. https:
//opensource.apple.com/source/xnu/xnu-1456.1.26/bsd/kern/qsort.c.
[13] libc/stdlib/qsort.c. https://sourceforge.net/u/lluct/me722-cm/ci/f3ae3e66860629a
7ebe223fdda3fdc8ffbdd9c6d/tree/bionic/libc/stdlib/qsort.c.
[14] libFuzzer - a library for coverage-guided fuzz testing - LLVM 3.9 documentation.
http://llvm.org/docs/LibFuzzer.html.
[15] NetBSD: qsort.c,v 1.13 2003/08/07. http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/l
ibc/stdlib/qsort.c.
[16] NVD - CVE-2012-2098. https://nvd.nist.gov/vuln/detail/{CVE}-2012-2098.
[17] NVD - CVE-2013-4287. https://nvd.nist.gov/vuln/detail/{CVE}-2013-4287.
[18] PCRE - Perl Compatible Regular Expressions. http://www.pcre.org/.
[19] PHP Vulnerability May Halt Millions of Servers - PHP Classes.
https://www.phpclasses.org/blog/post/171-PHP-Vulnerability-May-Hal
t-Millions-of-Servers.html.
[20] Regular expression denial of service - redos - owasp. https://www.owasp.org/in
dex.php/Regular_expression_Denial_of_Service_-_ReDoS.
[21] SantizerCoverage - Clang 4.0 documentation. http://clang.llvm.org/docs/Saniti
zerCoverage.html.
[22] Stack exchange network status - outage postmortem -Âăjuly 20, 2016. http:
//stackstatus.net/post/147710624694/outage-postmortem-july-20-2016.
[23] syzkaller. https://github.com/google/syzkaller.
[24] Why does stack overflow use a backtracking regex implementation? - meta stack
overflow. https://meta.stackoverflow.com/questions/328376/why-does-stack-o
verflow-use-a-backtracking-regex-implementation.
[25] Berglund, M., Drewes, F., and van der Merwe, B. Analyzing catastrophic
backtracking behavior in practical regular expression matching. arXiv preprint
arXiv:1405.5599 (2014).
[26] Bernat, G., Colin, A., and Petters, S. M. WCET analysis of probabilistic hard
real-time systems. In Real-Time Systems Symposium, 2002. RTSS 2002. 23rd IEEE
(2002), IEEE, pp. 279–288.
[27] Betts, A., Merriam, N., and Bernat, G. Hybrid measurement-based WCET
analysis at the source level using object-level traces. In OASIcs-OpenAccess Series
in Informatics (2010), vol. 15, Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[28] Cai, X., Gui, Y., and Johnson, R. Exploiting Unix file-system races via algorithmic complexity attacks. In Security and Privacy, 2009 30th IEEE Symposium on
(2009), IEEE, pp. 27–41.
[29] Cha, S. K., Woo, M., and Brumley, D. Program-Adaptive Mutational Fuzzing.
In 2015 IEEE Symposium on Security and Privacy (S&P) (May 2015), pp. 725–741.
[30] Cormen, T. H., Leiserson, C. E., Rivest, R. L., and Stein, C. Introduction to
algorithms, vol. 6. MIT press Cambridge, 2001.
[31] Crosby, S. A., and Wallach, D. S. Denial of service via algorithmic complexity
attacks. In Proceedings of the 12th Conference on USENIX Security Symposium Volume 12 (Berkeley, CA, USA, 2003), SSYM’03, USENIX Association, pp. 3–3.
[32] Godefroid, P., Levin, M. Y., Molnar, D. A., et al. Automated Whitebox Fuzz
Testing. In Proceedings of the 2008 Network and Distributed Systems Symposium
(NDSS) (2008), vol. 8, pp. 151–166.
13

[33] Haller, I., Slowinska, A., Neugschwandtner, M., and Bos, H. Dowsing for
Overflows: A Guided Fuzzer to Find Buffer Boundary Violations. In 22nd USENIX
Security Symposium (USENIX Security ’13) (Washington, D.C., 2013), USENIX,
pp. 49–64.
[34] Holland, B., Santhanam, G. R., Awadhutkar, P., and Kothari, S. StaticallyInformed Dynamic Analysis Tools to Detect Algorithmic Complexity Vulnerabilities. In Source Code Analysis and Manipulation (SCAM), 2016 IEEE 16th
International Working Conference on (2016), IEEE, pp. 79–84.
[35] Householder, A. D., and Foote, J. M. Probability-based parameter selection
for black-box fuzz testing. In CMU/SEI Technical Report - CMU/SEI-2012-TN-019
(2012).
[36] Jin, G., Song, L., Shi, X., Scherpelz, J., and Lu, S. Understanding and detecting
real-world performance bugs. ACM SIGPLAN Notices 47, 6 (2012), 77–88.
[37] Khan, U., and Bate, I. WCET Analysis of Modern Processors Using MultiCriteria Optimisation. In 2009 1st International Symposium on Search Based
Software Engineering (2009).
[38] Kirrage, J., Rathnayake, A., and Thielecke, H. Static analysis for regular
expression denial-of-service attacks. In International Conference on Network and
System Security (2013), Springer, pp. 135–148.
[39] Luk, C.-K., Cohn, R., Muth, R., Patil, H., Klauser, A., Lowney, G., Wallace,
S., Reddi, V. J., and Hazelwood, K. Pin: building customized program analysis
tools with dynamic instrumentation. In Acm sigplan notices (2005), vol. 40, ACM,
pp. 190–200.
[40] McIlroy, M. D. A killer adversary for quicksort. Softw., Pract. Exper. 29, 4 (1999),
341–344.
[41] Mudduluru, R., and Ramanathan, M. K. Efficient flow profiling for detecting
performance bugs. In Proceedings of the 25th International Symposium on Software
Testing and Analysis (2016), ACM, pp. 413–424.
[42] Namjoshi, K., and Narlikar, G. Robust and fast pattern matching for intrusion
detection. In INFOCOM, 2010 Proceedings IEEE (2010), IEEE, pp. 1–9.
[43] Petsios, T., Kemerlis, V. P., Polychronakis, M., and Keromytis, A. D. Dynaguard: Armoring canary-based protections against brute-force attacks. In
Proceedings of the 31st Annual Computer Security Applications Conference (2015),
ACM, pp. 351–360.
[44] Petsios, T., Tang, A., Stolfo, S., Keromytis, A. D., and Jana, S. NEZHA:
Efficient Domain-Independent Differential Testing. In Proceedings of the 38th
IEEE Symposium on Security & Privacy,(San Jose, CA) (2017).
[45] Petters, S. M. Bounding the execution time of real-time tasks on modern
processors. In Real-Time Computing Systems and Applications, 2000. Proceedings.
Seventh International Conference on (2000), IEEE, pp. 498–502.
[46] Petters, S. M., and Farber, G. Making worst case execution time analysis for
hard real-time tasks on state of the art processors feasible. In Real-Time Computing Systems and Applications, 1999. RTCSA’99. Sixth International Conference on
(1999), IEEE, pp. 442–449.
[47] Rawat, S., Jain, V., Kumar, A., Cojocar, L., Giuffrida, C., and Bos, H. VUzzer:
Application-aware Evolutionary Fuzzing. In Proceedings of the Network and
Distributed System Security Symposium (NDSS) (2017).
[48] Shen, D., Luo, Q., Poshyvanyk, D., and Grechanik, M. Automating Performance
Bottleneck Detection Using Search-based Application Profiling. In Proceedings of
the 2015 International Symposium on Software Testing and Analysis (2015), ISSTA
2015, ACM, pp. 270–281.
[49] Shenoy, G. S., Tubella, J., and González, A. Improving the resilience of an IDS
against performance throttling attacks. In International Conference on Security
and Privacy in Communication Systems (2012), Springer, pp. 167–184.
[50] Shenoy, G. S., Tubella, J., and Gonz’lez, A. Hardware/Software Mechanisms
for Protecting an IDS Against Algorithmic Complexity Attacks. In Parallel and
Distributed Processing Symposium Workshops & PhD Forum (IPDPSW), 2012 IEEE
26th International (2012), IEEE, pp. 1190–1196.
[51] Smith, R., Estan, C., and Jha, S. Backtracking algorithmic complexity attacks
against a NIDS. In Computer Security Applications Conference, 2006. ACSAC’06.
22nd Annual (2006), IEEE, pp. 89–98.
[52] Song, L., and Lu, S. Performance Diagnosis for Inefficient Loops. Under Submission.
[53] Stephens, N., Grosen, J., Salls, C., Dutcher, A., Wang, R., Corbetta, J., Shoshitaishvili, Y., Kruegel, C., and Vigna, G. Driller: Augmenting Fuzzing Through
Selective Symbolic Execution. In Proceedings of the Network and Distributed
System Security Symposium (NDSS) (2016).
[54] Sun, X., Cheng, L., and Zhang, Y. A Covert Timing Channel via Algorithmic
Complexity Attacks: Design and Analysis. In Communications (ICC), 2011 IEEE
International Conference on (2011), IEEE, pp. 1–5.
[55] Tracey, N., Clark, J., McDermid, J., and Mander, K. A search-based automated
test-data generation framework for safety-critical systems. In Systems engineering
for business process change: new directions. Springer, 2002, pp. 174–213.
[56] Wegener, J., and Grochtmann, M. Verifying timing constraints of real-time
systems by means of evolutionary testing. Real-Time Systems 15, 3 (1998), 275–
298.

