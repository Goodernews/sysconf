[1] “About Java,” https://www.java.com/en/about/.
[2] L. Gong and G. Ellison, Inside Java(TM) 2 Platform Security: Architecture, API Design, and Implementation, 2nd ed. Pearson Education,
2003.
[3] “2013 cisco annual security report,” http://www.cisco.com/web/offer/
gist ty2 asset/Cisco 2013 ASR.pdf, 2013.
[4] “2014 cisco annual security report,” http://www.cisco.com/web/offers/
lp/2014-annual-security-report/index.html, Jan. 2014.
[5] P. Holzinger, S. Triller, A. Bartel, and E. Bodden, “An in-depth study
of more than ten years of java exploitation,” in Proceedings of the 2016
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2016, pp. 779–790.
[6] N. Hardy, “The confused deputy:(or why capabilities might have been
invented),” ACM SIGOPS Operating Systems Review, vol. 22, no. 4, pp.
36–38, 1988.
[7] M. Bartoletti, P. Degano, and G. Ferrari, “Static analysis for stack
inspection,” Electronic Notes in Theoretical Computer Science, vol. 54,
no. 0, pp. 69 – 80, 2001, conCoord: International Workshop on
Concurrency and Coordination (Workshop associated to the 13th
Lipari School). [Online]. Available: http://www.sciencedirect.com/
science/article/pii/S1571066104002361
[8] M. Pistoia, R. Flynn, L. Koved, and V. Sreedhar, “Interprocedural
analysis for privileged code placement and tainted variable detection,”
in ECOOP 2005 - Object-Oriented Programming, ser. Lecture
Notes in Computer Science, A. Black, Ed. Springer Berlin
Heidelberg, 2005, vol. 3586, pp. 362–386. [Online]. Available:
http://dx.doi.org/10.1007/11531142 16
[9] C. Cifuentes, A. Gross, and N. Keynes, “Understanding caller-sensitive
method vulnerabilities: A class of access control vulnerabilities in the
java platform,” in Proceedings of the 4th ACM SIGPLAN International
Workshop on State Of the Art in Program Analysis, ser. SOAP 2015.
New York, NY, USA: ACM, 2015, pp. 7–12. [Online]. Available:
http://doi.acm.org/10.1145/2771284.2771286
[10] S. M. Blackburn, R. Garner, C. Hoffmann, A. M. Khang, K. S.
McKinley, R. Bentzur, A. Diwan, D. Feinberg, D. Frampton, S. Z. Guyer,
M. Hirzel, A. Hosking, M. Jump, H. Lee, J. E. B. Moss, A. Phansalkar,
D. Stefanović, T. VanDrunen, D. von Dincklage, and B. Wiedermann,
“The dacapo benchmarks: Java benchmarking development and
analysis,” in Proceedings of the 21st Annual ACM SIGPLAN Conference
on Object-oriented Programming Systems, Languages, and Applications,
ser. OOPSLA ’06. New York, NY, USA: ACM, 2006, pp. 169–190.
[Online]. Available: http://doi.acm.org/10.1145/1167473.1167488
[11] “Secure coding guidelines for Java SE,” http://www.oracle.com/
technetwork/java/seccodeguide-139067.html.
[12] “Security Explorations - SE-2012-01 Details,” http://www.
security-explorations.com/en/SE-2012-01-details.html.
[13] K.-P. Yee, “User interaction design for secure systems,” Computer
Science Division (EECS), University of California, Tech. Rep., 2002.
[14] S. Türpe, “Idea: Usable platforms for secure programming –
mining unix for insight and guidelines,” in Engineering Secure
Software and Systems (Proc. ESSoS’16), ser. LNCS, vol. 9639, Apr.
2016, forthcoming. [Online]. Available: http://testlab.sit.fraunhofer.de/
downloads/Publications/tuerpe2016idea.pdf

[15] L. Gong, “Java security: A ten year retrospective,” in Computer Security
Applications Conference, 2009. ACSAC ’09. Annual, Dec 2009, pp. 395–
405.
[16] “National vulnerability database,” https://nvd.nist.gov/.
[17] P. Lam, E. Bodden, O. Lhoták, and L. Hendren, “The Soot
framework for Java program analysis: a retrospective,” in Cetus Users
and Compiler Infrastructure Workshop, 2011. [Online]. Available:
http://www.bodden.de/pubs/lblh11soot.pdf
[18] S. Chiba, “Javassist-a reflection-based programming wizard for java,”
in Proceedings of OOPSLA98 Workshop on Reflective Programming in
C++ and Java, 1998, p. 174.
[19] J. R. Rose, “Bytecodes meet combinators: Invokedynamic on
the jvm,” in Proceedings of the Third Workshop on Virtual
Machines and Intermediate Languages, ser. VMIL ’09. New
York, NY, USA: ACM, 2009, pp. 2:1–2:11. [Online]. Available:
http://doi.acm.org/10.1145/1711506.1711508
[20] “Security Explorations - Security vulnerability notice,” http://www.
security-explorations.com/materials/SE-2012-01-IBM-2.pdf.
[21] “OpenJDK source releases - build b132,” http://download.java.net/
openjdk/jdk8/.
[22] “The dacapo benchmark suite - #80 jython generates npe with eager
compilation,” https://sourceforge.net/p/dacapobench/bugs/80/.
[23] “JUnit Benchmarks,” http://labs.carrotsearch.com/junit-benchmarks.
html.
[24] J. Y. Gil, K. Lenz, and Y. Shimron, “A microbenchmark case study and
lessons learned,” in Proceedings of the compilation of the co-located
workshops on DSM’11, TMC’11, AGERE! 2011, AOOPES’11, NEAT’11,
& VMIL’11. ACM, 2011, pp. 297–308.
[25] D. Gu, C. Verbrugge, and E. M. Gagnon, “Relative factors in performance analysis of java virtual machines,” in Proceedings of the 2nd
international conference on Virtual execution environments.
ACM,
2006, pp. 111–121.
[26] L. Koved, M. Pistoia, and A. Kershenbaum, “Access rights analysis
for java,” in Proceedings of the 17th ACM SIGPLAN Conference on
Object-oriented Programming, Systems, Languages, and Applications,
ser. OOPSLA ’02. New York, NY, USA: ACM, 2002, pp. 359–372.
[Online]. Available: http://doi.acm.org/10.1145/582419.582452
[27] L. Gong, “Secure java class loading,” Internet Computing, IEEE, vol. 2,
no. 6, pp. 56–61, Nov 1998.
[28] C. Fournet and A. D. Gordon, “Stack inspection: Theory and variants,”
ACM Trans. Program. Lang. Syst., vol. 25, no. 3, pp. 360–399, May
2003. [Online]. Available: http://doi.acm.org/10.1145/641909.641912
[29] A. Herzog and N. Shahmehri, “Performance of the java security
manager,” Computers & Security, vol. 24, no. 3, pp. 192–207, 2005.
[Online]. Available: http://dx.doi.org/10.1016/j.cose.2004.08.006
[30] B.-M. Chang, “Static check analysis for java stack inspection,”
SIGPLAN Not., vol. 41, no. 3, pp. 40–48, Mar. 2006. [Online].
Available: http://doi.acm.org/10.1145/1140543.1140550
[31] R. Toledo, A. Nunez, E. Tanter, and S. Katz, “Aspectizing java access
control,” Software Engineering, IEEE Transactions on, vol. 38, no. 1,
pp. 101–117, Jan 2012.
[32] M. Abadi and C. Fournet, “Access control based on execution
history,” in Proceedings of the Network and Distributed System
Security Symposium, NDSS 2003, San Diego, California, USA. The
Internet Society, 2003. [Online]. Available: http://www.isoc.org/isoc/
conferences/ndss/03/proceedings/papers/7.pdf
[33] F. Martinelli and P. Mori, “Enhancing java security with history based
access control,” in Foundations of Security Analysis and Design IV, ser.
Lecture Notes in Computer Science, A. Aldini and R. Gorrieri, Eds.
Springer Berlin Heidelberg, 2007, vol. 4677, pp. 135–159. [Online].
Available: http://dx.doi.org/10.1007/978-3-540-74810-6 5
[34] D. S. Wallach, A. W. Appel, and E. W. Felten, “Safkasi: A security
mechanism for language-based systems,” ACM Trans. Softw. Eng.
Methodol., vol. 9, no. 4, pp. 341–378, Oct. 2000. [Online]. Available:
http://doi.acm.org/10.1145/363516.363520
[35] M. Pistoia, A. Banerjee, and D. Naumann, “Beyond stack inspection: A
unified access-control and information-flow security model,” in Security
and Privacy, 2007. SP ’07. IEEE Symposium on, May 2007, pp. 149–
163.
[36] A. Banerjee and D. A. Naumann, “Stack-based access control and secure
information flow,” J. Funct. Program., vol. 15, no. 2, pp. 131–177, 2005.
[Online]. Available: http://dx.doi.org/10.1017/S0956796804005453
