[1] Apache. https://www.apache.org/,.

[2] Apachebench. http://httpd.apache.org/docs/2.4/
programs/ab.html, .

[3] The ISOMEC 9899:2011 (c11) standard. http:
//wo.iso.org/iso/iso_catalogue/catalogue_
tc/catalogue_detail.htm?csnumber=57853.

[4] Cherokee web server. http: //cherokee-project .com/.

[5] Cve-2010-2939: Double free vulnerability in the
ssl3_get_key_exchange function in the openssl client.
http://cve .mitre.org/cgi-bin/cvename.cgi?name=
cve—2010-2939, .

[6] Cve-2016-4077. http: //cve.mitre.org/cgibin/cvename.cgi?name=cve-2016-4077, .

[7] Nginx. https: //nginx.org/.

[8] Open litespeed use after free vulnerabilit. http:
//wuw.security-assessment .com/files/documents/
advisory/Open/20Litespeed/420Use420Af tery,
20Free/,20Vulnerability.pdf, .

[9] OpenSSL. https://www.openssl.org/,.

[10] Rust. https: //www.rust-lang.org/.

[11] A memo on exploration of SPLASH-2 input
http: //parsec.cs.princeton.edu/doc/memosplash2x-input .pdf.

[12] P. Akritidis. Cling: A memory allocator to mitigate dangling
pointers. In USENIX Security, 2010.

[13] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy
bounds checking: An efficient and backwards-compatible defense against out-of-bounds errors. In USENIX Security, 2009.

[14] E. D. Berger and B. G. Zorn. DieHard: Probabilistic memory
safety for unsafe languages. In PLDI, 2006.

[15] C. Bienia, S. Kumar, J. P. Singh, and K. Li. The PARSEC
benchmark suite: Characterization and architectural implications. In PACT, 2008.

[16] H. Boehm. A garbage collector for C and C++.
//woa -bboehm.info/ge/.

[17] E. Bosman, A. Slowinska, and H. Bos. Minemu: The world’s
fastest taint tracker. In RAID, 2011.

[18] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida. Dedup Est
Machina: Memory deduplication as an advanced exploitation
vector. In S&P, 2016.

[19] J. Caballero, G. Grieco, M. Marron, and A. Nappa. Undangle: Early detection of dangling pointers in use-after-free and
double-free vulnerabilities. In JSSTA, 2012.

[20] X. Chen, H. Bos, and C. Giuffrida. CodeArmor: Virtualizing
the code space to counter disclosure attacks. In EuroS&P,
2017.

[21] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum. Shredding
your garbage: Reducing data lifetime through secure deallocation. In USENIX Security, 2005.

[22] L. Deng, Q. Zeng, and Y. Liu. ISboxing: An instruction
substitution based data sandboxing for x86 untrusted libraries.
In JISC, 2015.

[23] J. Feist, L. Mounier, and M.-L. Potet. Statically detecting use
after free on binary code. JICV, 10(3), 2014.

[24] S. Ghemawat and P. Menage. Thread-caching malloc. http://goog-perftools.sourceforge .net/doc/
tcmalloc.html.

[25] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced.
operating system security through efficient and fine-grained
address space randomization. In USENIX Security, 2012.

[26] E. Goktas, R. Gawlik, B. Kollenda, E. Athanasopoulos,
G. Portokalidis, C. Giuffrida, and H. Bos. Undermining information hiding (and what to do about it). In USENIX Security,
2016.

[27] B. Gras, K. Razavi, E. Bosman, H. Bos, and C. Giuffrida.
ASLR on the line: Practical cache attacks on the MMU. In
NDSS, 2017.

[28] I. Haller, E. van der Kouwe, C. Giuffrida, and H. Bos. METAlloc: Efficient and comprehensive metadata management for
software security hardening. In EuroSec, 2016.

[29] I. Haller, J. Yuseok, H. Peng, M. Payer, C. Giuffrida, H. Bos,
and E. van der Kouwe. TypeSan: Practical type confusion
detection. In CCS, 2016.

[30] A.-A. Hariri, B. Gorenc, and S$. Zuckerbraun. Abusing silent
mitigations: Understanding weaknesses within Internet Explorer’s Isolated Heap and MemoryProtection. In Black Hat
USA, 2015.

[31] J. L. Henning. SPEC CPU2006 benchmark descriptions. ACM
SIGARCH Computer Architecture News, 34(4), 2006.

[32] M. Hirzel and A. Diwan. On the type accuracy of garbage
collection. In JSMM, 2000.

[33] T. C.-H. Hsu, K. Hoffman, P. Eugster, and M. Payer. Enforcing least privilege memory views for multithreaded applications. In CCS, 2016.

[34] Y. Jang, S. Lee, and T. Kim. Breaking kernel address space
layout randomization with Intel TSX. In CCS, 2016.

[35] K. Koning, X. Chen, H. Bos, C. Giuffrida, and E. Athanasopoulos. No needto hide: Protecting safe regions on commodity hardware. In EuroSys, 2017.

[36] C. Lattner and V. Adve. LLVM: A compilation framework for
lifelong program analysis & transformation. In CGO, 2004.

[37] B. Lee, C. Song, Y. Jang, T. Wang, T. Kim, L. Lu, and W. Lee.
Preventing use-after-free with dangling pointers nullification.
In NDSS, 2015.

[38] T. Mytkowicz, A. Diwan, M. Hauswirth, and P. KF Sweeney.
Producing wrong data without doing anything obviously
wrong! In ASPLOS, 2009.

[39] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic.
CETS: Compiler-enforced temporal safety for C. In ISMM,
2010.

[40] G. Novark and E. D. Berger. DieHarder: Securing the heap.
In CCS, 2010.

[41] A. Oikonomopoulos, E. Athanasopoulos, H. Bos, and C. Giuffrida. Poking holes in information hiding. In USENIX Security, 2016.

[42] Oracle. Java. https://www.java.com/.

[43] J. Rafkind, A. Wick, J. Regehr, and M. Flatt. Precise garbage
collection for C. ISMM, 2009.

[44] M. Rosenblum and J. K. Ousterhout. The design and implementation of a log-structured file system. ACM Trans. Comput. Syst., 10(1), 1992.

[45] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov.
AddressSanitizer: A fast address sanity checker. In USENIX
ATC, 2012.

[46] A. Slowinska and H. Bos. Pointless tainting? evaluating the
practicality of pointer tainting. In EuroSys, 2009.

[47] A. Slowinska, T. Stancescu, and H. Bos. Body armor for
binaries: Preventing buffer overflows without recompilation.
In USENIX ATC, 2012.

[48] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.
Efficient software-based fault isolation. In SOSP, 1993.

[49] D. Williams-King, G. Gobieski, K. Williams-King, J. P.
Blake, X. Yuan, P. Colp, M. Zheng, V. P. Kemerlis, J. Yang,
and W. Aiello. Shuffler: Fast and deployable continuous code
re-randomization. In OSDI, 2016.

[50] W. Xu, J. Li, J. Shu, W. Yang, T. Xie, Y. Zhang, and D. Gu.
From collision to exploitation: Unleashing use-after-free vulnerabilities in Linux kernel. In CCS, 2015.

[51] Y. Younan. FreeSentry: Protecting against use-after-free vulnerabilities due to dangling pointers. In NDSS, 2015.