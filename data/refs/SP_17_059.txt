[1] QEMU. http://www.qemu-project.org/.
[2] The NOPSRUS Team @ DEF CON CTF 2007. http:

//nopsr.us/ctf2007/.

[3] Tracer. https://github.com/angr/tracer.
[4] We are Samurai CTF and we won Defcon CTF this
year. AMA! http://www.reddit.com/r/netsec/comments/
y0nnu/we_are_samurai_ctf_and_we_won_defcon_ctf_
this/c5r9osm, 2013.

[5] CGC

Final

Event

File Archive.

https:

//repo.cybergrandchallenge.com/CFE/, 2016.

[6] The

CGC

Repository.

https://github.com/

CyberGrandChallenge, 2016.

[7] T. Avgerinos, S. K. Cha, B. T. H. Lim, and D. Brumley.
AEG: Automatic Exploit Generation. In Proceedings of
18th Annual Network and Distributed System Security
Symposium. Internet Society, 2011.

[8] T. Avgerinos, A. Rebert, S. K. Cha, and D. Brumley.
Enhancing Symbolic Execution with Veritesting.
In
Proceedings of the International Conference on Software
Engineering, pages 1083–1094, New York, New York,
USA, 2014. ACM Press.

[9] T. Bao, J. Burket, M. Woo, R. Turner, and D. Brumley.
ByteWeight: Learning to Recognize Functions in Binary
Code.
In Proceedings of the 23rd USENIX Security
Symposium, pages 845–860. USENIX, 2014.

[10] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha.
Theory and Techniques for Automatic Generation of
Vulnerability-Based Signatures. IEEE Transactions on
Dependable and Secure Computing, 5(4):224–241, 2008.
[11] D. Brumley, P. Poosankam, D. Song, and J. Zheng.
Automatic Patch-Based Exploit Generation is Possible:
Techniques and Implications. In Proceedings of the 2008
IEEE Symposium on Security and Privacy, pages 143–157.
IEEE, 2008.

[12] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley.
Unleashing Mayhem on Binary Code. In Proceedings
of the 2012 IEEE Symposium on Security and Privacy,
pages 380–394. IEEE, 2012.

[13] M. Costa, M. Castro, L. Zhou, L. Zhang, and M. Peinado.
Bouncer: Securing Software by Blocking Bad Input. In
Proceedings of 21st Symposium on Operating Systems
Principles, pages 117–130. ACM, 2007.

[14] M. Costa, J. Crowcroft, M. Castro, A. Rowstron, L. Zhou,
L. Zhang, and P. Barham. Vigilante: End-to-End Con-
tainment of Internet Worms. In Proceedings of the 20th
ACM Symposium on Operating Systems Principles, pages
133–147. ACM, 2005.

[15] CVE Details. Vulnerabilities By Type. https://www.

cvedetails.com/vulnerabilities-by-types.php, 2017.

[16] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz,
R. Hund, N. Stefan, and A.-R. Sadeghi. MoCFI: A Frame-
work to Mitigate Control-Flow Attacks on Smartphones.
In Proceedings of the 19th Network and Distributed
System Security Symposium. The Internet Society, 2012.
[17] S. Heelan. Automatic generation of control ﬂow hijacking

exploits for software vulnerabilities, 2009.

[18] W. Hu, J. Hiser, D. Williams, A. Filipi, J. W. Davidson,
D. Evans, J. C. Knight, A. Nguyen-Tuong, and J. Rowan-
hill. Secure and practical defense against code-injection
attacks using software dynamic translation. Proceedings
of the Virtual Execution Environments, pages 2–12, 2006.
[19] H.-A. Kim and B. Karp. Autograph: Toward Automated,
Distributed Worm Signature Detection. In Proceedings
of the 13th USENIX Security Symposium, pages 271–286.
USENIX, 2004.

[20] Z. Lin, X. Zhang, and D. Xu. Convicting Exploitable
Software Vulnerabilities: An Efﬁcient Input Provenance
Based Approach. In IEEE International Conference on
Dependable Systems and Networks With FTCS and DCC
(DSN), pages 247–256. IEEE, 2008.

[21] C. M. Linn, M. Rajagopalan, S. Baker, C. Collberg,
S. K. Debray, and J. H. Hartman. Protecting Against

838

Unexpected System Calls. In Proceedings of the 14th
USENIX Security Symposium, pages 239–254. USENIX,
2005.

[22] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser,
G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood.
Pin: Building Customized Program Analysis Tools with
Dynamic Instrumentation.
In Programming Language
Design and Implementation, pages 190–200. ACM, 2005.
[23] N. Nethercote and J. Seward. Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation. In Pro-
ceedings of the 2007 ACM Conference on Programming
Language Design and Implementation, pages 89–100.
ACM, 2007.

[24] N. A. Quynh. Unicorn - The ultimate CPU emulator.

http://www.unicorn-engine.org/.

[25] A. Romano and D. Engler. Expression Reduction from
Programs in a Symbolic Binary Executor. In Proceedings
of the 20th International Symposium Model Checking
Software, pages 301–319. Springer, 2013.

[26] F. B. Schneider. Enforceable Security Policies. ACM
Transactions on Information and System Security, 3(1):30–
50, 2000.

[27] E. J. Schwartz, T. Avgerinos, and D. Brumley. Q: Exploit
Hardening Made Easy. In Proceedings of the USENIX

Security Symposium, pages 379–394, 2011.

[28] K. Sen, G. Necula, L. Gong, and W. Choi. MultiSE:
Multi-Path Symbolic Execution using Value Summaries.
In Joint Meeting on Foundations of Software Engineering,
pages 842–853, New York, New York, USA, 2015. ACM
Press.

[29] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens,
M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser,
C. Kruegel, and G. Vigna. (State of) The Art of War:
Offensive Techniques in Binary Analysis. In Proceedings
of the 2016 IEEE Symposium on Security and Privacy,
pages 138–157. IEEE, 2016.

[30] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang,
J. Corbetta, Y. Shoshitaishvili, C. Kruegel, and G. Vigna.
Driller: Augmenting Fuzzing Through Selective Symbolic
Execution. In Proceedings of the Network and Distributed
System Security Symposium, 2016.

[31] D. Wheeler.

the next Heart-
bleed. http://www.dwheeler.com/essays/heartbleed.html#
valgrind-conﬁrmed, 2014.

How to detect

[32] W. Xu, S. Bhatkar, and S. Brook. Taint-Enhanced Policy
Enforcement: A Practical Approach to Defeat a Wide
Range of Attacks. In 15th USENIX Security Symposium,
pages 121–136, 2004.

