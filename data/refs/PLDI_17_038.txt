
[1] Fundamentals of garbage collection, . URL https:
//msdn.microsoft.com/en-us/library/
ee787088 (v=vs.110) .aspx.

[2] .NET native and compilation, URL https:
//msdn.microsoft.com/en-us/library/
dn807190 (v=vs.110).aspx.

[3] Electric fence malloc debugger. http: //elinux.org/
Electric_Fence.

[4] How to use pageheap utility to detect memory errors. https://support.microsoft.com/en-us/
kb/ 264471.

[5] Rust programming
rust-lang.org.

[6] P. Akritidis. Cling: A memory allocator to mitigate dangling
pointers. In USENIX Security Symposium, pages 177-192,
2010.

[7] D. F. Bacon, P. Cheng, and V. Rajan. The metronome: A simpler approach to garbage collection in real-time systems. In In

language. https: //www.

 

4nttps://github.com/densh/scala-offheap
Workshop on Java Technologies for Real-Time and Embedded
Systems (JTRES), OTM Workshops, 2003.

[8] H. G. Baker. Use-once variables and linear objects—storage
management, reflection, and multi-threading. SIGPLAN Notices, 30(1):45-52, January 1995.

[9] E. D. Berger and B. G. Zorn. Diehard: probabilistic memory safety for unsafe languages. In Acm sigplan notices, volume 41, pages 158-168. ACM, 2006.

[10] C. Boyapati, A. Salcianu, W. Beebee, and M. Rinard. Ownership types for safe region-based memory management in realtime Java. In PLDI, 2003.

[11] J. Boyland. Alias burying: Unique variables without destructive reads. Software — Practice and Experience, 31(6):533553, 2001.

[12] D. Clarke and T. Wrigstad. External uniqueness is unique
enough. In ECOOP, pages 176-200, July 2003.

[13] D. G. Clarke, J. M. Potter, and J. Noble. Ownership types for
flexible alias protection. In OOPSLA, October 1998.

[14] C. Click, G. Tene, and M. Wolf. The pauseless gc algorithm.
In Proceedings of the Ist ACM/USENIX international conference on Virtual execution environments, pages 46-56. ACM,
2005.

[15] U. Degenbaev, J. Eisinger, M. Ernst, R. McIlroy, and H. Payer.
Idle time garbage collection scheduling. In PLDI, 2016.

[16] D. Dhurjati and V. Adve. Efficiently detecting all dangling
pointer uses in production servers. In DSN, June 2006.

[17] D. Dhurjati, S. Kowshik, V. Adve, and C. Lattner. Memory
safety without runtime checks or garbage collection. ACM
SIGPLAN Notices, 38(7):69-80, 2003.

[18] L. Gidra, G. Thomas, J. Sopena, M. Shapiro, and N. Nguyen.
NumaGiC: a garbage collector for big data on big NUMA
machines. In ASPLOS, 2015.

[19] I. Gog, J. Giceva, M. Schwarzkopf, K. Vaswani, D. Vytiniotis,
G. Ramalingam, M. Costa, D. G. Murray, S. Hand, and M. Isard. Broom: Sweeping out garbage collection from big data
systems. In HotOS, 2015.

[20] D. Grossman, G. Morrisett, and T. Jim. Region-based memory
management in Cyclone. In PLDI, 2002.

[21] M. Hertz and E. D. Berger. Quantifyng the performance
of garbage collection vs. explicit memory management. In
OOPSLA, 2005.

[22] M. Hicks, G. Morrisett, D. Grossman, and T. Jim. Experience
with safe manual memory-management in Cyclone. In SMM,
2004.

[23] J. Hogg. Islands: Aliasing protection in object-oriented languages. In OOPSLA, 1991.

[24] R. Hundt. Loop recognition in C++/Java/Go/Scala. In Proceedings of Scala Days 2011, 2011.

[25] H. Kermany and E. Petrank. The compressor: Concurrent,
incremental, and parallel compaction. In Proceedings of the
27th ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI ’06, pages 354-363, 2006.

247

[26] B. Lee, C. Song, Y. Jang, and T. Wang. Preventing use-afterfree with dangling pointer nullification. In NDSS, 2015.

[27] V. B. Lvin, G. Novark, E. D. Berger, and B. G. Zorn.
Archipelago: trading address space for reliability and security.
In ASPLOS, 2008.

[28] M. Maas, K. Asanovié, T. Harris, and J. Kubiatowicz. Taurus: A holistic language runtime system for coordinating distributed managed-language applications. In ASPLOS, 2016.

[29] N. Minsky. Towards alias-free pointers. In ECOOP, pages
189-209, July 1996.

[30] D. G. Murray, F. McSherry, R. Isaacs, M. Isard, P. Barham,
and M. Abadi. Naiad: A timely dataflow system. In Proceedings of the Twenty-Fourth ACM Symposium on Operating
Systems Principles, SOSP *13, pages 439-455, 2013.

[31] K. Naden, R. Bocchino, J. Aldrich, and K. Bierhoff. A type
system for borrowing permissions. In POPL, 2012.

[32] S. Nagarakatte, J. Zhao, M. M. K. Martin, and S. Zdancewic.
CETS compiler-enforced temporal safety for c. In ISMM,
2010.

[33] K. Nguyen, K. Wang, Y. Bu, L. Fang, J. Hu, and G. Xu.
Facade: A compiler and runtime for (almost) object-bounded.
big data applications. In ASPLOS, 2015.

[34] K. Nguyen, L. Fang, G. Xu, B. Demsky, S. Lu, S. Alamian,
and QO. Mutlu. Yak: A high performance big-data-friendly
garbage collector. In OSDI, 2016.

[35] G. Novark and E. D. Berger. Dieharder: securing the heap.
In Proceedings of the 17th ACM conference on Computer and
communications security, pages 573-584. ACM, 2010.

[36] R. Sedgewick. Left-leaning red-black trees. In Dagstuhl
Workshop on Data Structures, page 17, 2008.

[37] FE Smith, D. Walker, and G. Morrisett. Alias types.
European Symposium on Programming (ESOP), 2000.

[38] N. Swamy, M. Hicks, G. Morrisett, D. Grossman, and T. Jim.
Safe manual memory-management in Cyclone. Science of
Computer Programming, 62(2):122-14, October 2006.

[39] G. Tene, B. Iyengar, and M. Wolk. C4: The continuously
conucrrent compacting collector. In ISMM, 2011.

In

[40] M. Tofte and J.-P. Talpin. Region-based memory management. Information and Computation, 132(2):109-176, February 1997.

[41] P. Wadler. Linear types can change the world! In IFIP TC 2
Working Conference, 1990.

[42] D. Walker and K. Watkins. On regions and linear types. In
ICFP, 2001.

[43] D. Walker, K. Crary, and G. Morrisett. Typed memory management in a calculus of capabilities. ACM Transactions on
Programming Languages and Systems, 24(4):701-771, 2000.

[44] Y. Younan. FreeSentry: protecting against user-after-free vulnerabilities due to dangling pointers. In NDSS, 2015.

[45] B. G. Zor. The measured cost of conservative garbage collection. Software — Practice and Experience, 23(7):733-156,
1993.

