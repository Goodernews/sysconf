[1] K. Trifunovic, A. Cohen, D. Edelsohn, F. Li, T. Grosser,
H. Jagasia, R. Ladelsky, S. Pop, J. Sjödin, and R. Upadrasta,
“Graphite two years after: First lessons learned from realworld polyhedral compilation,” in GCC Research Opportunities Workshop (GROW’10), Pisa, Italy, 2010.
[2] T. Grosser, A. Größlinger, and C. Lengauer, “Polly – performing polyhedral optimizations on a low-level intermediate
representation,” Parallel Processing Letters, vol. 22, no. 04,
2012.
[3] U. Bondhugula, A. Hartono, J. Ramanujam, and P. Sadayappan, “A practical automatic polyhedral parallelizer and
locality optimizer,” SIGPLAN Notices, vol. 43, no. 6, pp. 101–
113, 2008.

[4] C. Bastoul, “Code generation in the polyhedral model is easier
than you think,” in PACT’13, IEEE International Conference
on Parallel Architecture and Compilation Techniques, Juanles-Pins, France, September 2004, pp. 7–16.

[5] J. M. Bull, “Measuring synchronisation and scheduling overheads in openmp,” in Proceedings of First European Workshop on OpenMP, vol. 8, 1999, p. 49.

[6] M. Bull, F. Reid, and N. M. Donnell, “Epcc openmp microbenchmark suite, version 3.1,” 2015. [Online]. Available:
https://www.epcc.ed.ac.uk
[7] OpenMP Architecture Review Board, “Openmp
speciﬁcations.” [Online]. Available: http://openmp.org
[8] L.-N. Pouchet, “Polybench/c 4.1:
benchmark suite,” 2015. [Online].
//polybench.sourceforge.net

[9] P. Feautrier, “Some efﬁcient solutions to the afﬁne scheduling
problem. part ii. multidimensional time,” International journal of parallel programming, vol. 21, no. 6, pp. 389–420,
1992.

[10] W. Kelly, W. Pugh, and E. Rosser, “Code generation for
multiple mappings,” in Frontiers of Massively Parallel Computation, 1995. Proceedings. Frontiers’ 95., Fifth Symposium
on the. IEEE, 1995, pp. 332–341.

[11] F. Quilleré, S. Rajopadhye, and D. Wilde, “Generation
of efﬁcient nested loops from polyhedra,” International
Journal of Parallel Programming, vol. 28, no. 5, pp. 469–
498, 2000. [Online]. Available: http://dx.doi.org/10.1023/A:
1007554627716

[12] C. Chen, “Polyhedra scanning revisited,” ACM SIGPLAN
Notices, vol. 47, no. 6, pp. 499–508, 2012.


[13] T. Grosser, S. Verdoolaege, and A. Cohen, “Polyhedral ast
generation is more than scanning polyhedra,” ACM Transactions on Programming Languages and Systems (TOPLAS),
vol. 37, no. 4, p. 12, 2015.
[14] B. Meister, N. Vasilache, D. Wohlford, M. M. Baskaran,
A. Leung, and R. Lethin, “R-stream compiler,” in Encyclopedia of Parallel Computing, 2011, pp. 1756–1765.

[15] P. Clauss, “Counting solutions to linear and nonlinear constraints through ehrhart polynomials: Applications to analyze
and transform scientiﬁc programs,” in Proceedings of the 10th
International Conference on Supercomputing, 1996, pp. 278–
285.


[16] J. Allen and K. Kennedy, “Automatic translation of FORTRAN programs to vector form,” ACM Transactions on
Programming Languages and Systems, vol. 9, no. 4, pp. 491–
542, Oct. 1987.
[17] M. E. Wolf and M. S. Lam, “A loop transformation theory and
an algorithm to maximize parallelism,” IEEE Trans. Parallel
Distrib. Syst., vol. 2, no. 4, pp. 452–471, Oct. 1991.
[18] P. Feautrier, “Some efﬁcient solutions to the afﬁne scheduling
problem. i. one-dimensional time,” International journal of
parallel programming, vol. 21, no. 5, pp. 313–347, 1992.
[19] A. W. Lim and M. S. Lam, “Maximizing parallelism and
minimizing synchronization with afﬁne transforms,” in Proceedings of the 24th ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, 1997, pp. 201–214.
[20] A. Lim, “Improving parallelism and data locality with afﬁne
partitioning,” Ph.D. dissertation, Stanford University, 2001.
[21] U. Bondhugula, A. Acharya, and A. Cohen, “The pluto+
algorithm: A practical approach for parallelization and locality optimization of afﬁne loop nests,” ACM Trans. Program.
Lang. Syst., vol. 38, no. 3, pp. 12:1–12:32, Apr. 2016.
[22] W. Bielecki, M. Palkowski, and T. Klimek, “Free scheduling
for statement instances of parameterized arbitrarily nested
afﬁne loops,” Parallel Comput., vol. 38, no. 9, pp. 518–532,
Sep. 2012.
[23] U. Bondhugula, O. Günlük, S. Dash, and L. Renganarayanan,
“A model for fusion and code motion in an automatic parallelizing compiler,” in Proceedings of the 19th international
conference on Parallel architectures and compilation techniques, ser. PACT’10. Vienna, Austria: ACM, Sep. 2010,
pp. 343–352.
[24] A. Aiken and D. Gay, “Barrier inference,” in Proceedings of
the 25th ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages, 1998, pp. 342–354.
[25] A. Darte and R. Schreiber, “A linear-time algorithm for
optimal barrier placement,” in Proceedings of the Tenth ACM
SIGPLAN Symposium on Principles and Practice of Parallel
Programming, ser. PPoPP ’05, 2005, pp. 26–35.
[26] C.-W. Tseng, “Compiler optimizations for eliminating barrier
synchronization,” in Proceedings of the Fifth ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming, ser. PPOPP ’95, 1995, pp. 144–155.
[27] H. Han, C.-W. Tseng, and P. Keleher, “Eliminating barrier synchronization for compiler-parallelized codes on software dsms,” International Journal of Parallel Programming,
vol. 26, no. 5, pp. 591–612, Oct 1998.
[28] R. Cytron, J. Lipkis, and E. Schonberg, “A compiler-assisted
approach to spmd execution,” in Proceedings of the 1990
ACM/IEEE Conference on Supercomputing, ser. Supercomputing ’90, 1990, pp. 398–406.

[29] J. Zhao, J. Shirako, V. K. Nandivada, and V. Sarkar, “Reducing task creation and termination overhead in explicitly
parallel programs,” in Proceedings of the 19th International
Conference on Parallel Architectures and Compilation Techniques, ser. PACT ’10, 2010, pp. 169–180.
