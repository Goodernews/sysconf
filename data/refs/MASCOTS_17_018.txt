[1] R. Agrawal, M. J. Carey, and M. Livny. Concurrency control
performance modeling: alternatives and implications. ACM
Transactions on Database Systems, 12(4):609-654, 1987.

[2] C. M. Bishop. Pattern Recognition and Machine Learning
(Information Science and Statistics). Springer-Verlag New York,
Inc., New York, NY, USA, 2006.

[3] H.-J. Boehm and S. V. Adve. Foundations of the c++ concurrency
memory model. In Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation,
PLDI ’08, pages 68-78, New York, NY, USA, 2008. ACM.

[4] C. Cascaval, C. Blundell, M. Michael, H. W. Cain, P. Wu,
S. Chiras, and S. Chatterjee. Software Transactional Memory:
why is it only a research toy? Queue, 6(5):46, 2008.

[5] M. Castro, L. F. W. Goes, C. P. Ribeiro, M. Cole, M. Cintra,
and J. F. Méhaut. A machine learning-based approach for thread
mapping on transactional memory applications. /8th International Conference on High Performance Computing, HiPC 2011,
2011.

[6] L. Dalessandro, F. Carouge, S. White, Y. Lev, M. Moir, M. L.
Scott, and M. F. Spear. Hybrid NOrec: A Case Study in the
Effectiveness of Best Effort Hardware Transactional Memory.
Proceedings of the sixteenth international conference on Architectural support for programming languages and operating
systems - ASPLOS ’11, pages 39-51, 2011.

[7] L. Dalessandro, M. F. Spear, and M. L. Scott. NOrec: streamlining STM by abolishing ownership records. ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming
(PPoPP), pages 67-78, 2010.

[8] P. Di Sanzo, B. Ciciani, R. Palmieri, F Quaglia, and P. Romano.
On the analytical modeling of concurrency control algorithms for
Software Transactional Memories: The case of Commit-TimeLocking. Performance Evaluation, 69(5):187—205, 2012.

[9] P. Di Sanzo, B. Ciciani, F. Q. Sapienza, and P. Romano. A performance model of multi-version concurrency control. 2008 IEEE
International Symposium on Modeling, Analysis and Simulation
of Computer and Telecommunication Systems, MASCOTS, 2008.
[10] D. Didona, N. Diegues, A.-M. Kermarrec, R. Guerraoui,
R. Neves, and P. Romano. Proteustm: Abstraction meets
performance in transactional memory. In Proceedings of the
Twenty-First International Conference on Architectural Support
for Programming Languages and Operating Systems, ASPLOS
16, pages 757-771, New York, NY, USA, 2016. ACM.

[11] D. Didona, P. Felber, D. Harmanci, P. Romano, and J. Schenker.
Identifying the optimal level of parallelism in transactional memory applications. Computing, 97(9):939-959, Sept. 2015.

[12] D. Didona and P. Romano. Enhancing Performance Prediction
Robustness by Combining Analytical Modeling and Machine
Learning. ACM/SPEC International Conference on Performance
Engineering (ICPE), 2015.

[13] D. Didona and P. Romano. On Bootstrapping Machine Learning
Performance Predictors via Analytical Models. In JICPADS, 2015.
[14] D. Didona, P. Romano, S. Peluso, and F. Quaglia. Transactional
Auto Scaler: Elastic Scaling of In-memory Transactional Data
Grids. ACM Transactions on Autonomous and Adaptive Systems,
9(2):125-134, 2014.

[15] N. Diegues and P. Romano. Self-tuning Intel Restricted Transactional Memory. Parallel Computing, 50:25-52, dec 2015.

[16] N. Diegues, P. Romano, and L. Rodrigues. Virtues and Limitations of Commodity Hardware Transactional Memory. Pact,
pages 3-14, 2014.

[17] A. Dragojevic, R. Guerraoui, and M. Kapalka. Stretching
transactional memory. ACM SIGPLAN Notices, 44:155, 2009.
[18] P. Felber, C. Fetzer, and T. Riegel. Dynamic performance tuning
of word-based software transactional memory. Proceedings of
the 13th ACM SIGPLAN Symposium on Principles and practice
of parallel programming, pages 237-246, 2008.

[19] W. Feller. An Introduction to Probability Theory and Its Applications., volume 1. Wiley, 2nd edition, 1950.

[20] B. Goel, R. Titos-Gil, A. Negi, S. A. McKee, and P. Stenstrom.
Performance and Energy Analysis of the Restricted Transactional
Memory Implementation on Haswell. In IEEE, editor, 20/4
IEEE 28th International Parallel and Distributed Processing
Symposium, pages 615-624, Phoenix, AZ, may 2014. IEEE.

[21] A. Heind and G. Pokam. An analytic framework for performance
modeling of software transactional memory. Computer Networks,
53(8):1202-1214, 2009.

[22] M. Herlihy, M. Herlihy, J. E. B. Moss, and J. E. B. Moss.
Transactional memory. ACM SIGARCH Computer Architecture
News, 21(2):289-300, 1993.

[23] M. Herlihy and N. Shavit. The Art of Multiprocessor Programming, Revised Reprint. Elsevier, 2012.

[24] Intel Corporation. Desktop 4th Generation Intel Core Processor
Family (Revision 028). Technical report, Intel Corporation, 2015.

[25] B. Jacob and G.  Guennebaud. Eigen is a
C++ template library for linear algebra: matrices,
vectors, numerical solvers, and _ related algorithms.
http://eigen.tuxfamily.org/index.php ?title=Main_Page, 201706-26.

[26] L. Kleinrock. Theory, Volume 1, Queueing Systems. Wiley
Interscience, 1975.

[27] J. D. C. Little. A Proof for the Queuing Formula: L = A W.
Operations Research, 9(3):383-387, jun 1961.

[28] T. Nakaike, R. Odaira, M. Gaudet, M. M. Michael, and
H. Tomari. Quantitative comparison of hardware transactional
memory for Blue Gene/Q, zEnterprise EC12, Intel Core, and
POWERS8. In Proceedings of the 42nd Annual International
Symposium on Computer Architecture - ISCA ’15, pages 144—
157, New York, New York, USA, 2015. ACM Press.

[29] A. Nguyen. Investigation of Hardware Transactional Memory.
Master’s thesis, MASSACHUSETTS INSTITUTE OF TECHNOLOGY, 2015.

[30] Peter Bergner, Alon Shalev Houfater, Madhusudnanan Kandeasamy, David Wendt, Suresh Warrier, Julian Wang, Bernhard
King Smith, Will Schmidt, Bill Schmidt, Steve Munroe, and Tullo
Magno. Performance optimization and tuning techniques for
IBM Power Systems processors including IBM POWER8. IBM
Redbooks, 2015.

[31] D. Rughetti, P. Di Sanzo, B. Ciciani, and F. Quaglia. Machine
learning-based self-adjusting concurrency in software transactional memory systems. Proceedings of the 2012 IEEE 20th
International Symposium on Modeling, Analysis and Simulation
of Computer and Telecommunication Systems, MASCOTS 2012,
pages 278-285, 2012.

[32] D. Rughetti, P. D. Sanzo, B. Ciciani, and F. Quaglia. Analytical/ML mixed approach for concurrency regulation in software
transactional memory. Proceedings - 14th IEEE/ACM International Symposium on Cluster, Cloud, and Grid Computing,
CCGrid 2014, pages 81-91, 2014.

[33] J. Stoer and R. Bulirsch. Introduction to numerical analysis,
volume 12. Springer Science & Business Media, 2013.

[34] Y. Tay. Analytical Performance Modeling for Computer Systems.
Synthesis Lectures on Computer Science, 2(1):1-116, apr 2010.
[35] Y. C. Tay, N. Goodman, and R. Suri. Locking performance in
centralized databases. ACM Transactions on Database Systems,
10(4):415-462, 1985.

[36] R. M. Yoo, C. J. Hughes, K. Lai, and R. Rajwar. Performance
evaluation of intel transactional synchronization extensions for
high-performance computing. In International Conference for
High Performance Computing, Networking, Storage and Analysis
(SC), Nov 2013.

[37] P. S. Yu, D. M. Dias, and S. S. Lavenberg. On the analytical
modeling of database concurrency control. Journal of the ACM,
40(4):83 1-872, 1993.

[38] C. Zilles and R. Rajwar. Transactional memory and the birthday
paradox. Proceedings of the nineteenth annual ACM symposium
on Parallel algorithms and architectures, pages 303-304, 2007.