[1] ab:
Apache
HTTP
Server
Benchmarking
Tool.
http://httpd.apache.org/docs/2.2/programs/ab.html.
[2] Apache HTTP Server. http://httpd.apache.org/.
[3] GZIP Compression Utility. http://www.gnu.org/software/gzip/.
[4] MySQL
Database
Management
System.
http://www.mysql.com/.
[5] Pin Trace-version APIs. https://goo.gl/qNQ6tu.
[6] Redis Data Structure Server. http://redis.io/.
[7] P. Arafa, H. Kashif, and S. Fischmeister. Redundancy Suppression in Time-Aware Dynamic Binary Instrumentation. preprint.
arXiv:1703.02873.
[8] P. Arafa, H. Kashif, and S. Fischmeister. DIME: Time-aware
Dynamic Binary Instrumentation Using Rate-based Resource
Allocation. In Proceedings of the Eleventh ACM International
Conference on Embedded Software, EMSOFT ’13. IEEE Press,
2013.
[9] M. Arnold and B. G. Ryder. A Framework for Reducing the Cost
of Instrumented Code. In Proc. of the ACM SIGPLAN Conf. on
Programming language design and implementation. ACM, 2001.
[10] A. R. Bernat and B. P. Miller. Anywhere, Any-time Binary
Instrumentation. In Proc. of the Workshop on Program Analysis
for Software Tools. ACM, 2011.
[11] I. Böhm, T. J. Edler von Koch, S. C. Kyle, B. Franke, and
N. Topham. Generalized Just-in-time Trace Compilation Using
a Parallel Task Farm in a Dynamic Binary Translator. SIGPLAN Not., 46(6), June 2011.
[12] D. Bruening. Eﬃcient, Transparent, and Comprehensive Runtime Code Manipulation. PhD thesis, MIT, Sept. 2004.
[13] H. K. Cho, T. Moseley, R. Hank, D. Bruening, and S. Mahlke.
Instant Proﬁling: Instrumentation Sampling for Proﬁling Datacenters Applications. In Int’l Symp. on Code Gen. and Optimization, Feb 2013.
[14] G. Dobson, R. Lock, and I. Sommerville. QoSOnt: a QoS
Ontology for Service-centric Systems. In 31st EUROMICRO
Conference on Software Engineering and Advanced Applications. IEEE, Aug 2005.
[15] A. Edwards, A. Srivastava, and H. Vo. Vulcan: Binary Transformation in a Distributed Environment. Technical report,
Microsoft Research, April 2001.
[16] Facebook.
Mysql tech talk 11.2.10, Feb 2010.
http://livestre.am/rIpq.
[17] S. Fischmeister and Y. Ba. Sampling-based Program Execution
Monitoring. SIGPLAN Not., 45(4), 2010.
[18] A. Hamou-Lhadj and T. C. Lethbridge. Measuring Various
Properties of Execution Traces to Help Build Better Trace
Analysis Tools. In Engineering of Complex Computer Systems,
2005. ICECCS 2005. Proceedings. 10th IEEE International
Conference on, pages 559–568. IEEE, 2005.
[19] A. Hassan, D. Martin, P. Flora, P. Mansﬁeld, and D. Dietz. An
Industrial Case Study of Customizing Operational Proﬁles Using Log Compression. In Software Engineering, 2008. ICSE’08.
ACM/IEEE 30th International Conference on, pages 713–723.
IEEE, 2008.
[20] M. Hauswirth and T. M. Chilimbi. Low-overhead Memory Leak
Detection Using Adaptive Statistical Proﬁling. SIGPLAN Not.,
39(11), Oct. 2004.
[21] M. Hirzel and T. Chilimbi. Bursty Tracing: A Framework for
Low-Overhead Temporal Proﬁling. In In 4th ACM Workshop
on Feedback-Directed and Dynamic Optimization. ACM, 2001.
[22] N. Jia, C. Yang, J. Wang, D. Tong, and K. Wang. SPIRE:
Improving Dynamic Binary Translation Through SPC-indexed
Indirect Branch Redirecting. SIGPLAN Not., 48(7), Mar. 2013.
[23] H. Kashif, P. Arafa, and S. Fischmeister. INSTEP: A Static
Instrumentation Framework for Preserving Extra-Functional
Properties. In International Conference on Embedded and RealTime Computing Systems and Applications. IEEE, Aug 2013.
[24] B. Kasikci, T. Ball, G. Candea, J. Erickson, and M. Musuvathi.
Eﬃcient Tracing of Cold Code via Bias-free Sampling. In
Proc. of the USENIX Annual Technical Conference. USENIX
Association, 2014.
[25] A. Kopytov.
SysBench Manual.
http://imysql.com/wpcontent/uploads/2014/10/sysbench-manual.pdf.
[26] N. Kumar, B. R. Childers, and M. L. Soﬀa. Low Overhead
Program Monitoring and Proﬁling. In Proc. of the 6th ACM
workshop on Program Analysis for Software Tools and Engineering. ACM, 2005.
[27] J. R. Larus and E. Schnarr. EEL: Machine-independent Executable Editing. SIGPLAN Not., 30(6), June 1995.
[28] M. Laurenzano, M. Tikir, L. Carrington, and A. Snavely. PEBIL: Eﬃcient Static Binary Instrumentation for Linux. In
Symp. on Performance Analysis of Systems Software. IEEE,
2010.
[29] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building
Customized Program Analysis Tools with Dynamic Instrumentation. SIGPLAN Not., 40(6), June 2005.
[30] T. Moseley, A. Shye, V. Reddi, D. Grunwald, and R. Peri.
Shadow Proﬁling: Hiding Instrumentation Costs with Parallelism. In Intl. Symp. on Code Gen. and Optimization. ACM,
Mar. 2007.
[31] N. Nethercote and J. Seward. Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation. SIGPLAN
Not., 42(6), June 2007.
[32] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski, H. Lee, H. C.
Li, R. McElroy, M. Paleczny, D. Peek, P. Saab, D. Staﬀord,
T. Tung, and V. Venkataramani. Scaling Memcache at Facebook. In 10th USENIX Symposium on Networked Systems
Design and Implementation. USENIX Association, April 2013.
[33] A. Oliveira, J.-C. Petkovich, T. Reidemeister, and S. Fischmeister. DataMill: Rigorous Performance Evaluation Made Easy.
In Proc. of the 4th ACM/SPEC International Conference on
Performance Engineering. ACM, April 2013.
[34] H. Pirzadeh, S. Shanian, A. Hamou-Lhadj, L. Alawneh, and
A. Shaﬁee. Stratiﬁed Sampling of Execution Traces: Execution
Phases Serving As Strata. Sci. Comput. Program., 78(8), Aug.
2013.
[35] B. Sabata, S. Chatterjee, M. Davis, J. Sydir, and T. Lawrence.
Taxonomy for QoS Speciﬁcations. In Proc. of the International
Workshop on Object-Oriented Real-Time Dependable Systems,
1997.
[36] M. Serrano and X. Zhuang. Building Approximate Calling
Context from Partial Call Traces. In Proc. of the Intl. Symp.
on Code Gen. and Optimization, 2009.
[37] A. Srivastava and A. Eustace. ATOM: A System for Building
Customized Program Analysis Tools. SIGPLAN Not., 29(6),
June 1994.
[38] G.-R. Uh, R. Cohn, B. Yadavalli, R. Peri, and R. Ayyagari.
Analyzing Dynamic Binary Instrumentation Overhead. In Proc.
of the Workshop on Binary Instrumentation and Applications,
2006.
[39] D. Upton, K. Hazelwood, R. Cohn, and G. Lueck. Improving
Instrumentation Speed via Buﬀering. In Proc. of the Workshop
on Binary Instrumentation and Applications (WBIA), 2009.
[40] J. Zeng, Y. Fu, and Z. Lin. PEMU: A Pin Highly Compatible
Out-of-VM Dynamic Binary Instrumentation Framework. In
Proc. of the Int’l Conference on Virtual Execution Environments, VEE’15. ACM, 2015.
[41] Q. Zhao, I. Cutcutache, and W.-F. Wong. PiPA: Pipelined
Proﬁling and Analysis on Multicore Systems. ACM Trans.
Archit. Code Optim., 7(3), 2010.
[42] Y. Zheng, L. Bulej, C. Zhang, S. Kell, D. Ansaloni, and
W. Binder. Dynamic Optimization of Bytecode Instrumentation. In Proc. of the Workshop on Virtual Machines and
Intermediate Languages. ACM, 2013.
