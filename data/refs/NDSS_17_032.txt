
[1] 360 security. http://www.360securityapps.com/en-us.

[2] Android malware evasion  techniques-emulator detection.
http://www.oguzhantopgul.com/2014/12/android-malware-evasiontechniques.html.

[3] Android malware set for july 4 carries political message.
https://blogs.mcafee.com/consumer/android-malware- set-for-july4-carries-political-message/.

[4] Android security: Adding tampering detection to your app.
https://www.airpair.com/android/posts/adding-tampering-detection-toyour-android-app#4- 1-emulator.

[5] Android-hehe: Malware now disconnects phone calls.
https://www.fireeye.com/blog/threat-research/2014/0 1/android-hehemalware-now-disconnects-phone-calls.html.

[6] Apktool-a tool for reverse engineering android apk files.
/Abotpeaches.github.io/Apktool/.

[7] Application security. https://source.android.com/security/overview/appsecurity.html.

[8] Average cpi per country. http://Awww.appbrain.com/stats/android-cpi-percountry.

[9] Detecting malware and sandbox evasion techniques.
https://www.sans.org/reading-room/whitepapers/forensics/detectingmalware-sandbox-evasion-techniques-36667.

[10] Dex education 201: Anti-emulators. http://hitcon.org/2013/download/
Tim%20Strazzere%20-%20DexEducation.pdf.

[11] Fireeye multi-vector virtual execution (mvx) engine.
threatprotectworks.com/MVX-engine.asp.

[12] Mobile threat report-mcafee. http://www.mcafee.com/us/resources/
reports/rp-mobile-threat-report-2016.pdf.

[13] monkeyrunner. https://developer.android.com/studio/test/monkeyrunner/
index.html.

[14] Programmers united develop net. http://en.pudn.com.

[15] Soot, a framework for analyzing and transforming java and android
applications. https://sable.github.io/soot/.

[16] Virustotal-free online virus, malware and url scanner. https://www.
virustotal.com.

[17] Blackhat usa 2012 - adventures in bouncer land. http://www.securitytube.
net/video/8880, November 2013.

[18] Virtual machines and how malware authors know when they are being
watched. _https://securityintelligence.com/virtual-machines-malwareauthors-being-watched/, October 2013.

[19] Does malware still detect virtual machines? http://www.symantec.com/
connect/blogs/does-malware-still-detect-virtual-machines, August 2014.

[20] Hacking team rcs android source code. https://github.com/hackedteam/
core- android/blob/master/RCSAndroid/sre/com/android/dvci/Core.java,
December 2014.

[21] Mindmac/hideandroidemulator.
HideAndroidEmulator, October 2014.

[22] Hacking team rcsandroid spying tool listens to calls; roots devices to get
in. http://blog.trendmicro.com/trendlabs-security-intelligence/hackingteam-rcsandroid-spying-tool-listens-to-calls-roots- devices-to-get-in/,
July 2015.

[23] The google android security teamâ€™s classifications for potentially
harmful applications. https://static.googleusercontent.com/media/source.
android.com/en//security/reports/Google_Android_Security_PHA_
classifications.pdf, April 2016.

[24] Xposed module repository. http://repo.xposed.info/, August 2016.

[25] S. Arzt, S. Rasthofer, and E. Bodden. Susi: A tool for the fully automated
classification and categorization of android sources and sinks. University
of Darmstadt, Tech. Rep. TUDCS-2013-0114, 2013.

[26] K. W. Y. Au, Y. F Zhou, Z. Huang, and D. Lie. Pscout: analyzing
the android permission specification. In Proceedings of the 2012 ACM
conference on Computer and communications security, pages 217-228.
ACM, 2012.

[27] D. Balzarotti, M. Cova, C. Karlberger, E. Kirda, C. Kruegel, and G. Vigna.
Efficient detection of split personalities in malware. In NDSS. Citeseer,
2010.

[28] D. Brumley, C. Hartwig, Z. Liang, J. Newsome, D. Song, and H. Yin.
Automatically identifying trigger-based behavior in malware. In Botnet
Detection, pages 65-88. Springer, 2008.

[29] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario. Towards
an understanding of anti-virtualization and anti-debugging behavior in
modern malware. In 2008 IEEE International Conference on Dependable
Systems and Networks With FTCS and DCC (DSN), pages 177-186.
TEEE, 2008.

[30] J. R. Crandall, G. Wassermann, D. A. de Oliveira, Z. Su, S. EF Wu, and
FT. Chong. Temporal search: Detecting hidden malware timebombs
with virtual machines. In ACM Sigplan Notices, volume 41, pages 25-36.
ACM, 2006.

[31] W. Diao, X. Liu, Z. Li, and K. Zhang. Evading android runtime analysis
through detecting programmed interactions. In Proceedings of the 9th
ACM Conference on Security & Privacy in Wireless and Mobile Networks
(WiSec), 2016.

[32] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: malware analysis
via hardware virtualization extensions. In Proceedings of the 15th ACM
conference on Computer and communications security, pages 51-62.
ACM, 2008.

[33] Y. Feng, S. Anand, I. Dillig, and A. Aiken. Apposcopy: Semantics-based
detection of android malware through static analysis. In Proceedings of
the 22nd ACM SIGSOFT International Symposium on Foundations of
Software Engineering, pages 576-587. ACM, 2014.

[34] Y. Fratantonio, A. Bianchi, W. Robertson, E. Kirda, C. Kruegel, and
G. Vigna. Triggerscope: Towards detecting logic bombs in android
applications. 2016.

[35] Y. Jing, Z. Zhao, G.-J. Ahn, and H. Hu. Morpheus: automatically
generating heuristics to detect android emulators. In Proceedings of the
30th Annual Computer Security Applications Conference, pages 216-225.
ACM, 2014.

[36] M. G. Kang, H. Yin, S. Hanna, S. McCamant, and D. Song. Emulating
emulation-resistant malware. In Proceedings of the 1st ACM workshop
on Virtual machine security, pages 11-22. ACM, 2009.

[37] A. Kapravelos, Y. Shoshitaishvili, M. Cova, C. Kruegel, and G. Vigna.
Revolver: An automated approach to the detection of evasive web-based
malware. In Presented as part of the 22nd USENIX Security Symposium
(USENIX Security 13), pages 637-652, 2013.

[38] D. Kirat and G. Vigna. Malgene: Automatic extraction of malware
analysis evasion signature. In Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security, pages 769-780.
ACM, 2015.

[39] D. Kirat, G. Vigna, and C. Kruegel. Barecloud: bare-metal analysisbased evasive malware detection. In 23rd USENIX Security Symposium
(USENIX Security 14), pages 287-301, 2014.

[40] M. Lindorfer, C. Kolbitsch, and P. M. Comparetti. Detecting environmentsensitive malware. In International Workshop on Recent Advances in
Intrusion Detection, pages 338-357. Springer, 2011.

[41] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: statically vetting
android apps for component hijacking vulnerabilities. In Proceedings of
the 2012 ACM conference on Computer and communications security,
pages 229-240. ACM, 2012.

[42] A. Machiry, R. Tahiliani, and M. Naik. Dynodroid: An input generation
system for android apps. In Proceedings of the 2013 9th Joint Meeting
on Foundations of Software Engineering, pages 224-234. ACM, 2013.

[43] J. Oberheide and C. Miller. Dissecting the android bouncer. SummerCon2012, New York, 2012.

[44] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein, and
Y. Le Traon. Effective inter-component communication mapping in
android: An essential step towards holistic security analysis. In Presented
as part of the 22nd USENIX Security Symposium (USENIX Security 13),
pages 543-558, 2013.

[45] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis, and
S. Ioannidis. Rage against the virtual machine: hindering dynamic
analysis of android malware. In Proceedings of the Seventh European
Workshop on System Security, page 5. ACM, 2014.

[46] Z. Qu, V. Rastogi, X. Zhang, Y. Chen, T. Zhu, and Z. Chen. Autocog:
Measuring the description-to-permission fidelity in android applications.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 1354-1365. ACM, 2014.

[47] A. Reina, A. Fattori, and L. Cavallaro. A system call-centric analysis
and stimulation technique to automatically reconstruct android malware
behaviors. EuroSec, April, 2013.

[48] T. Vidas and N. Christin. Evading android runtime analysis via sandbox
detection. In Proceedings of the 9th ACM symposium on Information,
computer and communications security, pages 447-458. ACM, 2014.

[49] H. Wang, Y. Guo, Z. Ma, and X. Chen. Wukong: A scalable and accurate
two-phase approach to android app clone detection. In Proceedings of
the 2015 International Symposium on Software Testing and Analysis,
pages 71-82. ACM, 2015.

[50] L. Weichselbaum, M. Neugschwandtner, M. Lindorfer, Y. Fratantonio,
V. van der Veen, and C. Platzer. Andrubis: Android malware under
the magnifying glass. Vienna University of Technology, Tech. Rep.
TRISECLAB-0414, 1:5, 2014.

[51] W. Yang, X. Xiao, B. Andow, S. Li, T. Xie, and W. Enck. Appcontext:
Differentiating malicious and benign mobile app behaviors using context.
In 2015 IEEE/ACM 37th IEEE International Conference on Software
Engineering, volume 1, pages 303-313. IEEE, 2015.

[52] M. Zhang, Y. Duan, H. Yin, and Z. Zhao. Semantics-aware android
malware classification using weighted contextual api dependency graphs.
In Proceedings of the 2014 ACM SIGSAC Conference on Computer and
Communications Security, pages 1105-1116. ACM, 2014.

[53] C. Zheng, S. Zhu, S. Dai, G. Gu, X. Gong, X. Han, and W. Zou.
Smartdroid: an automatic system for revealing ui-based trigger conditions
in android applications. In Proceedings of the second ACM workshop on
Security and privacy in smartphones and mobile devices, pages 93-104.
ACM, 2012.