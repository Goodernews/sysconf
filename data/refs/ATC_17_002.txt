[1] A PPEL , A. W. Modern Compiler Implementation in ML. Cambridge University Press, 1998.

[2] B RUNEL , J., D OLIGEZ , D., H ANSEN , R. R., L AWALL , J. L.,
AND M ULLER , G. A foundation for flow-based program matching: using temporal logic and model checking. In POPL (2009),
pp. 114–126.

[3] Curl. https://curl.haxx.se/.

[4] F LURI , B., AND G ALL , H. C. Classifying change types for qualifying change couplings. In 14th IEEE International Conference
on Program Comprehension (2006), pp. 35–45.

[5] L AWALL , J., L AMBERT, Q., AND M ULLER , G. Prequel: A
patch-like query language for commit history search. Research
Report RR-8918, Inria Paris, June 2016.

[6] M ARTINEZ , M., D UCHIEN , L., AND M ONPERRUS , M. Automatically extracting instances of code change patterns with AST
analysis. In ICSM (2013), pp. 388–391.

[7] M ENG , S., WANG , X., Z HANG , L., AND M EI , H. A historybased matching approach to identification of framework evolution. In ICSE (2012), pp. 353–363.

[8] PADIOLEAU , Y., L AWALL , J. L., H ANSEN , R. R., AND
M ULLER , G. Documenting and automating collateral evolutions
in Linux device drivers. In EuroSys (2008), pp. 247–260.

[9] RODRIGUEZ , L. R., AND L AWALL , J. Increasing automation
in the backporting of Linux drivers using Coccinelle. In 11th
European Dependable Computing Conference - Dependability in
Practice (EDCC) (2015), pp. 132–143.

[10] S TEVENS , R., AND ROOVER , C. D. Extracting executable transformations from distilled code changes. In Software Analysis,
Evolution, and Reengineering (SANER) (2017), pp. 171–181.

[11] TARTLER , R., L OHMANN , D., S INCERO , J., AND S CHR ÖDER P REIKSCHAT, W.
Feature consistency in compile-timeconfigurable system software: facing the Linux 10,000 feature
problem. In EuroSys (2011), pp. 47–60.

[12] T HUNG , F., BACH , L. D. X., L O , D., AND L AWALL , J. Recommending code changes for automatic backporting of Linux device
drivers. In ICSME (2016), pp. 222–232.

[13] W EIMER , W., N GUYEN , T., L E G OUES , C., AND F ORREST,
S. Automatically finding patches using genetic programming. In
ICSE (2009), pp. 364–374.

[14] W U , W., G U ÉH ÉNEUC , Y.-G., A NTONIOL , G., AND K IM , M.
AURA: a hybrid approach to identify framework evolution. In
ICSE-Volume 1 (2010), pp. 325–334.
