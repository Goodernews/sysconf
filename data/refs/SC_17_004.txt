[1] 1995. SPEC’s Benchmarks. (1995). Retrieved July, 2017 from http://www.spec.
org/benchmarks.html
[2] 2000. Helgrind. (2000). Retrieved July, 2017 from http://valgrind.org/docs/
manual/hg-manual.html
[3] 2017. Intel Inspector 2017. (2017). Retrieved July, 2017 from https://software.
intel.com/en-us/intel-inspector-xe
[4] 2017. Livermore Computing Quartz system. (2017). Retrieved July, 2017 from
https://hpc.llnl.gov/hardware/platforms/Quartz
[5] 2017. LLVM Framework for High-Level Loop and Data-Locality Optimizations.
(2017). Retrieved July, 2017 from https://polly.llvm.org
[6] 2017. ThreadSanitizer. (2017). Retrieved July, 2017 from https://github.com/
google/sanitizers
[7] J. S. Alowibdi and L. Stenneth. 2013. An empirical study of data race detector
tools. In 2013 25th Chinese Control and Decision Conference (CCDC). 3951–3955.
https://doi.org/10.1109/CCDC.2013.6561640
[8] Cyrille Artho, Klaus Havelund, and Armin Biere. 2003. High-level data races.
Software Testing, Verification and Reliability 13, 4 (2003), 207–227. https://doi.
org/10.1002/stvr.281
[9] Vishal Aslot, Max Domeika, Rudolf Eigenmann, Greg Gaertner, Wesley B Jones,
and Bodo Parady. 2001. SPEComp: A new benchmark suite for measuring parallel
computer performance. In International Workshop on OpenMP Applications and
Tools. Springer, 1–10.
[10] Vishal Aslot, Max J. Domeika, Rudolf Eigenmann, Greg Gaertner, Wesley B.
Jones, and Bodo Parady. 2001. SPEComp: A New Benchmark Suite for Measuring
Parallel Computer Performance. In OpenMP Shared Memory Parallel Programming,
International Workshop on OpenMP Applications and Tools, WOMPAT 2001, West
Lafayette, IN, USA, July 30-31, 2001 Proceedings (Lecture Notes in Computer Science),
Rudolf Eigenmann and Michael Voss (Eds.), Vol. 2104. Springer, 1–10. https:
//doi.org/10.1007/3-540-44587-0_1
[11] Simone Atzeni, Ganesh Gopalakrishnan, Zvonimir Rakamaric, Dong H Ahn, Ignacio Laguna, Martin Schulz, Gregory L Lee, Joachim Protze, and Matthias S Müller.
2016. ARCHER: effectively spotting data races in large OpenMP applications.
In Parallel and Distributed Processing Symposium, 2016 IEEE International. IEEE,
53–62.
[12] Kunal Banerjee, Soumyadip Banerjee, and Santonu Sarkar. 2016. Data-race
detection: the missing piece for an end-to-end semantic equivalence checker for
parallelizing transformations of array-intensive programs. In Proceedings of the
3rd ACM SIGPLAN International Workshop on Libraries, Languages, and Compilers
for Array Programming. ACM, 1–8.
[13] V. Basupalli, Tomofumi Yuki, Sanjay V. Rajopadhye, Antoine Morvan, Steven
Derrien, Patrice Quinton, and David Wonnacott. 2011. ompVerify: Polyhedral
Analysis for the OpenMP Programmer. In OpenMP in the Petascale Era - 7th
International Workshop on OpenMP, IWOMP 2011, Chicago, IL, USA, June 1315, 2011. Proceedings (Lecture Notes in Computer Science), Barbara M. Chapman,
William D. Gropp, Kalyan Kumaran, and Matthias S. Müller (Eds.), Vol. 6665.
Springer, 37–53. https://doi.org/10.1007/978-3-642-21487-5_4
[14] S. M. Blackburn, R. Garner, C. Hoffman, A. M. Khan, K. S. McKinley, R. Bentzur,
A. Diwan, D. Feinberg, D. Frampton, S. Z. Guyer, M. Hirzel, A. Hosking, M.
Jump, H. Lee, J. E. B. Moss, A. Phansalkar, D. Stefanović, T. VanDrunen, D.
von Dincklage, and B. Wiedermann. 2006. The DaCapo Benchmarks: Java
Benchmarking Development and Analysis. In OOPSLA ’06: Proceedings of the
21st annual ACM SIGPLAN conference on Object-Oriented Programing, Systems,
Languages, and Applications. ACM Press, New York, NY, USA, 169–190. https:
//doi.org/10.1145/1167473.1167488
[15] Prasanth Chatarasi, Jun Shirako, and Vivek Sarkar. 2016. Static Data Race Detection for SPMD Programs via an Extended Polyhedral Representation. (2016).
[16] Shuai Che, Michael Boyer, Jiayuan Meng, David Tarjan, Jeremy W Sheaffer, SangHa Lee, and Kevin Skadron. 2009. Rodinia: A benchmark suite for heterogeneous
computing. In Workload Characterization, 2009. IISWC 2009. IEEE International
Symposium on. Ieee, 44–54.
[17] Jack J Dongarra, Piotr Luszczek, and Antoine Petitet. 2003. The LINPACK benchmark: past, present and future. Concurrency and Computation: practice and
experience 15, 9 (2003), 803–820.
[18] Antonio J Dorta, Casiano Rodriguez, and Francisco de Sande. 2005. The OpenMP
source code repository. In Parallel, Distributed and Network-Based Processing,
2005. PDP 2005. 13th Euromicro Conference on. IEEE, 244–250.

[19] Laura Effinger-Dean, Brandon Lucia, Luis Ceze, Dan Grossman, and Hans-Juergen
Boehm. 2012. IFRit: interference-free regions for dynamic data-race detection.
In Proceedings of the 27th Annual ACM SIGPLAN Conference on Object-Oriented
Programming, Systems, Languages, and Applications, OOPSLA 2012, part of SPLASH
2012, Tucson, AZ, USA, October 21-25, 2012, Gary T. Leavens and Matthew B. Dwyer
(Eds.). ACM, 467–484. https://doi.org/10.1145/2384616.2384650
[20] Cormac Flanagan and Stephen N. Freund. 2009. FastTrack: efficient and precise
dynamic race detection. In Proceedings of the 2009 ACM SIGPLAN Conference on
Programming Language Design and Implementation, PLDI 2009, Dublin, Ireland,
June 15-21, 2009, Michael Hind and Amer Diwan (Eds.). ACM, 121–133. https:
//doi.org/10.1145/1542476.1542490
[21] Jeff Huang, Patrick O’Neil Meredith, and Grigore Rosu. 2014. Maximal sound
predictive race detection with control flow abstraction. In ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’14, Edinburgh,
United Kingdom - June 09 - 11, 2014, Michael F. P. O’Boyle and Keshav Pingali
(Eds.). ACM, 337–348. https://doi.org/10.1145/2594291.2594315
[22] Hao-Qiang Jin, Michael Frumkin, and Jerry Yan. 1999. The OpenMP implementation of NAS parallel benchmarks and its performance. (1999).
[23] Vineet Kahlon, Yu Yang, Sriram Sankaranarayanan, and Aarti Gupta. 2007. Fast
and Accurate Static Data-Race Detection for Concurrent Programs. In Computer
Aided Verification, 19th International Conference, CAV 2007, Berlin, Germany, July
3-7, 2007, Proceedings (Lecture Notes in Computer Science), Werner Damm and
Holger Hermanns (Eds.), Vol. 4590. Springer, 226–239. https://doi.org/10.1007/
978-3-540-73368-3_26
[24] Young-Joo Kim, Daeyoung Kim, and Yong-Kee Jun. 2008. An Empirical Analysis of
Intel Thread Checker for Detecting Races in OpenMP Programs. In 7th IEEE/ACIS
International Conference on Computer and Information Science, IEEE/ACIS ICIS
2008, 14-16 May 2008, Portland, Oregon, USA, Roger Y. Lee (Ed.). IEEE Computer
Society, 409–414. https://doi.org/10.1109/ICIS.2008.79
[25] Leslie Lamport. 1978. Time, Clocks, and the Ordering of Events in a Distributed
System. Commun. ACM 21, 7 (1978), 558–565. https://doi.org/10.1145/359545.
359563
[26] Chunhua Liao, Daniel J Quinlan, Jeremiah J Willcock, and Thomas Panas. 2010.
Semantic-aware automatic parallelization of modern applications using highlevel abstractions. International Journal of Parallel Programming 38, 5 (2010),
361–378.
[27] Shan Lu, Zhenmin Li, Feng Qin, Lin Tan, Pin Zhou, and Yuanyuan Zhou. 2005.
Bugbench: Benchmarks for evaluating bug detection tools. In Workshop on the
evaluation of software defect detection tools, Vol. 5.
[28] Hongyi Ma, Steve R Diersen, Liqiang Wang, Chunhua Liao, Daniel Quinlan,
and Zijiang Yang. 2013. Symbolic analysis of concurrency errors in openmp
programs. In Parallel Processing (ICPP), 2013 42nd International Conference on.
IEEE, 510–516.
[29] Pallavi Maiya, Aditya Kanade, and Rupak Majumdar. 2014. Race detection for
Android applications. In ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI ’14, Edinburgh, United Kingdom - June 09 - 11,
2014, Michael F. P. O’Boyle and Keshav Pingali (Eds.). ACM, 316–325. https:
//doi.org/10.1145/2594291.2594311
[30] Satish Narayanasamy, Zhenghao Wang, Jordan Tigani, Andrew Edwards, and
Brad Calder. 2007. Automatically Classifying Benign and Harmful Data Races
Using Replay Analysis. In Proceedings of the 28th ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI ’07). ACM, New York,
NY, USA, 22–31. https://doi.org/10.1145/1250734.1250738
[31] Robert O’Callahan and Jong-Deok Choi. 2003. Hybrid dynamic data race detection.
In Proceedings of the ACM SIGPLAN Symposium on Principles and Practice of
Parallel Programming, PPOPP 2003, June 11-13, 2003, San Diego, CA, USA, Rudolf
Eigenmann and Martin C. Rinard (Eds.). ACM, 167–178. https://doi.org/10.1145/
781498.781528
[32] Paul Petersen and Sanjiv Shah. 2003. OpenMP support in the Intel® thread
checker. In International Workshop on OpenMP Applications and Tools. Springer,
1–12.
[33] Louis-Noël Pouchet. 2012. PolyOpt/C:a Polyhedral Optimizer for the ROSE
compiler. (2012). Retrieved July, 2017 from http://web.cs.ucla.edu/~pouchet/
software/polyopt/
[34] Louis-Noël Pouchet and Tomofumi Yuki. 2011. PolyBench/C. (2011). https:
//sourceforge.net/projects/polybench/
[35] Eli Poznianski and Assaf Schuster. 2003. Efficient On-the-Fly Data Race Detection
in Multithreaded C++ Programs. In 17th International Parallel and Distributed Processing Symposium (IPDPS 2003), 22-26 April 2003, Nice, France, CD-ROM/Abstracts
Proceedings. IEEE Computer Society, 287. https://doi.org/10.1109/IPDPS.2003.
1213513
[36] Polyvios Pratikakis, Jeffrey S. Foster, and Michael W. Hicks. 2006. LOCKSMITH:
context-sensitive correlation analysis for race detection. In Proceedings of the ACM
SIGPLAN 2006 Conference on Programming Language Design and Implementation,
Ottawa, Ontario, Canada, June 11-14, 2006, Michael I. Schwartzbach and Thomas
Ball (Eds.). ACM, 320–331. https://doi.org/10.1145/1133981.1134019
[37] J. Protze, S. Atzeni, D. H. Ahn, M. Schulz, G. Gopalakrishnan, M. S. MÃĳller, I.
Laguna, Z. Rakamaric, and G. L. Lee. 2014. Towards Providing Low-Overhead
Data Race Detection for Large OpenMP Applications. In 2014 LLVM Compiler
Infrastructure in HPC. 40–47. https://doi.org/10.1109/LLVM-HPC.2014.7
[38] Paul Sack, Brian E Bliss, Zhiqiang Ma, Paul Petersen, and Josep Torrellas. 2006.
Accurate and efficient filtering for the intel thread checker race detector. In
Proceedings of the 1st workshop on Architectural and system support for improving
software dependability. ACM, 34–41.
[39] Stefan Savage, Michael Burrows, Greg Nelson, Patrick Sobalvarro, and Thomas
Anderson. 1997. Eraser: A Dynamic Data Race Detector for Multithreaded
Programs. ACM Trans. Comput. Syst. 15, 4 (Nov. 1997), 391–411. https://doi.org/
10.1145/265924.265927
[40] Stefan Savage, Michael Burrows, Greg Nelson, Patrick Sobalvarro, and Thomas E.
Anderson. 1997. Eraser: A Dynamic Data Race Detector for Multithreaded
Programs. ACM Trans. Comput. Syst. 15, 4 (1997), 391–411. https://doi.org/10.
1145/265924.265927
[41] Konstantin Serebryany and Timur Iskhodzhanov. 2009. ThreadSanitizer: data race
detection in practice. In Proceedings of the Workshop on Binary Instrumentation
and Applications. ACM, 62–71.
[42] Yannis Smaragdakis, Jacob Evans, Caitlin Sadowski, Jaeheon Yi, and Cormac
Flanagan. 2012. Sound predictive race detection in polynomial time. In Proceedings
of the 39th ACM SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, POPL 2012, Philadelphia, Pennsylvania, USA, January 22-28, 2012, John
Field and Michael Hicks (Eds.). ACM, 387–400. https://doi.org/10.1145/2103656.
2103702
[43] L. A. Smith, J. M. Bull, and J. Obdrizalek. 2001. A Parallel Java Grande Benchmark
Suite. In Supercomputing, ACM/IEEE 2001 Conference. 6–6. https://doi.org/10.
1145/582034.582042
[44] Michael Süß and Claudia Leopold. 2008. Common mistakes in OpenMP and
how to avoid them. In OpenMP Shared Memory Parallel Programming. Springer,
312–323.
[45] Jan Wen Voung, Ranjit Jhala, and Sorin Lerner. 2007. RELAY: static race detection
on millions of lines of code. In Proceedings of the 6th joint meeting of the European
Software Engineering Conference and the ACM SIGSOFT International Symposium
on Foundations of Software Engineering, 2007, Dubrovnik, Croatia, September 37, 2007, Ivica Crnkovic and Antonia Bertolino (Eds.). ACM, 205–214. https:
//doi.org/10.1145/1287624.1287654
[46] Misun Yu, Seung-Min Park, Ingeol Chun, and Doo-Hwan Bae. 2017. Experimental
Performance Comparison of Dynamic Data Race Detection Techniques. ETRI
Journal 39, 1 (02 2017), 124–134. https://doi.org/10.4218/etrij.17.0115.1027
[47] Yuan Yu, Tom Rodeheffer, and Wei Chen. 2005. RaceTrack: efficient detection
of data race conditions via adaptive tracking. In Proceedings of the 20th ACM
Symposium on Operating Systems Principles 2005, SOSP 2005, Brighton, UK, October
23-26, 2005, Andrew Herbert and Kenneth P. Birman (Eds.). ACM, 221–234. https:
//doi.org/10.1145/1095810.1095832
[48] Manchun Zheng, Michael S. Rogers, Ziqing Luo, Matthew B. Dwyer, and
Stephen F. Siegel. 2015. CIVL: Formal Verification of Parallel Programs. In
30th IEEE/ACM International Conference on Automated Software Engineering, ASE
2015, Lincoln, NE, USA, November 9-13, 2015, Myra B. Cohen, Lars Grunske, and
Michael Whalen (Eds.). IEEE Computer Society, 830–835. https://doi.org/10.1109/
ASE.2015.99
