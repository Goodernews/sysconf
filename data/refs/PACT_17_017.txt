[1] Nvidia, “CUDA C Programming Guide v7.5, september 2015.
NVIDIA Developer Zone: website,” 2015.
[2] OpenCL, “OpenCL 2.1 Reference Pages, The Khronos Group
Inc.: website,” 2015.
[3] R. Wu, S. Yan, Y. Shan, Q. Dang, and G. Sun, “Deep
Image: Scaling up Image Recognition,” arXiv preprint
arXiv:1501.02876, vol. 7, no. 8, 2015.
[4] P. Bakkum and K. Skadron, “Accelerating SQL Database
Operations on a GPU with CUDA,” in Proceedings of the
3rd Workshop on General-Purpose Computation on Graphics
Processing Units. ACM, 2010, pp. 94–103.
[5] M. Burtscher, R. Nasre, and K. Pingali, “A Quantitative Study
of Irregular Programs on GPUs,” in 2012 IEEE International
Symposium on Workload Characterization (IISWC). IEEE,
2012, pp. 141–151.
[6] Nvidia, “CUDA C Best Practice Guide v7.5, September 2015,
NVIDIA Developer Zone: website,” 2015.
[7] P. Misra and M. Chaudhuri, “Performance Evaluation of
Concurrent Lock-Free Data Structures on GPUs,” in 18th
IEEE International Conference on Parallel and Distributed
Systems. IEEE, 2012, pp. 53–60.
[8] D. Cederman, B. Chatterjee, and P. Tsigas, “Understanding
the Performance of Concurrent Data Structures on Graphics
Processors,” in European Conference on Parallel Processing.
Springer, 2012, pp. 883–894.
[9] RocksDB, “A Persistent Key-Value Store for Fast Storage
Environments,” http://rocksdb.org/, 2014.
[10] J. L. Carlson, Redis in Action. Manning Publications Co.,
2013.
[11] N. Shavit and I. Lotan, “Skiplist-Based Concurrent Priority
Queues,” in Parallel and Distributed Processing Symposium,
2000. IPDPS 2000. Proceedings. 14th International. IEEE,
2000, pp. 263–268.
[12] J. A. Stuart and J. D. Owens, “Efficient Synchronization
Primitives for GPUs,” arXiv preprint arXiv:1110.4623, 2011.
[13] W. Pugh, “Skip Lists: a Probabilistic Alternative to Balanced
Trees,” Communications of the ACM, vol. 33, no. 6, pp. 668–
676, 1990.
[14] M. Herlihy and N. Shavit, The Art of Multiprocessor Programming, Revised Reprint. Elsevier, 2012.
[15] W. Pugh, “Concurrent Maintenance of Skip Lists,” Institute
for Advanced Computer Science, Department of Computer
Science, University of Maryland, Tech. Rep. CS-TR-2222.1,
1990.
[16] M. Herlihy, Y. Lev, V. Luchangco, and N. Shavit, “A Provably
Correct Scalable Concurrent Skip List,” in Conference On
Principles of Distributed Systems (OPODIS). Citeseer, 2006.
[17] D. Alistarh, W. M. Leiserson, A. Matveev, and N. Shavit,
“ThreadScan: Automatic and Scalable Memory Reclamation,”
in Proc. 27th ACM Symp. Parallelism Algorithms Archit. -
SPAA ’15. New York, New York, USA: ACM Press, 2015,
pp. 123–132. [Online]. Available: http://dl.acm.org/citation.
cfm?doid=2755573.2755600
[18] O. Balmau, R. Guerraoui, M. Herlihy, and I. Zablotchi,
“Fast and Robust Memory Reclamation for Concurrent
Data Structures,” in Proc. 28th ACM Symp. Parallelism
Algorithms Archit. - SPAA ’16. New York, New York,
USA: ACM Press, 2016, pp. 349–359. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=2935764.2935790
[19] T. A. Brown, “Reclaiming Memory for Lock-Free
Data Structures,” in Proc. 2015 ACM Symp. Princ.
Distrib. Comput. - Pod. ’15. New York, New
York, USA: ACM Press, 2015, pp. 261–270. [Online]. Available: http://dl.acm.org/citation.cfm?doid=2767386.
2767436http://dl.acm.org/citation.cfm?id=2767386.2767436
[20] N. Cohen and E. Petrank, “Efficient Memory Management
for Lock-Free Data Structures with Optimistic Access,” in
Proc. 27th ACM Symp. Parallelism Algorithms Archit. -
SPAA ’15. New York, New York, USA: ACM Press, 2015,
pp. 254–263. [Online]. Available: http://dl.acm.org/citation.
cfm?doid=2755573.2755579
[21] N. Cohen and E. Petrank, “Automatic Memory Reclamation
for Lock-Free Data Structures,” in Proc. 2015 ACM SIGPLAN
Int. Conf. Object-Oriented Program. Syst. Lang. Appl. -
OOPSLA 2015, vol. 50, no. 10. New York, New York,
USA: ACM Press, 2015, pp. 260–279. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=2814270.2814298
[22] D. Dice, M. Herlihy, and A. Kogan, “Fast NonIntrusive Memory Reclamation for Highly-Concurrent Data
Structures,” in Proc. 2016 ACM SIGPLAN Int. Symp.
Mem. Manag. - ISMM 2016. New York, New York,
USA: ACM Press, 2016, pp. 36–45. [Online]. Available:
http://dl.acm.org/citation.cfm?doid=2926697.2926699
[23] K. Zhang, K. Wang, Y. Yuan, L. Guo, R. Lee, and X. Zhang,
“Mega-KV: A Case for GPUs to Maximize the Throughput
of In-Memory Key-Value Stores,” Proceedings of the VLDB
Endowment, vol. 8, no. 11, pp. 1226–1237, 2015.
[24] P. Misra and M. Chaudhuri, “Source code for lock-free data
structure implementation (POSIX threads and CUDA),” in
http://www.cse.iitk.ac.in/users/mainakc/lockfree.html, 2012.
[25] S. Hong, S. K. Kim, T. Oguntebi, and K. Olukotun, “Accelerating CUDA Graph Algorithms at Maximum Warp,”
in Proceedings of the 16th ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, vol. 46,
no. 8. ACM, 2011, pp. 267–276.
[26] D. A. Alcantara, V. Volkov, S. Sengupta, M. Mitzenmacher,
J. D. Owens, and N. Amenta, “Building an efficient hash table
on the gpu,” GPU Computing Gems, vol. 2, pp. 39–53, 2011.
[27] R. Bordawekar, “Evaluation of parallel hashing techniques,”
GTC, 2014.
[28] F. Khorasani, M. E. Belviranli, R. Gupta, and L. N. Bhuyan,
“Stadium Hashing: Scalable and Flexible Hashing on GPUs,”
in Parallel Architecture and Compilation (PACT), 2015 International Conference on. IEEE, 2015, pp. 63–74.
[29] A. D. Breslow, D. P. Zhang, J. L. Greathouse, N. Jayasena,
and D. M. Tullsen, “Horton Tables: Fast Hash Tables for
In-Memory Data-Intensive Computing.” in USENIX Annual
Technical Conference, 2016, pp. 281–294.
[30] I. Garc´ıa, S. Lefebvre, S. Hornus, and A. Lasram, “Coherent
parallel hashing,” in ACM Transactions on Graphics (TOG),
vol. 30, no. 6. ACM, 2011, p. 161.
[31] T. R. Scogland and W. Feng, “Design and Evaluation of
Scalable Concurrent Queues for Many-Core Architectures,” in
Proceedings of the 6th ACM/SPEC International Conference
on Performance Engineering. ACM, 2015, pp. 63–74.
[32] J. C. Yang, J. Hensley, H. Grun, and N. Thibieroz, “Real- ¨
Time Concurrent Linked List Construction on the GPU,” in
Computer Graphics Forum, vol. 29, no. 4. Wiley Online
Library, 2010, pp. 1297–1304.
[33] P. Harish and P. Narayanan, “Accelerating Large Graph
Algorithms on the GPU Using CUDA,” in International
Conference on High-Performance Computing. Springer,
2007, pp. 197–208.
[34] J. Zhong and B. He, “Medusa: Simplified Graph Processing
on GPUs,” IEEE Transactions on Parallel and Distributed
Systems, vol. 25, no. 6, pp. 1543–1552, 2014.
[35] D. Merrill, M. Garland, and A. Grimshaw, “HighPerformance and Scalable GPU Graph Traversal,” ACM
Transactions on Parallel Computing, vol. 1, no. 2, p. 14, 2015.
[36] K. Zhou, Q. Hou, R. Wang, and B. Guo, “Real-Time KD-tree
Construction on Graphics Hardware,” ACM Transactions on
Graphics (TOG), vol. 27, no. 5, p. 126, 2008.
[37] L. Luo, M. D. Wong, and L. Leong, “Parallel Implementation
of R-Trees on the GPU,” in 17th Asia and South Pacific
Design Automation Conference. IEEE, 2012, pp. 353–358.
[38] K. Zhou, M. Gong, X. Huang, and B. Guo, “Highly Parallel
Surface Reconstruction,” Microsoft Research Asia, 2008.
[39] C. Kim, J. Chhugani, N. Satish, E. Sedlar, A. D. Nguyen,
T. Kaldewey, V. W. Lee, S. A. Brandt, and P. Dubey, “Fast:
fast architecture sensitive tree search on modern cpus and
gpus,” in Proceedings of the 2010 ACM SIGMOD International Conference on Management of data. ACM, 2010, pp.
339–350.
[40] J. Sewall, J. Chhugani, C. Kim, N. Satish, and P. Dubey,
“Palm: Parallel architecture-friendly latch-free modifications
to b+ trees on many-core processors,” Proc. VLDB Endowment, vol. 4, no. 11, pp. 795–806, 2011.
[41] S. Zeuch, F. Huber, and J.-c. Freytag, “Adapting tree structures for processing with simd instructions,” 2014.
[42] J. Zhou and K. A. Ross, “Implementing database operations
using simd instructions,” in Proceedings of the 2002 ACM
SIGMOD international conference on Management of data.
ACM, 2002, pp. 145–156.
[43] K. A. Ross, “Efficient hash probes on modern processors,”
in Data Engineering, 2007. ICDE 2007. IEEE 23rd International Conference on. IEEE, 2007, pp. 1297–1301.
[44] S. Sprenger, S. Zeuch, and U. Leser, “Cache-sensitive skip
list: Efficient range queries on modern cpus,” in International
Workshop on In-Memory Data Management and Analytics.
Springer, 2016, pp. 1–17.
[45] A. Braginsky and E. Petrank, “Locality-Conscious Lock-Free
Linked Lists,” in International Conference on Distributed
Computing and Networking. Springer, 2011, pp. 107–118.
[46] A. Braginsky and E. Petrank, “A Lock-Free B+ Tree,” in
Proceedings of the twenty-fourth annual ACM symposium on
Parallelism in algorithms and architectures. ACM, 2012,
pp. 58–67.
