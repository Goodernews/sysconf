[1] 2017. monkeyRunner. https://developer.android.com/studio/test/monkeyrunner
/index.html. (2017).
[2] 2017. Trail: The Reflection API. https://docs.oracle.com/javase/tutorial/reflect/.
(2017).
[3] 2017. UI/Application Exerciser Monkey. http://developer.android.com/tools/help/
monkey.html. (2017).
[4] 2017. VirusTotal. https://www.virustotal.com. (2017).
[5] 2017. VirusTotal file statistics during last 7 days. https://www.virustotal.com/en
/statistics/. (2017).
[6] AddictiveTips. 2017. Easily Monitor All Incoming & Outgoing Network Connections On Android. http://www.addictivetips.com/android/monitor-all-incomingoutgoing-network-connections-on-android/. (2017).
[7] Hasan Faik Alan and Jasleen Kaur. [n. d.]. Can Android Applications Be Identified
Using Only TCP/IP Headers of Their Launch Time Traffic. In Proceedings of the
9th ACM Conference on Security and Privacy in Wireless and Mobile Networks
(WiSec’ 16), r (Ed.).
[8] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel,
Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014.
FlowDroid: precise context, flow, field, object-sensitive and lifecycle-aware taint
analysis for Android apps. In Proceedings of the ACM SIGPLAN Conference on
Programming Language Design and Implementation, PLDI 2014. 29.
[9] Kai Chen, Peng Liu, and Yingjun Zhang. 2014. Achieving accuracy and scalability simultaneously in detecting application clones on android markets.
In Proceedings of the 36th International Conference on Software Engineering.
ACM, 175–186.
[10] Kai Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Nan Zhang, Heqing
Huang, Wei Zou, and Peng Liu. 2015. Finding Unknown Malice in 10 Seconds:
Mass Vetting for New Threats at the Google-Play Scale.. In USENIX Security
Symposium. 659–674.
[11] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang,
Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following devil’s
footprints: Cross-platform analysis of potentially harmful libraries on android
and ios. In Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 357–376.
[12] Mauro Conti, Luigi V. Mancini, Riccardo Spolaor, and Nino Vincenzo Verde. 2015.
Can’t You Hear Me Knocking: Identification of User Actions on Android Apps
via Traffic Analysis. In Proceedings of the 5th ACM Conference on Data and
Application Security and Privacy (CODASPY’ 15). 297–304.

[13] Andrea Continella, Yanick Fratantonio, Martina Lindorfer, Alessandro Puccetti, Ali Zand, Christopher Kruegel, and Giovanni Vigna. 2017. Obfuscationresilient privacy leak detection for mobile apps through differential analysis. In
Proceedings of the ISOC Network and Distributed System Security Symposium
(NDSS). 1–16.
[14] Shuaifu Dai, Alok Tongaonkar, Xiaoyin Wang, Antonio Nucci, and Dawn
Song. 2013. NetworkProfiler: Towards automatic fingerprinting of Android
apps. In Proceedings of the 32nd IEEE International Conference on Computer
Communications (INFOCOM’ 13). 809–817.
[15] Marianne De Michiel, Armelle Bonenfant, Hugues Cassé, and Pascal Sainrat. 2008.
Static Loop Bound Analysis of C Programs Based on Flow Analysis and Abstract
Interpretation. In Proceedings of the 14th IEEE International Conference on
Embedded and Real-Time Computing Systems and Applications. IEEE, 161–166.
[16] Gartner. 2017. Managed Security Service Provider (MSSP).
http://www.gartner.com/it-glossary/mssp-managed-security-service-provider/.
(2017).
[17] Arnab Ghosh, Prashant Kumar Gajar, and Shashikant Rai. 2013. Bring your
own device (BYOD): Security risks and mitigating strategies. Journal of Global
Research in Computer Science 4, 4 (2013), 62–70.
[18] Google. 2017. The Google Android Security Team’s Classifications for Potentially
Harmful Applications. https://static.googleusercontent.com/media/source.andro
id.com/en//security/reports/Google Android Security PHA classifications.pdf.
(2017).
[19] Michael I Gordon, Deokhwan Kim, Jeff Perkins, Limei Gilham, Nguyen Nguyen,
and Martin Rinard. 2015. Information-flow analysis of Android applications in
DroidSafe. In Proc. of the Network and Distributed System Security Symposium
(NDSS). The Internet Society.
[20] Johannes Hoffmann, Martin Ussath, Thorsten Holz, and Michael Spreitzenbarth.
[n. d.]. Slicing droids: program slicing for smali code. In Proceedings of the 28th
Annual ACM Symposium on Applied Computing (SAC’ 13). 1844–1851.
[21] Anurag Kumar Jain and Devendra Shanbhag. 2012. Addressing Security and
Privacy Risks in Mobile Applications. IT Professional 14, 5 (2012), 28–33.
[22] Mariam Kamkar, Peter Fritzson, and Nahid Shahmehri. 1993. Interprocedural
Dynamic Slicing Applied to Interprocedural Data How Testing. In Proceedings
of the Conference on Software Maintenance (ICSM’ 93). 386–395.
[23] Bogdan Korel and Juergen Rilling. 1998. Program Slicing in Understanding of
Large Programs. In Proceedings of the 6th International Workshop on Program
Comprehension (IWPC’ 89). 145–152.
[24] Anh Le, Janus Varmarken, Simon Langhoff, Anastasia Shuba, Minas Gjoka,
and Athina Markopoulou. 2015. AntMonitor: A System for Monitoring from
Mobile Devices. In Proceedings of the 2015 ACM SIGCOMM Workshop on
Crowdsourcing and Crowdsharing of Big (Internet) Data,. 15–20.
[25] Bin Liang, Pan Bian, Yan Zhang, Wenchang Shi, Wei You, and Yan Cai. 2016.
AntMiner: mining more bugs by reducing noise interference. In Proceedings
of the 38th International Conference on Software Engineering (ICSE 2016). 333–
344.
[26] Envato Pty Ltd. 2017.
Analyzing Android Network Traffic.
http://code.tutsplus.com
/tutorials/analyzing-android-network-traffic–mobile-10663. (2017).
[27] Andrea De Lucia, Anna Rita Fasolino, and Malcolm Munro. 1996. Understanding Function Behaviors through Program Slicing. In Proceedings of the 4th
International Workshop on Program Comprehension (WPC’ 96). 9–10.
[28] Stanislav Miskovic, Gene Moo Lee, Yong Liao, and Mario Baldi. 2015. AppPrint: Automatic Fingerprinting of Mobile Applications in Network Traffic.
In Proceedings of the 16th International Conference on Passive and Active
Measurement (PAM’ 15). 57–69.
[29] Sophon Mongkolluksamee, Vasaka Visoottiviseth, and Kensuke Fukuda. 2015.
Enhancing the Performance of Mobile Traffic Identification with Communication Patterns. In Proceedings of the 39th IEEE Annual Computer Software and
Applications Conference (COMPSAC’ 2015). 336–345.
[30] Fairuz Amalina Narudin, Ali Feizollah, Nor Badrul Anuar, and Abdullah Gani.
2016. Evaluation of machine learning classifiers for mobile malware detection.
Soft Comput. 20, 1 (2016), 343–357.
[31] Palo Alto Networks. 2017. WildFire Analysis Categories. https://www.paloaltonetworks.com/documentation/autofocus/autofocus/autofocus admin guide/
assess-autofocus-artifacts/wildfire-analysis-categories.html. (2017).
[32] Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016.
Harvesting Runtime Values in Android Applications That Feature Anti-Analysis
Techniques. In Proceedings of the Network and Distributed System Security
Symposium (NDSS’ 16).
[33] RFC. 2000. HTTP Over TLS. https://tools.ietf.org/html/rfc2818. (2000).
[34] Juergen Rilling and Tuomas Klemola. 2003. Identifying comprehension bottlenecks using program slicing and cognitive complexity metrics. In Proceedings
of the 11th IEEE International Workshop on Program Comprehension. IEEE,
115–124.
[35] Smali. 2013.
An assembler/disassembler for Android’s dex format.
http://code.google
.com/p/smali/. (2013).

[36] Manu Sridharan, Stephen J. Fink, and Rastislav Bodı́k. 2007. Thin slicing. In
Proceedings of the ACM SIGPLAN 2007 Conference on Programming Language
Design and Implementation (PLDI’ 07). 112–122.
[37] Jianhua Sun, Lingjun She andHao Chen, Wenyong Zhong, Cheng Chang, Zhiwen
Chen, Wentao Li, and Shuna Yao. 2015. Automatically identifying apps in mobile
traffic. Concurrency and Computation: Practice and Experience (2015).
[38] Frank Tip. 1995. A survey of program slicing techniques. Journal of Program
Language 3, 3 (1995).
[39] Alok Tongaonkar, Shuaifu Dai, Antonio Nucci, and Dawn Song. 2013. Understanding Mobile App Usage Patterns Using In-App Advertisements. In
Proceedings of the 14th International Conference on Passive and Active
Measurement (PAM’ 13). 63–72.
[40] Aliaksei Tsitovich, Natasha Sharygina, Christoph M Wintersteiger, and Daniel
Kroening. 2011. Loop summarization and termination analysis. In International
Conference on Tools and Algorithms for the Construction and Analysis of

Systems. Springer, 81–95.
[41] Mark Weiser. 1982. Programmers Use Slices When Debugging. Commun. ACM
25, 7 (1982), 446–452.
[42] Qiang Xu, Thomas Andrews, Yong Liao, Stanislav Miskovic, Zhuoqing Morley Mao, Mario Baldi, and Antonio Nucci. 2014. FLOWR: a self-learning
system for classifying mobileapplication traffic. In Proceedings of the
International Conference on Measurement and Modeling of Computer Systems
(SIGMETRICS’14). 569–570.
[43] Mu Zhang and Heng Yin. 2014. Efficient, Context-aware Privacy Leakage Confinement for Android Applications Without Firmware Modding. In Proceedings
of the 9th ACM Symposium on Information, Computer and Communications
Security (CCS’ 14). ACM, 259–270.
[44] Xiangyu Zhang, Neelam Gupta, and Rajiv Gupta. 2006. Pruning dynamic slices
with confidence. In Proceedings of the ACM SIGPLAN 2006 Conference on
Programming Language Design and Implementation (PLDI’ 06). 169–180.
