[1] T. Sakaki, M. Okazaki, and Y. Matsuo, “Tweet Analysis for
Real-Time Event Detection and Earthquake Reporting System
Development,” IEEE Transactions on Knowledge and Data Engineering, vol. 25, no. 4, pp. 919–931, 2013.
[2] “How the USGS uses Twitter data to track earthquakes,” https:
//blog.twitter.com/2015/usgs-twitter-data-earthquake-detection.
[3] “Apache Hadoop Distributed File System,” http://hadoop.apache.
org/, Accessed: 2016-05-20.
[4] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker, and
I. Stoica, “Spark: Cluster Computing with Working Sets,” in
HotCloud, 2010, pp. 10–10.
[5] “IBM InfoSphere Streams,” http://www-03.ibm.com/software/
products/en/infosphere-streams/, Accessed: 2016-05-20.
[6] “Apache Storm,” http://storm.apache.org/, Accessed: 2016-05-20.
[7] E. Kalyvianaki, M. Fiscato, T. Salonidis, and P. Pietzuch,
“THEMIS: Fairness in Federated Stream Processing under Overload,” in SIGMOD, 2016.
[8] B. Guﬂer, N. Augsten, A. Reiser, and A. Kemper, “Load Balancing in MapReduce Based on Scalable Cardinality Estimates,” in
ICDE, 2012, pp. 522–533.
[9] R. Krikorian, “New Tweets per second record, and how!” https:
//blog.twitter.com/2013/new-tweets-per-second-record-and-how,
Accessed: 2016-05-20.
[10] “Slashdot Effect,” https://en.wikipedia.org/wiki/Slashdot effect,
Accessed: 2016-05-20.
[11] N. Tatbul and S. B. Zdonik, “Window-Aware Load Shedding for
Aggregation Queries over Data Streams,” in VLDB, 2006, pp.
799–810.
[12] R. Birke, M. Björkqvist, E. Kalyvianaki, and L. Y. Chen,
“Meeting Latency Target in Transient Burst: A Case on Spark
Streaming,” in IEEE IC2E, 2017, pp. 149–158.
[13] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger, “Architecture support for disciplined approximate programming,” in
ASPLOS, 2012, pp. 301–312.
[14] S. Misailovic, M. Carbin, S. Achour, Z. Qi, and M. C. Rinard,
“Chisel: reliability- and accuracy-aware optimization of approximate computational kernels,” in OOPSLA, 2014, pp. 309–328.
[15] I. Goiri, R. Bianchini, S. Nagarakatte, and T. D. Nguyen, “ApproxHadoop: Bringing Approximations to MapReduce Frameworks,” in ASPLOS, 2015, pp. 383–397.
[16] Y. Ying, R. Birke, C. Wang, L. Y. Chen, and N. Gautam, “Optimizing Energy, Locality and Priority in a MapReduce Cluster,”
in ICAC, 2015, pp. 21–30.
[17] S. Agarwal, B. Mozafari, A. Panda, H. Milner, S. Madden, and
I. Stoica, “BlinkDB: queries with bounded errors and bounded
response times on very large data,” in Eurosys, 2013, pp. 29–42.
[18] T. Das, Y. Zhong, I. Stoica, and S. Shenker, “Adaptive Stream
Processing using Dynamic Batch Sizing,” in SoCC, 2014, pp.
16:1–16:13.
[19] S. Lohr, Sampling: Design and Analysis. Cengage Learning,
2009.
[20] S. Coles, J. Bawa, L. Trenner, and P. Dorazio, An introduction
to statistical modeling of extreme values. Springer, 2001, vol.
208.
[21] C. H. Xia, D. F. Towsley, and C. Zhang, “Distributed Resource
Management and Admission Control of Stream Processing Systems with Max Utility,” in ICDCS, 2007, pp. 68–68.
[22] M. Samadi, D. A. Jamshidi, J. Lee, and S. A. Mahlke, “Paraprox:
pattern-based approximation for data parallel applications,” in
ASPLOS, 2014, pp. 35–50.
[23] R. Birke, E. Kalyvianaki, W. Binder, M. Schmatz, and L. Y. Chen,
“Dynamic block sizing for data stream processing systems,” in
IC2E, 2016.
[24] L. A. Moakar, P. K. Chrysanthis, C. Chung, S. Guirguis,
A. Labrinidis, P. Neophytou, and K. Pruhs, “Admission control
mechanisms for continuous queries in the cloud,” in ICDE, 2010,
pp. 409–412.
[25] C. Balkesen, M. T. Ozsu, and N. Tatbul, “Adaptive Input Admission and Management for Parallel Stream Processing,” in DEBS,
2013, pp. 15–26.
[26] P. J. Haas, J. F. Naughton, S. Seshadri, and A. N. Swami,
“Selectivity and Cost Estimation for Joins Based on Random
Sampling,” J. Comput. Syst. Sci., vol. 52, no. 3, pp. 550–569,
1996.
[27] N. Tatbul, U. Çetintemel, and S. B. Zdonik, “Staying FIT:
Efﬁcient Load Shedding Techniques for Distributed Stream Processing,” in VLDB, 2007, pp. 159–170.
[28] J. F. Perez, R. Birke, and L. Y. Chen, “On the Latency-Accuracy
Tradeoff in Approximate MapReduce Jobs,” in IEEE INFOCOM,
2017.