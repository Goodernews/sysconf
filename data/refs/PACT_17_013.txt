[1] Standard Performance Evaluation Corporation. [Online]. Available:
http://www.spec.org
[2] F. J. Cazorla, A. Ram´ırez, M. Valero, P. M. Knijnenburg, R. Sakellariou,
and E. Fernandez, “QoS for High-Performance SMT Processors in ´
Embedded Systems,” IEEE Micro, vol. 24, no. 4, pp. 24–31, 2004.
[3] J. Chang and G. S. Sohi, “Cooperative Cache Partitioning for Chip
Multiprocessors,” in Proceedings of the 21st Annual International Conference on Supercomputing (ICS), 2007, pp. 242–252.
[4] C. K. Chow, “Determination of Cache’s Capacity and Its Matching
Storage Hierarchy,” IEEE Transactions on Computers, vol. 25, no. 2,
pp. 157–164, 1976.
[5] H. Cook, M. Moreto, S. Bird, K. Dao, D. A. Patterson, and K. Asanovic, ´
“A Hardware Evaluation of Cache Partitioning to Improve Utilization
and Energy-Efficiency while Preserving Responsiveness,” in Proceedings of the 40th Annual International Symposium on Computer Architecture (ISCA), 2013, pp. 308–319.
[6] R. Das, R. Ausavarungnirun, O. Mutlu, A. Kumar, and M. Azimi,
“Application-to-core Mapping Policies to Reduce Memory Interference
in Multi-core Systems,” in Proceedings of the 21st International Conference on Parallel Architectures and Compilation Techniques (PACT),
2012, pp. 455–456.
[7] K. Du Bois, S. Eyerman, and L. Eeckhout, “Per-thread Cycle Accounting
in Multicore Processors,” ACM Transactions on Architecture and Code
Optimization, vol. 9, no. 4, pp. 29:1–29:22, 2013.
[8] J. C. Dunn, “A Fuzzy Relative of the ISODATA Process and Its Use
in Detecting Compact Well-Separated Clusters,” Journal of Cybernetics,
vol. 3, no. 3, pp. 32–57, 1973.
[9] E. Ebrahimi, C. J. Lee, O. Mutlu, and Y. N. Patt, “Fairness via Source
Throttling: A Configurable and High-performance Fairness Substrate for
Multi-core Memory Systems,” in Proceedings of the 15th International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2010, pp. 335–346.
[10] B. Everitt, The Cambridge dictionary of statistics, 2002.
[11] S. Eyerman and L. Eeckhout, “System-Level Performance Metrics for
Multiprogram Workloads,” IEEE Micro, vol. 28, no. 3, pp. 42–53, 2008.
[12] S. Eyerman and L. Eeckhout, “Per-thread Cycle Accounting in SMT
Processors,” in Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems
(ASPLOS), 2009, pp. 133–144.
[13] S. Eyerman and L. Eeckhout, “Restating the Case for WeightedIPC Metrics to Evaluate Multiprogram Workload Performance,” IEEE
Computer Architecture Letters, vol. 13, no. 2, pp. 93–96, 2014.
[14] J. Feliu, J. Sahuquillo, S. Petit, and J. Duato, “Addressing Fairness in
SMT Multicores with a Progress-Aware Scheduler,” in Proceedings of
the 29th International Parallel and Distributed Processing Symposium
(IPDPS), 2015, pp. 187–196.
[15] L. Funaro, O. A. Ben-Yehuda, and A. Schuster, “Ginseng: MarketDriven LLC Allocation,” in Proceedings of the USENIX Conference on
Usenix Annual Technical Conference, 2016, pp. 295–308.
[16] R. Gabor, S. Weiss, and A. Mendelson, “Fairness Enforcement in Switch
on Event Multithreading,” ACM Transactions on Architecture and Code
Optimization, vol. 4, no. 3, 2007.
[17] S. Gupta and H. Zhou, “Spatial Locality-Aware Cache Partitioning
for Effective Cache Sharing,” in Proceedings of the 44th International
Conference on Parallel Processing (ICPP), 2015, pp. 150–159.
[18] J. A. Hartigan and M. A. Wong, “Algorithm AS 136: A K-Means
Clustering Algorithm,” Journal of the Royal Statistical Society, vol. 28,
no. 1, pp. 100–108, 1979.
[19] A. Hartstein, V. Srinivasan, T. R. Puzak, and P. G. Emma, “On the
Nature of Cache Miss Behavior: Is It √2?” Journal of Instruction-Level
Parallelism, vol. 10, 2008.
[20] L. R. Hsu, S. K. Reinhardt, R. Iyer, and S. Makineni, “Communist,
Utilitarian, and Capitalist Cache Policies on CMPs: Caches As a Shared
Resource,” in Proceedings of the 15th International Conference on
Parallel Architectures and Compilation Techniques (PACT), 2006, pp.
13–22.
[21] Intel Corporation, Intel Xeon Processor E5-
2658 v3. Available: http://ark.intel.com/es/products/81905/
Intel-Xeon-Processor-E5-2658-v3-30M-Cache-2 20-GHz
[22] Intel Corporation, Processor Counter Monitor. Available: https:
//github.com/opcm/pcm.git
[23] Intel Corporation, User space software for Intel Resource Director
Technology. Available: https://github.com/01org/intel-cmt-cat
[24] Intel Corporation, Improving Real-Time Performance by Utilizing
Cache Allocation Technology, April 2015, no. 31843-001US. Available: http://www.intel.com/content/dam/www/public/us/en/documents/
white-papers/cache-allocation-technology-white-paper.pdf
[25] R. Iyer, “CQoS: A Framework for Enabling QoS in Shared Caches
of CMP Platforms,” in Proceedings of the 18th Annual International
Conference on Supercomputing (ICS), 2004, pp. 257–266.
[26] R. Iyer, L. Zhao, F. Guo, R. Illikkal, S. Makineni, D. Newell, Y. Solihin, L. Hsu, and S. Reinhardt, “QoS Policies and Architecture for
Cache/Memory in CMP Platforms,” in Proceedings of the International
Conference on Measurement and Modeling of Computer Systems (SIGMETRICS), 2007, pp. 25–36.
[27] H. Kasture and D. Sanchez, “Ubik: Efficient Cache Sharing with
Strict QoS for Latency-critical Workloads,” in Proceedings of the 19th
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2014, pp. 729–742.
[28] S. M. Khan, A. R. Alameldeen, C. Wilkerson, O. Mutlu, and D. A.
Jimenez, “Improving Cache Performance Using Read-Write Partition- ´
ing,” in Proceedings of the 20th International Symposium on High
Performance Computer Architecture (HPCA), 2014, pp. 452–463.
[29] S. Kim, D. Chandra, and D. Solihin, “Fair Cache Sharing and Partitioning in a Chip Multiprocessor Architecture,” in Proceedings of the 13rd
International Conference on Parallel Architectures and Compilation
Techniques (PACT), 2004, pp. 111–122.
[30] L. Liu, Y. Li, C. Ding, H. Yang, and C. Wu, “Rethinking Memory
Management in Modern Operating System: Horizontal, Vertical or
Random?” IEEE Transactions on Computers, vol. 65, no. 6, pp. 1921–
1935, 2016.
[31] D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis,
“Heracles: Improving Resource Efficiency at Scale,” in Proceedings of
the 42nd Annual International Symposium on Computer Architecture
(ISCA), 2015, pp. 450–462.
[32] R. Manikantan, K. Rajan, and R. Govindarajan, “Probabilistic Shared
Cache Management (PriSM),” in Proceedings of the 39th Annual International Symposium on Computer Architecture (ISCA), 2012, pp. 428–
439.
[33] O. Mutlu and T. Moscibroda, “Stall-Time Fair Memory Access Scheduling for Chip Multiprocessors,” in Proceedings of the International
Symposium on Microarchitecture (MICRO), 2007, pp. 146–160.
[34] M. K. Qureshi and Y. N. Patt, “Utility-Based Cache Partitioning: A LowOverhead, High-Performance, Runtime Mechanism to Partition Shared
Caches,” in Proceedings of the 39th Annual International Symposium
on Microarchitecture (MICRO), 2006, pp. 423–432.
[35] P. J. Rousseeuw, “Silhouettes: A graphical aid to the interpretation and
validation of cluster analysis,” Journal of Computational and Applied
Mathematics, vol. 20, pp. 53 – 65, 1987.
[36] D. Sanchez and C. Kozyrakis, “The ZCache: Decoupling Ways and Associativity,” in Proceedings of the 43rd Annual International Symposium
on Microarchitecture (MICRO), 2010, pp. 187–198.
[37] D. Sanchez and C. Kozyrakis, “Vantage: Scalable and Efficient Finegrain Cache Partitioning,” in Proceedings of the 38th Annual International Symposium on Computer Architecture (ISCA), 2011, pp. 57–68.
[38] A. Scolari, D. B. Bartolini, and M. D. Santambrogio, “A Software
Cache Partitioning System for Hash-Based Caches,” ACM Transactions
on Architecture and Code Optimization, vol. 13, no. 4, pp. 57:1–57:24,
2016.
[39] A. Sharifi, S. Srikantaiah, M. T. Kandemir, and M. J. Irwin, “Courteous
Cache Sharing: Being Nice to Others in Capacity Management,” in
Proceedings of the 49th Annual Design Automation Conference (DAC),
2012, pp. 678–687.
[40] T. Sherwood, B. Calder, and J. Emer, “Reducing Cache Misses Using
Hardware and Software Page Placement,” in Proceedings of the 13th
International Conference on Supercomputing (ICS), 1999, pp. 155–164.
[41] L. Subramanian, V. Seshadri, A. Ghosh, S. Khan, and O. Mutlu,
“The Application Slowdown Model: Quantifying and Controlling the
Impact of Inter-application Interference at Shared Caches and Main
Memory,” in Proceedings of the 48th Annual International Symposium
on Microarchitecture (MICRO), 2015, pp. 62–75.
[42] D. Tam, R. Azimi, L. Soares, and M. Stumm, “Managing shared
L2 caches on multicore systems in software,” in Proceedings of the
Workshop on the Interaction between Operating Systems and Computer
Architecture (WIOSCA), 2007.
[43] K. Van Craeynest, S. Akram, W. Heirman, A. Jaleel, and L. Eeckhout,
“Fairness-aware Scheduling on single-ISA Heterogeneous Multi-cores,”
in Proceedings of the 22nd International Conference on Parallel Architectures and Compilation Techniques (PACT), 2013, pp. 177–188.
[44] R. Wang and L. Chen, “Futility scaling: High-associativity cache partitioning,” in Procedings of the 47th Annual International Symposium on
Microarchitecture (MICRO), 2014, pp. 356–367.
[45] C. Wu, J. Li, D. Xu, P.-C. Yew, J. Li, and Z. Wang, “FPS: A FairProgress Process Scheduling Policy on Shared-Memory Multiprocessors,” Journal on Transactions on Parallel and Distributed Systems,
vol. 26, no. 2, pp. 444–454, 2015.
[46] D. Xu, C. Wu, P.-C. Yew, J. Li, and Z. Wang, “Providing Fairness
on Shared-Memory Multiprocessors Via Process Scheduling,” in Performance Evaluation Review, vol. 40, no. 1, 2012, pp. 295–306.
[47] Y. Ye, R. West, Z. Cheng, and Y. Li, “COLORIS: A Dynamic Cache
Partitioning System Using Page Coloring,” in Proceedings of the 23rd
International Conference on Parallel Architecture and Compilation
Techniques (PACT), 2014, pp. 381–392.
[48] X. Zhang, S. Dwarkadas, and K. Shen, “Towards Practical Page
Coloring-based Multicore Cache Management,” in Proceedings of the
4th European Conference on Computer Systems (EuroSys), 2009, pp.
89–102.
[49] H. Zhu and M. Erez, “Dirigent: Enforcing QoS for Latency-Critical
Tasks on Shared Multicore Systems,” in Proceedings of the 21st International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2016, pp. 33–47.
