[1] A. Aggarwal and J. S. Vitter. The input/output

complexity of sorting and related problems. C. ACM
31(9):1116–1127, 1988, doi:10.1145/48529.48535.

[2] S. Albers and T. Hagerup. Improved parallel integer
sorting without concurrent writing. Inf. & Comput.
136(1):25–51, 1997, doi:10.1006/inco.1997.2632.

[3] R. R. Amossen and R. Pagh. A new data layout for set

intersection on GPUs. IEEE Int. Parallel Distributed
Processing Symp. (IPDPS), pp. 698-708, 2011,
doi:10.1109/IPDPS.2011.71.

[4] A. Andersson, P. B. Miltersen, and M. Thorup. Fusion
trees can be implemented with AC0 instructions only.
Theor. Comput. Sci. 215(1-2):337–344, 1999,
doi:10.1016/S0304-3975(98)00172-8.

[5] M. Aumüller, M. Dietzfelbinger, and P. Woelfel.

Explicit and eﬃcient hash families suﬃce for cuckoo
hashing with a stash. Algorithmica 70(3):428–456, 2014.

[6] Y. Azar, A. Z. Broder, A. R. Karlin, and E. Upfal.

Balanced allocations. SIAM J. Comput. 29(1):180–200,
1999, doi:10.1137/S0097539795288490.

[7] C. Berge. Graphs and Hypergraphs. North-Holland

Mathematical Library 6. North-Holland, 2nd edition,
1976.

[8] P. Bille, A. Pagh, and R. Pagh. Fast evaluation of

union-intersection expressions. Int. Symp. Algorithms
and Computation (ISAAC), pp. 739–750. Springer,
LNCS 4835, 2007, doi:10.1007/978-3-540-77120-3_64.
[9] A. Björklund, R. Pagh, V. V. Williams, and U. Zwick.
Listing triangles. Int. Coll. Automata, Languages, and
Programming (ICALP), pp. 223–234. Springer, LNCS
8572, 2014, doi:10.1007/978-3-662-43948-7_19.

[10] A. Broder and M. Mitzenmacher. Network applications

of Bloom ﬁlters: A survey. Internet Mathematics
1(4):485–509, 2004,
doi:10.1080/15427951.2004.10129096.

[11] Center for Applied Internet Data Analysis. Skitter.
http://www.caida.org/tools/measurement/skitter/.

[12] G. Chartrand, H. V. Kronk, and C. E. Wall. The

point-arboricity of a graph. Israel J. Math.
6(2):169–175, 1968, doi:10.1007/BF02760181.

[13] N. Chiba and T. Nishizeki. Arboricity and subgraph
listing algorithms. SIAM J. Comput. 14(1):210–223,
1985, doi:10.1137/0214017.

[14] E. Cho, S. A. Myers, and J. Leskovec. Friendship and

mobility: user movement in location-based social
networks. 17th ACM SIGKDD Int. Conf. Knowledge
Discovery and Data Mining, pp. 1082–1090, 2011,
doi:10.1145/2020408.2020579.

[15] K.-M. Chung, M. Mitzenmacher, and S. P. Vadhan.

Why simple hash functions work: Exploiting the
entropy in a data stream. Theory OF Computing
9:897–945, 2013.

[16] R. Dementiev. Algorithm Engineering for Large Data

Sets. Ph.D. thesis, Saarland Univ., 2006.

[17] D. Eppstein. Cuckoo ﬁlter: Simpliﬁcation and analysis.

15th Scand. Symp. and Worksh. Algorithm Theory
(SWAT), pp. 8:1–8:12. Leibniz-Zentrum für Informatik,
LIPIcs 53, 2016, doi:10.4230/LIPIcs.SWAT.2016.8.

[18] D. Eppstein and M. T. Goodrich. Straggler

identiﬁcation in round-trip data streams via Newton’s
identities and invertible Bloom ﬁlters. IEEE Trans.

Knowledge and Data Engineering 23(2):297–306, 2011,
doi:10.1109/TKDE.2010.132.

[19] D. Eppstein, M. Löﬄer, and D. Strash. Listing all

maximal cliques in large sparse real-world graphs. J.
Exp. Algorithmics 18:3.1–3.21, 2013,
doi:10.1145/2543629.

[20] B. Fan, D. G. Andersen, M. Kaminsky, and M. D.

Mitzenmacher. Cuckoo ﬁlter: Practically better than
Bloom. 10th ACM Int. Conf. on Emerging Networking
Experiments and Technologies (CoNEXT), pp. 75–88,
2014, doi:10.1145/2674005.2674994.

[21] M. L. Fredman and D. E. Willard. Surpassing the
information theoretic bound with fusion trees. J.
Comput. Syst. Sci. 47(3):424–436, 1993,
doi:10.1016/0022-0000(93)90040-4.

[22] M. T. Goodrich and M. Mitzenmacher. Invertible

Bloom lookup tables. 2011 49th Allerton Conference on
Communication, Control, and Computing (Allerton),
pp. 792–799, 2011, doi:10.1109/Allerton.2011.6120248.

[23] M. T. Goodrich and M. Mitzenmacher.

Privacy-preserving access of outsourced data via
oblivious RAM simulation. 38th Int. Colloq. Automata,
Languages and Programming (ICALP), pp. 576–587,
2011, doi:10.1007/978-3-642-22012-8_46,
http://dx.doi.org/10.1007/978-3-642-22012-8_46.
[24] M. T. Goodrich and P. Pszona. External-memory

network analysis algorithms for naturally sparse graphs.
19th European Symp. on Algorithms (ESA),
pp. 664–676. Springer, LNCS 6942, 2011,
doi:10.1007/978-3-642-23719-5_56.

[25] M. T. Goodrich and R. Tamassia. Algorithm design

and applications. Wiley Publishing, 2015.

[26] X. Hu, M. Qiao, and Y. Tao. Join dependency testing,
Loomis-Whitney join, and triangle enumeration. 34th
ACM Symp. on Principles of Database Systems
(PODS), pp. 291–301, 2015,
doi:10.1145/2745754.2745768.

[27] X. Hu, Y. Tao, and C.-W. Chung. Massive graph

triangulation. ACM SIGMOD Int. Conf. on
Management of Data, pp. 325–336, 2013,
doi:10.1145/2463676.2463704.

[28] X. Hu, Y. Tao, and C.-W. Chung. I/O-eﬃcient

algorithms on triangle listing and counting. ACM
Trans. Database Syst. 39(4):27:1–27:30, 2014,
doi:10.1145/2691190.2691193.

[29] J. Jiang, M. Mitzenmacher, and J. Thaler. Parallel

peeling algorithms. Proceedings of the 26th ACM
Symposium on Parallelism in Algorithms and
Architectures, pp. 319–330, 2014.

[30] M. Karoński and T. Łuczak. The phase transition in a

random hypergraph. J. Computational and Applied
Mathematics 142(1):125–135, 2002.

[31] A. Kirsch, M. Mitzenmacher, and U. Wieder. More

robust hashing: Cuckoo hashing with a stash. SIAM J.
Comput. 39(4):1543–1561, 2010, doi:10.1137/080728743,
MR2580539.

[32] B. Klimt and Y. Yang. Introducing the enron corpus.

1st Conf. Email and Anti-Spam (CEAS), 2004,
http://www.ceas.cc/papers-2004/168.pdf.

[33] T. Kopelowitz, S. Pettie, and E. Porat. Dynamic set

intersection. 14th Symp. on Algorithms and Data
Structures (SODA), pp. 470–481, 2015,

259doi:10.1007/978-3-319-21840-3_39.

[34] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graph

evolution: Densiﬁcation and shrinking diameters. ACM
Trans. Knowledge Discovery from Data 1(1):2, 2007,
doi:10.1145/1217299.1217301.

[35] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W.
Mahoney. Community structure in large networks:
Natural cluster sizes and the absence of large
well-deﬁned clusters. Internet Mathematics 6(1):29–123,
2009, doi:10.1080/15427951.2009.10129177.

[36] X. Li, D. G. Andersen, M. Kaminsky, and M. J.

Freedman. Algorithmic improvements for fast
concurrent cuckoo hashing. Proceedings of the Ninth
European Conference on Computer Systems, p. 27,
2014.

[37] D. R. Lick and A. T. White. k-degenerate graphs.

Canad. J. Math. 22:1082–1096, 1970,
doi:10.4153/CJM-1970-125-1, MR0266812.

[38] P.-S. Loh and R. Pagh. Thresholds for extreme
orientability. Algorithmica 69(3):522–539, 2014,
doi:10.1007/s00453-013-9749-4, MR3201231.

[39] S. Lumetta and M. Mitzenmacher. Using the power of

two choices to improve Bloom ﬁlters. Internet
Mathematics 4(1):17–33, 2007,
doi:10.1080/15427951.2007.10129136.

[40] D. W. Matula and L. L. Beck. Smallest-last ordering
and clustering and graph coloring algorithms. J. ACM
30(3):417–427, 1983, doi:10.1145/2402.322385,
MR0709826.

[41] P. B. Miltersen. Lower bounds for static dictionaries on
RAMs with bit operations but no multiplication. 23rd
Int. Colloq. on Automata, Languages and Programming
(ICALP), pp. 442–453. Springer, LNCS 1099, 1996,
doi:10.1007/3-540-61440-0_149.

[42] A. Mislove, M. Marcon, K. P. Gummadi, P. Druschel,

and B. Bhattacharjee. Measurement and analysis of
online social networks. 5th ACM/Usenix Internet
Measurement Conference (IMC’07), pp. 29–42, 2007,
doi:10.1145/1298306.1298311.

[43] M. Mitzenmacher. The power of two choices in

randomized load balancing. IEEE Trans. Parallel and
Distributed Systems 12(10):1094–1104, 2001,
doi:10.1109/71.963420.

[44] M. Mitzenmacher, A. W. Richa, and R. Sitaraman.

The power of two random choices: A survey of
techniques and results. Handbook of Randomized
Computing, vol. 1, pp. 255–312, 2001.

[45] M. Mitzenmacher and E. Upfal. Probability and

computing: Randomized algorithms and probabilistic
analysis. Cambridge University Press, 2005.

[46] M. Ortmann and U. Brandes. Triangle listing

algorithms: Back from the diversion. ACM-SIAM
Works. Algorithm Engineering & Experiments
(ALENEX), pp. 1–8, 2014.

[47] R. Pagh and F. F. Rodler. Cuckoo hashing. J.

Algorithms 51(2):122–144, 2004,
doi:10.1016/j.jalgor.2003.12.002, MR2050140.

[48] R. Pagh and F. Silvestri. The input/output complexity

of triangle enumeration. 33rd ACM Symp. on
Principles of Database Systems (PODS), pp. 224–233,
2014, doi:10.1145/2594538.2594552.

[49] Stanford University. Stanford network analysis project.

https://snap.stanford.edu/data/index.html.

[50] M. Thorup. On AC0 implementations of fusion trees

and atomic heaps. 14th ACM-SIAM Symp. on Discrete
Algorithms (SODA), pp. 699–707, 2003,
http://dl.acm.org/citation.cfm?id=644108.644221.

[51] University of Oregon. University of Oregon route views

project. http://www.routeviews.org/.

[52] J. S. Vitter. Algorithms and data structures for

external memory. Found. Trends Theor. Comput. Sci.
2(4):305–474, 2008, doi:10.1561/0400000014.

[53] D. E. Willard. Examining computational geometry, Van
Emde Boas trees, and hashing from the perspective of
the fusion tree. SIAM J. Comput. 29(3):1030–1049,
2000, doi:10.1137/S0097539797322425.

[54] J. Yang and J. Leskovec. Deﬁning and evaluating

network communities based on ground-truth.
Knowledge and Information Systems 42(1):181–213,
2015, doi:10.1007/s10115-013-0693-z, arXiv:1205.6233.

