[1] Shore-MT, http://research.cs.wisc.edu/shore-mt/.
[2] InnoDB,
http://dev.mysql.com/doc/refman/5.7/en/
innodb-storage-engine.html.
[3] Oracle Database, https://www.oracle.com.
[4] L. Grupp, A. Caulfield, J. Coburn, S. Swanson,
E. Yaakobi, P. Siegel, and J. Wolf, “Characterizing Flash
Memory: Anomalies, Observations, And Applications,”
in MICRO-42, 2009, pp. 24 –33.
[5] NVM Express, http://www.nvmexpress.org/.
[6] J. Gray et al., “The transaction concept: Virtues and
limitations,” in VLDB, 1981, pp. 144–154.
[7] V. Prabhakaran, T. L. Rodeheffer, and L. Zhou, “Transactional Flash,” in OSDI, 2008, pp. 147–160.
[8] X. Ouyang, D. Nellans, R. Wipfel, D. Flynn, and
D. Panda, “Beyond Block I/O: Rethinking Traditional
Storage Primitives,” in HPCA, 2011, pp. 301–311.
[9] W.-H. Kang, S.-W. Lee, B. Moon, G.-H. Oh, and
C. Min, “X-FTL: Transactional FTL for SQLite
Databases,” in SIGMOD, 2013, pp. 97–108.
[10] W. Shi, D. Wang, Z. Wang, and D. Ju, “Mobius: A High
Performance Transactional SSD with Rich Primitives,”
in MSST, 2014, pp. 1–11.
[11] J. Coburn, T. Bunker, M. Schwarz, R. Gupta, and
S. Swanson, “From ARIES to MARS: Transaction Support for Next-generation, Solid-state Drives,” in SOSP,
2013, pp. 197–212.
[12] G. Graefe, “Write-optimized B-trees,” in VLDB, 2004,
pp. 672–683.
[13] J. Yang, N. Plasson, G. Gillis, N. Talagala, and S. Sundararaman, “Don’t Stack Your Log on My Log,” in
INFLOW, 2014.
[14] P. A. Bernstein, V. Hadzilacos, and N. Goodman, Concurrency Control And Recovery in Database Systems.
Addison-wesley New York, 1987, vol. 370.
[15] 3D Xpoint, https://www.micron.com/about/emergingtechnologies/3d-xpoint-technology.
[16] C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and
P. Schwarz, “ARIES: A Transaction Recovery Method
Supporting Fine-granularity Locking and Partial Rollbacks Using Write-ahead Logging,” TODS, vol. 17, pp.
94–162, 1992.
[17] TPC-B, http://www.tpc.org/tpcb/.
[18] TPC-C, http://www.tpc.org/tpcc/.
[19] Shore-kits, https://bitbucket.org/shoremt/shore-kits/src.
[20] R. Johnson, I. Pandis, R. Stoica, M. Athanassoulis,
and A. Ailamaki, “Aether: A Scalable Approach to
Logging,” VLDB, vol. 3, no. 1-2, pp. 681–692, 2010.
[21] M. Raab and A. Steger, “Balls into Bins – A Simple and
Tight Analysis,” in Randomization and Approximation
Techniques in Computer Science. Springer, 1998.
[22] YCSB, https://github.com/brianfrankcooper/YCSB.
[23] J.-U. Kang, J. Hyun, H. Maeng, and S. Cho, “The
Multi-Streamed Solid-State Drive,” in HotStorage,
2014.
[24] Y. Zhang, L. P. Arulraj, A. C. Arpaci-Dusseau, and
R. H. Arpaci-Dusseau, “De-indirection for Flash-based
SSDs with Nameless Writes,” in FAST, 2012, p. 1.
[25] P. Wang, G. Sun, S. Jiang, J. Ouyang, S. Lin, C. Zhang,
and J. Cong, “An Efficient Design and Implementation
of LSM-tree Based Key-value Store on Open-channel
SSD,” in EuroSys, 2014, pp. 16:1–16:14.
[26] J. Do, Y.-S. Kee, J. M. Patel, C. Park, K. Park, and D. J.
DeWitt, “Query Processing on Smart SSDs: Opportunities and Challenges,” in SIGMOD, 2013, pp. 1221–
[27] L. Marmol, S. Sundararaman, N. Talagala, and R. Rangaswami, “NVMKV: A Scalable, Lightweight, FTLaware Key-value Store,” in USENIX ATC, 2015, pp.
207–219.
[28] F. Chen, T. Luo, and X. Zhang, “CAFTL: A ContentAware Flash Translation Layer Enhancing the Lifespan
of Flash Memory based Solid State Drives,” in FAST,
2011.
[29] J. Li, H.-W. Tseng, C. Lin, Y. Papakonstantinou, and
S. Swanson, “Hippogriffdb: Balancing I/O And GPU
Bandwidth in Big Data Analytics,” VLDB, vol. 9, pp.
1647–1658, 2016.
[30] J. Ouyang, S. Lin, S. Jiang, Z. Hou, Y. Wang, and
Y. Wang, “SDF: Software-defined Flash for Web-scale
Internet Storage Systems,” in ACM SIGPLAN Notices,
vol. 49, 2014, pp. 471–484.
[31] P. O’Neil, E. Cheng, D. Gawlick, and E. O’Neil, “The
Log-Structured Merge-tree (LSM-tree),” Acta Informatica, vol. 33, no. 4, pp. 351–385, 1996.
[32] S. Seshadri, M. Gahagan, S. Bhaskaran, T. Bunker,
A. De, Y. Jin, Y. Liu, and S. Swanson, “Willow: A
User-programmable SSD,” in OSDI, 2014, pp. 67–80.
[33] Seagate Kinetic, http://www.seagate.com/solutions/
cloud/data-center-cloud/platforms/.
[34] E. Gal and S. Toledo, “Algorithms and Data Structures
for Flash Memories,” CSUR, vol. 37, pp. 138–163,
2005.
[35] T.-S. Chung, D.-J. Park, S. Park, D.-H. Lee, S.-W. Lee,
and H.-J. Song, “System Software for Flash Memory:
A Survey,” in EUC, 2006, vol. 4096, pp. 394–404.
[36] S. Lee, D. Shin, Y.-J. Kim, and J. Kim, “LAST:
Locality-Aware Sector Translation for NAND Flash
Memory-based Storage Systems,” ACM SIGOPS Operating Systems Review, vol. 42, no. 6, pp. 36–42, 2008.
[37] A. Gupta, Y. Kim, and B. Urgaonkar, “DFTL: A Flash
Translation Layer Employing Demand-based Selective
Caching of Page-level Address Mappings,” in ASPLOS
XIV, 2009, pp. 229–240.
[38] Y. Lu, J. Shu, and W. Zheng, “Extending the Lifetime of
Flash-based Storage Through Reducing Write Amplification from File Systems,” in FAST, 2013, pp. 257–270.
[39] T. Wang, D. Liu, Y. Wang, and Z. Shao, “FTL2: A
Hybrid Flash Translation Layer with Logging for Write
Reduction in Flash Memory,” in LCTES, 2013, pp. 91–
100.
[40] Y. Kang, R. Pitchumani, T. Marlette, and E. L. Miller,
“Muninn: A Versioning Flash Key-Value Store Using
an Object-based Storage Model,” in SYSTOR, 2014.
[41] A. Gupta, R. Pisolkar, B. Urgaonkar, and A. Sivasubramaniam, “Leveraging Value Locality in Optimizing
NAND Flash-based SSDs,” in FAST, 2011, pp. 91–103.
[42] VSL, http://www.fusionio.com/products/vsl.
[43] B. Debnath, S. Sengupta, and J. Li, “FlashStore: High
Throughput Persistent Key-value Store,” VLDB, vol. 3,
no. 1-2, pp. 1414–1425, 2010.
[44] ——, “SkimpyStash: RAM Space Skimpy Key-value
Store on Flash-based Storage,” in SIGMOD, 2011, pp.
25–36.
[45] J. J. Levandoski, D. B. Lomet, and S. Sengupta, “The
Bw-Tree: A B-Tree for New Hardware Platforms,” in
ICDE, 2013, pp. 302–313.
[46] H. Lim, B. Fan, D. G. Andersen, and M. Kaminsky,
“SILT: A Memory-efficient, High-performance Keyvalue Store,” in SOSP, 2011, pp. 1–13.
[47] LevelDB, https://github.com/google/leveldb.
