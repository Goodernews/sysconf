[1] M. Zaharia, M. Chowdhury, M. J. Franklin, S$. Shenker, and
I. Stoica, “Spark: Cluster computing with working sets,” in
Proceedings of the 2nd USENIX Conference on Hot Topics in
Cloud Computing. USENIX Association, 2010, pp. 10-10.

[2] M. Armbrust, T. Das, A. Davidson, A. Ghodsi, A. Or,
J. Rosen, I. Stoica, P. Wendell, R. Xin, and M. Zaharia,
“Scaling spark in the real world: Performance and usability,”
vol. 8, no. 12, 2015, pp. 1840-1843.

[3] T. Lindholm, F. Yellin, G. Bracha, and A. Buckley, The Java
Virtual Machine Specification, Java SE 8 Edition, 1st ed.
Addison-Wesley Professional, 2014.

[4] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma,
M. McCauley, M. J. Franklin, S. Shenker, and I. Stoica,
“Resilient distributed datasets: A fault-tolerant abstraction
for in-memory cluster computing,” in Proceedings of the
9th USENIX Conference on Networked Systems Design and
Implementation, 2012, pp. 2-2.

[5] M. Armbrust, W. Fan, R. Xin, and M. Zaharia, “Introducing
Apache Spark Datasets,” 2016, https://databricks.com/blog/
2016/01/04/introducing-apache-spark-datasets html.

[6] R. Xin and J. Rosen, “Project Tungsten: Bringing
Apache Spark closer to bare metal - the Databricks
blog,” 2015, https://databricks.com/blog/2015/04/28/projecttungsten- bringing- spark-closer-to-bare-metal.html.

[7] M. Armbrust, R. S. Xin, C. Lian, Y. Huai, D. Liu, J. K.
Bradley, X. Meng, T. Kaftan, M. J. Franklin, A. Ghodsi, and
M. Zaharia, “Spark SQL: relational data processing in spark,”
in Proceedings of the 2015 ACM SIGMOD International
Conference on Management of Data, 2015, pp. 1383-1394.

[8] “[SPARK-14083] analyze jvm bytecode and turn closures into
catalyst expressions - ASF JIRA,” https://issues.apache.org/
jira/browse/SPARK- 14083, 2016.

[9] Y. G. Park and B. Goldberg, “Escape analysis on lists,”
in Proceedings of the ACM SIGPLAN 1992 Conference on
Programming Language Design and Implementation, 1992,
pp. 116-127.

[10] L. O. Andersen, “Program analysis and specialization for
the C programming language,” Ph.D. dissertation, DIKU,
University of Copenhagen, 1994.

[11] T. Higuchi and A. Ohori, “Java bytecode as a typed term
calculus,” in Proceedings of the 4th ACM SIGPLAN International Conference on Principles and Practice of Declarative
Programming, 2002, pp. 201-211.

[12] “[SPARK-12795] whole stage codegen - ASF JIRA,” https:
/fAissues.apache.org/jira/browse/SPARK- 12795, 2016.

[13] S. Agarwal, D. Liu, and R. Xin, “Apache spark as a
compiler: Joining a billion rows per second on a laptop,”
2016, https://databricks.com/blog/2016/05/23/apache- sparkas-a-compiler-joining-a-billion-rows-per-second-on-alaptop.html.

[14] “The asm project,” http://asm.objectweb.org/.

[15] “spark/LR.scala at DSarray - kiszk/spark - github,”
https://github.com/kiszk/spark/blob/DSarray/sql/core/src/
test/scala/org/apache/spark/sql/LR.scala#L132, 2016.

[16] T. Neumann, “Efficiently compiling efficient query plans for
modern hardware,” vol. 4, no. 9, 2011, pp. 539-550.

[17] J.-D. Choi, M. Gupta, M. Serrano, V. C. Sreedhar, and
S. Midkiff, “Escape analysis for Java,” in Proceedings of
the 14th ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, 1999, pp.
1-19.

[18] J. Whaley and M. Rinard, “Compositional pointer and escape
analysis for Java programs,” in Proceedings of the 14th ACM
SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications, 1999, pp. 187-206.
