[1] libow-3.1. http://packages.ubuntu.com/xenial/libow-3.1-1.


[2] RELRO - a memory corruption mitigation technique. http://tk-blog.

blogspot.com/2009/02/relro-not-so-well-known-memory.html.

[3] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-ﬂow
integrity,” in Proceedings of the 12th ACM conference on Computer
and communications security. ACM, 2005, pp. 340–353.

[4] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “A theory of secure
control ﬂow,” in Proceedings of the 7th International Conference on
Formal Methods and Software Engineering, ser. ICFEM’05, 2005.

[5] S. Andersen and V. Abella, “Data execution prevention. changes to
functionality in microsoft windows xp service pack 2, part 3: Memory
protection technologies,” 2004.

[6] S. V. Archives, “Wu-ftpd remote format string stack overwrite vulner-

ability,” 2008.

[7] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny,
“You can run but you can’t read: Preventing disclosure exploits in
executable code,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2014, pp. 1342–
1353.

[8] D. Balzarotti, M. Cova, V. Felmetsger, N. Jovanovic, E. Kirda,
C. Kruegel, and G. Vigna, “Saner: Composing static and dynamic anal-
ysis to validate sanitization in web applications,” in IEEE Symposium
on Security and Privacy (Oakland 2008).
IEEE, 2008, pp. 387–401.
[9] M. Bishop and M. Digler, “Checking for race conditions in ﬁle

accesses,” Computer Systems, vol. 9, no. 2, Spring 1996.

[10] D. Bounov, R. Kici, and S. Lerner, “Protecting c++ dynamic dispatch
through vtable interleaving,” in Network and Distributed System Secu-
rity Symposium (NDSS), 2016.

[11] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler,
and M. Payer, “Control-Flow Integrity: Precision, Security, and Perfor-
mance,” ACM Computing Surveys, 2017.

[12] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Control-
ﬂow bending: On the effectiveness of control-ﬂow integrity,” in Pro-
ceedings of the 24th Usenix Security Symposium (USENIX Security),
2015.

[13] S. Chari, S. Halevi, and W. Venema, “Where do you want to go
today? escalating privileges by pathname manipulation.” in Network
and Distributed System Security Symposium (NDSS), 2010.

[14] C. Cowan, M. Barringer, S. Beattie, G. Kroah-Hartman, M. Frantzen,
and J. Lokier, “Formatguard: Automatic protection from printf format
string vulnerabilities.” in USENIX Security Symposium (USENIX Secu-
rity), vol. 91. Washington, DC, 2001.

[15] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in 2015 IEEE Symposium on Security
and Privacy (S&P 2015), 18-20 May 2015, San Jose, California, USA,
2015.
[16] J. Criswell, N. Dautenhahn, and V. Adve, “KCoFI: Complete control-
ﬂow integrity for commodity operating system kernels,” in 2014 IEEE
Symposium on Security and Privacy (SP).
IEEE, 2014, pp. 292–307.
[17] CWE, “CWE-59: Improper Link Resolution Before File Access,” http:



//cwe.mitre.org/data/deﬁnitions/59.html.

[18] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the
gadgets: On the ineffectiveness of coarse-grained control-ﬂow integrity
protection,” in 23rd USENIX Security Symposium (USENIX Security).
San Diego, CA: USENIX Association, Aug. 2014, pp. 401–416.

[19] U. Drepper, “How to write shared libraries,” Retrieved Jul, vol. 16, p.

2009, 2006.

[20] X. Ge, W. Cui, and T. Jaeger, “GRIFFIN: Guarding control ﬂows
using intel processor trace,” in Proceedings of the 22nd International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS). ACM, 2017.

[21] X. Ge, N. Talele, M. Payer, and T. Jaeger, “Fine-grained control-ﬂow
integrity for kernel software,” in IEEE European Symposium on Security
and Privacy (EuroSP).

IEEE, 2016.

[22] X. Ge, H. Vijayakumar, and T. Jaeger, “Sprobes: Enforcing kernel code
integrity on the trustzone architecture,” in Proceedings of the 3rd IEEE
Mobile Security Technologies Workshop (MoST 2014), May 2014.

[23] E. Goktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-ﬂow integrity,” in Proceedings of the 35th
IEEE Symposium on Security and Privacy, May 2014.

[24] N. Hardy, “The confused deputy,” Operating Systems Review, vol. 22,

pp. 36–38, 1988.

[25] E. Hiroaki and Y. Kunikazu, “ProPolice: Improved stack-smashing

attack detection,” IPSJ SIG Notes, pp. 181–188, 2001.

[26] D. Jang, Z. Tatlock, and S. Lerner, “Safedispatch: Securing c++ virtual
calls from memory corruption attacks.” in Network and Distributed
System Security Symposium (NDSS), 2014.
[27] J. Jelinek, “FORTIFY SOURCE,” https://gcc.gnu.org/ml/gcc-patches/
2004-09/msg02055.html, 2004.

[28] W. S. McPhee, “Operating system integrity in OS/VS2,” IBM Syst. J.,

1974.

[29] B. Niu and G. Tan, “Modular control-ﬂow integrity,” in Proceedings of
the 35th ACM SIGPLAN Conference on Programming Language Design
and Implementation. ACM, 2014, p. 58.

[30] B. Niu and G. Tan, “RockJIT: Securing just-in-time compilation using
modular control-ﬂow integrity,” in Proceedings of the 2014 ACM SIG-
PLAN Conference on Computer and Communications Security. ACM,
2014, p. 58.

[31] B. Niu and G. Tan, “Per-input control-ﬂow integrity,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2015, pp. 914–926.

[32] PaX Team, “Documentation for the PaX project - overall description,”

https://pax.grsecurity.net/docs/pax.txt, 2008.

[33] M. Payer, “Too much PIE is bad for performance,” ETH Zurich Tech-
nical Report http://nebelwelt.net/publications/ﬁles/12TRpie.pdf, 2012.
[34] M. Payer, A. Barresi, and T. R. Gross, “Fine-grained control-ﬂow
[34] integrity through binary hardening,” in Detection of Intrusions and
Malware, and Vulnerability Assessment. Springer, 2015, pp. 144–164.
[35] M. Payer and T. R. Gross, “Protecting Applications Against TOCTTOU
Races by User-Space Caching of File Metadata,” in VEE’12: Proc. 8th
Int’l Conf. Virtual Execution Environments, 2012.

[36] A. Prakash, X. Hu, and H. Yin, “vfGuard: Strict protection for virtual
function calls in cots c++ binaries.” in Network and Distributed System
Security Symposium (NDSS), 2015.

[37] R. Roemer, E. Buchanan, H. Shacham, and S. Savage, “Return-oriented
programming: Systems, languages, and applications,” ACM Transac-
tions on Information and System Security (TISSEC), vol. 15, no. 1,
p. 2, 2012.

[38] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difﬁculty
of preventing code reuse attacks in C++ applications,” in 2015 IEEE
Symposium on Security and Privacy (Oakland).
IEEE, 2015, pp. 745–
762.

[39] A. Seshadri, M. Luk, N. Qu, and A. Perrig, “SecVisor: A tiny hypervisor
to provide lifetime kernel code integrity for commodity OSes,” ACM
SIGOPS Operating Systems Review, vol. 41, no. 6, pp. 335–350, 2007.
(2003) Address Space Layout Randomization (ASLR).

[40] P. Team.

http://pax.grsecurity.net/docs/aslr.txt.

[41] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,

´U. Erlingsson,
L. Lozano, and G. Pike, “Enforcing forward-edge control-ﬂow integrity
in gcc & llvm,” in USENIX Security Symposium, 2014.

[42] H. Vijayakumar, X. Ge, M. Payer, and T. Jaeger, “JIGSAW: Protecting
resource access by inferring programmer expectations,” in 23rd USENIX
Security Symposium (USENIX Security), 2014, pp. 973–988.

[43] C. Zhang, S. A. Carr, T. Li, Y. Ding, C. Song, M. Payer, and D. Song,
“VTrust: Regaining trust on virtual calls,” in Network and Distributed
System Security Symposium (NDSS), 2016.

[44] C. Zhang, C. Song, K. Z. Chen, Z. Chen, and D. Song, “VTint:
Protecting virtual function tables’ integrity.” in Network and Distributed
System Security Symposium (NDSS), 2015.

