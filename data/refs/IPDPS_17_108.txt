[1] Apahce Hadoop. http://hadoop.apache.org/.
[2] Comet Cluster. http://www.sdsc.edu/support/user guides/comet.html.
[3] IBM BG/Q Architecture. https://www.alcf.anl.gov/files/IBM BGQ
Architecture 0.pdf.
[4] Mira Supercomputer. https://www.alcf.anl.gov/mira.
[5] MPI: A Message-Passing Interface Standard. http://www.mpi-forum.
org/docs/mpi-3.1/mpi31-report.pdf.
[6] MPICH Library. http://www.mpich.org.
[7] Turing: Memory Fragmentation Problem. http://www.idris.fr/eng/turing/
turing-fragmentation memoire-eng.html.
[8] F. Ahmad, S. Lee, M. Thottethodi, and T. N. Vijaykumar. PUMA:
Purdue MapReduce Benchmarks Suite. 2012.
[9] N. Chaimov, A. Malony, S. Canon, C. Iancu, K. Z. Ibrahim, and
J. Srinivasan. Scaling Spark on HPC Systems. In Proceedings of the
International Symposium on High-Performance Parallel and Distributed
Computing (HPDC), pages 97–110, 2016.
[10] J. Dean and S. Ghemawat. MapReduce: Simplified Data Processing on
Large Clusters. Communications of the ACM, 51(1):107–113, 2008.
[11] T. Estrada, B. Zhang, P. Cicotti, R. S. Armen, and M. Taufer. A
Scalable and Accurate Method for Classifying Protein–ligand Binding
Geometries Using a MapReduce Approach. Computers in Biology and
Medicine, 42(7):758–771, 2012.
[12] Y. Guo, W. Bland, P. Balaji, and X. Zhou. Fault Tolerant MapreduceMPI for HPC Clusters. In Proceedings of the International Conference
for High Performance Computing, Networking, Storage and Analysis
(SC), 2015.
[13] B. He, W. Fang, Q. Luo, N. K. Govindaraju, and T. Wang. Mars:
A MapReduce Framework on Graphics Processors. In Proceedings
of the 17th International Conference on Parallel Architectures and
Compilation Techniques, pages 260–269, 2008.
[14] T. Hoefler, A. Lumsdaine, and J. Dongarra. Towards Efficient Mapreduce Using MPI. In Proceedings of the European Parallel Virtual
Machine/Message Passing Interface Users Group Meeting, pages 240–
249. Springer, 2009.
[15] M. Lu, Y. Liang, H. P. Huynh, Z. Ong, B. He, and R. S. M. Goh. Mrphi:
An Optimized MapReduce Framework on Intel Xeon Phi Coprocessors.
IEEE Transactions on Parallel and Distributed Systems, 26(11):3066–
3078, 2015.
[16] X. Lu, F. Liang, B. Wang, L. Zha, and Z. Xu. DataMPI: Extending MPI
to Hadoop-like Big Data Computing. In Proceedings of the 28th IEEE
International Parallel and Distributed Processing Symposium (IPDPS),
2014.
[17] X. Lu, M. W. U. Rahman, N. Islam, D. Shankar, and D. K. Panda. Accelerating Spark with RDMA for Big Data Processing: Early Experiences.
In Proceedings of the 22nd Annual Symposium on High-Performance
Interconnects, pages 9–16, 2014.
[18] M. Matsuda, N. Maruyama, and S. Takizawa. K MapReduce: A
Scalable Tool for Data-Processing and Search/Ensemble Applications on
Large-Scale Supercomputers. In Proceedings of the Cluster Computing
Conference (CLUSTER), 2013.
[19] H. Mohamed and S. Marchand-Maillet. MRO-MPI: MapReduce Overlapping Using MPI and an Optimized Data Exchange Policy. Parallel
Computing, 39(12):851–866, 2013.
[20] R. C. Murphy, K. B. Wheeler, B. W. Barrett, and J. A. Ang. Introducing
the Graph 500. Cray Users Group (CUG), 2010.
[21] S. J Plimpton and K. D. Devine. MapReduce in MPI for Large-Scale
Graph Algorithms. Parallel Computing, 37(9):610–632, 2011.
[22] S.-J. Sul and A. Tovchigrechko. Parallelizing BLAST and SOM
Algorithms with MapReduce-MPI Library. In Proceedings of the
25th International Symposium on Parallel and Distributed Processing

Workshops and Phd Forum (IPDPSW), pages 481–489, 2011.
[23] J. Talbot, R. M. Yoo, and C. Kozyrakis. Phoenix++: Modular MapReduce for Shared-memory Systems. In Proceedings of the 2nd International Workshop on MapReduce and Its Applications, pages 9–16, 2011.
[24] M. Wasi ur Rahman, X. Lu, N. Sh. Islam, R. Rajachandrasekar, and
D. K. Panda. High-Performance Design of YARN MapReduce on
Modern HPC Clusters with Lustre and RDMA. In Proceedings of the
29th IEEE International Parallel and Distributed Processing Symposium
(IPDPS), 2015.
[25] Y. Wang, G. Agrawal, T. Bicer, and W. Jiang. Smart: A MapReducelike Framework for in-situ Scientific Analytics. In Proceedings of the
International Conference for High Performance Computing, Networking,
Storage and Analysis (SC), 2015.
[26] Y. Wang, R. Goldstone, W. Yu, and T. Wang. Characterization and
Optimization of Memory-Resident MapReduce on HPC Systems. In
Proceedings of the 28th International Parallel and Distributed Processing Symposium (IPDPS), pages 799–808, 2014.
[27] T. White. Hadoop: The Definitive Guide. O’Reilly Media, Inc., 2012.
[28] X. Yang, N. Liu, B. Feng, X.-H. Sun, and S. Zhou. PortHadoop:
Support Direct HPC Data Processing in Hadoop. In Proceedings of
the International Conference on Big Data (Big Data), pages 223–232,
2015.
[29] R. M. Yoo, A. Romano, and C. Kozyrakis. Phoenix Rebirth: Scalable
MapReduce on a Large-Scale Shared-Memory System. In Proceedings
of the International Symposium on Workload Characterization, pages
198–207, 2009.
[30] Matei Zaharia, Mosharaf Chowdhury, Michael J Franklin, Scott Shenker,
and Ion Stoica. Spark: Cluster computing with working sets. HotCloud,
10(10-10):95, 2010.
[31] B. Zhang, T. Estrada, P. Cicotti, and M. Taufer. On Efficiently Capturing
Scientific Properties in Distributed Big Data without Moving the Data:
A Case Study in Distributed Structural Biology Using MapReduce. In
Proceedings of the 16th International Conference on Computational
Science and Engineering (CSE), pages 117–124, 2013.
