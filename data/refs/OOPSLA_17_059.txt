[1] Shay Artzi, Julian Dolby, Simon Holm Jensen, Anders Moller, and Frank Tip. 2011. A framework for automated testing

of JavaScript web applications. In Proceedings of the 33rd International Conference on Software Engineering, ICSE 2011,

Waikiki, Honolulu , HI, USA, May 21-28, 2011. ACM, 571-580.



[2] Gavin M. Bierman, Martin Abadi, and Mads Torgersen. 2014. Understanding TypeScript. In ECOOP 2014 - Object-Oriented

Programming - 28th European Conference, Uppsala, Sweden, July 28 - August 1, 2014. Proceedings (Lecture Notes in Computer

Science), Vol. 8586. Springer, 257-281.



[3] Koen Claessen and John Hughes. 2000. QuickCheck: a lightweight tool for random testing of Haskell programs. In Proceedings

of the 5th ACM SIGPLAN International Conference on Functional Programming (ICFP ’00), Montreal, Canada, September



[4] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 90. Publication date: October 2017.





[5] 90:24 Erik Krogh Kristensen and Anders Moller

18-21, 2000. ACM, 268-279.



[6] Edsger W. Dijkstra. 1970. Notes on Structured Programming. Technical Report EWD249. Technological University Eindhoven.



[7] Facebook. 2017. Flow. (2017). http://flowtype.org/.



[8] Asger Feldthaus and Anders Moller. 2014. Checking correctness of TypeScript interfaces for JavaScript libraries. In

Proceedings of the 2014 ACM International Conference on Object Oriented Programming Systems Languages & Applications,

OOPSLA 2014, part of SPLASH 2014, Portland, OR, USA, October 20-24, 2014. ACM, 1-16.



[9] Gordon Fraser and Andrea Arcuri. 2014. Automated Test Generation for Java Generics. In Software Quality. Model-Based

Approaches for Advanced Software and Systems Engineering - 6th International Conference, SWQD 2014, Vienna, Austria,

january 14-16, 2014. Proceedings (Lecture Notes in Business Information Processing), Vol. 166. Springer, 185-198.



[10] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: directed automated random testing. In Proceedings of the

ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation, Chicago, IL, USA, June 12-15, 2005.

ACM, 213-223,



[11] Phillip Heidegger and Peter Thiemann. 2010. Contract-Driven Testing of JavaScript Code. In Objects, Models, Components,

Patterns, 48th International Conference, TOOLS 2010, Malaga, Spain, June 28 - July 2, 2010. Proceedings (Lecture Notes in

Computer Science), Vol. 6141. Springer, 154-172.



[12] Simon Holm Jensen, Anders Moller, and Peter Thiemann. 2009. Type Analysis for JavaScript. In Static Analysis, 16th

International Symposium, SAS 2009, Los Angeles, CA, USA, August 9-11, 2009. Proceedings (Lecture Notes in Computer

Science), Vol. 5673. Springer, 238-255.



[13] Matthias Keil and Peter Thiemann. 2015a. Blame assignment for higher-order contracts with intersection and union. In

Proceedings of the 20th ACM SIGPLAN International Conference on Functional Programming, ICFP 2015, Vancouver, BC,

Canada, September 1-3, 2015. ACM, 375-386.



[14] Matthias Keil and Peter Thiemann. 2015b. TreatJS: Higher-Order Contracts for JavaScript. In 29th European Conference on

Object-Oriented Programming, ECOOP 2015, July 5-10, 2015, Prague, Czech Republic (LIPlcs), Vol. 37. Schloss Dagstuhl Leibniz-Zentrum fuer Informatik, 28-51.



[15] Erik Krogh Kristensen and Anders Moller. 2017. Inference and Evolution of TypeScript Declaration Files. In Fundamental

Approaches to Software Engineering - 20th International Conference, FASE 2017, Held as Part of the European Joint Conferences

on Theory and Practice of Software, ETAPS 2017, Uppsala, Sweden, April 22-29, 2017, Proceedings (Lecture Notes in Computer

Science), Vol. 10202. Springer, 99-115.



[16] Jukka Lehtosalo et al. 2016. Mypy. (2016). http://www.mypy-lang.org/.



[17] Guodong Li, Esben Andreasen, and Indradeep Ghosh. 2014. SymJS: automatic symbolic testing of JavaScript web applications.

In Proceedings of the 22nd ACM SIGSOFT International Symposium on Foundations of Software Engineering, (FSE-22), Hong

Kong, China, November 16 - 22, 2014. ACM, 449-459.



[18] Microsoft. 2015. TypeScript Language Specification. (February 2015). https://github.com/Microsoft/TypeScript/blob/master/

doc/spec.md.



[19] Carlos Pacheco, Shuvendu K. Lahiri, Michael D. Ernst, and Thomas Ball. 2007. Feedback-Directed Random Test Generation.

In 29th International Conference on Software Engineering (ICSE 2007), Minneapolis, MN, USA, May 20-26, 2007. IEEE

Computer Society, 75-84.



[20] Michael Pradel, Parker Schuh, and Koushik Sen. 2015. TypeDevil: Dynamic Type Inconsistency Analysis for JavaScript. In

37th IEEE/ACM International Conference on Software Engineering, ICSE 2015, Florence, Italy, May 16-24, 2015, Volume 1.

IEEE Computer Society, 314-324.



[21] Aseem Rastogi, Nikhil Swamy, Cédric Fournet, Gavin M. Bierman, and Panagiotis Vekris. 2015. Safe & Efficient Gradual

Typing for TypeScript. In Proceedings of the 42nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages, POPL 2015, Mumbai, India, January 15-17, 2015. ACM, 167-180.



[22] Prateek Saxena, Devdatta Akhawe, Steve Hanna, Feng Mao, Stephen McCamant, and Dawn Song. 2010. A Symbolic Execution

Framework for JavaScript. In 31st IEEE Symposium on Security and Privacy, S&P 2010, 16-19 May 2010, Berleley/Oakland,

California, USA. IEEE Computer Society, 513-528.



[23] Koushik Sen, Swaroop Kalasapur, Tasneem G. Brutch, and Simon Gibbs. 2013. Jalangi: a selective record-replay and dynamic

analysis framework for JavaScript. In Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT

Symposium on the Foundations of Software Engineering, ESEC/FSE’13, Saint Petersburg, Russian Federation, August 18-26,

2013. ACM, 488-498.



[24] Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: a concolic unit testing engine for C. In Proceedings of the 10th

European Software Engineering Conference held jointly with 13th ACM SIGSOFT International Symposium on Foundations

of Software Engineering, 2005, Lisbon, Portugal, September 5-9, 2005. ACM, 263-272.



[25] Jeremy G Siek and Walid Taha. 2006. Gradual typing for functional languages. In Scheme and Functional Programming

Workshop, Vol. 6. 81-92.



[26] Jeremy G. Siek, Michael M. Vitousek, Matteo Cimini, and John Tang Boyland. 2015. Refined Criteria for Gradual Typing.

In 1st Summit on Advances in Programming Languages, SNAPL 2015, May 3-6, 2015, Asilomar, California, USA (LIPIcs),



[27] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 90. Publication date: October 2017.

Type Test Scripts for TypeScript Testing 90:25



[28] Vol. 32. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, 274-293.



[29] Sam Tobin-Hochstadt and Matthias Felleisen. 2008. The design and implementation of Typed Scheme. In Proceedings of the

35th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2008, San Francisco, California,

USA, January 7-12, 2008. ACM, 395-406.



[30] Michael M. Vitousek, Andrew M. Kent, Jeremy G. Siek, and Jim Baker. 2014. Design and evaluation of gradual typing for

Python. In DLS’14, Proceedings of the 10th ACM Symposium on Dynamic Languages, part of SLASH 2014, Portland, OR,

USA, October 20-24, 2014. ACM, 45-56.



[31] Philip Wadler. 1989. Theorems for Free!. In Proceedings of the 4th International Conference on Functional Programming

Languages and Computer Architecture, FPCA 1989, London, UK, September 11-13, 1989. ACM, 347-359.



[32] Philip Wadler and Robert Bruce Findler. 2009. Well-Typed Programs Can’t Be Blamed. In Programming Languages and

Systems, 18th European Symposium on Programming, ESOP 2009, Held as Part of the Joint European Conferences on Theory

and Practice of Software, ETAPS 2009, York, UK, March 22-29, 2009. Proceedings (Lecture Notes in Computer Science), Vol. 5502.

Springer, 1-16.



[33] Jack Williams, J. Garrett Morris, Philip Wadler, and Jakub Zalewski. 2017. Mixed Messages: Measuring Conformance and

Non-Interference in TypeScript. In 31st European Conference on Object-Oriented Programming, ECOOP 2017, Fune 19-23,

2017, Barcelona, Spain (LIPIcs), Vol. 74. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, 28:1—-28:29.



[34] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 90. Publication date: October 2017.
