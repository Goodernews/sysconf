[1] Akka. http://akka.io/. (Cited on page 10.)

[2] Apache Cassandra. http: //cassandra.apache.org/.
(Cited on pages 1 and 2.)

[3] Elasticsearch. https://www.elastic.co/products/
elasticsearch. (Cited on pages | and 2.)

[4] Memcached. https://memcached.org/. (Cited on
page 2.)

[5] MongoDB. https://www.mongodb.com/. (Cited on
page 2.)

[6] Redis. http: //redis.io/. (Cited on page 2.)
[7] ScyllaDB. http: //scylladb.com/. (Cited on page 13.)

[8] S. Agarwal, B. Mozafari, A. Panda, H. Milner, S. Madden,
and I. Stoica. BlinkDB: Queries with Bounded Errors and
Bounded Response Times on Very Large Data. In EuroSys,
2013. (Cited on page 5.)

[9] D. Alistarh, J. Kopinsky, J. Li, and N. Shavit. The SprayList:
A Scalable Relaxed Priority Queue. ACM SIGPLAN Notices,
50(8):11-20, 2015. (Cited on page 6.)

[10] M. Alizadeh, A. Greenberg, D. A. Maltz, J. Padhye, P. Patel,
B. Prabhakar, S. Sengupta, and M. Sridharan. Data Center
TCP (DCTCP). In SIGCOMM, 2010. (Cited on pages 1, 3
and 11.)

[11] G. Ananthanarayanan, A. Ghodsi, A. Wang, D. Borthakur,
S. Kandula, S. Shenker, and I. Stoica. PACMan: Coordinated
Memory Caching for Parallel Jobs. In NSDI, 2012. (Cited
on pages | and 3.)

[12] G. Ananthanarayanan, S. Kandula, A. Greenberg, I. Stoica,
Y. Lu, B. Saha, and E. Harris. Reining in the Outliers in Mapreduce Clusters Using Mantri. In OSDJ, 2010. (Cited on
page 5.)

[13] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and M. Paleczny.
Workload Analysis of a Large-scale Key-value Store. In SIGMETRICS, 2012. (Cited on pages 2 and 9.)

[14] N. Bansal and M. Harchol-Balter. Analysis of SRPT Scheduling: Investigating Unfairness. In SIGMETRICS, 2001. (Cited
on page 6.)

[15] O. Boxma and B. Zwart. Tails in Scheduling. ACM SIGMETRICS Performance Evaluation Review, 34(4):13-20, 2007.
(Cited on page 6.)

[16] D. Chakrabarty, Y. Zhou, and R. Lukose. Budget Constrained.
Bidding in Keyword Auctions and Online Knapsack Problems. In WINE, 2008. (Cited on page 4.)

[17] M. Chowdhury and I. Stoica. Efficient Coflow Scheduling
Without Prior Knowledge. In SIGCOMM, 2015. (Cited on
pages 7 and 14.)

[18] M. Chowdhury, Y. Zhong, and I. Stoica. Efficient Coflow
Scheduling with Varys. In SIGCOMM, 2014. (Cited on
page 14.)

[19] R. G. Christopher Stewart, Aniket Chakrabarti. Zoolander:
Efficiently Meeting Very Strict, Low-Latency SLOs. In ICAC,
2013. (Cited on page 14.)

[20] R. A. Cohen. An Introduction to PROC LOESS for Local
Regression. In SUGI, 1999. (Cited on page 11.)

[21] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and
R. Sears. Benchmarking Cloud Serving Systems with YCSB.
In SoCC, 2010. (Cited on pages 2 and 9.)

[22] S. Das, D. Agrawal, and A. El Abbadi. G-Store: A Scalable
Data Store for Transactional Multi Key Access in the Cloud.
In SoCC, 2010. (Cited on page 14.)

[23] J. Dean and L. A. Barroso. The Tail At Scale. Communications of the ACM, 56:74-80, 2013. (Cited on pages 1 and 2.)

[24] G. Decandia, D. Hastorun, M. Jampani, G. Kakulapati,
A. Lakshman, A. Pilchin, $. Sivasubramanian, P. Vosshall,
and W. Vogels. Dynamo: Amazon’s Highly Available Keyvalue Store. In SOSP, 2007. (Cited on page 1.)

[25] F. R. Dogar, T. Karagiannis, H. Ballani, and A. Rowstron.
Decentralized Task-Aware Scheduling for Data Center Networks. In SIGCOMM, 2014. (Cited on pages 2 and 14.)

[26] L. Flatto and S. Hahn. Two Parallel Queues Created by
Arrivals with Two Demands I. SIAM Journal on Applied
Mathematics, 44(5):1041-1053, 1984. (Cited on page 5.)

[27] M. E. Haque, Y. hun Eom, Y. He, S. Elnikety, R. Bianchini,
and K. S. McKinley. Few-to-Many: Incremental Parallelism
for Reducing Tail Latency in Interactive Services. In ASPLOS, 2015. (Cited on page 14.)

[28] V. Jalaparti, P. Bodik, S. Kandula, I. Menache, M. Rybalkin,
and C. Yan. Speeding up Distributed Request-Response
Workflows. In SIGCOMM, 2013. (Cited on pages 1 and 14.)

[29] C. Kalantzis. Eventual Consistency != Hopeful Consistency, talk at Cassandra Summit, 2013. https://www.
youtube. com/watch?v=A6qzx_HE3EU. (Cited on
page 13.)

[30] R. Kapoor, G. Porter, M. Tewari, G. M. Voelker, and A. Vahdat. Chronos: Predictable Low Latency for Data Center Applications. In SOCC. ACM, 2012. (Cited on page 14.)

[31] G. Kumar, G. Ananthanarayanan, S. Ratnasamy, and I. Stoica. Hold ’em or Fold ’em? Aggregation Queries under Performance Variations. In EuroSys, 2016. (Cited on page 3.)

[32] J. Li, K. Agrawal, S. Elnikety, Y. He, 1.-T. A. Lee, C. Lu, and
K. S. McKinley. Work Stealing for Interactive Services to
Meet Target Latency. In PPoPP, 2016. (Cited on page 14.)

[33] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky. MICA:
A Holistic Approach to Fast In-Memory Key- Value Storage.
In NSDI, 2014. (Cited on pages 13 and 14.)

[34] J. C. McCullough, J. Dunagan, A. Wolman, and A. C. Snoeren. Stout: An Adaptive Interface to Scalable Cloud Storage.
In ATC, 2010. (Cited on page 14.)

[35] M. M. Michael and M. L. Scott. Simple, Fast, and Practical
Non-Blocking and Blocking Concurrent Queue Algorithms.
In PODC, 1996. (Cited on page 12.)

[36] M. Mitzenmacher. The Power of Two Choices in Randomized Load Balancing. IEEE Trans. Parallel Distrib. Syst.,
12(10):1094—1104, Oct. 2001. (Cited on page 14.)

[37] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski, H. Lee,
H.C. Li, R. McElroy, M. Paleczny, D. Peek, P. Saab, D. Stafford,

T. Tung, and V. Venkataramani. Scaling Memcache at Facebook. In NSDI, 2013. (Cited on pages 1, 2, 3 and 11.)

[38] J. Paiva, P. Ruivo, P. Romano, and L. Rodrigues. AUTOPLACER: Scalable Self-Tuning Data Placement in Distributed Key-value Stores. In ICAC, 2013. (Cited on
page 14.)

[39] H. Rihani, P. Sanders, and R. Dementiev. MultiQueues: Sim
pler, Faster, and Better Relaxed Concurrent Priority Queues.
CoRR, abs/1411.1209, 2014. (Cited on page 6.)

[40] T. A. Roemer. A Note on the Complexity of the Concurrent
Open Shop Problem. J. of Scheduling, 9(4):389-396, Aug.
2006. (Cited on page 1.)

[41] N. Shavit and I. Lotan. Skiplist-Based Concurrent Priority
Queues. In JPDPS, 2000. (Cited on page 12.)

[42] A. Shieh, S. Kandula, A. Greenberg, C. Kim, and B. Saha.
Sharing the Data Center Network. In NSDIJ, 2011. (Cited on
pages 1 and 3.)

[43] H. Sundell and P. Tsigas. Fast and Lock-Free Concurrent Priority Queues for Multi-Thread Systems. Journal of Parallel
and Distributed Computing, 65(5):609-627, 2005. (Cited on
page 12.)

[44] L. Suresh, M. Canini, $. Schmid, and A. Feldmann. C3: Cut
ting Tail Latency in Cloud Data Stores via Adaptive Replica
Selection. In NSDI, 2015. (Cited on pages 2, 10 and 14.)

[45] E. Varki, A. Merchant, and H. Chen. The M/M/1 Fork-Join
Queue with Variable Sub-Tasks. http: //www.cs.unh.
edu/~varki/publication/2002-nov-open.pdf,
2002. (Cited on page 5.)

[46] V. Venkataramani, Z. Amsden, N. Bronson, G. Cabrera III,
P. Chakka, P. Dimov, H. Ding, J. Ferris, A. Giardullo, J. Hoon,
S. Kulkarni, N. Lawrence, M. Marchukov, D. Petrov, and
L. Puzar. TAO: How Facebook Serves the Social Graph. In
SIGMOD, 2012. (Cited on pages 1 and 13.)

[47] H. T. Vo, C. Chen, and B. C. Ooi. Towards Elastic Transactional Cloud Storage with Range Query Support. Proc. VLDB
Endow., 3(1-2), Sept. 2010. (Cited on page 14.)

[48] A. Vulimiri, P. B. Godfrey, R. Mittal, J. Sherry, S. Ratnasamy,
and S. Shenker. Low Latency via Redundancy. In CoNEXT,
2013. (Cited on pages 9 and 14.)

[49] M. Welsh, D. Culler, and E. Brewer. SEDA: An Architecture
for Well-Conditioned, Scalable Internet Services. In SOSP,
2001. (Cited on page 9.)

[50] A. Wierman and B. Zwart. Is Tail-Optimal Scheduling Possible? Operations Research, 60(5):1249-1257, Sept. 2012.
(Cited on page 2.)

[51] M. Wimmer, F. Versaci, J. L. Traff, D. Cederman, and P. Tsigas. Data Structures for Task-based Priority Scheduling. In
PPoPP, 2014. (Cited on page 6.)

[52] Z. Wu, C. Yu, and H. V. Madhyastha. CosTLO: CostEffective Redundancy for Lower Latency Variance on Cloud.
Storage Services. In NSDI, 2015. (Cited on page 14.)

[53] M. Zaharia, A. Konwinski, A. D. Joseph, R. Katz, and I. Stoica. Improving MapReduce Performance in Heterogeneous
Environments. In OSDI, 2008. (Cited on pages 2 and 5.)

[54] T. Zhu, A. Tumanov, M. A. Kozuch, M. Harchol-Balter, and
G. R. Ganger. PriorityMeister: Tail Latency QoS for Shared
Networked Storage. In SoCC, 2014. (Cited on page 14.)