[1] O. ARB, “Openmp application program interface, v4.0,” [online], 2013, http://www.openmp.org/mp- documents/ OpenMP4.0.0.pdf.
[2] Intel, “Intel threading building blocks,” [online], 2016, https: //software.intel.com/en- us/intel- tbb.
[3] J. M. Perez, R. M. Badia et al., “A dependency-aware task-based programming environment for multi-core architec- ture,” in International Conference on Cluster Computing(CC), 2008.
[4] B. S. Center, “Ompss programming model,” [online], 2016, https://pm.bsc.es/ompss.
[5] G. Contreras and M. Martonosi, “Characterizing and im- proving the performance of intel threading building blocks,” Workload Characterization. IEEE International Symposium, no. 57-66, 2008.
[6] X. Tan, J. Bosch et al., “Performance analysis of a hard- ware accelerator of dependence management for task-based dataflow programming models,” International Symposium on Performance Analysis of Systems and Software (ISPASS), 2016.
[7] N. Engelhardt, T. Dallo et al., “An integrated hardware- software approach to task graph management,” in In 16th IEEE International Conference on High Performance and Communications(HPCC-2014), 2014.
[8] Y. Etsion, F. Cabarcas et al., “Task superscalar: An out-of- order task pipeline,” in IEEE/ACM International Symposium on Microarchitecture (MICRO-43), 2010.
[9] F. Yazdanpanaha, D. Jimenez et al., “Analysis of the task superscalar architecture hardware design,” in International Conference on Computational Science (ICCS), 2013.
[10] F.Yazdanpanah,C.Alvarezetal.,“Picos:Ahardwareruntime architecture support for ompss,” Future Generation Computer Systems(FGCS), 2015.
[11] XILINX, “Zynq-7000,” [online], 2015, http: //www.xilinx.com/support/documentation/user guides/ ug585- Zynq- 7000- TRM.pdf.
[12] B.S.Center,“Performancetools,”[online],2016,http://www. bsc.es/computer- sciences/performance- tools.
[13] ——, “Bsc application repository,” [online], 2014, https://pm. bsc.es/projects/bar/wiki/Applications.
[14] TU-Berlin, “Starbench benchmark suite,” [online], 2015, http://www.aes.tu- berlin.de/menue/forschung/projekte/ abgeschlossene projekte/starbench parallel benchmark suite/.
[15] S. Kumar, C. J. Hughes et al., “Carbon: Architectural sup- port for fine-grained parallelism on chip multiprocessors,” in International Symposium on Computer Architecture, 2007.
[16] D. Sanchez, R. M. Yoo et al., “Flexible architectural sup- port for fine-grain scheduling,” in International Conference on Architectural Support for Programming Languages and Operating Systems(ASPLOS), 2010.
[17] J. Hoogerbrugge and A. Terechko, “A multithreaded multi- core system for embeded media processing,” in Transactions on High-performance Embeded Architectures and Compil- ers(THEA), 2011.
[18] G. Al-Kadi and A. S. Terechko, “A hardware task scheduler for embeded video processing,” in International Conference on High Performance and Embeded Architectures and Com- pilers(HiPEASC), 2009.
[19] M. Sjalander, A. Terechko et al., “A look-ahead task man- agement unit for embeded multi-core architectures,” in Con- ference on Digital System Design(DSD), 2008.
[20] D. Capalija and T. S. Abdelrahman, “Microarchitecture of a coarse-grain out-of-order superscalar processor,” in Interna- tional Transaction on Parallel and Distributed Systems, 2013.
[21] T. Dallou, A. Elhossini et al., “Nexus#: A distributed hard- ware task manager for task-based programming models,” in IEEE 29th International Parallel and Distributed Processing Symp(IPDPS), 2015.
[22] M. Valero, M. Moreto ́ et al., “Runtime-aware architectures: A first approach,” International Journal on Supercomputing Frontiers and Innovations, vol. 1, 2014.
[23] M. Casas, M. Moreto ́ et al., “Runtime-aware architectures,” in Euro-Par, 2015, pp. 16–27.
