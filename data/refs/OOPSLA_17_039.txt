[1] Periklis Akritidis. 2010. Cling: A Memory Allocator to Mitigate Dangling Pointers.. In USENIX Security Symposium. 177-192.



[2] Dan Alistarh, William M. Leiserson, Alexander Matveev, and Nir Shavit. 2015. ThreadScan: Automatic and Scalable Memory

Reclamation. In SPAA.



[3] ASP.Net. 2017. ASP.Net/Caching: Libraries for in-memory caching and distributed caching. https://github.com/aspnet/

Caching. (2017).



[4] David F. Bacon, Clement R. Attanasio, Han B. Lee, V. T. Rajan, and Stephen Smith. 2001. Java Without the Coffee Breaks: A

Nonintrusive Multiprocessor Garbage Collector. PLDI (2001).



[5] David F. Bacon, Perry Cheng, and V.T. Rajan. 2003. The Metronome: A Simpler Approach to Garbage Collection in Real-time

Systems. In In Workshop on Java Technologies for Real-Time and Embedded Systems (JTRES), OTM Workshops.



[6] Henry G. Baker. 1995. Use-once variables and linear objects—storage management, reflection, and multi-threading. SIGPLAN

Notices 30, 1 January 1995), 45-52.



[7] Oana Balmau, Rachid Guerraoui, Maurice Herlihy, and Igor Zablotchi. 2016. Fast and Robust Memory Reclamation for

Concurrent Data Structures. In SPAA.



[8] Emery D Berger and Benjamin G Zorn. 2006. DieHard: probabilistic memory safety for unsafe languages. In Acm sigplan

notices, Vol. 41. ACM, 158-168.



[9] S. M. Blackburn and K. S. McKinley. 2008. Immix: a mark-region garbage collector with space efficiency, fast collection, and

mutator performance. In PLDI.



[10] Burton H. Bloom. 1970. Space/Time Trade-offs in Hash Coding with Allowable Errors. Commun. ACM 13, 7 (1970).



[11] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 95. Publication date: October 2017.

95:24 Parkinson, Vytiniotis, Vaswani, Costa, Deligiannis, McDermott, Blankstein and Balkind



[12] Hans-Juergen Boehm and Mark Weiser. 1988. Garbage Collection in an uncooperative environment. Software — Practice and

Experience 18, 9 (1988), 807-820.



[13] Chandrasekhar Boyapati, Alexandru Salcianu, William Beebee, and Martin Rinard. 2003. Ownership types for safe regionbased memory management in real-time Java. In PLDI.



[14] John Boyland. 2001. Alias burying: Unique variables without destructive reads. Software — Practice and Experience 31, 6

(2001), 533-553.



[15] Trevor Alexander Brown. 2015. Reclaiming Memory for Lock-Free Data Structures: There Has to Be a Better Way. In PODC.



[16] Perry Cheng, Robert Harper, and Peter Lee. 1998. Generational Stack Collection and Profile-driven Pretenuring. In Proceedings

of the ACM SIGPLAN 1998 Conference on Programming Language Design and Implementation (PLDI ’98). ACM, New York,

NY, USA, 162-173. https://doi.org/10.1145/277650.277718



[17] Dave Clarke and Tobias Wrigstad. 2003. External uniqueness is unique enough. In ECOOP. 176-200.



[18] David G. Clarke, John M. Potter, and James Noble. 1998. Ownership types for flexible alias protection. In OOPSLA.



[19] Daniel Clifford, Hannes Payer, Michael Stanton, and Ben L. Titzer. 2015. Memento Mori: Dynamic Allocation-site-based

Optimizations. In Proceedings of the 2015 International Symposium on Memory Management (ISMM ’15). ACM, New York,

NY, USA, 105-117. https://doi.org/10.1145/2754169.2754181



[20] Nachshon Cohen and Erez Petrank. 2015a. Automatic memory reclamation for lock-free data structures. In OOPSLA.



[21] Nachshon Cohen and Erez Petrank. 2015b. Efficient Memory Management for Lock-Free Data Structures with Optimistic

Access. In SPAA.



[22] CoreCLR. 2017. CoreCLR: the .NET Core runtime. http://www.github.com/dotnet/CoreCLR. (2017).



[23] Ulan Degenbaev, Jochen Eisinger, Manfred Ernst, Ross McIlroy, and Hannes Payer. 2016. Idle Time Garbage Collection

Scheduling. In PLDI.



[24] Dinakar Dhurjati and Vikram Adve. 2006. Efficiently Detecting All Dangling Pointer Uses in Production Servers. In DSN.



[25] Dinakar Dhurjati, Sumant Kowshik, Vikram Adve, and Chris Lattner. 2003. Memory safety without runtime checks or

garbage collection. ACM SIGPLAN Notices 38, 7 (2003), 69-80.



[26] Dave Dice, Maurice Herlihy, and Alex Kogan. 2016. Fast non-intrusive memory reclamation for highly-concurrent data

structures. In ISMM.



[27] docs.rs. 2017. Rust CrossBeam library. https://docs.rs/crossbeam/0.3.0/crossbeam/. (2017).



[28] elinux.org. 2015. Electric fence malloc debugger. http://elinux.org/Electric_Fence.



[29] Keir Fraser. 2004. Practical lock-freedom. PhD Thesis UCAM-CL-TR-579. Computer Laboratory, University of Cambridge.



[30] Lokesh Gidra, Gaél Thomas, Julien Sopena, Marc Shapiro, and Nhan Nguyen. 2015. NumaGiC: a garbage collector for big

data on big NUMA machines. In ASPLOS.



[31] github.com/densh. 2017. Scala-Offheap: Type-safe off-heap memory for Scala. https://github.com/densh/scala-offheap.

(2017).



[32] Ionel Gog, Jana Giceva, Malte Schwarzkopf, Kapil Vaswani, Dimitrios Vytiniotis, Ganesan Ramalingam, Manuel Costa,

Derek Gordon Murray, Steven Hand, and Michael Isard. 2015. Broom: Sweeping Out Garbage Collection from Big Data

Systems. In HotOS.



[33] Dan Grossman, Greg Morrisett, and Trevor Jim. 2002. Region-based Memory Management in Cyclone. In PLDI.



[34] Timothy L. Harris. 2000. Dynamic Adaptive Pre-tenuring. In Proceedings of the 2Nd International Symposium on Memory

Management (ISMM ’00). ACM, New York, NY, USA, 127-136. https://doi.org/10.1145/362422.362476



[35] Timothy L. Harris. 2001. A Pragmatic Implementation of Non-blocking Linked-Lists. In DISC.



[36] Thomas E. Hart, Paul E. McKenney, Angela Demke Brown, and Jonathan Walpole. 2007. Performance of memory reclamation

for lockless synchronization. Journal of Parallel and Distributed Computing 67 (May 2007), 1270-1285.



[37] Matthew Hertz and Emery D. Berger. 2005. Quantifyng the Performance of Garbage Collection vs. Explicit Memory

Management. In OOPSLA.



[38] Michael Hicks, Greg Morrisett, Dan Grossman, and Trevor Jim. 2004. Experience With Safe Manual Memory-Management

in Cyclone. In ISMM.



[39] John Hogg. 1991. Islands: Aliasing protection in object-oriented languages. In OOPSLA.



[40] Robert Hundt. 2011. Loop Recognition in C++/Java/Go/Scala. In Proceedings of Scala Days 2011.



[41] jemalloc.net. 2017. JEmalloc. http://jemalloc.net. (2017).



[42] Richard Jones, Antony Hosking, and Eliot Moss. 2011. The Garbage Collection Handbook: The Art of Automatic Memory

Management (1st ed.). Chapman & Hall/CRC.



[43] Piyus Kedia, Manuel Costa, Matthew Parkinson, Kapil Vaswani, and Dimitrios Vytiniotis. 2017. Simple, fast and safe manual

memory management. In PLDI.



[44] Byoungyoung Lee, Chengyu Song, Yeongjin Jang, and Tielei Wang. 2015. Preventing Use-after-free with Dangling Pointer

Nullification. In NDSS.



[45] Vitaliy B. Lvin, Gene Novark, Emery D. Berger, and Benjamin G. Zorn. 2008. Archipelago: trading address space for reliability

and security. In ASPLOS.



[46] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 95. Publication date: October 2017.

Project Snowflake: Non-blocking Safe Manual Memory Management in .NET 95:25



[47] Martin Maas, Krste Asanovi¢, Tim Harris, and John Kubiatowicz. 2016. Taurus: A Holistic Language Runtime System for

Coordinating Distributed Managed-Language Applications. In ASPLOS.



[48] Maged M. Michael. 2004. Hazard Pointers: Safe Memory Reclamation for Lock-Free Objects. IEEE Transactions on Parallel

and Distributed Systems 15, 6 (June 2004), 491-504.



[49] Martin Maas, Krste Asanović, Tim Harris, and John Kubiatowicz. 2016. Taurus: A Holistic Language Runtime System for

Coordinating Distributed Managed-Language Applications. In ASPLOS.

Maged M. Michael. 2004. Hazard Pointers: Safe Memory Reclamation for Lock-Free Objects. IEEE Transactions on Parallel

and Distributed Systems 15, 6 (June 2004), 491ś504.



[50] T. Minka, J.M. Winn, J.P. Guiver, S. Webster, Y. Zaykov, B. Yangel, A. Spengler, and J. Bronskill. 2014. Infer.NET 2.6. (2014).

Microsoft Research Cambridge. http://research.microsoft.com/infernet.



[51] Naftaly Minsky. 1996. Towards alias-free pointers. In ECOOP. 189-209.



[52] Adam Morrison and Yehuda Afek. 2015. Temporally Bounding TSO for Fence-Free Asymmetric Synchronization. In ASPLOS.



[53] MSDN. 2016. Asynchronous Programming with async and await. https://msdn.microsoft.com/en-us/library/mt674882.aspx.

(2016).



[54] Karl Naden, Robert Bocchino, Jonathan Aldrich, and Kevin Bierhoff. 2012. A Type System for Borrowing Permissions. In

POPL,



[55] Santosh Nagarakatte, Jianzhou Zhao, Milo M. K. Martin, and Steve Zdancewic. 2010. CETS Compiler-Enforced Temporal

Safety for C. In ISMM.



[56] Khan Nguyen, Lu Fang, Guoqing Xu, Brian Demsky, Shan Lu, Sanazsadat Alamian, and Onur Mutlu. 2016. Yak: A High

Performance Big-Data-Friendly Garbage Collector. In OSDI.



[57] Khanh Nguyen, Kai Wang, Yingyi Bu, Lu Fang, Jianfei Hu, and Guoqing Xu. 2015. FACADE: A Compiler and Runtime for

(Almost) Object-Bounded Big Data Applications. In ASPLOS.



[58] Gene Novark and Emery D Berger. 2010. DieHarder: securing the heap. In Proceedings of the 17th ACM conference on

Computer and communications security. ACM, 573-584.



[59] Matthew Parkinson, Dimitrios Vytiniotis, Kapil Vaswani, Manuel Costa, Pantazis Deligiannis, Dylan McDermott, Aaron

Blankstein, and Jonathan Balkind. 2017. Project Snowflake: Safe Manual Memory Management in .NET. Technical

Report MSR-TR-2017-32. Microsoft Research. https://www.microsoft.com/en-us/research/wp-content/uploads/2017/07/

snowflake-extended.pdf



[60] rustlang.org. 2017. Rust programming language. htips://www.rust-lang.org.



[61] Fred Smith, David Walker, and Greg Morrisett. 2000. Alias types. In European Symposium on Programming (ESOP).



[62] Codrut Stancu, Christian Wimmer, Stefan Brunthaler, Per Larsen, and Michael Franz. 2015. Safe and Efficient Hybrid

Memory Management for Java. In ISMM.



[63] D. Stefanovic, K. S. McKinley, and J. E. B. Moss. 1999, Age-based garbage collection. In OOPSLA.



[64] support.microsoft.com. 2012. How to use Pageheap utility to detect memory errors. https://support.microsoft.com/en-us/

kb/264471.



[65] Nikhil Swamy, Michael Hicks, Greg Morrisett, Dan Grossman, and Trevor Jim. 2006. Safe Manual Memory-Management in

Cyclone. Science of Computer Programming 62, 2 (October 2006), 122-14.



[66] Gil Tene, Balaji Iyengar, and Michael Wolk. 2011. C4: The Continuously Conucrrent Compacting Collector. In ISMM.



[67] Mads Tofte and Jean-Pierre Talpin. 1997. Region-based memory management. Information and Computation 132, 2 (February

1997), 109-176.



[68] TPC.org. 2017. The TPC Benchmark? H. hitp://www.tpc.org/tpch. (2017).



[69] Philip Wadler. 1990. Linear types can change the world!. In IFIP TC 2 Working Conference.



[70] David Walker, Karl Crary, and Greg Morrisett. 2000. Typed memory management in a calculus of capabilities. ACM

Transactions on Programming Languages and Systems 24, 4 (2000), 701-771.



[71] David Walker and Kevin Watkins. 2001. On regions and linear types. In ICFP.



[72] Yves Younan. 2015. FreeSentry: protecting Against User-After-Free Vulnerabilities Due to Dangling Pointers. In NDSS.



[73] B. G. Zorn. 1993. The measured cost of conservative garbage collection. Software — Practice and Experience 23, 7 (1993),

733-756.



[74] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 95. Publication date: October 2017.
