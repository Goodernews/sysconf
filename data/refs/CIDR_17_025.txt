[1] M. Abadi et al. TensorFlow: A System for Large-Scale
Machine Learning. In OSDI, 2016.
[2] A. Ashari et al. On Optimizing Machine Learning
Workloads via Kernel Fusion. In PPoPP, 2015.
[3] N. Bakibayev et al. Aggregation and Ordering in Factorised
Databases. PVLDB, 6(14), 2013.
[4] G. Belter et al. Automating the Generation of Composed
Linear Algebra Kernels. In SC, 2009.
[5] J. Bezanson et al. Julia: A Fresh Approach to Numerical
Computing. CoRR, 2014.
[6] A. J. C. Bik et al. The Automatic Generation of Sparse
Primitives. ACM Trans. Math. Softw., 24(2), 1998.
[7] M. Boehm et al. SystemML’s Optimizer: Plan Generation
for Large-Scale Machine Learning Programs. IEEE Data
Eng. Bull., 37(3), 2014.
[8] M. Boehm et al. Declarative Machine Learning – A
Classification of Basic Properties and Types. CoRR, 2016.
[9] M. Boehm et al. SystemML: Declarative Machine Learning
on Spark. PVLDB, 9(13), 2016.
[10] D. D. Chamberlin et al. A History and Evaluation of
System R. Commun. ACM, 24(10), 1981.
[11] S. Chaudhuri and K. Shim. Including Group-By in Query
Optimization. In VLDB, 1994.
[12] A. Crotty et al. An Architecture for Compiling
UDF-centric Workflows. PVLDB, 8(12), 2015.
[13] J. Desharnais et al. Relational Style Laws and Constructs
of Linear Algebra. J. Log. Algebr. Meth. Prog., 83(2), 2014.
[14] Elgohary et al. Compressed Linear Algebra for Large-Scale
Machine Learning. PVLDB, 9(12), 2016.
[15] X. Feng et al. Towards a Unified Architecture for
in-RDBMS Analytics. In SIGMOD, 2012.
[16] C. Freedman et al. Compilation in the Microsoft SQL
Server Hekaton Engine. IEEE Data Eng. Bull., 37(1), 2014.
[17] B. Huang et al. Cumulon: Optimizing Statistical Data
Analysis in the Cloud. In SIGMOD, 2013.
[18] B. Huang et al. Resource Elasticity for Large-Scale Machine
Learning. In SIGMOD, 2015.
[19] I. F. Ilyas et al. Estimating Compilation Time of a Query
Optimizer. In SIGMOD, 2003.
[20] Intel. Intel 64 and IA-32 Architectures Optimization
Reference Manual, 2016.
[21] Z. G. Ives and N. E. Taylor. Sideways Information Passing
for Push-Style Query Processing. In ICDE, 2008.
[22] M. Karpathiotakis et al. Fast Queries Over Heterogeneous
Data Through Engine Customization. PVLDB, 9(12), 2016.
[23] O. Kennedy et al. DBToaster: Agile Views for a Dynamic
Data Management System. In CIDR, 2011.

[24] M. A. Khamis et al. FAQ: Questions Asked Frequently. In
PODS, 2016.
[25] Y. Klonatos et al. Building Efficient Query Engines in a
High-Level Language. PVLDB, 7(10), 2014.
[26] K. Krikellas et al. Generating code for holistic query
evaluation. In ICDE, 2010.
[27] F. R. Kschischang et al. Factor Graphs and the
Sum-Product Algorithm. IEEE Trans. Information Theory,
47(2), 2001.
[28] A. Kumar et al. Learning Generalized Linear Models Over
Normalized Data. In SIGMOD, 2015.
[29] A. Kumar et al. Model Selection Management Systems:
The Next Frontier of Advanced Analytics. SIGMOD
Record, 44(4), 2015.
[30] A. Kunft et al. Bridging the Gap: Towards Optimization
Across Linear and Relational Algebra. In BeyondMR, 2016.
[31] H. Lang et al. Data Blocks: Hybrid OLTP and OLAP on
Compressed Storage using both Vectorization and
Compilation. In SIGMOD, 2016.
[32] D. D. Lee and H. S. Seung. Algorithms for Non-negative
Matrix Factorization. In NIPS, 2000.
[33] C. Liu et al. Distributed Nonnegative Matrix Factorization
for Web-Scale Dyadic Data Analysis on MapReduce. In
WWW, 2010.
[34] N. Mateev et al. Next-Generation Generic Programming
and its Application to Sparse Matrix Computations. In
ICS, 2000.
[35] V. Menon and K. Pingali. High-Level Semantic
Optimization of Numerical Codes. In ICS, 1999.
[36] T. Neumann. Efficiently Compiling Efficient Query Plans
for Modern Hardware. PVLDB, 4(9), 2011.
[37] T. Neumann and V. Leis. Compiling Database Queries into
Machine Code. IEEE Data Eng. Bull., 37(1), 2014.
[38] T. Neumann and G. Moerkotte. Generating Optimal
DAG-Structured Query Evaluation Plans. Computer
Science - R&D, 24(3), 2009.
[39] H. Poon and P. M. Domingos. Sum-Product Networks: A
New Deep Architecture. In UAI, 2011.
[40] W. Pugh and T. Shpeisman. SIPR: A New Framework for
Generating Efficient Code for Sparse Matrix Computations.
In LCPC, 1998.
[41] S. Rendle. Scaling Factorization Machines to Relational
Data. PVLDB, 6(5), 2013.
[42] H. Rong et al. Sparso: Context-driven Optimizations of
Sparse Linear Algebra. In PACT, 2016.
[43] L. D. Rose et al. FALCON: A MATLAB Interactive
Restructuring Compiler. In LCPC, 1995.
[44] M. Schleich et al. Learning Linear Regression Models over
Factorized Joins. In SIGMOD, 2016.
[45] A. Shaikhha et al. How to Architect a Query Compiler. In
SIGMOD, 2016.
[46] S. Sridharan and J. M. Patel. Profiling R on a
Contemporary Processor. PVLDB, 8(2), 2014.
[47] A. K. Sujeeth et al. OptiML: An Implicitly Parallel
Domain- Specific Language for Machine Learning. In
ICML, 2011.
[48] L. Truong et al. Latte: A Language, Compiler, and
Runtime for Elegant and Efficient Deep Neural Networks.
In PLDI, 2016.
[49] S. Wanderman-Milne and N. Li. Runtime Code Generation
in Cloudera Impala. IEEE Data Eng. Bull., 37(1), 2014.
[50] S. Williams et al. Roofline: An Insightful Visual
Performance Model for Multicore Architectures. Commun.
ACM, 52(4), 2009.
[51] W. P. Yan and P. Larson. Eager Aggregation and Lazy
Aggregation. In VLDB, 1995.
[52] M. Zhang et al. Measuring and Optimizing Distributed
Array Programs. PVLDB, 9(12), 2016.
[53] Y. Zhang et al. RIOT: I/O-Efficient Numerical Computing
without SQL. In CIDR, 2009.
