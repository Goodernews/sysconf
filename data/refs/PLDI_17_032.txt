[1] R. Affeldt, H. Masuhara, E. Sumii, and A. Yonezawa. Supporting objects in run-time bytecode specialization. In Proceedings of the ASIAN Symposium on Partial Evaluation and
Semantics-Based Program Manipulation, pages 50-60. ACM
Press, 2002. doi: 10.1145/568173.568179.

[2] O. Agesen and D. Detlefs. Mixed-mode bytecode execution.
Technical report, Sun Microsystems, Inc., 2000.

[3] B. Alpern, S. Augart, S. M. Blackburn, M. Butrico, A. Cocchi,
P. Cheng, J. Dolby, S. Fink, D. Grove, M. Hind, K. S. McKinley, M. Mergen, J. E. B. Moss, T. Ngo, and V. Sarkar. The
Jikes Research Virtual Machine project: Building an opensource research community. IBM Systems Journal, 44(2):399417, 2005. doi: 10.1147/sj.442.0399.

[4] M. Amold, S. J. Fink, D. Grove, M. Hind, and P. F. Sweeney.
Adaptive optimization in the Jalapefio JVM. In Proceedings
of the ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, pages 47-—
65. ACM Press, 2000. doi: 10.1145/353171.353175.

[5] G. Benson. Zero and Shark: a zero-assembly port of OpenJDK, 2009. URL http://today.java.net/pub/a/today/2009/05/
21/zero-and-shark-openjdk-port.html.

[6] C. F. Bolz and A. Rigo. How to not write virtual machines
for dynamic languages. In Proceedings of the Workshop on
Dynamic Languages and Applications, 2007.

[7] C. F. Bolz and L. Tratt. The impact of meta-tracing on VM design and implementation. Science of Computer Programming,
98(3):408-421, 2015. doi: 10.1016/j.scico.2013.02.001.

[8] C. F. Bolz, A. Cuni, M. Fijatkowski, and A. Rigo. Tracing the meta-level: PyPy’s tracing JIT compiler. In Proceedings of the Workshop on the Implementation, Compilation, Optimization of Object-Oriented Languages and Programming Systems, pages 18-25. ACM Press, 2009. doi:
10.1145/1565824. 1565827.

[9] C. F. Bolz, M. Leuschel, and A. Rigo. Towards just-in-time
partial evaluation of Prolog. In Proceedings of the International Conference on Logic-Based Program Synthesis and
Transformation, pages 158-172. Springer-Verlag, 2010. doi:
10.1007/978-3-642- 12592-8_12.

[10] C. F Bolz, A. Cuni, M. Fijatkowski, M. Leuschel, S. Pedroni,
and A. Rigo. Runtime feedback in a meta-tracing JIT for
efficient dynamic languages. In Proceedings of the Workshop
on the Implementation, Compilation, Optimization of ObjectOriented Languages and Programming Systems, pages 9:19:8. ACM Press, 2011. doi: 10.1145/2069172.2069181.

[11] M. Chevalier-Boisvert, L. Hendren, and C. Verbrugge. Optimizing MATLAB through just-in-time specialization. In Proceedings of the International Conference on Compiler Construction, pages 46-65. Springer-Verlag, 2010. doi: 10.1007/
978-3-642-11970-5_4.

[12] B. Daloze, S. Marr, D. Bonetta, and H. Méssenbéck. Efficient and thread-safe objects for dynamically-typed languages. In Proceedings of the ACM SIGPLAN Conference on
Object-Oriented Programming Systems, Languages, and Applications, pages 642-659. ACM Press, 2016. doi: 10.1145/
2983990.2984001.

[13] G. Duboscq, L. Stadler, T. Wiirthinger, D. Simon, C. Wimmer,
and H. Méssenbock. Graal IR: An extensible declarative intermediate representation. In Proceedings of the Asia-Pacific
Programming Languages and Compilers Workshop, 2013.

[14] G. Duboscq, T. Wiirthinger, L. Stadler, C. Wimmer, D. Simon,
and H. Méssenbiéck. An intermediate representation for speculative optimizations in a dynamic compiler. In Proceedings
of the ACM Workshop on Virtual Machines and Intermediate
Languages, 2013. doi: 10.1145/2542142.2542143.

[15] Y. Futamura. Partial evaluation of computation process—an approach to a compiler-compiler. Systems, Computers, Controls,
2(5):721-728, 1971.

[16] N. Geoffray, G. Thomas, J. Lawall, G. Muller, and B. Folliot. VMKit: A substrate for managed runtime environments. In Proceedings of the International Conference on
Virtual Execution Environments, pages 51-62, 2010. doi:
10.1145/1735997. 1736006.

[17] GitHub. Graal multi-language VM, 2016. URL https://github.
com/graalvm/.

[18] I. Gouy. The computer language benchmarks game, 2016.
URL http://benchmarksgame.alioth.debian.org.

[19] M. Grimmer, M. Rigger, R. Schatz, L. Stadler, and
H. Mossenbock. TruffleC: Dynamic execution of C on a Java
virtual machine. In Proceedings of the International Conference on the Principles and Practice of Programming in
Java, pages 17-26. ACM Press, 2014. doi: 10.1145/2647508.
2647528.

[20] M. Grimmer, R. Schatz, C. Seaton, T. Wiirthinger, and
H. Mossenbock. Memory-safe execution of C on a Java VM.
In Proceedings of the ACM Workshop on Programming Languages and Analysis for Security, pages 16-27. ACM Press,
2015. doi: 10.1145/2786558.2786565.

[21] M. Grimmer, C. Seaton, R. Schatz, T. Wiirthinger, and
H. Méssenbéck. High-performance cross-language interoperability in a multi-language runtime. In Proceedings of the
Dynamic Languages Symposium, pages 78-90. ACM Press,
2015. doi: 10.1145/2816707.2816714.

[22] M. Grimmer, C. Seaton, T. Wiirthinger, and H. Méssenbock.
Dynamically composing languages in a modular way: Supporting C extensions for dynamic languages. In Proceedings
of the International Conference on Modularity, pages 1-13.
ACM Press, 2015. doi: 10.1145/2724525.2728790.

[23] U. Hélzle and D. Ungar. A third-generation SELF implementation: Reconciling responsiveness with performance. In
Proceedings of the ACM SIGPLAN Conference on ObjectOriented Programming Systems, Languages, and Applications, pages 229-243. ACM Press, 1994. doi: 10.1145/
191080.191116.

[24] U. Hélzle, C. Chambers, and D. Ungar. Optimizing
dynamically-typed object-oriented languages with polymorphic inline caches. In Proceedings of the European Conference on Object-Oriented Programming, pages 21-38.
Springer-Verlag, 1991. doi: 10.1007/BFb0057013.

[25] U. Hélzle, C. Chambers, and D. Ungar. Debugging optimized code with dynamic deoptimization. In Proceedings of
the ACM SIGPLAN Conference on Programming Language
Design and Implementation, pages 32-43. ACM Press, 1992.
doi: 10.1145/143095.143114.

[26] C. Humer, C. Wimmer, C. Wirth, A. W68, and T. Wiirthinger.
A domain-specific language for building self-optimizing AST
interpreters. In Proceedings of the International Conference
on Generative Programming and Component Engineering,
pages 123-132. ACM Press, 2014. doi: 10.1145/2658761.
2658776.

[27] N. D. Jones and A. J. Glenstrup. Program generation, termination, and binding-time analysis. In Generative Programming
and Component Engineering, volume 2487 of Lecture Notes
in Computer Science, pages 1-31. Springer-Verlag, 2002. doi:
10.1007/3-540-45821-2_1.

[28] T. Kotzmann and H. Mossenbéck. Run-time support for
optimizations based on escape analysis. In Proceedings of
the International Symposium on Code Generation and Optimization, pages 49-60. IEEE Computer Society, 2007. doi:
10.1109/CGO.2007.34.

[29] C. Lattner and V. Adve. LLVM: A compilation framework for
lifelong program analysis & transformation. In Proceedings
of the International Symposium on Code Generation and Optimization, pages 75-86. IEEE Computer Society, 2004. doi:
10.1109/CGO.2004. 1281665.

[30] MacRuby. MacRuby, 2013. URL http://macruby.org.

[31] S. Marr, B. Daloze, and H. Méssenbéck. Cross-language
compiler benchmarking: Are we fast yet? In Proceedings of
the Dynamic Languages Symposium, pages 120-131. ACM
Press, 2016. doi: 10.1145/2989225.2989232.

[32] H. Masuhara and A. Yonezawa. A portable-approach to dynamic optimization in run-time specialization. New Generation Computing, 20(1):101-124, 2002. doi: 10.1007/
BF03037261.

[33] FE Morandat, B. Hill, L. Osvald, and J. Vitek. Evaluating the design of the R language: Objects and functions for
data analysis. In Proceedings of the European Conference
on Object-Oriented Programming, pages 104-131. SpringerVerlag, 2012. doi: 10.1007/978-3-642-31057-7_6.

[34] C. Nutter. So you want to optimize Ruby, 2012. URL http:
//olog.headius.com/2012/10/so-you- want-to- optimize-ruby.
html.

[35] Optcarrot. Optcarrot: A NES emulator for Ruby benchmark,
2016. URL https://github.com/mame/optcarrot.

[36] Oracle. Oracle Labs GraalVM downloads, 2016.
URL http://www.oracle.com/technetwork/oracle-labs/
program-languages/downloads/.

[37] M. Paleczny, C. Vick, and C. Click. The Java HotSpot™
server compiler. In Proceedings of the Java Virtual Machine
Research and Technology Symposium, pages 1-12. USENIX,
2001.

[38] M. Rigger, M. Grimmer, C. Wimmer, T. Wiirthinger, and
H. Mossenbiéck. Bringing low-level languages to the JVM:
Efficient execution of LLVM IR on Truffle. In Proceedings
of the ACM Workshop on Virtual Machines and Intermediate
Languages, pages 6-15. ACM Press, 2016. doi: 10.1145/
2998415.2998416.

[39] A. Rigo and S. Pedroni. PyPy’s approach to virtual machine
construction. In Companion to the ACM SIGPLAN Conference on Object Oriented Programming Systems, Languages,
and Applications, pages 944-953. ACM Press, 2006. doi:
10.1145/1176617.1176753.

[40] T. Rompf, A. K. Sujeeth, K. J. Brown, H. Lee, H. Chafi, and
K. Olukotun. Surgical precision JIT compilers. In Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation, pages 41-52. ACM Press,
2014. doi: 10.1145/2594291.25943 16.

[41] Rubinius. Rubinius: Use Ruby, 2013. URL http://rubini-us.

[42] G. Savrun-Yeniceri, M. L. Van de Vanter, P. Larsen, S. Brunthaler, and M. Franz. An efficient and generic event-based
profiler framework for dynamic languages. In Proceedings of
the International Conference on the Principles and Practice
of Programming in Java, pages 102-112. ACM Press, 2015.
doi: 10.1145/2807426.2807435.

[43] U. P. Schultz, J. L. Lawall, C. Consel, and G. Muller. Towards automatic specialization of Java programs. In Proceedings of the European Conference on Object-Oriented
Programming, pages 367-390. Springer-Verlag, 1999. doi:
10.1007/3-540-48743-3_17.

[44] U. P. Schultz, J. L. Lawall, and C. Consel. Automatic program
specialization for Java. In ACM Transactions on Programming Languages and Systems, pages 452-499. ACM Press,
2003. doi: 10.1145/778559.778561.

[45] C. Seaton. AST specialisation and partial evaluation for easy
high-performance metaprogramming. In Workshop on MetaProgramming Techniques and Reflection, 2016.

[46] C. Seaton, M. L. Van De Vanter, and M. Haupt. Debugging
at full speed. In Proceedings of the Workshop on Dynamic
Languages and Applications, pages 2:1-2:13. ACM Press,
2014. doi: 10.1145/2617548.2617550.

[47] A. Shali and W. R. Cook. Hybrid partial evaluation. In
Proceedings of the ACM SIGPLAN Conference on ObjectOriented Programming Systems, Languages, and Applications, pages 375-390. ACM Press, 2011. doi: 10.1145/
2048066.2048098.

[48] Y. Shi, K. Casey, M. A. Ertl, and D. Gregg. Virtual machine
showdown: Stack versus registers. ACM Transactions on
Architecture and Code Optimization, 4(4), 2008. doi: 10.
1145/1328195.1328197.

[49] D. Simon, C. Wimmer, B. Urban, G. Duboscq, L. Stadler, and
T. Wiirthinger. Snippets: Taking the high road to a low level.
ACM Transactions on Architecture and Code Optimization, 12
(2):20:1-20:25, 2015. doi: 10.1145/2764907.

[50] L. Stadler, C. Wimmer, T. Wiirthinger, H. Méssenbéck, and
J. Rose. Lazy continuations for Java virtual machines. In
Proceedings of the International Conference on the Principles
and Practice of Programming in Java, pages 143-152. ACM
Press, 2009. doi: 10.1145/1596655.1596679.

[51] L. Stadler, T. Wiirthinger, and C. Wimmer. Efficient coroutines for the Java platform. In Proceedings of the International Conference on the Principles and Practice of Programming in Java, pages 20-28. ACM Press, 2010. doi:
10.1145/1852761.1852765.
[52] L. Stadler, T. Wiirthinger, and H. Méssenbéck. Partial escape analysis and scalar replacement for java. In Proceedings of the International Symposium on Code Generation
and Optimization, pages 165-174. ACM Press, 2014. doi:
10.1145/2544137.2544157.

[53] L. Stadler, A. Welc, C. Humer, and M. Jordan. Optimizing R
language execution via aggressive speculation. In Proceedings of the Dynamic Languages Symposium, pages 84-95.
ACM Press, 2016. doi: 10.1145/2989225.2989236.

[54] TC39. Official ecmascript conformance test suite, 2016. URL
https://github.com/tc39/test262.

[55] Unladen Swallow. unladen-swallow, 2009. URL http://code.
google.com/p/unladen-swallow/.

[56] S. Urbanek. R benchmarks 2.5, 2008. URL http://r-research.
att.com/benchmarks/.

[57] M. L. Van De Vanter. Building debuggers and other tools: We
can ”have it all”. In Proceedings of the Workshop on the Implementation, Compilation, Optimization of Object-Oriented
Languages and Programming Systems, pages 2:1-2:3. ACM
Press, 2015. doi: 10.1145/2843915.2843917.

[58] C. Wimmer, M. Haupt, M. L. Van De Vanter, M. Jordan,
L. Daynés, and D. Simon. Maxine: An approachable virtual
machine for, and in, Java. ACM Transactions on Architecture
and Code Optimization, 9(4):30:1-30:24, 2013. doi: 10.1145/
2400682.2400689.

[59] C. Wimmer, V. Jovanovic, E. Eckstein, and T. Wiirthinger.
One compiler: Deoptimization to optimized code. In Proceedings of the International Conference on Compiler Construction, pages 55-64. ACM Press, 2017. doi: 10.1145/3033019.
3033025.

[60] A. W68, C. Wirth, D. Bonetta, C. Seaton, C. Humer, and
H. Méssenbick. An object storage model for the truffle
language implementation framework. In Proceedings of the
International Conference on the Principles and Practice of
Programming in Java, pages 133-144. ACM Press, 2014. doi:
10.1145/2647508.2647517.

[61] T. Wiirthinger, C. Wimmer, A. W68, L. Stadler, G. Duboscq,
C. Humer, G. Richards, D. Simon, and M. Wolczko. One VM
to rule them all. In Proceedings of Onward! ACM Press, 2013.
doi: 10.1145/2509578.2509581.

[62] W. Zhang, P. Larsen, S. Brunthaler, and M. Franz. Accelerating iterators in optimizing AST interpreters. In Proceedings of
the ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages, and Applications, pages 727-743.
ACM Press, 2014. doi: 10.1145/2660193.2660223.

