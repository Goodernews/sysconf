[1] IBM Corporation, “White paper: Top industry use cases for
stream computing (enable rapid actions in context with ibm
streams),” Tech. Rep., October 2015.

[2] R. Avnur and J. M. Hellerstein, “Eddies: Continuously adaptive query processing,” in Proc. of the ACM SIGMOD Inil.
Conf. on Management of Data, ser. SIGMOD ’00. New
York, NY, USA: ACM, 2000, pp. 261-272.
[3] M. Stonebraker, U. Cetintemel, and S. Zdonik, “The 8 requirements of real-time stream processing,” SIGMOD Rec.,
vol. 34, no. 4, pp. 42-47, Dec. 2005.
[4] B. Babcock, S. Babu, M. Datar, R. Motwani, and J. Widom,
“Models and issues in data stream systems,” in Proc. ACM
SIGMOD Symp. on Principles of Database Systems, ser.
PODS ’02. NY, USA: ACM, 2002, pp. 1-16.
[5] V. Gulisano, R. Jimenez-Peris, M. Patino-Martinez, C. Soriente, and P. Valduriez, “Streamcloud: An elastic and scalable
data streaming system,” JEEE Trans. Parallel Distrib. Syst.,
vol. 23, no. 12, pp. 2351-2365, Dec. 2012.
[6] B. Gedik, S. Schneider, M. Hirzel, and K.-L. Wu, “Elastic
scaling for data stream processing,’ JEEE Trans. Parallel
Distrib. Syst., vol. 25, no. 6, pp. 1447-1463, Jun. 2014.
[7] T. De Matteis and G. Mencagli, “Keep calm and react
with foresight: Strategies for low-latency and energy-efficient
elastic data stream processing,” in Proc. of the ACM SIGPLAN
Symp. on Principles and Practice of Parallel Programming.
NY, USA: ACM, 2016, pp. 1-12.
[8] StreamBase Systems, “Streaming Analytics Augments Business Intelligence,” http://www.tibco.com/streaming- analytics,
2016.
[9] IBM, “InfoSphere Streams,” —http:/Awww-01.ibm.com/
software/data/infosphere/streams/, 2016.

[10] L. Neumeyer, B. Robbins, A. Nair, and A. Kesari, “S4: Distributed stream computing platform,” in Proc. IEEE Intl. Conf:
on Data Mining Workshops, ser. |CDMW ’°10. Washington,
DC, USA: IEEE Computer Society, 2010, pp. 170-177.

[11] Apache Software Foundation, “Storm, an open source
distributed real-time computation system,” 2016. [Online].
Available: http://storm.apache.org/

[12] A. Arasu, B. Babcock, S. Babu, M. Datar, K. Ito,
I. Nishizawa, J. Rosenstein, and J. Widom, “STREAM: the
stanford stream data manager,” in Proc. of the ACM SIGMOD
Intl. Conf. on Management of Data. NY, USA: ACM, 2003,
pp. 665-665.

[13] D. J. Abadi, Y. Ahmad, M. Balazinska, U. Cetintemel et al.,
“The Design of the Borealis Stream Processing Engine,”
in Second Biennial Conference on Innovative Data Systems
Research (CIDR 2005), Asilomar, CA, January 2005.

[14] N. Jain, L. Amini, H. Andrade, R. King, Y. Park et al.,
“Design, implementation, and evaluation of the linear road
bnchmark on the stream processing core,” in Proc. of the ACM
SIGMOD Intl. Conf. on Management of Data, ser. SIGMOD
06. NY, USA: ACM, 2006, pp. 431-442.

[15] M. R. HoseinyFarahabady, Y. C. Lee, and A. Y. Zomaya,
“Pareto-optimal cloud bursting,” JEEE Transactions on Parallel and Distributed Systems, vol. 25, no. 10, pp. 2670-2682,
Oct 2014.

[16] H. Yang, A. Breslow, J. Mars, and L. Tang, “Bubble-fiux:
Precise online qos management for increased utilization
in warehouse scale computers,” SIGARCH Comput. Archit.
News, vol. 41, no. 3, pp. 607-618, 2013.

[17] S. Srikantaiah, A. Kansal, and F. Zhao, “Energy aware consolidation for cloud computing,” in Power Aware Computing and
Systems, ser. HotPower’08. CA, USA: USENIX Association,
2008, pp. 10-10.

[18] P. Tembey, A. Gavrilovska, and K. Schwan, “Merlin: Application & platform-aware resource allocation in consol. servers,”
in SOCC 714, NY, USA, 2014, pp. 1-14.

[19] H. Wang, C. Isci, L. Subramanian, J. Choi, D. Qian,
and O. Mutlu, “A-DRM: architecture-aware distributed resource management of virtualized clusters,” in ACM SIGPLAN/SIGOPS on Virtual Execution Environments, 2015, pp.
93-106.

[20] Matthew Rocklin, “Dask,” dask.pydata.org, 2017.

[21] M. Datar, A. Gionis, P. Indyk, and R. Motwani, “Maintaining
stream statistics over sliding windows,” SIAM J. Comput.,
vol. 31, no. 6, pp. 1794-1813, Jun. 2002.

[22] H. C. M. Andrade, B. Gedik, and D. S. Turaga, Fundamentals of Stream Processing: Application Design, Systems, &
Analytics. NY: Cambridge Uni. Press, 2014.

[23] G. Mencagli, M. Torquati, M. Danelutto, and T. D. Matteis,
“Parallel continuous preference queries over out-of-order and
bursty data streams,” IEEE Transactions on Parallel and
Distributed Systems, vol. PP, no. 99, pp. 1-1, 2017.

[24] J. Li, D. Maier, K. Tufte, V. Papadimos, and P. A. Tucker,
“No pane, no gain: Efficient evaluation of sliding-window
aggregates over data streams,” SIGMOD Rec., vol. 34, no. 1,
pp. 39-44, Mar. 2005.

[25] F. Xia and Y.-x. Sun, Control and Scheduling Codesign: Flexible Resource Management in Real-Time Control Systems,
1st ed. Springer Publishing Company, Incorporated, 2008.

[26] A. Allen, Probability, Statistics, and Queueing Theory: With
Computer Science Applications, ser. Computer science and
scientific computing. Academic Press, 1990.

[27] G. Bolch, S. Greiner, H. de Meer, and K. S. Trivedi, Queueing
networks and Markov chains: modeling and performance
evaluation with computer science applications. John Wiley
& Sons, 2006.

[28] M. Tanner, Practical queueing analysis, ser. The IBM
McGraw-Hill Series. McGraw-Hill Ryerson, 1995.

[29] N. R. Herbst, N. Huber, S. Kounev, and E. Amrehn, “Selfadaptive workload classification and forecasting for proactive
resource provisioning,” in ACM/SPEC Intl. Conf: on Performance Engineering, ser. ICPE °13. NY: ACM, 2013, pp.
187-198.

[30] R. E. Kalman, “New Approach to Linear Filtering & Prediction Problems,” J. of Basic Engin. Trans. of ASME, no. 82D,
pp. 35-45, 1960.

[31] G. E. P. Box, G. M. Jenkins, G. C. Reinsel, and G. M. Ljung,
Time Series Analysis: Forecasting and Control (Wiley Series
in Probability and Statistics). Wiley, 2015.

[32] L. Subramanian, V. Seshadri, A. Ghosh, S. Khan, and
O. Mutlu, “The application slowdown model: Quantifying
and controlling the impact of inter-application interference
at shared caches and main memory,” in Intl. Symp. on
Microarchitecture, ser. MICRO-48. NY, USA: ACM, 2015,
pp. 62-75.

[33] J. Kennedy and R. Eberhart, “Particle swarm optimization,”
in Neural Networks, vol. 4. IEEE, Nov 1995, pp. 1942-1948.
Jake VanderPlas, “Out-of-Core Dataframes in Python:
Dask and OpenStreetMap,” jakevdp.github.io/blog/2015/08/
14/out- of-core-dataframes-in-python/, 2015.

[34] L. Aniello, R. Baldoni, and L. Querzoni, “Adaptive online
scheduling in storm,” in Distributed event-based systems.
ACM, 2013, pp. 207-218.

[35] J. Xu, Z. Chen, J. Tang, and S. Su, “T-storm: Trafficaware online scheduling in Storm,” in Distributed Computing
Systems (ICDCS). TJEEE, 2014, pp. 535-544.

[36] B. Peng, M. Hosseini, Z. Hong, R. Farivar, and R. Campbell,
“R-storm: Resource-aware scheduling in storm,” in Proc. of
Annual Middleware Conf. ACM, 2015, pp. 149-161.

[37] D. Kusic, J. O. Kephart, J. E. Hanson, N. Kandasamy, and
G. Jiang, “Power & performance management of virtualized computing environments via lookahead control,” Cluster
Computing, vol. 12 (1), pp. 1-15, 2009.

[38] Q. Zhang, M. F. Zhani, S. Zhang, Q. Zhu, R. Boutaba
et al., “Dynamic energy-aware capacity provisioning for cloud
computing env.” in Intl. Conf. on Autonomic Computing
(ICAC 712). NY, USA: ACM, 2012, pp. 145-154.

[39] E. Casalicchio, D. A. Menascé, and A. Aldhalaan, “Autonomic resource provisioning in cloud systems with availability goals,” in Cloud & Autonomic Comp. Conf. NY, USA:
ACM, 2013, pp. 1-10.

[40] T. De Matteis and G. Mencagli, “Proactive elasticity and
energy awareness in data stream processing,” Journal of
Systems & Software, vol. 127 (C), pp. 302-319, 2017.

[41] M. Hoseinyfarahabady, H. D. Samani, Y. Wang, A. Zomaya,
and Z. Tari, “A QoS-Aware (MPC) for dynamic scheduling
in Apache Storm,” in Symp. on Network Computing & Applications (NCA’ 16). Cambridge, MA: IEEE, 2016.

[42] S. Qin and T. A. Badgwell, “A survey of industrial MPC
technology,” Control Eng. Practice, vol. 11, no. 7, pp. 733—
764, 2003.

[43] J. B. Rawlings and D. Q. Mayne, Model Predictive Control:
Theory and Design. Nob Hill, 2009.