[1] L. Lamport, “How to make a multiprocessor computer that
correctly executes multiprocess programs,” Computers, IEEE
Transactions on, vol. 100, no. 9, pp. 690–691, 1979.
[2] P. Sewell, S. Sarkar, S. Owens, F. Z. Nardelli, and M. O.
Myreen, “x86-tso: a rigorous and usable programmer’s model
for x86 multiprocessors,” Communications of the ACM, vol. 53,
no. 7, pp. 89–97, 2010.
[3] SPARC International, Inc., The SPARC Architecture Manual:
Version 8. Prentice-Hall, Inc., 1992.
[4] D. L. Weaver and T. Gremond, The SPARC architecture
manual (Version 9). PTR Prentice Hall Englewood Cliffs,
NJ 07632, 1994.
[5] Alpha Architecture Handbook, Version 4. Compaq Computer
Corporation, 1998.
[6] K. Gharachorloo, D. Lenoski, J. Laudon, P. Gibbons, A. Gupta,
and J. Hennessy, “Memory consistency and event ordering in
scalable shared-memory multiprocessors,” in Proceedings of
the 17th International Symposium on Computer Architecture.
ACM, 1990, pp. 15–26.
[7] S. Sarkar, P. Sewell, J. Alglave, L. Maranget, and D. Williams,
“Understanding power multiprocessors,” in ACM SIGPLAN
Notices, vol. 46, no. 6. ACM, 2011, pp. 175–186.
[8] S. Flur, K. E. Gray, C. Pulte, S. Sarkar, A. Sezgin, L. Maranget,
W. Deacon, and P. Sewell, “Modelling the armv8 architecture,
operationally: Concurrency and isa,” in Proceedings of
the 43rd Annual ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, ser. POPL 2016.
New York, NY, USA: ACM, 2016, pp. 608–621. [Online].
Available: http://doi.acm.org/10.1145/2837614.2837615
[9] S. Mador-Haim, L. Maranget, S. Sarkar, K. Memarian,
J. Alglave, S. Owens, R. Alur, M. M. Martin, P. Sewell,
and D. Williams, “An axiomatic memory model for power
multiprocessors,” in Computer Aided Verification. Springer,
2012, pp. 495–512.
[10] J. Alglave, L. Maranget, and M. Tautschnig, “Herding cats:
Modelling, simulation, testing, and data mining for weak
memory,” ACM Transactions on Programming Languages and
Systems (TOPLAS), vol. 36, no. 2, p. 7, 2014.
[11] IBM, Power ISA, Version 2.07, 2013.
[12] J. Alglave, A. Fox, S. Ishtiaq, M. O. Myreen, S. Sarkar,
P. Sewell, and F. Z. Nardelli, “The semantics of power and
arm multiprocessor machine code,” in Proceedings of the 4th
workshop on Declarative aspects of multicore programming.
ACM, 2009, pp. 13–24.
[13] J. Alglave and L. Maranget, Computer Aided Verification:
23rd International Conference, CAV 2011, Snowbird, UT,
USA, July 14-20, 2011. Proceedings. Berlin, Heidelberg:
Springer Berlin Heidelberg, 2011, ch. Stability in Weak
Memory Models, pp. 50–66. [Online]. Available: http:
//dx.doi.org/10.1007/978-3-642-22110-1 6
[14] J. Alglave, “A formal hierarchy of weak memory models,”
Formal Methods in System Design, vol. 41, no. 2, pp. 178–
210, 2012.
[15] S. Sarkar, K. Memarian, S. Owens, M. Batty, P. Sewell,
L. Maranget, J. Alglave, and D. Williams, “Synchronising
c/c++ and power,” in ACM SIGPLAN Notices, vol. 47, no. 6.
ACM, 2012, pp. 311–322.
[16] J. Alglave, D. Kroening, V. Nimal, and M. Tautschnig,
“Software verification for weak memory via program transformation,” in Programming Languages and Systems. Springer,
2013, pp. 512–532.
[17] “The risc-v instruction set,” https://riscv.org/.
[18] A. Waterman, Y. Lee, D. A. Patterson, and K. Asanovi,
“The risc-v instruction set manual. volume 1: User-level isa,
version 2.1,” Technical Report UCB/EECS-2016-118, EECS
Department, University of California, Berkeley, May 2014.
[Online]. Available: https://people.eecs.berkeley.edu/∼krste/
papers/riscv-spec-v2.1.pdf
[19] D. Lustig, C. Trippel, M. Pellauer, and M. Martonosi, “Armor:
defending against memory consistency model mismatches
in heterogeneous architectures,” in Proceedings of the 42nd
Annual International Symposium on Computer Architecture.
ACM, 2015, pp. 388–400.
[20] M. H. Lipasti, C. B. Wilkerson, and J. P. Shen, “Value locality
and load value prediction,” ACM SIGOPS Operating Systems
Review, vol. 30, no. 5, pp. 138–147, 1996.
[21] M. M. K. Martin, D. J. Sorin, H. W. Cain, M. D.
Hill, and M. H. Lipasti, “Correctly implementing value
prediction in microprocessors that support multithreading
or multiprocessing,” in Proceedings of the 34th Annual
ACM/IEEE International Symposium on Microarchitecture,
ser. MICRO 34. Washington, DC, USA: IEEE Computer
Society, 2001, pp. 328–337. [Online]. Available: http:
//dl.acm.org/citation.cfm?id=563998.564039
[22] W. J. Ghandour, H. Akkary, and W. Masri, “The potential of
using dynamic information flow analysis in data value prediction,” in Proceedings of the 19th international conference
on Parallel architectures and compilation techniques. ACM,
2010, pp. 431–442.
[23] A. Perais and A. Seznec, “Eole: Paving the way for an effective
implementation of value prediction,” in Computer Architecture
(ISCA), 2014 ACM/IEEE 41st International Symposium on.
IEEE, 2014, pp. 481–492.
[24] A. Perais and A. Seznec, “Practical data value speculation
for future high-end processors,” in High Performance Computer Architecture (HPCA), 2014 IEEE 20th International
Symposium on. IEEE, 2014, pp. 428–439.
[25] S. Owens, S. Sarkar, and P. Sewell, “A better x86 memory
model: x86-tso,” in Theorem Proving in Higher Order Logics.
Springer, 2009, pp. 391–407.
[26] J. Kang, C.-K. Hur, O. Lahav, V. Vafeiadis, and D. Dreyer,
“A promising semantics for relaxed-memory concurrency,”
in Proceedings of the 44th ACM SIGPLAN Symposium on
Principles of Programming Languages, ser. POPL 2017.
New York, NY, USA: ACM, 2017, pp. 175–189. [Online].
Available: http://doi.acm.org/10.1145/3009837.3009850
[27] H.-J. Boehm and B. Demsky, “Outlawing ghosts: Avoiding
out-of-thin-air results,” in Proceedings of the Workshop on
Memory Systems Performance and Correctness, ser. MSPC
’14. New York, NY, USA: ACM, 2014, pp. 7:1–7:6. [Online].
Available: http://doi.acm.org/10.1145/2618128.2618134
[28] S. V. Adve and M. D. Hill, “Weak ordering a new definition,”
in ACM SIGARCH Computer Architecture News, vol. 18, no.
2SI. ACM, 1990, pp. 2–14.
[29] K. Gharachorloo, A. Gupta, and J. L. Hennessy, “Two
techniques to enhance the performance of memory consistency
models,” in Proceedings of the 1991 International Conference
on Parallel Processing, 1991, pp. 355–364.
[30] P. Ranganathan, V. S. Pai, and S. V. Adve, “Using speculative
retirement and larger instruction windows to narrow the
performance gap between memory consistency models,” in
Proceedings of the ninth annual ACM symposium on Parallel
algorithms and architectures. ACM, 1997, pp. 199–210.
[31] C. Guiady, B. Falsafi, and T. N. Vijaykumar, “Is sc+ ilp=
rc?” in Computer Architecture, 1999. Proceedings of the 26th
International Symposium on. IEEE, 1999, pp. 162–171.
[32] C. Gniady and B. Falsafi, “Speculative sequential consistency
with little custom storage,” in Parallel Architectures and Compilation Techniques, 2002. Proceedings. 2002 International
Conference on. IEEE, 2002, pp. 179–188.
[33] L. Ceze, J. Tuck, P. Montesinos, and J. Torrellas, “Bulksc: bulk
enforcement of sequential consistency,” in ACM SIGARCH
Computer Architecture News, vol. 35, no. 2. ACM, 2007, pp.
278–289.
[34] T. F. Wenisch, A. Ailamaki, B. Falsafi, and A. Moshovos,
“Mechanisms for store-wait-free multiprocessors,” in ACM
SIGARCH Computer Architecture News, vol. 35, no. 2. ACM,
2007, pp. 266–277.
[35] C. Blundell, M. M. Martin, and T. F. Wenisch, “Invisifence:
performance-transparent memory ordering in conventional
multiprocessors,” in ACM SIGARCH Computer Architecture
News, vol. 37, no. 3. ACM, 2009, pp. 233–244.
[36] A. Singh, S. Narayanasamy, D. Marino, T. Millstein, and
M. Musuvathi, “End-to-end sequential consistency,” in ACM
SIGARCH Computer Architecture News, vol. 40, no. 3. IEEE
Computer Society, 2012, pp. 524–535.
[37] C. Lin, V. Nagarajan, R. Gupta, and B. Rajaram, “Efficient sequential consistency via conflict ordering,” in ACM SIGARCH
Computer Architecture News, vol. 40, no. 1. ACM, 2012, pp.
273–286.
[38] D. Gope and M. H. Lipasti, “Atomic sc for simple in-order
processors,” in High Performance Computer Architecture
(HPCA), 2014 IEEE 20th International Symposium on. IEEE,
2014, pp. 404–415.
[39] S. Sarkar, P. Sewell, F. Z. Nardelli, S. Owens, T. Ridge,
T. Braibant, M. O. Myreen, and J. Alglave, “The semantics
of x86-cc multiprocessor machine code,” SIGPLAN Not.,
vol. 44, no. 1, pp. 379–391, Jan. 2009. [Online]. Available:
http://doi.acm.org/10.1145/1594834.1480929
[40] J. R. Goodman, Cache consistency and sequential consistency. University of Wisconsin-Madison, Computer Sciences
Department, 1991.
[41] M. Dubois, C. Scheurich, and F. Briggs, “Memory access
buffering in multiprocessors,” in ACM SIGARCH Computer
Architecture News, vol. 14, no. 2. IEEE Computer Society
Press, 1986, pp. 434–442.
[42] X. Shen, Arvind, and L. Rudolph, “Commit-reconcile and
fences (crf): A new memory model for architects and compiler
writers,” in Computer Architecture, 1999. Proceedings of the
26th International Symposium on. IEEE, 1999, pp. 150–161.
[43] Arvind and J.-W. Maessen, “Memory model = instruction
reordering + store atomicity,” in ACM SIGARCH Computer
Architecture News, vol. 34, no. 2. IEEE Computer Society,
2006, pp. 29–40.
[44] ARM, ARM Architecture Reference Manual, ARMv7-A and
ARMv7-R edition, 2013.
[45] S. V. Adve and K. Gharachorloo, “Shared memory consistency
models: A tutorial,” computer, vol. 29, no. 12, pp. 66–76, 1996.
[46] L. Maranget, S. Sarkar, and P. Sewell, “A tutorial introduction
to the arm and power relaxed memory models,” http://www.
cl.cam.ac.uk/∼pes20/ppc-supplemental/test7.pdf, 2012.
[47] R. Smith, Ed., Working Draft, Standard for Programming
Language C++. http://open-std.org/JTC1/SC22/WG21/docs/
papers/2015/n4527.pdf, May 2015.
[48] H.-J. Boehm and S. V. Adve, “Foundations of the c++
concurrency memory model,” in ACM SIGPLAN Notices,
vol. 43, no. 6. ACM, 2008, pp. 68–78.
[49] M. Batty, S. Owens, S. Sarkar, P. Sewell, and T. Weber,
“Mathematizing c++ concurrency,” in ACM SIGPLAN Notices,
vol. 46, no. 1. ACM, 2011, pp. 55–66.
[50] M. Batty, A. F. Donaldson, and J. Wickerson, “Overhauling
sc atomics in c11 and opencl,” SIGPLAN Not., vol. 51,
no. 1, pp. 634–648, Jan. 2016. [Online]. Available:
http://doi.acm.org/10.1145/2914770.2837637
[51] J. Manson, W. Pugh, and S. V. Adve, “The java
memory model,” in Proceedings of the 32Nd ACM
SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, ser. POPL ’05. New York, NY, USA:
ACM, 2005, pp. 378–391. [Online]. Available: http:
//doi.acm.org/10.1145/1040305.1040336
[52] P. Cenciarelli, A. Knapp, and E. Sibilio, “The java memory model: Operationally, denotationally, axiomatically,” in
Programming Languages and Systems. Springer, 2007, pp.
331–346.
[53] J.-W. Maessen, Arvind, and X. Shen, “Improving the java
memory model using crf,” ACM SIGPLAN Notices, vol. 35,
no. 10, pp. 1–12, 2000.
[54] “Wwc+addrs test result in power processors,” http://www.cl.
cam.ac.uk/∼pes20/ppc-supplemental/ppc051.html#toc11.
[55] J. F. Cantin, M. H. Lipasti, and J. E. Smith, “The complexity
of verifying memory coherence,” in Proceedings of the
fifteenth annual ACM symposium on Parallel algorithms and
architectures. ACM, 2003, pp. 254–255.
[56] S. Zhang, M. Vijayaraghavan, and Arvind, “Weak memory
models: Balancing definitional simplicity and implementation flexibility,” arXiv preprint arXiv:1707.05923 (extended
version), 2017.
[57] M. Batty, K. Memarian, S. Owens, S. Sarkar, and P. Sewell,
“Clarifying and compiling c/c++ concurrency: from c++ 11 to
power,” in ACM SIGPLAN Notices, vol. 47, no. 1. ACM,
2012, pp. 509–520.
[58] M. Vijayaraghavan, A. Chlipala, Arvind, and N. Dave,
Computer Aided Verification: 27th International Conference,
CAV 2015, San Francisco, CA, USA, July 18-24, 2015,
Proceedings, Part II. Cham: Springer International Publishing,
2015, ch. Modular Deductive Verification of Multiprocessor
Hardware Designs, pp. 109–127. [Online]. Available:
http://dx.doi.org/10.1007/978-3-319-21668-3 7
[59] D. J. Sorin, M. D. Hill, and D. A. Wood, “A primer on
memory consistency and cache coherence,” Synthesis Lectures
on Computer Architecture, vol. 6, no. 3, pp. 1–212, 2011.
[60] S. C. Woo, M. Ohara, E. Torrie, J. P. Singh, and A. Gupta,
“The splash-2 programs: Characterization and methodological
considerations,” in ACM SIGARCH Computer Architecture
News, vol. 23, no. 2. ACM, 1995, pp. 24–36.
[61] “Splash-2x benchmarks,” http://parsec.cs.princeton.edu/
parsec3-doc.htm#splash2x.
[62] E. K. Ardestani and J. Renau, “Esesc: A fast multicore
simulator using time-based sampling,” in High Performance
Computer Architecture (HPCA2013), 2013 IEEE 19th International Symposium on. IEEE, 2013, pp. 448–459.
