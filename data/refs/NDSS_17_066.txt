[1] Exploits database by offensive security. https://www.exploit-db.com/.
[2] The llvm compiler infrastructure. http://llvm.org/.
[3] Penetration testing software. metasploit. https://www.metasploit.com/.
[4] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro. Preventing

memory error exploits with wit. In S&P’08.

[5] C. Anley. Creating arbitrary shellcode in unicode expanded strings,
https://www.helpnetsecurity.com/dl/articles/

the “venetian” exploit.
unicodebo.pdf, 2002.

[6] S. Bhatkar and R. Sekar. Data space randomization. In DIMVA’08.
[7] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi. Timely

rerandomization for mitigating memory disclosures. In CCS’15.

[8] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh.

Hacking blind. In S&P’14.

[9] T. Bletsch, X. Jiang, and V. Freeh. Mitigating code-reuse attacks with

control-ﬂow locking. In ACSAC’11.

[10] T. Bletsch, X. Jiang, V. W. Freeh, and Z. Liang.

Jump-oriented

programming: A new class of code-reuse attack. In ASIACCS’11.

[11] E. Buchanan, R. Roemer, H. Shacham, and S. Savage. When good
instructions go bad: Generalizing return-oriented programming to risc.
In CCS’08.

[12] Bulba and Kil3r.

Bypassing stackguard and stackshield.

http://

phrack.org/issues/56/5.html, 2000.

[13] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro. Data

randomization. Technical Report MSR-TR-2008-120.

[14] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross. Control-
ﬂow bending: On the effectiveness of control-ﬂow integrity. In SEC’15.
[15] N. Carlini and D. Wagner. Rop is still dangerous: Breaking modern

defenses. In SEC’14.

[16] S. Chen, J. Xu, E. C. Sezer, P. Gauriar, and R. K. Iyer. Non-control-data

attacks are realistic threats. In SEC’05.


[17] randomization. In CODASPY’16.

[18] R. Chinchani and E. van den Berg. A fast static analysis approach to

detect exploit code inside network ﬂows. In RAID’05.

[19] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro,
C. Liebchen, M. Qunaibit, and A.-R. Sadeghi. Losing control: On the
effectiveness of control-ﬂow integrity under stack attacks. In CCS’15.
Pointguardtm:

[20] C. Cowan, S. Beattie, J. Johansen, and P. Wagle.

Protecting pointers from buffer overﬂow vulnerabilities. In SEC’03.

[21] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie,
A. Grier, P. Wagle, and Q. Zhang. Stackguard: Automatic adaptive
detection and prevention of buffer-overﬂow attacks. In SEC’98.

[22] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz. Readactor: Practical code randomization
resilient to memory disclosure. In S&P’15.

[23] S. J. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi,
A.-R. Sadeghi, T. Holz, B. De Sutter, and M. Franz. It’s a trap: Table
randomization and protection against function-reuse attacks. In CCS’15.
[24] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose. Stitching the
gadgets: On the ineffectiveness of coarse-grained control-ﬂow integrity
protection. In SEC’14.

[25] L. De Moura and N. Bjørner.

Z3: An efﬁcient smt solver.

TACAS’08/ETAPS’08, Berlin, Heidelberg. Springer-Verlag.

[26] T. DETRISTAN, T. ULENSPIEGEL, Y. MALCOM, and V. UN-
DERDUK. Polymorphic shellcode engine using spectrum analysis.
http://phrack.org/issues/61/9.html, 2003.

[27] Y. Ding, T. Wei, T. Wang, Z. Liang, and W. Zou. Heap taichi: Exploiting
memory allocation granularity in heap-spraying attacks. In ACSAC’10.
[28] P. Fogla, M. Sharif, R. Perdisci, O. Kolesnikov, and W. Lee. Polymor-

phic blending attacks. In SEC’06.

[29] E. G¨oktas¸, E. Athanasopoulos, M. Polychronakis, H. Bos, and G. Por-
tokalidis. Size does matter: Why using gadget-chain length to prevent
code-reuse attacks is hard. In SEC’14.
J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson. Ilr:
Where’d my gadgets go? In Proceedings of the S&P’12.

[30]

[31] D. Jang, Z. Tatlock, and S. Lerner. SafeDispatch: Securing C++ virtual

calls from memory corruption attacks. In NDSS’14.

[32] K2. Admmutate documentation.

0.8.4.tar.gz, 2003.

http://www.ktwo.ca/ADMmutate-

[33] G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering code-injection

attacks with instruction-set randomization. In CCS’03.

[34] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout
permutation (aslp): Towards ﬁne-grained randomization of commodity
software. In ACSAC’06.

[35] D. Larochelle and D. Evans. Statically detecting likely buffer overﬂow

vulnerabilities. In SEC’01.

[36] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee. From zygote to morula:

Fortifying weakened aslr on android. In S&P’14.

[37] Z. Liang and R. Sekar.

Fast and automated generation of attack

signatures: A basis for building self-protecting servers. In CCS’05.

[38] C. Linn and S. Debray. Obfuscation of executable code to improve

resistance to static disassembly. In CCS’03.
J. Mason, S. Small, F. Monrose, and G. MacManus. English shellcode.
In CCS’09.

[39]

[40] B. Niu and G. Tan. Per-input control-ﬂow integrity. In CCS’15.
[41] A. Papadogiannakis, L. Loutsis, V. Papaefstathiou, and S. Ioannidis.
In

Asist: architectural support for instruction set randomization.
CCS’13.

[42] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing the
gadgets: Hindering return-oriented programm ing using in-place code
randomization. In S&P’12.

[43] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent rop

exploit mitigation using indirect branch tracing. In SEC’13.

[44] P. Philippaerts, Y. Younan, S. Muylle, F. Piessens, S. Lachmund, and
T. Walter. Code pointer masking: Hardening applications against code
injection attacks. In DIMVA’11.

15

[45] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. Compre-

hensive shellcode detection using runtime heuristics. In ACSAC’10.

[46] M. Polychronakis, K. G. Anagnostakis, and E. P. Markatos. Emulation-
In

based detection of non-self-contained polymorphic shellcode.
RAID’07.

[47] G. Portokalidis and A. D. Keromytis. Fast and practical instruction-set

randomization for commodity systems. In ACSAC’10.

[48] P. Ratanaworabhan, B. Livshits, and B. Zorn. Nozzle: A defense against

heap-spraying code injection attacks. In SEC’09.

[49] G. Richarte et al. Four different tricks to bypass stackshield and

stackguard protection. World Wide Web, 1, 2002.

[50] R. Roemer, E. Buchanan, H. Shacham, and S. Savage. Return-oriented
programming: Systems, languages, and applications. ACM Trans. Inf.
Syst. Secur., 15(1):2:1–2:34, Mar. 2012.
J. Salwan. Shellcodes database for study cases. http://shell-storm.org/
shellcode/.

[51]

[52] S. Schirra. ROPgadget - Gadgets ﬁnder and auto-roper. http://shell-

storm.org/project/ROPgadget/.

[53] S. Schirra. Ropper - rop gadget ﬁnder and binary information tool.

https://scoding.de/ropper/.

[54] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz. Counterfeit object-oriented programming: On the difﬁculty
of preventing code reuse attacks in c++ applications. In S&P’15.

[55] F. Schuster, T. Tendyck, J. Pewny, A. Maaß, M. Steegmanns, M. Contag,
and T. Holz. Evaluating the effectiveness of current anti-rop defenses.
In RAID’14.

[56] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov. Address-

sanitizer: A fast address sanity checker. In ATC’12.

[57] F. Serna. Cve-2012-0769, the case of the perfect info leak. http://

zhodiac.hispahack.com/my-stuff/security/Flash ASLR bypass.pdf.

[58] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh.

On the effectiveness of address-space randomization. In CCS’04.

[59] M. I. Sharif, A. Lanzi, J. T. Gifﬁn, and W. Lee.

Impeding Malware

Analysis Using Conditional Code Obfuscation. In NDSS’08.

[60] Skylined. http://www.edup.tudelft.nl/˜bjwever/advisory iframe.html.php.
[61] K. Snow, S. Krishnan, F. Monrose, and N. Provos. Shellos: Enabling
fast detection and forensic analysis of code injection attacks. In SEC’11.
[62] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-
R. Sadeghi. Just-in-time code reuse: On the effectiveness of ﬁne-grained
address space layout randomization. In S&P’13.

[63] M. Suenaga. Evolving shell code. Whitepaper, Symantec Security

Response, Japan, 2006.

[64] W. N. Sumner, Y. Zheng, D. Weeratunge, and X. Zhang. Precise calling

context encoding. In ICSE’10.

[65] M. D. Team. Metasploit project. http://metasploit.com, 2006.
[66] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, U. Erlingsson,
L. Lozano, and G. Pike. Enforcing forward-edge control-ﬂow integrity
in gcc & llvm. In SEC’14.

[67] T. Toth and C. Kruegel. Accurate buffer overﬂow detection via abstract

payload execution. In RAID’02.

[68] V. van der Veen, D. Andriesse, E. G¨oktas¸, B. Gras, L. Sambuc,
A. Slowinska, H. Bos, and C. Giuffrida. Practical context-sensitive
cﬁ. In CCS’15.

[69] D. Wagner, J. S. Foster, E. A. Brewer, and A. Aiken. A ﬁrst step towards

automated detection of buffer overrun vulnerabilities. In NDSS’00.

[70] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code. In
CCS’12.

[71] E. Wimberley. Bypassing AddressSanitizer. https://packetstormsecu-

rity.com/ﬁles/123977/Bypassing-AddressSanitizer.html.

[72] Y. Xia, Y. Liu, H. Chen, and B. Zang. Cﬁmon: Detecting violation of

control ﬂow integrity using performance counters. In DSN’12.

[73] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou. Practical control ﬂow integrity and randomization
for binary executables. In S&P’13.

[74] M. Zhang and R. Sekar. Control ﬂow integrity for cots binaries.

SEC’13.