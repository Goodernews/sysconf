[1] K. Benton, L. J. Camp, and C. Small. Openflow vulnerability assessment. In Proceedings of the second ACM SIGCOMM workshop on Hot

topics in software defined networking (HotSDN’13). ACM, 2013.

[2] P. Berde, M. Gerola, J. Hart, Y. Higuchi, M. Kobayashi, T. Koide,
B. Lantz, B. O’Connor, P. Radoslavov, W. Snow, et al. Onos: towards
an open, distributed sdn os. In Proceedings of the third workshop on
Hot topics in software defined networking (HotSDN’ 14). ACM, 2014.
[3] Brocade. Brocade SDN Controller, 2016. http://www.brocade.com/
en/products-services/software-networking/sdn-controllers-applications/
sdn-controller.html/.

[4] 8. K. Cha, M. Woo, and D. Brumley. Program-adaptive mutational
fuzzing. In Proc. of the IEEE Symposium on Security and Privacy,
May 2015.

[5] B. Chandrasekaran and T. Benson. Tolerating sdn application failures
with legosdn. In Proceedings of the 13th ACM Workshop on Hot Topics
in Networks (HotNets’14), ACM, 2014.

[6] G. Combs et al. Wireshark-network protocol analyzer. Version 0.99, 5,
2008.

[7] W. Cui, M. Peinado, H. J. Wang, and M. E. Locasto. Shieldgen: Automatic data patch generation for unknown vulnerabilities with informed
probing. In Security and Privacy, 2007. SP’07. IEEE Symposium on,
pages 252-266. IEEE, 2007.

[8] A. R. Curtis, J. C. Mogul, J. Tourrilhes, P. Yalagandula, P. Sharma, and
8. Banerjee. Devoflow: scaling flow management for high-performance
networks. In ACM SIGCOMM Computer Communication Review,
volume 41, pages 254-265. ACM, 2011.

[9] M. Dhawan, R. Poddar, K. Mahajan, and V. Mann. Sphinx: Detecting
security attacks in software-defined networks. In NDSS, 2015.

[10] J. M. Dover. A denial of service attack against the open floodlight sdn
controller, 2013.

[11] J. M. Dover. A switch table vulnerability in the open floodlight sdn
controller, 2014.

[12] O. N. Foundation. Security Working Group.
opennetworking.org/technical-communities/areas/services.

https://Awww.

[13] Fyodor. Nmap security scanner. http:/Avww.nmap.org.

[14] P. Godefroid, M. Y. Levin, and D. A. Molnar. Automated whitebox
fuzz testing. In NDSS, volume 8, pages 151-166, 2008.

[15] S. Hocevar. zzuf. https://github.com/samhocevar/zzuf.

[16] C.-Y. Hong, 8. Kandula, R. Mahajan, M. Zhang, V. Gill, M. Nanduri, and R. Wattenhofer. Achieving high utilization with softwaredriven wan. In ACM SIGCOMM Computer Communication Review,
volume 43, pages 15-26. ACM, 2013.

[17] K. Hong, L. Xu, H. Wang, and G. Gu. Poisoning network visibility
in software-defined networks: New attacks and countermeasures. In
Proceedings of the 22nd Annual Network and Distributed System
Security Symposium (NDSS’15), February 2015.

[18] A. D. Householder and J. M. Foote. Probability-based parameter
selection for black-box fuzz testing. Technical report, 2012. CERT
Technical Report.

[19] HP. HP SDN App Store. https://marketplace.saas.hpe.com/sdn.

[20] 8. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski, A. Singh,
S. Venkata, J. Wanderer, J. Zhou, M. Zhu, et al. B4: Experience with a
globally-deployed software defined wan. In ACM SIGCOMM Computer
Communication Review, volume 43, pages 3-14. ACM, 2013.

[21] D. Kotani and Y. Okabe. A packet-in message filtering mechanism for
protection of control plane in openflow networks. In Proceedings of
the Tenth ACM/IEEE Symposium on Architectures for Networking and
Communications Systems, ANCS ’14, pages 29-40, New York, NY,
USA, 2014. ACM.

[22] D. Kreutz, F. M. Ramos, P. Verissimo, C. E. Rothenberg, $. Azodolmolky, and S. Uhlig. Software-defined networking: A comprehensive
survey. proceedings of the IEEE, 103(1):14—-76, 2015.

[23] D. Kreutz, F M. V. Ramos, and P. Verissimo. Towards secure
and dependable software-defined networks. In Proceedings of ACM
SIGCOMM Workshop on Hot Topics in Software Defined Networking
(HotSDN’13), August 2013.

[24] D. Maynor. Metasploit toolkit for penetration testing, exploit development, and vulnerability research. Elsevier, 2011.

[25] J. Medved, R. Varga, A. Tkacik, and K. Gray. Opendaylight: Towards
a model-driven sdn controller architecture. In 2014 IEEE 15th International Symposium on, pages 1-6. IEEE, 2014.

[26] B. P. Miller, L. Fredriksen, and B. So. An empirical study of the
reliability of unix utilities. Communications of ACM, 1990.

[27] B.S. Networks. Floodlight. http://www.projectfloodlight.org/floodlight/.
[28] Open Networking Foundation. https://www.opennetworking.org/.

[29] OpenFlow. OpenFlow Specification version 1.0.0. Technical report,
2009. http://archive.openflow.org/documents/openflow-spec-v1.0.0.pdf.

[30] OpenFlow. OpenFlow Specification version 1.3.0. Technical report, 2011. https://www.opennetworking.org/images/stories/downloads/
sdn-resources/onf-specifications/openflow/openflow-spec-v1.3.0.pdf.

[31] P. Porras, S. Shin, V. Yegneswaran, M. Fong, M. Tyson, and G. Gu. A
security enforcement kernel for openflow networks. In Proceedings
of the first workshop on Hot topics in software defined networks
(HotSDN’ 12), 2012.

[32] C. Répke and T. Holz. Sdn rootkits: Subverting network operating sys
tems of software-defined networks. In Research in Attacks, Intrusions,
and Defenses, pages 339-356. Springer, 2015.

[33] S. Lee, and C. Yoon, and S. Shin and S. Scott-Hayward. DELTA: SDN
SECURITY EVALUATION FRAMEWORK. http://opensourcesdn.org/
projects/project-delta-sdn-security-evaluation-framework.

[34] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang,
Z. Liu, A. El-Hassany, S. Whitlock, et al. Troubleshooting blackbox
sdn control software with minimal causal sequences. In Proceedings
of the 2014 ACM Conference on SIGCOMM, pages 395-406. ACM,
2014.

[35] SDNSecurity.org. SDN Security Vulnerabilities Genome Project. http:
//sdnsecurity.org/project_SDN-Security- Vulnerbility- attack-list.html.

[36] T. N. Security. Nessus. http://www.tenable.com/products/
nessus- vulnerability-scanner.

[37] A. Shalimov, D. Zuikov, D. Zimarina, V. Pashkov, and R. Smeliansky.
Advanced study of sdn/openflow controllers. In Proceedings of the
9th Central & Eastern European Software Engineering Conference in
Russia, CEE-SECR ’13, pages 1:1-1:6, New York, NY, USA, 2013.
ACM.

[38] S. Shin and G. Gu. Attacking software-defined networks: A first
feasibility study (short paper). In Proceedings of ACM SIGCOMM
Workshop on Hot Topics in Software Defined Networking (HotSDN’13),
August 2013.

[39] S. Shin, Y. Song, T. Lee, $. Lee, J. Chung, P. Porras, V. Yegneswaran,
J. Noh, and B. B. Kang. Rosemary: A robust, secure, and highperformance network operating system. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications Security
(CCS’14), November 2014.

[40] S. Shin, V. Yegneswaran, P. Porras, and G. Gu. Avant-guard: Scalable
and vigilant switch flow management in software-defined networks. In
Proceedings of the 20th ACM Conference on Computer and Communications Security (CCS’13), November 2013.

[41] A. Takanen, J. D. Demott, and C. Miller. Fuzzing for Software Security
Testing and Quality Assurance. http:/Awww.mcafee.com/us/products/
network-security- platform.aspx.

[42] A. Turner and M. Bing. Tepreplay: Pcap editing and replay tools for*
nix. online], http://tcpreplay. sourceforge. net, 2005.

[43] X. Wang, Z. Li, J. Xu, M. K. Reiter, C. Kil, and J. Y. Choi. Packet
vaccine: Black-box exploit detection and signature generation. In Proceedings of the 13th ACM conference on Computer and communications
security, pages 37-46. ACM, 2006.

[44] J. Yao, Z. Wang, X. Yin, X. Shiyz, and J. Wu. Formal modeling and
systematic black-box testing of sdn data plane. In Network Protocols
(ICNP), 2014 IEEE 22nd International Conference on, pages 179-190.
TEEE, 2014.

[45] M. Yu, J. Rexford, M. J. Freedman, and J. Wang. Scalable flow-based
networking with difane. ACM SIGCOMM Computer Communication
Review, 40(4):35 1-362, 2010.

[46] M. Zalewski. American Fuzzy Lop. lcamtuf.coredump.cx/afl/.