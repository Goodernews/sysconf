
[1] M. Y. Ahmad and B. Kemme. Compaction management in
distributed key-value datastores. PVLDB, 8(8):850-861, 2015.

[2] M.R. Anderson, D. Antenucci, V. Bittorf, M. Burgess, M. J.
Cafarella, A. Kumar, F. Niu, Y. Park, C. Ré, and C. Zhang.
Brainwash: A Data System for Feature Engineering. In CIDR, 2013.

[3] Apache. Accumulo. https:/accumulo.apache.org/.

[4] Apache. Cassandra. hitp://cassandra.apache.org.

[5] Apache. HBase. hitp-//hbase.apache.org/.

[6] T. G. Armstrong, V. Ponnekanti, D. Borthakur, and M. Callaghan.
LinkBench: a Database Benchmark Based on the Facebook Social
Graph. In SIGMOD, 2013.

[7] M. Athanassoulis and S. Idreos. Design Tradeoffs of Data Access
Methods. In SIGMOD, 2016.

[8] M. Athanassoulis, M. S. Kester, L. M. Maas, R. Stoica, S. Idreos,
A. Ailamaki, and M. Callaghan. Designing Access Methods: The
RUM Conjecture. In EDBT, 2016.

[9] M. A. Bender, M. Farach-Colton, J. T. Fineman, Y. R. Fogel, B.C.
Kuszmaul, and J. Nelson. Cache-Oblivious Streaming B-trees. In
SPAA, 2007.

[10] B. H. Bloom. Space/Time Trade-offs in Hash Coding with Allowable
Errors. CACM, 13(7):422-426, 1970.

[11] N. Bronson, Z. Amsden, G. Cabrera, P. Chakka, P. Dimov, H. Ding,
J. Ferris, A. Giardullo, §. Kulkarni, H. C. Li, M. Marchukov,

D. Petrov, L. Puzar, Y. J. Song, and V. Venkataramani. TAO:
Facebook’s Distributed Data Store for the Social Graph. In ATC,
2013.

[12] F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach,

M. Burrows, T. Chandra, A. Fikes, and R. E. Gruber. Bigtable: A

Distributed Storage System for Structured Data. In OSDIJ, 2006.
[13] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati,

A, Lakshman, A. Pilchin, S. Sivasubramanian, P. Vosshall, and

W. Vogels. Dynamo: Amazon’s Highly Available Key-value Store.

SIGOPS Op. Sys. Rev., 41(6):205-220, 2007.

[14] S. Dong, M. Callaghan, L. Galanis, D. Borthakur, T. Savor, and
M. Strum. Optimizing Space Amplification in RocksDB. In CIDR,
2017.

[15] Facebook. RocksDB. hitps://github.com/facebook/rocksdb.

[16] Facebook. MyRocks. hitp-//myrocks.io/.

[17] B. Fitzpatrick and A. Vorobey. Memcached: a distributed memory
object caching system, 2011.

[18] G. Golan-Gueta, E. Bortnikov, E. Hillel, and I. Keidar. Scaling
Concurrent Log-Structured Data Stores. In EuroSys, 2015.

[19] Google. LevelDB. hitps://github.com/google/Heveldb/.

[20] B. C. Kuszmaul. A Comparison of Fractal Trees to Log-Structured
Merge (LSM) Trees. Tokutek White Paper, 2014.

[21] A. Lakshman and P. Malik. Cassandra - A Decentralized Structured
Storage System. SIGOPS Op. Sys. Rev., 44(2):35—40, 2010.

[22] Y. Li, B. He, J. Yang, Q. Luo, K. Yi, and R. J. Yang. Tree Indexing on
Solid State Drives. PVLDB, 3(1-2):1195-1206, 2010.

[23] H. Lim, D. G. Andersen, and M. Kaminsky. Towards Accurate and
Fast Evaluation of Multi-Stage Log-structured Designs. In FAST,
2016.

[24] H. Lim, B. Fan, D. G. Andersen, and M. Kaminsky. SILT: A
Memory-Efficient, High-Performance Key-Value Store. In SOSP,
2011.

[25] LinkedIn. Online reference. http://www.project-voldemort.com.

[26] L. Lu, T. S. Pillai, A. C. Arpaci-Dusseau, and R. H. Arpaci-Dusseau.
WiscKey: Separating Keys from Values in SSD-conscious Storage.
In FAST, 2016.

[27] P. E. O’Neil, E. Cheng, D. Gawlick, and E. J. O’Neil. The
log-structured merge-tree (LSM-tree). Acta Informatica,

33(4):35 1-385, 1996.

[28] Redis. Online reference. http://redis.io/.

[29] R. Sears and R. Ramakrishnan. bLSM: A General Purpose Log
Structured Merge Tree. In SIGMOD, 2012.

[30] P. Shetty, R. P. Spillane, R. Malpani, B. Andrews, J. Seyster, and
E. Zadok. Building Workload-Independent Storage with VT-trees. In
FAST, 2013.

[31] SQLite4. Online reference. hitps://sqlite.org/src4/.

[32] S. Tarkoma, C. E. Rothenberg, and E. Lagerspetz. Theory and
Practice of Bloom Filters for Distributed Systems. JEEE
Communications Serveys & Tutorials, 14(1):131-155, 2012.

[33] D. Tsirogiannis, S. Harizopoulos, and M. A. Shah. Analyzing the
energy efficiency of a database server. In SIGMOD, 2010.

[34] WiredTiger. WiredTiger. hitps://github.com/wiredtiger/wiredtiger.

[35] X. Wu, Y. Xu, Z. Shao, and S. Jiang. LSM-trie: An LSM-tree-based
Ultra-Large Key-Value Store for Small Data Items. In ATC, 2015.
