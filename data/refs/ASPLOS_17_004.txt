[1] CCTLib. https: //github.com/CCTLib/.
[2] The DWARF Debugging Standard. http: //www.dwarfstd.
org.
[3] NU-MineBench Suite. http://cucis.ece.
northwestern. edu/projects/DMS/MineBench html.

[4] Rodinia Benchmark Suite. http://www.cs.virginia.
edu/~skadron/wiki/rodinia/index.php/Rodinia:
Accelerating_Compute-Intensive_Applications_
with_Accelerators.

[5] Intel VTune. https: //software.intel.com/en-us/
intel-vtune-amplifier-xe.

[6] L. Adhianto, S. Banerjee, M. Fagan, M. Krentel, G. Marin,
J. Mellor-Crummey, and N. R. Tallent. HPCToolkit: Tools for
Performance Analysis of Optimized Parallel Programs. Con-
currency Computation : Practice Expererience, 22(6):685—
701, Apr 2010.

[7] J. M. Anderson, L. M. Berc, J. Dean, S. Ghemawat, M. R.
Henzinger, S.-T. A. Leung, R. L. Sites, M. T. Vandevoorde,
C. A. Waldspurger, and W. E. Weihl. Continuous Profiling:
Where Have All the Cycles Gone? ACM Trans. Comput. Syst.,
15(4):357-390, Nov 1997.

[8] G. B. Bell, K. M. Lepak, and M. H. Lipasti. Characterization
of Silent Stores. In Proceedings 2000 International Confer-
ence on Parallel Architectures and Compilation Techniques
(Cat. No.PRO0622), pages 133-144, 2000.

[9] P. Briggs, K. D. Cooper, and L. T. Simpson. Value Numbering.
Software—Practice and Experience, 27(6):701-724, Jun 1997.

[10] M. Burrows, U. Erlingsson, S.-T. A. Leung, M. T. Vandevo-
orde, C. A. Waldspurger, K. Walker, and W. E. Weihl. Ef-
ficient and Flexible Value Sampling. In Proceedings of the
Ninth International Conference on Architectural Support for
Programming Languages and Operating Systems, ASPLOS
IX, pages 160-167, New York, NY, USA, 2000. ACM.

[11] J. A. Butts and G. Sohi. Dynamic Dead-instruction Detection
and Elimination. In Proc. of the 10th International Conference
on Architectural Support for Programming Languages and
Operating Systems, pages 199-210, 2002.

[12] B. Calder, P. Feller, and A. Eustace. Value Profiling. In Pro-
ceedings of the 30th Annual ACM/IEEE International Sym-
posium on Microarchitecture, MICRO 30, pages 259-269,
Washington, DC, USA, 1997. IEEE Computer Society.

[13] B. Calder, P. Feller, and A. Eustace. Value Profiling and
Optimization. Journal of Instruction Level Parallelism, 1,
1999.

[14] M. Chabbi and J. Mellor-Crummey. DeadSpy: A Tool to Pin-
point Program Inefficiencies. In Proceedings of the Tenth In-
ternational Symposium on Code Generation and Optimiza-
tion, CGO °12, pages 124-134, New York, NY, USA, 2012.
ACM.

[15] M. Chabbi, X. Liu, and J. Mellor-Crummey. Call Paths for
Pin Tools. In Proc. of Annual IEEE/ACM International Sym-

posium on Code Generation and Optimization, pages 76:76-
76:86, 2014.

[16] E.-Y. Chung, L. Benini, and G. D. Micheli. Energy Efficient
Source Code Transformation based on Value Profiling. In Pro-
ceedings of International Workshop on Compilers and Oper-
ating Systems for Low Power, 2000.

[17] K. Cooper, J. Eckhardt, and K. Kennedy. Redundancy Elim-
ination Revisited. In Proceedings of the 17th International
Conference on Parallel Architectures and Compilation Tech-
niques, PACT ’08, pages 12-21, New York, NY, USA, 2008.
ACM.

[18] S.J. Deitz, B. L. Chamberlain, and L. Snyder. Eliminating Re-
dundancies in Sum-of-product Array Computations. In Pro-
ceedings of the 15th International Conference on Supercom-
puting, ICS ’01, pages 65-77, New York, NY, USA, 2001.
ACM.

[19] L. DeRose, B. Homer, D. Johnson, S. Kaufmann, and
H. Poxon. Cray Performance Analysis Tools. In Tools
for High Performance Computing, pages 191-199. Springer
Berlin Heidelberg, 2008.

[20] P. T. Feller. Value Profiling for Instructions and Memory
Locations. Master dissertation, 1998.

[21] M. F Fernandez. Simple and Effective Link-time Optimiza-
tion of Modula-3 Programs. In Proceedings of the ACM SIG-
PLAN 1995 Conference on Programming Language Design
and Implementation, PLDI ’95, pages 103-115, New York,
NY, USA, 1995. ACM.

[22] S. L. Graham, P. B. Kessler, and M. K. Mckusick. Gprof: A
Call Graph Execution Profiler. In Proceedings of the 1982
SIGPLAN Symposium on Compiler Construction, SIGPLAN
*82, pages 120-126, New York, NY, USA, 1982. ACM.

[23] S. Henry, H. Bolloré, and E. Oseret. Towards the Generaliza-
tion of Value Profiling for High-Performance Application Op-
timization. http://sylvain-henry .info/home/files/
papers/shenry_2015_vprof .pdf.

[24] R. Hundt, E. Raman, M. Thuresson, and N. Vachharajani.
MAO - An Extensible Micro-architectural Optimizer. In Pro-
ceedings of the 9th Annual IEEE/ACM International Sympo-
sium on Code Generation and Optimization, CGO ’11, pages
1-10, Washington, DC, USA, 2011. IEEE Computer Society.

[25] Intel Corp. Intel 64 and IA-32 Architectures Software Devel-
oper’s Manual. https://software.intel.com/en-us/
articles/intel-sdm, .

[26] Intel Corp. Intel X86 Encoder Decoder Software Library.
https://software.intel.com/en-us/articles/
xed-x86-encoder-decoder-software-library, .

[27] T. Johnson, M. Amini, and X. D. Li. ThinLTO: Scalable and
Incremental LTO. In Proceedings of International Symposium
on Code Generation and Optimization, Austin, Texas, USA,
2017.

[28] T. Kamio and H. Masahura. A Value Profiler for Assist-
ing Object-Oriented Program Specialization. In Proceedings
of Workshop on New Approaches to Software Construction,
2004.

[29] K. M. Lepak and M. H. Lipasti. On the Value Locality of Store
Instructions. In Proceedings of 27th International Symposium
on Computer Architecture (IEEE Cat. No.RS00201), pages
182-191, Jun 2000.
[30] K. M. Lepak and M. H. Lipasti. Silent Stores for Free.
In Proceedings of the 33rd Annual ACM/IEEE International
Symposium on Microarchitecture, MICRO 33, pages 22-31,
New York, NY, USA, 2000. ACM.

[31] J. Levon et al. OProfile. http: //oprofile.sourceforge.
net.

[32] M. H. Lipasti and J. P. Shen. Exceeding the Dataflow Limit
via Value Prediction. In Proceedings of the 29th Annual
ACM/IEEE International Symposium on Microarchitecture,
MICRO 29, pages 226-237, Washington, DC, USA, 1996.
IEEE Computer Society.

[33] M. H. Lipasti, C. B. Wilkerson, and J. P. Shen. Value Local-
ity and Load Value Prediction. In Proceedings of the Seventh
International Conference on Architectural Support for Pro-
gramming Languages and Operating Systems, ASPLOS VII,
pages 138-147, New York, NY, USA, 1996. ACM.

[34] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building Cus-
tomized Program Analysis Tools with Dynamic Instrumen-
tation. In Proceedings of the 2005 ACM SIGPLAN Confer-
ence on Programming Language Design and Implementation,
PLDI ’05, pages 190-200, New York, NY, USA, 2005. ACM.

[35] Y. Luo and G. Tan. Optimizing Stencil Code via Locality
of Computation. In Proceedings of the 23rd International
Conference on Parallel Architectures and Compilation, pages
477-478, 2014.

[36] J. S. Miguel, M. Badr, and N. E. Jerger. Load Value Approxi-
mation. In Proceedings of the 47th Annual IEEE/ACM Inter-
national Symposium on Microarchitecture, MICRO-47, pages
127-139, Washington, DC, USA, 2014. IEEE Computer So-
ciety.

[37] J. S. Miguel, J. Albericio, A. Moshovos, and N. E. Jerger.
DoppelgANger: A Cache for Approximate Computing. In
Proceedings of the 48th International Symposium on Microar-
chitecture, MICRO-48, pages 50-61, New York, NY, USA,
2015. ACM.

[38] J. Mostow and D. Cohen. Automating Program Speedup by
Deciding What to Cache. In Proceedings of the 9th Inter-
national Joint Conference on Artificial Intelligence - Volume
1, IICAT’85, pages 165-172, San Francisco, CA, USA, 1985.
Morgan Kaufmann Publishers Inc.

[39] R. Muth, S. A. Watterson, and S. K. Debray. Code Special-
ization Based on Value Profiles. In Proceedings of the 7th

International Symposium on Static Analysis, SAS ’00, pages
340-359, London, UK, 2000. Springer-Verlag.

[40] T. Oh, H. Kim, N. P. Johnson, J. W. Lee, and D. I. August.
Practical Automatic Loop Specialization. In Proceedings
of the Eighteenth International Conference on Architectural
Support for Programming Languages and Operating Systems,
ASPLOS ’13, pages 419-430, New York, NY, USA, 2013.
ACM.

[41] B. K. Rosen, M. N. Wegman, and FE. K. Zadeck. Global Value
Numbers and Redundant Computations. In Proceedings of
the 15th ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages, pages 12-27, 1988.

[42] M. Samadi, D. A. Jamshidi, J. Lee, and S. Mahlke. Paraprox:
Pattern-based Approximation for Data Parallel Applications.
In Proceedings of the 19th International Conference on Archi-
tectural Support for Programming Languages and Operating
Systems, ASPLOS °14, pages 35-50, New York, NY, USA,
2014. ACM.

[43] SPEC Corporation. SPEC CPU2006 Benchmark Suite. http:
//waw.spec.org/cpu2006. 3 November 2007.

[44] M. Valiev, E. Bylaska, N. Govind, K. Kowalski, T. Straatsma,
H. V. Dam, D. Wang, J. Nieplocha, E. Apra, T. Windus, and.
W. de Jong. NWChem: A Comprehensive and Scalable Open-
source Solution for Large Scale Molecular Simulations. Com-
puter Physics Communications, 181(9):1477 — 1489, 2010.

[45] S. A. Watterson and S. K. Debray. Goal-Directed Value
Profiling. In Proceedings of the 10th International Conference
on Compiler Construction, CC ’01, pages 319-333, London,
UK, 2001. Springer-Verlag.

[46] V. Weaver. Reading RAPL Energy Measurements
from Linux. http://web.eece.maine.edu/~vweaver/
projects/rap1/.

[47] M. N. Wegman and F. K. Zadeck. Constant Propagation with
Conditional Branches. ACM Trans. Program. Lang. Syst., 13
(2):181-210, Apr 1991.

[48] S. Wen, X. Liu, and M. Chabbi. Runtime Value Numbering: A
Profiling Technique to Pinpoint Redundant Computations. In
Proceedings of the 2015 International Conference on Parallel
Architecture and Compilation (PACT), pages 254-265, Oct
2015.

[49] A. Yazdanbakhsh, G. Pekhimenko, B. Thwaites, H. Es-
maeilzadeh, O. Mutlu, and T. C. Mowry. RFVP: Rollback-
free Value Prediction with Safe-to-approximate Loads. ACM
Transactions on Architecture and Code Optimization (TACO),
12(4):62, 2016.

[50] Y. Zhong and W. Chang. Sampling-based Program Locality
Approximation. In Proceedings of the 7th International Sym-
posium on Memory Management, pages 91-100, 2008.