[1] J. Arulraj, A. Pavlo, and P. Menon. Bridging the Archipelago

Between Row-Stores and Column-Stores for Hybrid Workloads.
SIGMOD, pages 583–598, 2016.

[2] S. Arumugam, A. Dobra, C. M. Jermaine, N. Pansare, and L. Perez.
The DataPath System: A Data-centric Analytic Processing Engine
for Large Data Warehouses. In SIGMOD, pages 519–530, 2010.

[3] C. Balkesen, J. Teubner, G. Alonso, and M. T. Özsu. Main-memory
hash joins on multi-core CPUs: Tuning to the underlying hardware.
In ICDE, pages 362–373, 2013.

[4] C. Barthels, S. Loesing, G. Alonso, and D. Kossmann. Rack-Scale

In-Memory Join Processing using RDMA. In SIGMOD, pages
1463–1475, 2015.

[5] C. Barthels, I. Müller, T. Schneider, G. Alonso, and T. Hoeﬂer.

Distributed join algorithms on thousands of cores. PVLDB,
10(5):517–528, 2017.

[6] P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency

Control and Recovery in Database Systems. Addison-Wesley
Longman Publishing Co., Inc., Boston, MA, USA, 1987.

[7] L. Braun, T. Etter, G. Gasparis, M. Kaufmann, D. Kossmann,
D. Widmer, A. Avitzur, A. Iliopoulos, E. Levy, and N. Liang.
Analytics in Motion: High Performance Event-Processing AND
Real-Time Analytics in the Same Database. In SIGMOD, pages
251–264, 2015.

[8] G. Candea, N. Polyzotis, and R. Vingralek. A Scalable, Predictable

Join Operator for Highly Concurrent Data Warehouses. VLDB, pages
277–288, 2009.

[9] G. Candea, N. Polyzotis, and R. Vingralek. Predictable Performance

and High Query Concurrency for Data Analytics. VLDBJ, pages
227–248, 2011.

[10] S. Chen, A. Ailamaki, P. B. Gibbons, and T. C. Mowry. Improving
Hash Join Performance Through Prefetching. In Proc. ICDE 2004,
pages 116–, 2004.

[11] R. Cole, F. Funke, L. Giakoumakis, W. Guy, A. Kemper,

S. Krompass, H. Kuno, R. Nambiar, T. Neumann, M. Poess, K.-U.
Sattler, M. Seibold, E. Simon, and F. Waas. The Mixed Workload
CH-benCHmark. In DBTest, pages 8:1–8:6, 2011.

[12] D. J. DeWitt, R. H. Katz, F. Olken, L. D. Shapiro, M. R. Stonebraker,

and D. A. Wood. Implementation techniques for main memory
database systems. In Proceedings of the 1984 ACM SIGMOD
International Conference on Management of Data, SIGMOD ’84,
pages 1–8, New York, NY, USA, 1984. ACM.

[13] C. Diaconu, C. Freedman, E. Ismert, P.-A. Larson, P. Mittal,

R. Stonecipher, N. Verma, and M. Zwilling. Hekaton: SQL Server’s
Memory-optimized OLTP Engine. In SIGMOD, pages 1243–1254,
2013.

[14] J. Dittrich and A. Jindal. Towards a One Size Fits All Database

Architecture. In CIDR, 2011.

[15] A. Elmore, J. Duggan, M. Stonebraker, M. Balazinska,

U. Cetintemel, V. Gadepally, J. Heer, B. Howe, J. Kepner, T. Kraska,
S. Madden, D. Maier, T. Mattson, S. Papadopoulos, J. Parkhurst,
N. Tatbul, M. Vartak, and S. Zdonik. A Demonstration of the
BigDAWG Polystore System. PVLDB, 8(12):1908–1911, Aug. 2015.

[16] J. M. Faleiro and D. J. Abadi. Rethinking Serializable Multiversion

Concurrency Control. PVLDB, 8(11):1190–1201, July 2015.

[17] F. Färber, N. May, W. Lehner, P. Große, I. Müller, H. Rauhe, and
J. Dees. The SAP HANA Database – An Architecture Overview.
IEEE Data Eng. Bull., 35(1):28–33, 2012.

[18] P. W. Frey and G. Alonso. Minimizing the hidden cost of RDMA. In

ICDCS, pages 553–560, 2009.

[19] G. Giannikis, G. Alonso, and D. Kossmann. SharedDB: Killing One

Thousand Queries with One Stone. VLDB, pages 526–537, 2012.

[20] J. Giceva, G. Alonso, T. Roscoe, and T. Harris. Deployment of Query

Plans on Multicores. PVLDB, 8(3):233–244, 2014.

[21] A. K. Goel, J. Pound, N. Auch, P. Bumbulis, S. MacLean, F. Färber,

F. Gropengiesser, C. Mathis, T. Bodner, and W. Lehner. Towards
Scalable Real-time Analytics: An Architecture for Scale-out of
OLxP Workloads. PVLDB, 8(12):1716–1727, Aug. 2015.

[22] M. Grund, J. Krüger, H. Plattner, A. Zeier, P. Cudre-Mauroux, and

S. Madden. HYRISE: A Main Memory Hybrid Storage Engine.
PVLDB, 4(2):105–116, 2010.

[23] J. Hilland, P. Cully, J. Pinkerton, and R. Recio. RDMA Protocol

Verbs Speciﬁcation (Version 1.0). Technical report, RDMA
Consortium, 04 2003.

[24] C. Hong, D. Zhou, M. Yang, C. Kuo, L. Zhang, and L. Zhou. KuaFu:

Closing the parallelism gap in database replication. In Proc. ICDE
2013, pages 1186–1195, 2013.

[25] R. Jiménez-Peris, M. Patiño Martínez, and G. Alonso. Non-Intrusive,

Parallel Recovery of Replicated Data. In SRDS ’02, pages 150–,
2002.

[26] R. Kallman, H. Kimura, J. Natkins, A. Pavlo, A. Rasin, S. Zdonik,
E. P. C. Jones, S. Madden, M. Stonebraker, Y. Zhang, J. Hugg, and
D. J. Abadi. H-store: A High-performance, Distributed Main
Memory Transaction Processing System. PVLDB, 1(2):1496–1499,
Aug. 2008.

[27] B. Kemme, A. Bartoli, and O. Babaoglu. Online reconﬁguration in
replicated databases based on group communication. In DSN ’01,
pages 117–126, July 2001.

[28] A. Kemper and T. Neumann. HyPer: A hybrid OLTP&OLAP main

memory database system based on virtual memory snapshots. In
ICDE, pages 195–206, 2011.

[29] T. Lahiri, S. Chavan, M. Colgan, D. Das, A. Ganesh, M. Gleeson,

S. Hase, A. Holloway, J. Kamp, T. H. Lee, J. Loaiza,
N. Macnaughton, V. Marwah, N. Mukherjee, A. Mullick,
S. Muthulingam, V. Raja, M. Roth, E. Soylemez, and M. Zait. Oracle
Database In-Memory: A dual format in-memory database. In ICDE,
pages 1253–1258, April 2015.

[30] P.-A. Larson, A. Birka, E. N. Hanson, W. Huang, M. Nowakiewicz,

and V. Papadimos. Real-time Analytical Processing with SQL
Server. PVLDB, 8(12):1740–1751, 2015.

[31] V. Leis, P. Boncz, A. Kemper, and T. Neumann. Morsel-driven

Parallelism: A NUMA-aware Query Evaluation Framework for the
Many-core Age. In SIGMOD, pages 743–754, 2014.

[32] J. J. Levandoski, D. B. Lomet, and S. Sengupta. The Bw-Tree: A

B-tree for New Hardware Platforms. In ICDE, pages 302–313, 2013.

[33] F. Li, S. Das, M. Syamala, and V. R. Narasayya. Accelerating

relational databases by leveraging remote memory and RDMA. In
SIGMOD, pages 355–370, 2016.

[34] H. Lim, Y. Han, and S. Babu. How to Fit when No One Size Fits. In

CIDR, 2013.

[35] D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis.
Heracles: Improving Resource Efﬁciency at Scale. In Proceedings of
the 42Nd Annual International Symposium on Computer
Architecture, ISCA ’15, pages 450–462, 2015.

[36] D. Makreshanski, G. Giannikis, G. Alonso, and D. Kossmann.

MQJoin: Efﬁcient Shared Execution of Main-memory Joins.
PVLDB, 9(6):480–491, Jan. 2016.

[37] D. Makreshanski, J. Levandoski, and R. Stutsman. To Lock, Swap, or

Elide: On the Interplay of Hardware Transactional Memory and
Lock-free Indexing. PVLDB, 8(11):1298–1309, July 2015.
[38] N. Malviya, A. Weisberg, S. Madden, and M. Stonebraker.

Rethinking main memory OLTP recovery. In ICDE, pages 604–615,
March 2014.

[39] T. Mühlbauer, W. Rödiger, A. Reiser, A. Kemper, and T. Neumann.

ScyPer: A Hybrid OLTP&OLAP Distributed Main Memory
Database System for Scalable Real-Time Analytics. In DanaC, pages
499–502, 2013.

[40] T. Neumann, T. Mühlbauer, and A. Kemper. Fast Serializable

Multi-Version Concurrency Control for Main-Memory Database
Systems. In SIGMOD, pages 677–689, 2015.

[41] Oracle Change Data Capture.

https://docs.oracle.com/cd/B28359_01/server.111/b28313/cdc.htm.
[42] E. Pacitti and E. Simon. Update propagation strategies to improve

freshness in lazy master replicated databases. VLDBJ, 8(3):305–318,
2000.

[43] O. W. Paper. Oracle GoldenGate 12c: Real-Time Access to
Real-Time Information. Technical report, Oracle, 03 2015.

[44] C. Plattner, G. Alonso, and M. Özsu. Extending DBMSs with

satellite databases. VLDBJ, 17(4):657–682, July 2008.

[45] H. Plattner. A Common Database Approach for OLTP and OLAP
Using an In-memory Column Database. In SIGMOD, pages 1–2,
2009.

49[46] I. Psaroudakis, T. Scheuer, N. May, A. Sellami, and A. Ailamaki.

Scaling Up Concurrent Main-memory Column-store Scans: Towards
Adaptive NUMA-aware Data and Task Placement. PVLDB,
8(12):1442–1453, Aug. 2015.

[47] I. Psaroudakis, F. Wolf, N. May, T. Neumann, A. Böhm,

A. Ailamaki, and K.-U. Sattler. Scaling Up Mixed Workloads: A
Battle of Data Freshness, Flexibility, and Scheduling. In Performance
Characterization and Benchmarking. Traditional to Big Data,
TPCTC 2014, pages 97–112.

[48] L. Qiao, V. Raman, F. Reiss, P. J. Haas, and G. M. Lohman.

Main-memory Scan Sharing for Multi-core CPUs. VLDBJ, pages
610–621, 2008.

[49] V. Raman, G. Swart, L. Qiao, F. Reiss, V. Dialani, D. Kossmann,

I. Narang, and R. Sidle. Constant-Time Query Processing. In ICDE,
pages 60–69, 2008.

[50] W. Rödiger, T. Mühlbauer, A. Kemper, and T. Neumann. High-speed
query processing over high-speed networks. PVLDB, pages 228–239,
2015.

[51] T.-I. Salomie, I. E. Subasu, J. Giceva, and G. Alonso. Database

Engines on Multicores, Why Parallelize when You Can Distribute?
In EuroSys, pages 17–30, 2011.

[52] N. Shamgunov. The MemSQL In-Memory Database System. In J. J.

Levandoski and A. Pavlo, editors, IMDM@VLDB, 2014.

[53] Get started with Columnstore for real time operational analytics.

https://msdn.microsoft.com/en-us/library/dn817827.aspx.

[54] M. Stonebraker and A. Weisberg. The VoltDB Main Memory DBMS.

IEEE Data Eng. Bull., 36(2):21–27, 2013.

[55] L. Tang, J. Mars, N. Vachharajani, R. Hundt, and M. L. Soffa. The

Impact of Memory Subsystem Resource Sharing on Datacenter
Applications. In ISCA, pages 283–294, 2011.

[56] A. Thomson, T. Diamond, S.-C. Weng, K. Ren, P. Shao, and D. J.

Abadi. Calvin: Fast Distributed Transactions for Partitioned
Database Systems. SIGMOD, pages 1–12, 2012.

[57] https://github.com/Percona-Lab/tpcc-mysql.
[58] S. Tu, W. Zheng, E. Kohler, B. Liskov, and S. Madden. Speedy
transactions in multicore in-memory databases. In SOSP, pages
18–32, 2013.

[59] P. Unterbrunner, G. Giannikis, G. Alonso, D. Fauser, and
D. Kossmann. Predictable Performance for Unpredictable
Workloads. VLDBJ, pages 706–717, 2009.

[60] X. Yu, A. Pavlo, D. Sanchez, and S. Devadas. Tictoc: Time traveling

optimistic concurrency control. In SIGMOD, pages 1629–1642,
2016.

[61] M. Zukowski, S. Héman, N. Nes, and P. Boncz. Cooperative Scans:
Dynamic Bandwidth Sharing in a DBMS. In VLDB, pages 723–734,
2007.

