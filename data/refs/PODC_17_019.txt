[1] J. Anderson and Y.-J. Kim. An improved lower bound for the time complexity of mutual exclusion. Distributed Computing, 15(4):221–253, 2002.
[2] J. Anderson, Y.-J. Kim, and T. Herman. Shared-memory mutual exclusion: Major research trends since 1986. Distributed Computing, 16(2-3):75–110, 2003.
[3] T. Anderson. The performance of spin lock alternatives for shared-memory multiprocessors. IEEE Transactions on Parallel and Distributed Systems, 1(1):6–16, 1990.
[4] H. Attiya, D. Hendler, and P. Woelfel. Tight RMR lower bounds for mutual exclusion and other problems. In Proc. of the 40th ACM Symposium on Theory of Computing (STOC), pages 217–226, 2008.
[5] M. A. Bender and S. Gilbert. Mutual Exclusion with O(log2 logn) Amortized Work. In Proc. of the 52nd Symposium on Foundations of Computer Science (FOCS), pages 728–737, 2011.
[6] P. Bohannon, D. F. Lieuwen, and A. Silberschatz. Recovering scalable spin locks. In Proc. of the 8th IEEE Symposium on Parallel and Distributed Processing (SPDP), pages 314–322, 1996.
[7] P. Bohannon, D. F. Lieuwen, A. Silberschatz, S. Sudarshan, and J. Gava. Recover- able user-level mutual exclusion. In Proc. of the 7th IEEE Symposium on Parallel and Distributed Processing (SPDP), pages 293–301, 1995.
[8] R. Cypher. The communication requirements of mutual exclusion. In Proc. of the 7th ACM Symposium on Parallel Algorithms and Architectures (SPAA), pages 147–156, 1995.
[9] T. David, R. Guerraoui, and V. Trigonakis. Everything you always wanted to know about synchronization but were afraid to ask. In Proc. of the 24th ACM SIGOPS Symposium on Operating Systems Principles (SOSP), pages 33–48, 2013.
[10] E. W. Dijkstra. Solution of a problem in concurrent programming control. Com- munications of the ACM, 8(9):569, 1965.
[11] R. Fan and N. Lynch. An Ω(n log n) lower bound on the cost of mutual exclusion. In Proc. of the 25th ACM Symposium on Principles of Distributed Computing (PODC), pages 275–284, 2006.
[12] G. Giakkoupis and P. Woelfel. A tight RMR lower bound for randomized mutual exclusion. In Proc. of the 44th Symposium on Theory of Computing (STOC), pages 983–1002, 2012.
[13] G. Giakkoupis and P. Woelfel. Randomized mutual exclusion with constant amortized RMR complexity on the DSM. In Proc. of the 55th Symposium on Foundations of Computer Science (FOCS), pages 504–513, 2014.
[14] W. Golab. Deconstructing queue-based mutual exclusion Hewlett-Packard Labs Technical Report HPL-2012-100.
[15] W. Golab, V. Hadzilacos, D. Hendler, and P. Woelfel. RMR-efficient implemen- tations of comparison primitives using read and write operations. Distributed Computing, 25(2):109–162, 2012.
[16] W. Golab, and A. Ramaraju. Recoverable mutual exclusion. In Proc. of the 35th Annual ACM Symposium on Principles of Distributed Computing (PODC), pages 65–74, 2016.
[17] G. Graunke and S. Thakkar. Synchronization algorithms for shared-memory multiprocessors. IEEE Computer, 23(6):60–69, 1990.
[18] T. L. Harris, K. Fraser, and I. A. Pratt. A practical multi-word compare-and-swap operation. In Proc. of the 16th International Conference on Distributed Computing (DISC), pages 265–279, 2002.
[19] D. Hendler and P. Woelfel. Randomized mutual exclusion with sub-logarithmic RMR-complexity. Distributed Computing, 24(1):3–19, 2011.
[20] M. Herlihy and E. Moss. Transactional Memory: Architectural Support for Lock- Free Data Structures. In Proc. of the 20th ACM/IEEE International Symposium on Computer Architecture (ISCA), pages 289–300, 1993.
[21] J. Kessels. Arbitration without common modifiable variables. Acta Informatica, 17:135–141, 1982.
[22] L. Lamport. A new solution of Dijkstra’s concurrent programming problem. Communications of the ACM, 17(8):453–455, 1974.
[23] L. Lamport. The mutual exclusion problem: part II – statement and solutions. Journal of the ACM, 33(2):327–348, 1986.
[24] L. Lamport. The PlusCal algorithm language. In Proc. of the 6th International Colloquium on Theoretical Aspects of Computing (ICTAC), pages 36–60, 2009.
[25] L. Lamport. Specifying systems: the TLA+ language and tools for hardware and software engineers. Addison-Wesley, 2002.
[26] P. Magnusson, A. Landin, and E. Hagersten. Queue locks on cache coherent multiprocessors. In Proc. of the 8th International Parallel Processing Symposium (IPPS), pages 165–171, 1994.
[27] J. Mellor-Crummey and M. Scott. Algorithms for scalable synchronization on shared-memory multiprocessors. ACM Transactions on Computer Systems, 9(1):21–65, 1991.
[28] M. Michael and Y. Kim. Fault tolerant mutual exclusion locks for shared memory systems. US Patent 7,493,618, 2009.
[29] A. Ramaraju. RGLock: Recoverable mutual exclusion for non-volatile main memory systems. Master’s thesis, University of Waterloo, 2015. https://uwspace. uwaterloo.ca/handle/10012/9473.
[30] M. Raynal. Algorithms for Mutual Exclusion. MIT Press, 1986.
[31] G. Taubenfeld. Synchronization Algorithms and Concurrent Programming. Pren-
tice Hall, 2006.
[32] J.-H. Yang and J. Anderson. A fast, scalable mutual exclusion algorithm. Dis-
tributed Computing, 9(1):51–60, 1995.
