[1] R. Roemer, E. Buchanan, H. Shacham, and S. Savage,
“Return-oriented programming: Systems, languages,
and applications,” ACM Transactions on Information
and System Security, 2012.
[2] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti,
“Control-ﬂow integrity,” in CCS, 2005.
[3] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres,
S. McCamant, D. Song, and W. Zou, “Practical
control ﬂow integrity and randomization for binary
executables,” in S&P, 2013.
[4] M. Zhang and R. Sekar, “Control ﬂow integrity for
cots binaries.,” in USENIX Security, 2013.
[5] R. Qiao, M. Zhang, and R. Sekar, “A principled
approach for rop defense,” in ACSAC, 2015.
[6] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen,
and M. Franz, “Opaque control-ﬂow integrity.,” in
NDSS, 2015.
[7] V. van der Veen, E. Göktas, M. Contag,
A. Pawlowski, X. Chen, S. Rawat, H. Bos, T. Holz,
E. Athanasopoulos, and C. Giuﬀrida, “A tough call:
Mitigating advanced code-reuse attacks at the binary
level,” in S&P, 2016.
[8] B. Niu and G. Tan, “Modular control-ﬂow integrity,”
in PLDI, 2014.
[9] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,
Ú. Erlingsson, L. Lozano, and G. Pike, “Enforcing
forward-edge control-ﬂow integrity in gcc & llvm,” in
USENIX Security, 2014.
[10] A. J. Mashtizadeh, A. Bittau, D. Boneh, and
D. Mazières, “Ccﬁ: Cryptographically enforced control
ﬂow integrity,” in CCS, 2015.
[11] B. Niu and G. Tan, “Per-input control-ﬂow integrity,”
in CCS, 2015.
[12] W. Arthur, B. Mehne, R. Das, and T. Austin,
“Getting in control of your control ﬂow with
control-data isolation,” in CGO, 2015.
[13] M. Kayaalp, M. Ozsoy, N. Abu-Ghazaleh, and
D. Ponomarev, “Branch regulation: Low-overhead
protection from code reuse attacks,” in ISCA, 2012.
[14] M. Kayaalp, T. Schmitt, J. Nomani, D. Ponomarev,
and N. Abu-Ghazaleh, “Scrap: Architecture for
signature-based protection from code reuse attacks,”
in HPCA, 2013.
[15] S. Arnautov and C. Fetzer, “Controlfreak: Signature
chaining to counter control ﬂow attacks,” in RDS,
2015.
[16] N. Christoulakis, G. Christou, E. Athanasopoulos, and
S. Ioannidis, “Hcﬁ: Hardware-enforced control-ﬂow
integrity,” in CODASPY, 2016.
[17] Y. Xia, Y. Liu, H. Chen, and B. Zang, “Cﬁmon:
Detecting violation of control ﬂow integrity using
performance counters,” in DSN, 2012.
[18] V. Pappas, M. Polychronakis, and A. D. Keromytis,
“Transparent rop exploit mitigation using indirect
branch tracing,” in USENIX Security, 2013.
[19] Y. Cheng, Z. Zhou, Y. Miao, X. Ding, H. DENG,
et al., “Ropecker: A generic and practical approach for
defending against rop attack,” 2014.
[20] V. van der Veen, D. Andriesse, E. Göktaş, B. Gras,
L. Sambuc, A. Slowinska, H. Bos, and C. Giuﬀrida,
“Practical context-sensitive cﬁ,” in CCS, 2015.
[21] P. Yuan, Q. Zeng, and X. Ding, “Hardware-assisted
ﬁne-grained code-reuse attack detection,” in RAID,
2015.
[22] X. Ge, N. Talele, M. Payer, and T. Jaeger,
“Fine-grained control-ﬂow integrity for kernel
software,” in EuroS&P, 2016.
[23] M. Zhang, R. Qiao, N. Hasabnis, and R. Sekar, “A
platform for secure static binary instrumentation,” in
VEE, 2014.
[24] E. Goktas, E. Athanasopoulos, H. Bos, and
G. Portokalidis, “Out of control: Overcoming
control-ﬂow integrity,” in S&P, 2014.
[25] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose,
“Stitching the gadgets: On the ineﬀectiveness of
coarse-grained control-ﬂow integrity protection,” in
USENIX Security, 2014.
[26] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe,
M. Rinard, H. Okhravi, and S. Sidiroglou-Douskos,
“Control jujutsu: On the weaknesses of ﬁne-grained
control ﬂow integrity,” in CCS, 2015.
[27] “American fuzzy lop.”
http://lcamtuf.coredump.cx/aﬂ/.
[28] “Fuzz testing.”
https://en.wikipedia.org/wiki/Fuzz testing.
[29] S. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi,
H. Shacham, and M. Winandy, “Return-oriented
programming without returns,” in CCS, 2010.
[30] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R.
Sadeghi, and T. Holz, “Counterfeit object-oriented
programming: On the diﬃculty of preventing code
reuse attacks in c++ applications,” in S&P, 2015.
[31] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R.
Gross, “Control-ﬂow bending: On the eﬀectiveness of
control-ﬂow integrity,” in USENIX Security, 2015.
[32] “Dyninst api.” http://www.dyninst.org/dyninst.
[33] “Preeny project.” https://github.com/zardus/preeny.
[34] “Intel pt decoder library.”
https://github.com/01org/processor-trace.
[35] N. Carlini and D. Wagner, “Rop is still dangerous:
Breaking modern defenses,” in USENIX Security,
2014.
[36] E. Bosman and H. Bos, “Framing signals: A return to
portable shellcode,” in S&P, 2014.
[37] E. Göktaş, E. Athanasopoulos, M. Polychronakis,
H. Bos, and G. Portokalidis, “Size does matter: Why
using gadget-chain length to prevent code-reuse
attacks is hard,” in USENIX Security, 2014.
[38] W. Arthur, S. Madeka, R. Das, and T. Austin,
“Locking down insecure indirection with
hardware-based control-data isolation,” in MICRO,
2015.
[39] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko,
C. Liebchen, and A.-R. Sadeghi, “Just-in-time code
reuse: On the eﬀectiveness of ﬁne-grained address
space layout randomization,” in S&P, 2013.
[40] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz,
“Sok: Automated software diversity,” in S&P, 2014.
[41] V. Pappas, M. Polychronakis, and A. D. Keromytis,
“Smashing the gadgets: Hindering return-oriented
programming using in-place code randomization,” in
S&P, 2012.
[42] J. Criswell, N. Dautenhahn, and V. Adve, “Kcoﬁ:
Complete control-ﬂow integrity for commodity
operating system kernels,” in S&P, 2014.
[43] M. Payer, A. Barresi, and T. R. Gross, “Fine-grained
control-ﬂow integrity through binary hardening,” in
DIMVA, 2015.
[44] A. Vasudevan, N. Qu, and A. Perrig, “Xtrec: Secure
real-time execution trace recording on commodity
platforms,” in HICSS, 2011.
[45] L. Yuan, W. Xing, H. Chen, and B. Zang, “Security
breaches as pmu deviation: detecting and identifying
security attacks using performance counters,” in
APSys, 2011.
[46] J. Demme, M. Maycock, J. Schmitz, A. Tang,
A. Waksman, S. Sethumadhavan, and S. Stolfo, “On
the feasibility of online malware detection with
performance counters,” in ISCA, 2013.
[47] H. Chen, X. Wu, L. Yuan, B. Zang, P.-c. Yew, and
F. T. Chong, “From speculation to security: Practical
and eﬃcient information ﬂow tracking using
speculative hardware,” in ISCA, 2008.
[48] H. Chen, L. Yuan, X. Wu, B. Zang, B. Huang, and
P.-c. Yew, “Control ﬂow obfuscation with information
ﬂow tracking,” in MICRO, 2009.
[49] Y. Liu, Y. Xia, H. Guan, B. Zang, and H. Chen,
“Concurrent and consistent virtual machine
introspection with hardware transactional memory,” in
HPCA, 2014.
[50] F. Liu, Q. Ge, Y. Yarom, F. Mckeen, C. Rozas,
G. Heiser, and R. B. Lee, “Catalyst: Defeating
last-level cache side channel attacks in cloud
computing,” in HPCA, 2016.