
[1] Advanced Traﬃc Control. https://wiki.archlinux.org/

index.php/Advanced traﬃc control.

[2] Aerospike. http://www.aerospike.com/.
[3] Amazon ElastiCache. http://aws.amazon.com/

elasticache/.

[4] Couchbase Server. http://www.couchbase.com/nosql-

databases/couchbase-server.

[5] Erasure Code - Ceph Documentation. http://docs.
ceph.com/docs/master/rados/operations/erasure-
code/.

[6] Intel R(cid:13) Storage Acceleration Library (open source

version). https://01.org/intel%C2%AE-storage-
acceleration-library-open-source-version.

[7] Memcached. http://memcached.org.
[8] Redis. http://redis.io.
[9] Redis Latency Problems Troubleshotting. http://redis.

io/topics/latency.

[10] Repcached. http://repcached.lab.klab.org.
[11] Spread Toolkit. http://www.spread.org.
[12] M. Aguilera, R. Janakiraman, and L. Xu. Using

Erasure Codes Eﬃciently for Storage in a Distributed
System. In Proc. of IEEE DSN, pages 336–345, Jun
2005.

[13] E. Anderson, X. Li, A. Merchant, M. A. Shah,

K. Smathers, J. Tucek, M. Uysal, and J. J. Wylie.
Eﬃcient Eventual Consistency in Pahoehoe, an
Erasure-Coded Key-Blob Archive. In Proc. of
IEEE/IFIP DSN, pages 181–190, Jun 2010.

[22] D. Cieslicki, S. Sch¨aeckeler, and T. Schwarz.

Maintaining and Checking Parity in Highly Available
Scalable Distributed Data Structures. The Journal of
Systems and Software, 83(4):529–542, 2010.

[23] B. F. Cooper, A. Silberstein, E. Tam,

R. Ramakrishnan, and R. Sears. Benchmarking Cloud
Serving Systems with YCSB. In Proc. of ACM SoCC,
pages 143–154, Jun 2010.

[24] P. Corbett, B. English, A. Goel, T. Grcanac,

S. Kleiman, J. Leong, and S. Sankar. Row-diagonal
Parity for Double Disk Failure Correction. In Proc. of
USENIX FAST, pages 1–14, Mar 2004.

[25] F. Dabek, J. Li, E. Sit, J. Robertson, M. F. Kaashoek,
and R. Morris. Designing a DHT for Low Latency and
High Throughput. In Proc. of USENIX NSDI, pages
85–98, Mar 2004.

[26] B. Fan, D. G. Andersen, and M. Kaminsky. MemC3:

Compact and Concurrent MemCache with Dumber
Caching and Smarter Hashing. In Proc. of USENIX
NSDI, pages 371–384, Apr 2013.

[27] B. Fitzpatrick. Distributed Caching with Memcached.

Linux Journal, 2004(124), Aug 2004.

[28] D. Ford, F. Labelle, F. I. Popovici, M. Stokel, V.-A.

Truong, L. Barroso, C. Grimes, and S. Quinlan.
Availability in Globally Distributed Storage Systems.
In Proc. of USENIX OSDI, pages 61–74, Oct 2010.

[29] N. Gunther, S. Subramanyam, and S. Parvu. Hidden

Scalability Gotchas in Memcached and Friends. In
VELOCITY Web Performance and Operations
Conference, Jun 2010.

[14] C. Aniszczyk. Caching with Twemcache. https://blog.

[30] Y.-J. Hong and M. Thottethodi. Understanding and

twitter.com/2012/caching-with-twemcache.

[15] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and

M. Paleczny. Workload Analysis of a Large-Scale
Key-Value Store. In Proc. of ACM SIGMETRICS,
pages 53–64, Jun 2012.

[16] J. C. W. Chan, Q. Ding, P. P. C. Lee, and H. H. W.
Chan. Parity Logging with Reserved Space: Towards
Eﬃcient Updates and Recovery in Erasure-Coded
Clustered Storage. In Proc. of USENIX FAST, pages
163–176, Feb 2014.

[17] F. Chang, M. Ji, S.-T. A. Leung, J. MacCormick,

S. E. Perl, and L. Zhang. Myriad: Cost-eﬀective
Disaster Tolerance. In Proc. of USENIX FAST, pages
103–116, Jan 2002.

[18] P. M. Chen, E. K. Lee, G. A. Gibson, R. H. Katz, and

D. A. Patterson. RAID: High-Performance, Reliable
Secondary Storage. ACM Comput. Surv.,
26(2):145–185, Jun 1994.

Mitigating the Impact of Load Imbalance in the
Memory Caching Tier. In Proc. of ACM SoCC, pages
13:1–13:17, Oct 2013.

[31] C. Huang, H. Simitci, Y. Xu, A. Ogus, B. Calder,

P. Gopalan, J. Li, and S. Yekhanin. Erasure Coding in
Windows Azure Storage. In Proc. of USENIX ATC,
pages 15–26, Jun 2012.

[32] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed.

ZooKeeper: Wait-free Coordination for Internet-scale
Systems. In Proc. of USENIX ATC, pages 11–11,
2010.

[33] M. Kerrisk. The Linux Programming Interface. No

Starch Press, 2010.

[34] O. Khan, R. Burns, J. Plank, W. Pierce, and

C. Huang. Rethinking Erasure Codes for Cloud File
Systems: Minimizing I/O for Recovery and Degraded
Reads. In Proc. of USENIX FAST, pages 251–264,
Feb 2012.

[19] Y. Cheng, A. Gupta, and A. R. Butt. An In-Memory

[35] F. Klein, K. Beineke, and M. Schottner. Memory

Object Caching Framework with Adaptive Load
Balancing. In Proc. of ACM EuroSys, pages 4:1–4:16,
Apr 2015.

Management for Billions of Small Objects in a
Distributed In-Memory Storage. In Proc. of IEEE
CLUSTER, pages 113–122, Sept 2014.

[20] B.-G. Chun, F. Dabek, A. Haeberlen, E. Sit,

[36] C. Lai, S. Jiang, L. Yang, S. Lin, G. Sun, Z. Hou,

H. Weatherspoon, M. F. Kaashoek, J. Kubiatowicz,
and R. Morris. Eﬃcient Replica Maintenance for
Distributed Storage Systems. In Proc. of USENIX
NSDI, pages 45–58, May 2006.

[21] D. Cieslicki, S. Sch¨ackeler, and T. Schwarz. Eﬃcient

Updates in Highly Available Distributed Random
Access Memory. In Proc. of IEEE ICPADS, pages
49–57, Jul 2006.

C. Cui, and J. Cong. Atlas: Baidu’s Key-Value
Storage System for Cloud Data. In Proc. of IEEE
MSST, pages 1–14, May 2015.

[37] C. Li and A. L. Cox. GD-Wheel: A Cost-Aware

Replacement Policy for Key-Value Stores. In Proc. of
ACM EuroSys, pages 5:1–5:15, Apr 2015.

[38] W. Litwin, R. Moussa, and T. Schwarz. LH*RS - A

Highly-Available Scalable Distributed Data Structure.
ACM Trans. Database Syst., 30(3):769–811, 2005.
[39] S. Muralidhar, W. Lloyd, S. Roy, C. Hill, E. Lin,

W. Liu, S. Pan, S. Shankar, V. Sivakumar, L. Tang,
and S. Kumar. f4: Facebook’s Warm BLOB Storage
System. In Proc. of USENIX OSDI, pages 383–398,
Oct 2014.

[40] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski,

H. Lee, H. C. Li, R. McElroy, M. Paleczny, D. Peek,
P. Saab, D. Staﬀord, T. Tung, and V. Venkataramani.
Scaling Memcache at Facebook. In Proc. of USENIX
NSDI, pages 385–398, Apr 2013.

[41] J. Ousterhout, A. Gopalan, A. Gupta, A. Kejriwal,

C. Lee, B. Montazeri, D. Ongaro, S. J. Park, H. Qin,
M. Rosenblum, S. Rumble, R. Stutsman, and S. Yang.
The RAMCloud Storage System. ACM Trans.
Comput. Syst., 33(3):7:1–7:55, Aug 2015.

[42] R. Pagh and F. F. Rodler. Cuckoo Hashing. Journal of

Algorithms, 51(2):122–144, May 2004.

[43] J. Plank, J. Luo, C. Schuman, L. Xu, and

Z. Wilcox-O’Hearn. A Performance Evaluation and
Examination of Open-Source Erasure Coding Libraries
for Storage. In Proc. of USENIX FAST, pages
253–265, Feb 2009.

[44] I. Reed and G. Solomon. Polynomial codes over

certain ﬁnite ﬁelds. Journal of the Society of Industrial
and Applied Mathematics, 8(2):300–304, Jun 1960.

[45] R. Rodrigues and B. Liskov. High Availability in

DHTs: Erasure coding vs. Replication. In Proc. of
IPTPS, pages 226–239, 2005.

[46] M. Sathiamoorthy, M. Asteris, D. S. Papailiopoulos,

A. G. Dimakis, R. Vadali, S. Chen, and D. Borthakur.
XORing Elephants: Novel Erasure Codes for Big
Data. In Proc. of the VLDB Endowment, pages
325–336, Aug 2013.

[47] G. Soundararajan, V. Prabhakaran, M. Balakrishnan,

and T. Wobber. Extending SSD Lifetimes with
Disk-based Write Caches. In Proc. of USENIX FAST,
pages 101–114, Feb 2010.

[48] H. Weatherspoon and J. D. Kubiatowicz. Erasure

Coding Vs. Replication: A Quantitative Comparison.
In Proc. of IPTPS, pages 328–338, Mar 2002.
[49] H. Zhang, G. Chen, B. C. Ooi, K.-L. Tan, and

M. Zhang. In-Memory Big Data Management and
Processing: A Survey. IEEE Trans. on Knowledge and
Data Engineering, 27(7):1920–1948, Jul 2015.

[50] H. Zhang, M. Dong, and H. Chen. Eﬃcient and

Available In-memory KV-Store with Hybrid Erasure
Coding and Replication. In Proc. of USENIX FAST,
pages 167–180, Feb 2016.

