[1] C. Delimitrou and C. Kozyrakis, “Quasar: Resource-efficient and qosaware cluster management,” in Proceedings of the 19th International
Conference on Architectural Support for Programming Languages and
Operating Systems, ser. ASPLOS ’14, 2014, pp. 127–144.
[2] J. Mars, L. Tang, R. Hundt, K. Skadron, and M. L. Soffa, “Bubbleup: Increasing utilization in modern warehouse scale computers via
sensible co-locations,” in Proceedings of the 44th Annual IEEE/ACM
International Symposium on Microarchitecture, ser. MICRO-44, 2011,
pp. 248–259.
[3] B. Hindman, A. Konwinski, M. Zaharia, A. Ghodsi, A. D. Joseph,
R. Katz, S. Shenker, and I. Stoica, “Mesos: A platform for fine-grained
resource sharing in the data center,” in Proceedings of the 8th USENIX
Conference on Networked Systems Design and Implementation, ser.
NSDI’11, 2011, pp. 295–308.
[4] G. Prekas, M. Primorac, A. Belay, C. Kozyrakis, and E. Bugnion,
“Energy proportionality and workload consolidation for latency-critical
applications,” in Proceedings of the Sixth ACM Symposium on Cloud
Computing, ser. SoCC ’15, 2015, pp. 342–355.
[5] M. Schwarzkopf, A. Konwinski, M. Abd-El-Malek, and J. Wilkes,
“Omega: Flexible, scalable schedulers for large compute clusters,”
in Proceedings of the 8th ACM European Conference on Computer
Systems, ser. EuroSys ’13, 2013, pp. 351–364.
[6] L. Tang, J. Mars, N. Vachharajani, R. Hundt, and M. L. Soffa, “The
impact of memory subsystem resource sharing on datacenter applications,” in Proceedings of the 38th Annual International Symposium on
Computer Architecture, ser. ISCA ’11, 2011, pp. 283–294.
[7] L. Tang, J. Mars, and M. L. Soffa, “Compiling for niceness: Mitigating
contention for qos in warehouse scale computers,” in Proceedings of the
Tenth International Symposium on Code Generation and Optimization,
ser. CGO ’12, 2012, pp. 1–12.
[8] J. Dean and L. A. Barroso, “The tail at scale,” Commun. ACM, vol. 56,
no. 2, pp. 74–80, Feb. 2013.
[9] L. A. Barroso, J. Clidaras, and U. Hoelzle, The Datacenter As a
Computer: An Introduction to the Design of Warehouse-Scale Machines,
2nd ed. Morgan and Claypool Publishers, 2013.
[10] D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis,
“Heracles: Improving resource efficiency at scale,” in Proceedings of the
42nd Intl. Symp. on Computer Architecture, 2015, pp. 450–462.
[11] Qualcomm, “Meet Qualcomm Centriq 2400, the worlds first 10nanometer server processor,” Press release, December 2016.
[12] Intel, “Intel Xeon processor E7-8890 v4 data sheet,” June 2016.
[13] Cavium, ThunderX Family of Workload Optimized Processors, 2015.
[14] VMware, Inc., “vSphere Resource Management,” https://pubs.vmware.
com/vsphere-60/topic/com.vmware.ICbase/PDF/vsphere-esxi-vcenterserver-60-resource-management-guide.pdf, 2015.
[15] H. Cook, M. Moreto, S. Bird, K. Dao, D. A. Patterson, and K. Asanovic,
“A hardware evaluation of cache partitioning to improve utilization and
energy-efficiency while preserving responsiveness,” in Proc. of the 40th
Intl. Symposium on Computer Architecture. ACM, 2013, pp. 308–319.
[16] A. Herdrich, E. Verplanke, P. Autee, R. Illikkal, C. Gianos, R. Singhal,
and R. Iyer, “Cache QoS: From concept to reality in the Intel R Xeon R
processor e5-2600 v3 product family,” in 2016 IEEE International
Symposium on High Performance Computer Architecture (HPCA’16),
March 2016, pp. 657–668.
[17] Intel, Intel 64 and IA-32 Architectures Developer’s Manual Vol 3B,
chapter 17.4.
[18] J. Leverich and C. Kozyrakis, “Reconciling high server utilization
and sub-millisecond quality-of-service,” in Proceedings of the Ninth
European Conference on Computer Systems, ser. EuroSys ’14, 2014,
pp. 4:1–4:14.
[19] K. Sudan, S. Srinivasan, R. Balasubramonian, and R. Iyer, “Optimizing
datacenter power with memory system levers for guaranteed quality-ofservice,” in Proceedings of the 21st International Conference on Parallel
Architectures and Compilation Techniques, ser. PACT ’12, 2012, pp.
117–126.
[20] E. Ebrahimi, C. J. Lee, O. Mutlu, and Y. N. Patt, “Fairness via source
throttling: A configurable and high-performance fairness substrate for
multi-core memory systems,” in Proceedings of the Fifteenth Edition
of ASPLOS on Architectural Support for Programming Languages and
Operating Systems, ser. ASPLOS XV, 2010, pp. 335–346.
[21] M. Jahre and L. Natvig, “A light-weight fairness mechanism for chip
multiprocessor memory systems,” in Proceedings of the 6th ACM
Conference on Computing Frontiers, ser. CF ’09, 2009, pp. 1–10.
[22] R. Illikkal, V. Chadha, A. Herdrich, R. Iyer, and D. Newell, “Pirate: QoS
and performance management in CMP architectures,” SIGMETRICS
Perform. Eval. Rev., vol. 37, no. 4, pp. 3–10, Mar. 2010.
[23] A. Herdrich, R. Illikkal, R. Iyer, D. Newell, V. Chadha, and J. Moses,
“Rate-based QoS techniques for cache/memory in CMP platforms,” in
Proceedings of the 23rd International Conference on Supercomputing,
ser. ICS ’09, 2009, pp. 479–488.
[24] Y. Zhou and D. Wentzlaff, “MITTS: Memory inter-arrival time traffic
shaping,” in Proceedings of the 43rd International Symposium on
Computer Architecture. ISCA, vol. 16, 2016.
[25] F. Liu, X. Jiang, and Y. Solihin, “Understanding how off-chip memory
bandwidth partitioning in chip multiprocessors affects system performance,” in 2010 IEEE 16th International Symposium on High Performance Computer Architecture (HPCA’10). IEEE, 2010, pp. 1–12.
[26] K. J. Nesbit, N. Aggarwal, J. Laudon, and J. E. Smith, “Fair queuing
memory systems,” in Proc. of the 39th Intl. Symp. on Microarchitecture,
2006, pp. 208–222.
[27] O. Mutlu and T. Moscibroda, “Stall-time fair memory access scheduling
for chip multiprocessors,” in 40th Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO). IEEE, December.
[28] N. Rafique, W.-T. Lim, and M. Thottethodi, “Effective management
of dram bandwidth in multicore processors,” in Proceedings of the
16th International Conference on Parallel Architecture and Compilation
Techniques, ser. PACT ’07, 2007, pp. 245–258.
[29] E. Ipek, O. Mutlu, J. F. Martı́nez, and R. Caruana, “Self-optimizing
memory controllers: A reinforcement learning approach,” in Proceedings
of the 35th Annual International Symposium on Computer Architecture,
ser. ISCA ’08, 2008, pp. 39–50.
[30] P. Menage, CGroups Users Guide, available on www.kernel.org.
[31] S. Kanev, J. P. Darago, K. Hazelwood, P. Ranganathan, T. Moseley,
G.-Y. Wei, and D. Brooks, “Profiling a warehouse-scale computer,” in
Proceedings of the 42nd Annual International Symposium on Computer
Architecture, ser. ISCA ’15. New York, NY, USA: ACM, 2015, pp.
158–169.
[32] M. Ben-Yehuda, O. Agmon Ben-Yehuda, and D. Tsafrir, “The nom
profit-maximizing operating system,” in Proceedings of the12th ACM
SIGPLAN/SIGOPS International Conference on Virtual Execution Environments, ser. VEE ’16, 2016, pp. 145–160.
[33] C. A. Waldspurger, “Lottery and stride scheduling: Flexible
proportional-share resource management,” in Ph.D. dissertation,
Massachusetts Institute of Technology, September 1995.
[34] R. Bitirgen, E. Ipek, and J. F. Martinez, “Coordinated management
of multiple interacting resources in chip multiprocessors: A machine
learning approach,” in Proc. of the 41st Intl. Symp. on Microarchitecture,
2008, pp. 318–329.
[35] X. Wang and J. Martinez, “Xchange: A market-based approach to
scalable dynamic multi-resource allocation in multicore architectures,” in
High Performance Computer Architecture (HPCA’15), 21st Intl. Symp.
on, 2015, pp. 113–125.
[36] S. M. Zahedi and B. C. Lee, “REF: Resource elasticity fairness with
sharing incentives for multiprocessors,” in Proc. of the 19th Intl. Conf.
on Architectural Support for Programming Languages and Operating
Systems, 2014, pp. 145–160.
[37] M. M. K. Martin, D. J. Sorin, A. Ailamaki, A. R. Alameldeen, R. M.
Dickson, C. J. Mauer, K. E. Moore, M. Plakal, M. D. Hill, and D. A.
Wood, “Timestamp snooping: An approach for extending smps,” in Proceedings of the Ninth International Conference on Architectural Support
for Programming Languages and Operating Systems, ser. ASPLOS IX,
2000, pp. 25–36.
[38] F. Bellard, “QEMU, a fast and portable dynamic translator,” in Proc. of
USENIX Annual Technical Conference, 2005.
[39] A. Hansson, N. Agarwal, A. Kolli, T. F. Wenisch, and A. N. Udipi, “Simulating DRAM controllers for future system architecture exploration,”
in 2014 Intl. Symp. on Performance Analysis of Systems and Software,
2014, pp. 201–210.
[40] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu,
J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen, K. Sewell,
M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The gem5 simulator,”
SIGARCH Comput. Archit. News, vol. 39, no. 2, pp. 1–7, Aug. 2011.
[41] T. Sherwood, E. Perelman, G. Hamerly, and B. Calder, “Automatically
characterizing large scale program behavior,” in Proc. of the 10th
Intl. Conf. on Architectural Support for Programming Languages and
Operating Systems, 2002, pp. 45–57.
[42] S. Eyerman and L. Eeckhout, “Restating the case for weighted-IPC metrics to evaluate multiprogram workload performance,” IEEE Computer
Architecture Letters, vol. 13, no. 2, pp. 93–96, July 2014.
[43] B. Fitzpatrick, “Distributed caching with memcached,” Linux Journal,
vol. 2004, no. 124, pp. 5–, Aug. 2004.
[44] A. Limited, ARMv8 Architecture Reference Manual, 2016.
[45] A. Sharifi, S. Srikantaiah, A. K. Mishra, M. Kandemir, and C. R. Das,
“METE: Meeting end-to-end QoS in multicores through system-wide
resource management,” SIGMETRICS Perform. Eval. Rev., vol. 39, no. 1,
pp. 13–24, Jun. 2011.
[46] A. Gulati, I. Ahmad, and C. A. Waldspurger, “PARDA: Proportional
allocation of resources for distributed storage access,” in Proceedings
of the 7th Conference on File and Storage Technologies, ser. FAST ’09,
2009, pp. 85–98.
[47] S. P. Muralidhara, L. Subramanian, O. Mutlu, M. Kandemir, and
T. Moscibroda, “Reducing memory interference in multicore systems via
application-aware memory channel partitioning,” in Proceedings of the
44th Annual IEEE/ACM International Symposium on Microarchitecture,
ser. MICRO-44, 2011, pp. 374–385.
[48] L. S. Brakmo, S. W. O’Malley, and L. L. Peterson, “TCP Vegas: New
techniques for congestion detection and avoidance,” in Proceedings
of the Conference on Communications Architectures, Protocols and
Applications, ser. SIGCOMM ’94, 1994, pp. 24–35.
[49] D. X. Wei, C. Jin, S. H. Low, and S. Hegde, “FAST TCP: Motivation,
architecture, algorithms, performance,” IEEE/ACM Transactions on Networking, vol. 14, no. 6, pp. 1246–1259, Dec. 2006.
[50] R. Mittal, V. T. Lam, N. Dukkipati, E. Blem, H. Wassel, M. Ghobadi,
A. Vahdat, Y. Wang, D. Wetherall, and D. Zats, “TIMELY: RTT-based
congestion control for the datacenter,” in Proceedings of the 2015 ACM
Conference on Special Interest Group on Data Communication, ser.
SIGCOMM ’15, 2015, pp. 537–550.
