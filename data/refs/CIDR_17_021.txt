
[1] EC2 instance types — amazon web services. https://aws.amazon.

com/ec2/instance-types/.

[2] The GNU C library (glibc). https://www.gnu.org/software/libe/.

[3] Microsoft orleans. https://dotnet.github.io/orleans/.

[4] Possible typo/bug in the michael and scott queue white paper

psuedo-code. https://tinyurl.com/zx7dqsb.

Reader/writer locks and their (lack of) applicability to fine-grained

synchronization. https://tinyurl.com/gv7zfjt.

[6] Use-after-free bug in maged m. michael and michael 1. scott’s
non-blocking concurrent queue algorithm. https://tinyurl.com/h4jluté.

[7] Windows User-Mode Scheduling. https://goo.gl/WJPSL3.

[8] X1 instances for ec2 — ready for your memory-intensive workloads.
https://tinyurl.com/he7bgzz/.

[9] Xv6, a simple Unix-like teaching operating system. https://pdos.
csail.mit.edu/6.828/2011/xv6.html.

[10] R. Agrawal, M. J. Carey, and M. Livny. Concurrency control
performance modeling: Alternatives and implications. TODS, 12(4),
1987.

[11] J. Alemany and E. W. Felten. Performance issues in non-blocking
synchronization on shared-memory multiprocessors. In PODC, 1992.

[12] T. E. Anderson. The performance of spin lock alternatives for
shared-money multiprocessors. TPDS, 1(1), 1990.

[13] T. E. Anderson, B. N. Bershad, E. D. Lazowska, and H. M. Levy.
Scheduler activations: Effective kernel support for the user-level
management of parallelism. TOCS, 10(1), 1992.

[14] P. Bailis, A. Davidson, A. Fekete, A. Ghodsi, J. M. Hellerstein, and
I. Stoica. Highly available transactions: Virtues and limitations.
PVLDB, 7(3), 2013.

[15] A. Baumann, P. Barham, P.-E. Dagand, T. Harris, R. Isaacs, S. Peter,
T. Roscoe, A. Schiipbach, and A. Singhania. The multikernel: A new
OS architecture for scalable multicore systems. In SOSP, 2009.

[16] P. Bernstein, S$. Bykov, A. Geller, G. Kliot, and J. Thelin. Orleans:
Distributed virtual actors for programmability and scalability.
Technical Report MSR-TR-2014-41, 24, Microsoft Research, 2014.

[17] P. A. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency
Control and Recovery in Database Systems. Addison-Wesley, 1987.

[18] B.N. Bershad. Practical considerations for lock-free concurrent
objects. Technical Report CMU-CS-91-183, CMU Computer
Science, 1991.

[19] S. Boyd-Wickizer, M. F. Kaashoek, R. Morris, and N. Zeldovich.
Non-scalable locks are dangerous. In OLS, 2012.

[20] B. Cantrill and J. Bonwick. Real-world concurrency. Queue, 6(5),
2008.

[21] S. K. Cha, S. Hwang, K. Kim, and K. Kwon. Cache-conscious
concurrency control of main-memory indexes on shared-memory
multiprocessor systems. In VLDB, 2001.

[22] D. Comer. The ubiquitous b-tree. CUSR, 11(2), 1979.

[23] N. Conway, W. R. Marczak, P. Alvaro, J. M. Hellerstein, and
D. Maier. Logic and lattices for distributed programming. In SoCC,
2012.

[24] T. David, R. Guerraoui, and V. Trigonakis. Everything you always
wanted to know about synchronization but were afraid to ask. In
SOSP, 2013.
[25] C. Diaconu, C. Freedman, E. Ismert, P.-A. Larson, P. Mittal,
R. Stonecipher, N. Verma, and M. Zwilling. Hekaton: Sql server’s
memory-optimized oltp engine. In SIGMOD, 2013.
[26] D. Dice, D. Hendler, and I. Mirsky. Lightweight contention
management for efficient compare-and-swap operations. CoRR,
abs/1305.5800, 2013.
[27] D. Dice, O. Shalev, and N. Shavit. Transactional locking ii. In DISC,
2006.
[28] D. Dice and N. Shavit. Tlrw: return of the read-write lock. In SPAA,
2010.
[29] B. Ding, L. Kot, A. Demers, and J. Gehrke. Centiman: Elastic, high
performance optimistic concurrency control by watermarking. In
SoCC, 2015.
[30] R. Ennals. Software transactional memory should not be
obstruction-free. Technical Report IRC-TR-06-052, Intel Research
Cambridge, 2006.
[31] J. M. Faleiro and D. J. Abadi. Rethinking serializable multiversion
concurrency control. PVLDB, 8(11), 2015.
[32] J. M. Faleiro, D. J. Abadi, and J. M. Hellerstein. High performance
transactions via early write visibility. PVLDB, 10(5), 2017.
[33] J. M. Faleiro, A. Thomson, and D. J. Abadi. Lazy evaluation of
transactions in database systems. In SIGMOD, 2014.
[34] K. Fraser and T. Harris. Concurrent programming without locks.
TOCS, 25(2), 2007.
[35] J. Giceva, G. Zellweger, G. Alonso, and T. Rosco. Customized os
support for data-processing. In DaMoN, 2016.
[36] M. Greenwald and D. Cheriton. The synergy between non-blocking
synchronization and operating system structure. In OSDI, 1996.
[37] S. Harizopoulos and A. Ailamaki. A case for staged database
systems. In CIDR, 2003.
[38] T. L. Harris. A pragmatic implementation of non-blocking
linked-lists. In DISC, 2001.
[39] J. M. Hellerstein, M. Stonebraker, and J. Hamilton. Architecture of a
database system. Now Publishers, 2007.
[40] M. Herlihy. Wait-free synchronization. TOPLAS, 13(1), 1991.
[41] M. Herlihy, V. Luchangco, and M. Moir. Obstruction-free
synchronization: Double-ended queues as an example. In DISC,
2003.
[42] M. Herlihy and N. Shavit. The Art of Multiprocessor Programming.
Morgan Kaufmann Publishers, 2008.
[43] M. P. Herlihy. A methodology for implementing highly concurrent
data structures. In PPOPP, 1990.
[44] T. Horikawa. Latch-free data structures for dbms: design,
implementation, and evaluation. In SIGMOD, 2013.
[45] R. Johnson, I. Pandis, and A. Ailamaki. Eliminating unscalable
communication in transaction processing. VLDBJ, 23(1), 2014.
[46] R. F. Johnson, R. Stoica, A. Ailamaki, and T. C. Mowry. Decoupling
contention management from scheduling. In ASPLOS, 2010.
[47] H. Jung, H. Han, A. D. Fekete, G. Heiser, and H. Y. Yeom. A
scalable lock manager for multicores. In SIGMOD, 2013.
[48] K. Kim, T. Wang, R. Johnson, and I. Pandis. Ermia: Fast
memory-optimized database system for heterogeneous workloads. In
SIGMOD, 2016.
[49] H.-T. Kung and J. T. Robinson. On optimistic methods for
concurrency control. ACM TODS, 6(2), 1981.
[50] P. L. Lehman and S. B. Yao. Efficient locking for concurrent
operations on b-trees. TODS, 6(4), 1981.
[51] V. Leis, F. Scheibner, A. Kemper, and T. Neumann. The art of
practical synchronization. In DAMON, 2016.
[52] J. J. Levandoski, D. B. Lomet, and S. Sengupta. The bw-tree: A
b-tree for new hardware platforms. In ICDE, 2013.
[53] C. Li, D. Porto, A. Clement, J. Gehrke, N. Preguiça, and
R. Rodrigues. Making geo-replicated systems fast as possible,
consistent when necessary. In OSDI, 2012.
[54] W. Lloyd, M. J. Freedman, M. Kaminsky, and D. G. Andersen. Don’t
settle for eventual: Scalable causal consistency for wide-area storage
with cops. In SOSP, 2011.

[55] J.-P. Lozi, F. David, G. Thomas, J. L. Lawall, G. Muller, et al.
Remote core locking: Migrating critical-section execution to improve
the performance of multithreaded applications. In USENIX ATC,
2012.
[56] D. Makreshanski, J. Levandoski, and R. Stutsman. To lock, swap, or
elide: On the interplay of hardware transactional memory and
lock-free indexing. PVLDB, 8(11), 2015.
[57] Y. Mao, E. Kohler, and R. T. Morris. Cache craftiness for fast
multicore key-value storage. In EuroSys, 2012.
[58] P. E. Mckenney, J. Appavoo, A. Kleen, O. Krieger, O. Krieger,
R. Russell, D. Sarma, and M. Soni. Read-copy update. In OLS, 2001.
[59] J. M. Mellor-Crummey and M. L. Scott. Algorithms for scalable
synchronization on shared-memory multiprocessors. TOCS, 9(1),
1991.
[60] M. M. Michael. Hazard pointers: Safe memory reclamation for
lock-free objects. TPDS, 15(6), 2004.
[61] M. M. Michael and M. L. Scott. Correction of a memory
management method for lock-free data structures. Technical Report
TR-599, University of Rochester Computer Science, 1995.
[62] M. M. Michael and M. L. Scott. Simple, fast, and practical
non-blocking and blocking concurrent queue algorithms. In PODC,
1996.
[63] M. M. Michael and M. L. Scott. Nonblocking algorithms and
preemption-safe locking on multiprogrammed shared memory
multiprocessors. JPDC, 51(1), 1998.
[64] C. Mohan and F. Levine. Aries/im: An efficient and high
concurrency index management method using write-ahead logging.
In SIGMOD, 1992.
[65] T. Neumann, T. Mühlbauer, and A. Kemper. Fast serializable
multi-version concurrency control for main-memory database
systems. In SIGMOD, 2015.
[66] K. Ren, J. M. Faleiro, and D. J. Abadi. Design principles for scaling
multi-core oltp under high contention. In SIGMOD, 2016.
[67] L. Rudolph and Z. Segall. Dynamic decentralized cache schemes for
mimd parallel processors. In ISCA, 1984.
[68] J. Sewall, J. Chhugani, C. Kim, N. Satish, and P. Dubey. Palm:
Parallel architecture-friendly latch-free modifications to b+ trees on
many-core processors. PVLDB, 4(11), 2011.
[69] M. Shapiro, N. Preguiça, C. Baquero, and M. Zawirski. A
comprehensive study of convergent and commutative replicated data
types. Technical Report RR-7506, Inria – Centre
Paris-Rocquencourt, 2011.
[70] V. Srinivasan and M. J. Carey. Performance of b+ tree concurrency
control algorithms. VLDBJ, 2(4), 1993.
[71] M. Stonebraker. Operating system support for database management.
CACM, 24(7), 1981.
[72] M. Stonebraker, S. R. Madden, D. J. Abadi, S. Harizopoulos,
N. Hachem, and P. Helland. The end of an architectural era (it’s time
for a complete rewrite). In VLDB, 2007.
[73] D. B. Terry, M. M. Theimer, K. Petersen, A. J. Demers, M. J.
Spreitzer, and C. H. Hauser. Managing update conflicts in bayou, a
weakly connected replicated storage system. In SOSP, 1995.
[74] A. Thomson, T. Diamond, S. chun Weng, K. Ren, P. Shao, and D. J.
Abadi. Calvin: Fast distributed transactions for partitioned database
systems. In SIGMOD, 2012.
[75] S. Tu, W. Zheng, E. Kohler, B. Liskov, and S. Madden. Speedy
Transactions in Multicore In-memory Databases. In SOSP, 2013.
[76] J. D. Valois. Lock-free linked lists using compare-and-swap. In
PODC, 1995.
[77] W. Vogels. Eventually consistent. CACM, 52(1), 2009.
[78] T. Wang and H. Kimura. Mostly-optimistic concurrency control for
highly contended dynamic workloads on a thousand cores. PVLDB,
10(2), 2016.
[79] W. Zheng, S. Tu, E. Kohler, and B. Liskov. Fast databases with fast
durability and recovery through multicore parallelism. In OSDI,
2014.

