[1]  C. Cui, H. Deng, D. Telekom, U. Michel, and H. Damker, “Network 
functions  virtualisation:  An  introduction,  benefits,  enablers,  chal-
lenges  and  call  for  action,”  Netw.  Funct.  Virtualisation  –  Introd. 
White Pap., no. 1, pp. 1–16, 2012. 

 

[2]  ETSI ISG NFV, “Network Functions Virtualisation (NFV): Architec-

tural Framework,” 2013. 

[3]  T.  Koponen,  K.  Amidon,  P.  Balland,  M.  Casado,  A.  Chanda,  B. 
Fulton, I. Ganichev, J. Gross, P. Ingram, E. Jackson, A. Lambeth, R. 
Lenglet,  S.-H.  Li,  A.  Padmanabhan,  J.  Pettit,  B.  Pfaff,  R.  Rama-
nathan, S. Shenker, A. Shieh, J. Stribling, P. Thakkar, D. Wendlandt, 
A. Yip, and R. Zhang, “Network Virtualization in Multi-tenant Data-
centers,”  Proc.  11th  USENIX  Symp.  Networked  Syst.  Des.  Imple-
ment. (NSDI 14), pp. 203–216, 2014. 

[4]  C. Li, Y. Hu, L. Liu, J. Gu, M. Song, X. Liang, J. Yuan, and T. Li, 
“Towards  sustainable  in-situ  server  systems  in  the  big  data  era,” 
Proc. 42nd Annu. Int. Symp. Comput. Archit. - ISCA ’15, pp. 14–26, 
2015. 

[5]  TechNavio, “Global Network Function Virtualization Market 2014-

2018,” 2014. 

[6]  Dan Meyer, “AT&T targets 75% NFV, SDN control of network by 
Available: 

2020,” 
http://www.rcrwireless.com/20141216/telecom-software/att-targets-
75-virtualization-software-control-of-network-by-2020-tag2. 

[Online]. 

2014. 

[7]  Y. Hu and T. Li, “Towards Efficient Server Architecture for Virtual-
ized  Network  Function  Deployment:  Implications  and  Implementa-
tions,” in Proceedings of the 49th International Symposium on Mi-
croarchitecture - MICRO-49, 2016. 

[8]  W.  Paper  and  S.  Infrastructure,  “Intel®  Open  Network  Platform 
Server Reference Architecture: SDN and NFV for Carrier-Grade In-
frastructure and Cloud Data Centers,” 2014. 

[9]  J. DiGiglio and D. Ricco, “High performance, open standard virtual-

ization with NFV and SDN,” Wind River, 2013. 

[10]  Wind  River,  “Wind  River  Introduces  NFV  Platform  to  Accelerate 
Cost-Effective  Virtual  CPE  Deployments.”  [Online].  Available: 
http://www.windriver.com/news/press/pr.html?ID=13974. 

[11]  “Deutsche  Telekom  experimenting  with  NFV  in  Docker  |  Business 
Available: 

Cloud 
http://www.businesscloudnews.com/2015/02/09/deutsche-telekom-
experimenting-with-nfv-in-docker/. [Accessed: 09-May-2016]. 

[Online]. 

News.” 

[12]  Iain  Morris,  “BT  Pins  NFV  Future  on  Containerization,”  2015. 
http://www.lightreading.com/nfv/nfv-

[Online]. 
strategies/bt-pins-nfv-future-on-containerization/d/d-id/718920. 

Available: 

[13]  Cisco; Red Hat, “Linux Containers : Why They ’ re in Your Future 
and What Has to Happen First Application Delivery : Today ’ s Chal-
lenges,” pp. 1–11, 2014. 

[14]  Andre  Fuetsch,  “From  Virtual  Machines  to  Containers  and  Micro-
Services: The Next Generation of Virtualization.” [Online]. Availa-
ble: http://about.att.com/innovationblog/08252015nextgenerati. 

[15]  E. Jeong, S. Wood, M. Jamshed, H. Jeong, S. Ihm, D. Han, and K. 
Park, “mTCP: a Highly Scalable User-level TCP Stack for Multicore 
Systems,”  11th  USENIX  Symp.  Networked  Syst.  Des.  Implement. 
(NSDI 14), pp. 489–502, 2014. 

[16]  A. Belay, G. Prekas, A. Klimovic, S. Grossman, C. Kozyrakis, and 
E. Bugnion, “IX: A Protected Dataplane Operating System for High 
Throughput  and  Low  Latency,”  Proc.  11th  USENIX  Conf.  Oper. 
Syst. Des. Implement., pp. 49–65, 2014. 

[17]  “Project 

Available: 
http://www.projectclearwater.org/about-clearwater/.  [Accessed:  02-
Apr-2016]. 

Clearwater.” 

[Online]. 

[18]  X. Jiang, Y. Solihin, L. Zhao, and R. Iyer, “Architecture support for 
improving  bulk  memory  copying  and  initialization  performance,” 
Parallel Archit. Compil. Tech. - Conf. Proceedings, PACT, pp. 169–
180, 2009. 

[19]  G. Liao, X. Zhu, and L. Bhuyan, “A New Server I / O Architecture 
for High Speed Networks,” in High Performance Computer Architec-
ture  (HPCA),  2011  IEEE  17th  International  Symposium  on,  2011, 
pp. 255–265. 

[20]  X. Xiang, B. Bao, C. Ding, and Y. Gao, “Linear-time modeling of 
program working set in shared cache,” in Parallel Architectures and 
Compilation Techniques - Conference Proceedings, PACT, 2011, pp. 
350–360. 

[21]  X.  Xiang,  C.  Ding,  H.  Luo,  and  B.  Bao,  “HOTL:  A  Higher  Order 
Theory of Locality,” in Proceedings of the Eighteenth International 
Conference  on  Architectural  Support  for  Programming  Languages 
and Operating Systems, 2013, pp. 343–356. 

[22]  X. Hu, X. Wang, L. Zhou, Y. Luo, C. Ding, and Z. Wang, “Kinetic 
Modeling  of  Data  Eviction  in  Cache,”  in  2016  USENIX  Annual 
Technical Conference (USENIX ATC 16), 2016, pp. 351–364. 

[23]  X. Hu, X. Wang, Y. Li, L. Zhou, Y. Luo, C. Ding, S. Jiang, and Z. 
Wang,  “LAMA:  Optimized  Locality-aware  Memory  Allocation  for 
Key-value Cache,” in 2015 USENIX Annual Technical Conference 
(USENIX ATC 15), 2015, pp. 57–69. 

[24]  C. A. Waldspurger, N. Park, A. Garthwaite, and I. Ahmad, “Efficient 
MRC Construction with SHARDS,” in 13th USENIX Conference on 
File and Storage Technologies (FAST 15), 2015, pp. 95–110. 

[25]  C. P. Wright, E. M. Nahum, D. Wood, J. M. Tracey, and E. C. Hu, 
“SIP server performance on multicore systems,” IBM J. Res. Dev., 
vol. 54, no. 1, pp. 1–7, 2010. 

[26]  Frost & Sullivan, “Analysis of the North American VoIP Access and 

SIP Trunking Services Market,” 2015. 

[27]  D.  Merkel,  “Docker:  lightweight  linux  containers  for  consistent 
development  and  deployment,”  Linux  J.,  vol.  2014,  no.  239,  p.  2, 
2014. 

[28]  R.  Jones,  “NetPerf:  a  network  performance  benchmark,”  Inf.  Net-

works Div. Hewlett-Packard Co., 1996. 

[29]  “Welcome to SIPp.” [Online]. Available: http://sipp.sourceforge.net/. 

[Accessed: 11-Apr-2016]. 

[30]  “Oprofile.” [Online]. Available: http://oprofile.sourceforge.net/. 

[31]  X. Ding, K. Wang, and X. Zhang, “SRM-buffer: an OS buffer man-
agement technique to prevent last level cache from thrashing in mul-
ticores,” Proc. sixth Conf. …, p. 243, 2011. 

[32]  L. Zhao, S. Makineni, R. Illikkal, R. Iyer, and L. Bhuyan, “Efficient 
Caching Techniques for Server Network Acceleration,” in Advanced 
Networking and Communications Hardware Workshop, 2004. 

[33]  C. Ding and T. Chilimbi, “A composable model for analyzing locali-

ty of multi-threaded programs,” techreport. 

[34]  Y.  Jiang,  E.  Z.  Zhang,  K.  Tian,  and  X.  Shen,  “Is  reuse  distance 
applicable to data locality analysis on chip multiprocessors?,” in In-
ternational  Conference  on  Compiler  Construction,  2010,  pp.  264–
282. 

[35]  E. Z. Zhang, Y. Jiang, and X. Shen, “Does Cache Sharing on Modern 
CMP  Matter  to  the  Performance  of  Contemporary  Multithreaded 
Programs?,” in Proceedings of the 15th ACM SIGPLAN Symposium 
on Principles and Practice of Parallel Programming, 2010, pp. 203–
212. 

[36]  X.  Xiang,  B.  Bao,  C.  Ding,  and  K.  Shen,  “Cache  conscious  task 
regrouping  on  multicore  processors,”  Proc.  -  12th  IEEE/ACM  Int. 
Symp. Clust. Cloud Grid Comput. CCGrid 2012, pp. 603–611, 2012. 
[37]  X.  Xiang,  B.  Bao,  T.  Bai,  C.  Ding,  and  T.  Chilimbi,  “All-window 
Profiling and Composable Models of Cache Sharing,” in Proceedings 
of the 16th ACM Symposium on Principles and Practice of Parallel 
Programming, 2011, pp. 91–102. 

[38]  M. Isard, V. Prabhakaran, J. Currey, U. Wieder, K. Talwar, and A. 
Goldberg,  “Quincy :  Fair  Scheduling  for  Distributed  Computing 
Clusters,” Sort, vol. 16, no. November, pp. 261–276, 2009. 

[39]  A.  V  Goldberg,  “An  Efficient  Implementation  of  a  Scaling  Mini-
mum-Cost Flow Algorithm,” J. Algorithms, vol. 22, no. 1, pp. 1–29, 
1997. 

[40]  Intel, “Small Packet Traffic Performance Optimization for 8255x and 

8254x Ethernet Controllers,” 2003. 

[41]  J.  Lin,  Q.  Lu,  X.  Ding,  Z.  Zhang,  X.  Zhang,  and  P.  Sadayappan, 
“Gaining insights into multicore cache partitioning: Bridging the gap 
between simulation and real systems,” in Proceedings - International 
Symposium on High-Performance Computer Architecture, 2008, pp. 
367–378. 

[42]  P. Ranganathan, S. Adve, and N. P. Jouppi, “Reconfigurable Caches 
and  their  Application  to  Media  Processing,”  Proc.  27th  Annu.  Int. 
Symp. Comput. Archit. - ISCA ’00, no. c, pp. 214–224, 2000. 

[43]  M. K. Qureshi and Y. N. Patt, “Utility-based cache partitioning: A 
low-overhead,  high-performance,  runtime  mechanism  to  partition 
shared caches,” in Proceedings of the Annual International Symposi-
um on Microarchitecture, MICRO, 2006, pp. 423–432. 

[44]  Y.  Xie  and  G.  H.  Loh,  “PIPP:  promotion/insertion  pseudo-
partitioning of multi-core shared caches,” in ISCA ’09: Proceedings 
of  the  36th  annual  international  symposium  on  Computer  architec-
ture, 2009, vol. 37, no. 3, pp. 174–183. 

[45]  C.-J.  Wu  and  M.  Martonosi,  “A  Comparison  of  Capacity  Manage-
ment  Schemes  for  Shared  CMP  Caches,”  in  Proceeding  of  the  7th 
Workshop on Duplicating, Deconstructing, and Debunking, 2008. 

[46]  D. Sanchez and C. Kozyrakis, “Vantage: scalable and efficient fine-
grain cache partitioning,” Proceeding 38th Annu. Int. Symp. Comput. 
Archit., pp. 57–68, 2011. 

[47]  R. Manikantan, K. Rajan, and R. Govindarajan, “Probabilistic shared 
cache management (PriSM),” in Proceedings - International Sympo-
sium on Computer Architecture, 2012, pp. 428–439. 

[48]  S. Srikantaiah, M. Kandemir, and Q. W. Q. Wang, “SHARP control: 
Controlled shared cache management in chip multiprocessors,” 2009 
42nd Annu. IEEE/ACM Int. Symp. Microarchitecture, pp. 517–528, 
2009. 

[49]  R.  Liu,  K.  Klues,  S.  Bird,  S.  Hofmeyr,  K.  Asanovi,  and  J.  Kubi-
atowicz, “Tessellation: space-time partitioning in a manycore client 

479OS,” Proceeding HotPar’09 Proc. First USENIX Conf. Hot Top. par-
allelism, pp. 10–10, 2009. 

[50]  D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis, 
“Heracles: Improving Resource Efficiency at Scale,” in Proceedings 
of the 42nd Annual International Symposium on Computer Architec-
ture - ISCA ’15, 2015, pp. 450–462. 

[51]  F. Guo, Y. Solihin, L. Zhao, and R. Iyer, “A framework for provid-
ing quality of service in chip multi-processors,” in Proceedings of the 
Annual  International  Symposium  on  Microarchitecture,  MICRO, 
2007, pp. 343–355. 

[52]  L. R. Hsu, S. K. Reinhardt, R. Iyer, and S. Makineni, “Communist, 
utilitarian, and capitalist cache policies on CMPs: caches as a shared 
resource,”  Proc. 15th Int. Conf. Parallel Archit. Compil. Tech., pp. 
13–22, 2006. 

[53]  R. Iyer, “CQoS : A Framework for Enabling QoS in Shared Caches 
of CMP Platforms,” Proc. 18th Annu. Int. Conf. Supercomput., pp. 
257–266, 2004. 

[54]  R.  Iyer,  L.  Zhao,  F.  Guo,  R.  Illikkal,  S.  Makineni,  D.  Newell,  Y. 
Solihin, L. Hsu, and S. Reinhardt, “QoS policies and architecture for 
cache/memory  in  CMP  platforms,”  ACM  SIGMETRICS  Perform. 
Eval. Rev., vol. 35, no. 1, p. 25, 2007. 

[55]  H. Kasture and D. Sanchez, “Ubik: efficient cache sharing with strict 

qos for latency-critical workloads,” Asplos, pp. 729–742, 2014. 

[56]  M.  K.  Jeong,  M.  Erez,  C.  Sudanthi,  and  N.  Paver,  “A  QoS-Aware 
Memory  Controller  for  Dynamically  Balancing  GPU  and  CPU 
Bandwidth Use in an MPSoC,” in proc. Design Automation Confer-
ence (DAC), 2012, pp. 850–855. 

[57]  B. Li, L. Zhao, R. Iyer, L. S. Peh, M. Leddige, M. Espig, S. E. Lee, 
and D. Newell, “CoQoS: Coordinating QoS-aware shared resources 
in NoC-based SoCs,” J. Parallel Distrib. Comput., vol. 71, no. 5, pp. 
700–713, 2011. 

[58]  E.  Ebrahimi,  C.  J.  Lee,  O.  Mutlu,  and  Y.  N.  Patt,  “Fairness  via 
Source  Throttling:  A  Configurable  and  High-Performance  Fairness 
Substrate  for  Multicore  Memory  Systems,”  ACM  Trans.  Comput. 
Syst., vol. 30, no. 2, pp. 1–35, 2012. 

[59]  A.  Sharifi,  S.  Srikantaiah,  A.  K.  Mishra,  M.  Kandemir,  and  C.  R. 
Das, “METE: Meeting End-to-End QoS in Multicores through Sys-
tem-Wide  Resource  Management,”  ACM  SIGMETRICS  Perform. 
Eval. Rev., vol. 39, no. 1, p. 13, 2011. 

[60]  V.  Nagarajan  and  R.  Gupta,  “ECMon:  Exposing  cache  events  for 
monitoring,” Proc. - Int. Symp. Comput. Archit., pp. 349–360, 2009. 
[61]  V. Seshadri, G. Pekhimenko, O. Ruwase, O. Mutlu, P. B. Gibbons, 
M. A. Kozuch, T. C. Mowry, and T. Chilimbi, “Page Overlays : An 
Enhanced  Virtual  Memory  Framework  to  Enable  Fine-grained 
Memory  Management,”  ISCA  ’15  Proc.  42nd  Annu.  Int.  Symp. 
Comput. Archit., no. Vm, pp. 79–91, 2015. 

[62]  R.  Nathuji  and  A.  Kansal,  “Q-Clouds :  Managing  Performance 
Interference  Effects  for  QoS-Aware  Clouds,”  Proc.  5th  Eur.  Conf. 
Comput. Syst., pp. 237–250, 2010. 

[63]  H. Yang, A. Breslow, J. Mars, and L. Tang, “Bubble-Flux: Precise 
online QoS management for increased utilization in warehouse scale 
computers,” Isca’13, p. 12, 2013. 

[64]  J. Mars, L. Tang, R. Hundt, K. Skadron, and M. Lou Soffa, “Bubble-
Up:  Increasing  Utilization  in  Modern  Warehouse  Scale  Computers 
via Sensible Co-locations,” Proc. 44th Annu. IEEE/ACM Int. Symp. 
Microarchitecture - MICRO-44 ’11, p. 248, 2011. 

[65]  D. Novakovic, N. Vasic, and S. Novakovic, “Deepdive: Transparent-
ly identifying and managing performance interference in virtualized 
environments,” USENIX ATC’13 Proc. 2013 USENIX Conf. Annu. 
Tech. Conf., pp. 219–230, 2013. 

[66]  N.  Vasić,  D.  Novaković,  S.  Miučin,  D.  Kostić,  and  R.  Bianchini, 
“DejaVu:  accelerating  resource  allocation  in  virtualized  environ-
ments,” ACM SIGARCH Comput. Archit. News, vol. 40, no. 1, p. 
423, 2012. 

[67]  C.  Delimitrou  and  C.  Kozyrakis,  “Paragon:  QoS-aware  Scheduling 
for Heterogeneous Datacenters,” Proc. eighteenth Int. Conf. Archit. 
Support Program. Lang. Oper. Syst. - ASPLOS ’13, pp. 77–88, 2013. 
[68]  C.  Delimitrou  and  C.  Kozyrakis,  “Quasar:  Resource-efficient  and 
QoS-aware Cluster Management,” in Proceedings of the 19th Inter-
national Conference on Architectural Support for Programming Lan-
guages and Operating Systems, 2014, pp. 127–144. 

[69]  Y. Hu, C. Li, L. Liu, and T. Li, “HOPE: Enabling Efficient Service 
Orchestration in Software-Defined Data Centers,” in Proceedings of 
the 2016 International Conference on Supercomputing (ICS), 2016, 
p. 10:1--10:12. 

[70]  A. Pesterev, J. Strauss, N. Zeldovich, and R. T. Morris, “Improving 
network  connection  locality  on  multicore  systems,”  EuroSys’12,  p. 
337, 2012. 

[71]  S.  Han,  S.  Marshall,  B.  Chun,  and  S.  Ratnasamy,  “MegaPipe :  A 
New  Programming  Interface  for  Scalable  Network  I  /  O,”  in  10th 
USENIX Symposium on Operating Systems Design and Implemen-
tation (OSDI ’12), 2012, pp. 135–148. 

[72]  X. Lin and Y. Chen, “Scalable Kernel TCP Design and Implementa-

tion for Short-Lived Connections,” Asplos, pp. 339–352, 2016. 

[73]  S.  Peter,  T.  Anderson,  and  T.  Roscoe,  “Arrakis:  The  Operating 
System  as  Control  Plane,”  Proc.  11th  USENIX  Conf.  Oper.  Syst. 
Des. Implement., vol. 38, no. 4, pp. 44–47, 2014. 

[74]  Intel, “Intel Data Direct I/O Technology (Intel DDIO): A Primer.” 
[75]  Y. Dong, X. Yang, X. Li, J. Li, K. Tian, and H. Guan, “High perfor-
mance network virtualization with SR-IOV,” High Perform. Comput. 
Archit. (HPCA), 2010 IEEE 16th Int. Symp., pp. 1–10, 2010. 

[76]  G. Taylor, P. Davies, and M. Farmwald, “The TLB slice-a low-cost 
high-speed address translation mechanism,” [1990] Proceedings. The 
17th Annual International Symposium on Computer Architecture. pp. 
355–363, 1990. 

[77]  T.  Sherwood,  B.  Calder,  and  J.  Emer,  “Reducing  Cache  Misses 
Using Hardware and Software Page Placement,” Ics, pp. 1–10, 1999. 
[78]  S. Cho and L. Jin, “Managing distributed, shared L2 caches through 
OS-level page allocation,” in Proceedings of the Annual International 
Symposium on Microarchitecture, MICRO, 2006, pp. 455–465. 

[79]  D. Tam, R. Azimi, L. Soares, and M. Stumm, “Managing Shared L2 
Caches on Multicore Systems in Software,” Work. Interact. between 
Oper. Syst. Comput. Archit., no. 2, pp. 26–33, 2007. 

[80]  L. Soares, D. Tarn, and M. Stumm, “Reducing the harmful effects of 
last-level  cache  polluters  with  an  os-level,  software-only  pollute 
buffer,”  in  Proceedings  of  the  Annual  International  Symposium  on 
Microarchitecture,  MICRO,  2008,  no.  2008  PROCEEDINGS,  pp. 
258–269. 

[81]  Q.  Lu,  J.  Lin,  X.  Ding,  Z.  Zhang,  X.  Zhang,  and  P.  Sadayappan, 
“Soft-OLP:  Improving  hardware  cache  performance  through  soft-
ware-controlled  object-level  partitioning,”  in  Parallel  Architectures 
and  Compilation  Techniques  -  Conference  Proceedings,  PACT, 
2009, pp. 246–257. 

[82]  L. Liu, Z. Cui, M. Xing, Y. Bao, M. Chen, and C. Wu, “A Software 
Memory Partition Approach for Eliminating Bank-level Interference 
in Multicore Systems,” in Proceedings of the 21st International Con-
ference on Parallel Architectures and Compilation Techniques, 2012, 
pp. 367–376. 

[83]  L. Liu, Z. Cui, Y. Li, Y. Bao, M. Chen, and C. Wu, “BPM/BPM+: 
Software-based Dynamic Memory Partitioning Mechanisms for Mit-
igating DRAM Bank-/Channel-level Interferences in Multicore Sys-
tems,” ACM Trans. Arch. Code Optim., vol. 11, no. 1, p. 5:1--5:28, 
Feb. 2014. 

[84]  L. Liu, Y. Li, Z. Cui, Y. Bao, M. Chen, and C. Wu, “Going vertical 
in  memory  management:  Handling  multiplicity  by  multi-policy,” 
Proc. - Int. Symp. Comput. Archit., no. 1, pp. 169–180, 2014. 

[85]  A.  Herdrich,  E.  Verplanke,  P.  Autee,  R.  Illikkal,  C.  Gianos,  R. 
Singhal, and R. Iyer, “Cache QoS: From concept to reality in the Intel Xeon processor E5-2600 v3 product family,” in 2016 IEEE Inter-
national  Symposium  on  High  Performance  Computer  Architecture 
(HPCA), 2016, pp. 657–668. 

[86]  L. Funaro, O. A. Ben-Yehuda, and A. Schuster, “Ginseng: Market-
Driven LLC Allocation,” in 2016 USENIX Annual Technical Con-
ference (USENIX ATC 16), 2016, pp. 295–308. 

[87]  P.  J.  Denning,  “The  working  set  model  for  program  behavior,” 

Commun. ACM, vol. 11, no. 5, pp. 323–333, 1968. 

[88]  R. L. Mattson, J. Gecsei, D. R. Slutz, and I. L. Traiger, “Evaluation 
techniques for storage hierarchies,” IBM Syst. J., vol. 9, no. 2, pp. 
78–117, 1970. 

[89]  J.  Wires,  S.  Ingram,  Z.  Drudi,  N.  J.  A.  Harvey,  and  A.  Warfield, 
“Characterizing  Storage  Workloads  with  Counter  Stacks,”  in  11th 
USENIX Symposium on Operating Systems Design and Implemen-
tation (OSDI 14), 2014, pp. 335–349. 
