[1] L. Backstrom, D. Huttenlocher, J. Kleinberg, and X. Lan.
Group formation in large social networks: Membership,
growth, and evolution. In ACM SIGKDD Conference on Knowledge Discovery and Data Mining, pages 44-54, 2006.

[2] P. Boldi and S. Vigna. The WebGraph framework I: Compression techniques. In WWW, pages 595-601, 2004.

[3] K. M. Chandy and L. Lamport. Distributed snapshots: Determining global states of distributed systems. ACM TOCS,
3(1):63-75, Feb. 1985.

[4] A. Ching, S. Edunov, M. Kabiljo, D. Logothetis, and
S. Muthukrishnan. One trillion edges: graph processing at
facebook-scale. In Proc. VLDB Endowment, 2015.

[5] E. N. M. Elnozahy, L. Alvisi, Y.-M. Wang, and D. B. Johnson.
A survey of rollback-recovery protocols in message-passing
systems. ACM Computing Surveys, 34(3):375—-408, Sept. 2002.

[6] A. Farahat, T. LoFaro, J. C. Miller, G. Rae, and L. A. Ward.
Authority rankings from hits, pagerank, and salsa: Existence,
uniqueness, and effect of initialization. SZAM Jornal of
Scientific Computing, 27(4):1181-1201, Nov. 2005.

[7] J. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J.
Franklin, and I. Stoica. GraphX: Graph processing in a
distributed dataflow framework. In USENIX OSDI, pages
599-613, 2014.

[8] M. Han and K. Daudjee. Giraph unchained: Barrierless asynchronous parallel execution in pregel-like graph processing
systems. Proc. VLDB Endowment, 8(9):950-961, May 2015.

[9] Harshvardhan, A. Fidel, N. M. Amato, and L. Rauchwerger.
Kla: A new algorithmic paradigm for parallel graph computations. In PACT, pages 27-38, New York, NY, 2014.

[10] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed. Zookeeper:
Wait-free coordination for internet-scale systems. In USENIX
ATC, pages 11-11, Berkeley, CA, 2010.

[11] H. Kwak, C. Lee, H. Park, and S. Moon. What is Twitter, a
social network or a news media? In WWW, 2010.

[12] Y¥. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and
J. M. Hellerstein. Distributed graphlab: A framework for
machine learning and data mining in the cloud. Proc. VLDB
Endowment, 5(8):716-727, Apr. 2012.

[13] G. Malewicz, M. H. Austern, A. J. C. Bik, J. C. Dehnert,
I. Horn, N. Leiser, G. Czajkowski, and G. Inc. Pregel: A
system for large-scale graph processing. In ACM SIGMOD,
pages 135-146, 2010.

[14] D. Manivannan and M. Singhal. Quasi-synchronous checkpointing: Models, characterization, and classification. JEEE
TPDS, 10(7):703-713, 1999.

[15] D. Ongaro, S. M. Rumble, R. Stutsman, J. Ousterhout, and
M. Rosenblum. Fast crash recovery in ramcloud. In ACM
SOSP, pages 29-41, New York, NY, USA, 2011. ACM.

[16] L. Page, S. Brin, R. Motwani, and T. Winograd. The PageRank
citation ranking: Bringing order to the web. Technical report,
Stanford University, 1998.

[17] R. Power and J. Li. Piccolo: Building fast, distributed programs
with partitioned tables. In USENIX OSDI, pages 293-306,
Berkeley, CA, USA, 2010.

[18] M. Pundir, L. M. Leslie, I. Gupta, and R. H. Campbell. Zorro:
Zero-cost reactive failure recovery in distributed graph processing. In ACM SoCC, pages 195-208, 2015.

[19] S. Salihoglu and J. Widom. GPS: A graph processing system.
In Scientific and Statistical Database Management Conference,
pages 22:1-22:12, 2013.

[20] B. Shao, H. Wang, and Y. Li. Trinity: A distributed graph
engine on a memory cloud. In ACM SIGMOD, pages 505-516,
2013.

[21] Y. Shen, G. Chen, H. V. Jagadish, W. Lu, B. C. Ooi, and B. M.
Tudor. Fast failure recovery in distributed graph processing
systems. Proc. VLDB Endowment, 8(4):437-448, Dec. 2014.

[22] L. G. Valiant. A bridging model for parallel computation.
CACM, 33(8):103-111, Aug. 1990.

[23] H. Cui, J. Cipar, Q. Ho, J.K. Kim, S, Lee, A. Kumar,
J. Wei, W. Dai, G.R. Ganger, P.B. Gibbons, G.A. Gibson, and
E.P. Xing. Exploiting Bounded Staleness to Speed Up Big
Data Analytics. In USENIX ATC, pages 37-48, 2014.

[24] K. Vora, G. Xu, and R. Gupta. Load the Edges You Need: A
Generic I/O Optimization for Disk-based Graph Processing. In
USENIX ATC, pages 507-522, 2016.

[25] K. Vora, S. C. Koduru, and R. Gupta. ASPIRE: Exploiting
Asynchronous Parallelism in Iterative Algorithms using a
Relaxed Consistency based DSM. In OOPSLA, pages 861878, 2014.

[26] Q. Ho, J. Cipar, H. Cui, $. Lee, J.K. Kim, P.B. Gibbons,
G.A. Gibson, G. Ganger, and E.P. Xing. More effective
distributed ml via a stale synchronous parallel parameter server.
In NIPS, pages 1223-1231, 2013.

[27] G. Wang, W. Xie, A. Demers, and J. Gehrke. Asynchronous
large-scale graph processing made easy. In Conference on
Innovative Data Systems Research (CIDR), 2013.

[28] P. Wang, K. Zhang, R. Chen, and H. Chen. Replication-based
fault-tolerance for large-scale graph processing. In IEEE/IFIP
DSN, pages 562-573, 2014.

[29] J. W. Young. A first order approximation to the optimum
checkpoint interval. CACM, 17(9):530-531, Sept. 1974.

[30] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley, M. J. Franklin, S. Shenker, and I. Stoica. Resilient
distributed datasets: A fault-tolerant abstraction for in-memory
cluster computing. In USENIX NSDI, pages 2-2, 2012.

[31] ZeroMQ. http://zeromq.org/.

[32] Y. Zhang, Q. Gao, L. Gao, and C. Wang. Accelerate largescale iterative computation through asynchronous accumulative
updates. In ScienceCloud, 2012.

[33] X. Zhu and Z. Ghahramani. Learning from labeled and
unlabeled data with label propagation. Technical Report
CALD-02-107, Carnegie Mellon University, 2002.