[1] Amazon Elasticache. aws.amazon.com/
elasticache/.
[2] Intel
R OptaneTM Technology. http:
//www.intel.com/content/www/us/
en/architecture-and-technology/
intel-optane-technology.html.
[3] Memcached. code.google.com/p/memcached/.
[4] Memcachier. www.memcachier.com.
[5] Redis Labs. www.redislabs.com.
[6] A. Aghayev and P. Desnoyers. Log-structured cache:
Trading hit-rate for storage performance (and winning) in mobile devices. In Proceedings of the
1st Workshop on Interactions of NVM/FLASH with
Operating Systems and Workloads, INFLOW ’13,
pages 7:1–7:7, New York, NY, USA, 2013. ACM.
[7] O. Agmon Ben-Yehuda, M. Ben-Yehuda, A. Schuster, and D. Tsafrir. The rise of raas: the resourceas-a-service cloud. Communications of the ACM,
57(7):76–84, 2014.
[8] O. Agmon Ben-Yehuda, E. Posener, M. Ben-Yehuda,
A. Schuster, and A. Mu’alem. Ginseng: Marketdriven memory allocation. SIGPLAN Not., 49(7):41–
52, Mar. 2014.
[9] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and
M. Paleczny. Workload analysis of a large-scale keyvalue store. In ACM SIGMETRICS Performance
Evaluation Review, volume 40, pages 53–64. ACM,
2012.
[10] N. Beckmann and D. Sanchez. Bridging theory and
practice in cache replacement. 2015.
[11] N. Beckmann and D. Sanchez. Modeling cache
performance beyond LRU. HPCA-22, 2016.
[12] N. Beckmann and D. Sanchez. Maximizing cache
performance under uncertainty. In High Performance Computer Architecture (HPCA), 2017 IEEE
International Symposium on, pages 109–120. IEEE,
2017.
[13] O. A. Ben-Yehuda, M. Ben-Yehuda, A. Schuster,
and D. Tsafrir. The Resource-as-a-Service (RaaS)
cloud. In 4th USENIX Workshop on Hot Topics
in Cloud Computing (HotCloud 12), Boston, MA.
USENIX.
[14] D. S. Berger, R. K. Sitaraman, and M. HarcholBalter. AdaptSize: Orchestrating the hot object
memory cache in a content delivery network. In
14th USENIX Symposium on Networked Systems
Design and Implementation (NSDI 17), pages 483–
498, Boston, MA, 2017. USENIX Association.
[15] T. Blackwell, J. Harris, and M. I. Seltzer. Heuristic
cleaning algorithms in log-structured file systems.
In USENIX, pages 277–288, 1995.
[16] N. Bronson. Personal Communication, 2016.
[17] L. Cherkasova. Improving WWW proxies performance with greedy-dual-size-frequency caching policy. Hewlett-Packard Laboratories, 1998.
[18] A. Cidon, A. Eisenman, M. Alizadeh, and S. Katti.
Dynacache: Dynamic cloud caching. In 7th USENIX
Workshop on Hot Topics in Cloud Computing (HotCloud 15), Santa Clara, CA, July 2015. USENIX
Association.
[19] A. Cidon, A. Eisenman, M. Alizadeh, and S. Katti.
Cliffhanger: Scaling performance cliffs in web memory caches. In 13th USENIX Symposium on Networked Systems Design and Implementation (NSDI
16), pages 379–392, Santa Clara, CA, Mar. 2016.
USENIX Association.
[20] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and R. Sears. Benchmarking Cloud Serving
Systems with YCSB. In Proceedings of the 1st ACM
Symposium on Cloud Computing, SoCC ’10, pages
143–154, New York, NY, USA, 2010. ACM.
[21] J. Dean and L. A. Barroso. The Tail at Scale. Communications of the ACM, 56:74–80, 2013.
[22] A. Eisenman, A. Cidon, E. Pergament,
O. Haimovich, R. Stutsman, M. Alizadeh,
and S. Katti. Flashield: a key-value cache that
minimizes writes to flash. CoRR, abs/1702.02588,
2017.
[23] B. Fan, D. G. Andersen, and M. Kaminsky. MemC3:
Compact and concurrent MemCache with dumber
caching and smarter hashing. In Proceedings of the
10th USENIX Conference on Networked Systems Design and Implementation, NSDI’13, pages 371–384,
Berkeley, CA, USA, 2013. USENIX Association.
[24] B. Fitzpatrick. Distributed caching with Memcached. Linux journal, 2004(124):5, 2004.
[25] A. Ghodsi, M. Zaharia, B. Hindman, A. Konwinski, S. Shenker, and I. Stoica. Dominant resource
fairness: Fair allocation of multiple resource types.
In Proceedings of the 8th USENIX Conference on
Networked Systems Design and Implementation,
NSDI’11, pages 323–336, Berkeley, CA, USA,
2011. USENIX Association.
[26] A. Ghodsi, M. Zaharia, S. Shenker, and I. Stoica.
Choosy: Max-min fair sharing for datacenter jobs
with constraints. In Proceedings of the 8th ACM European Conference on Computer Systems, EuroSys
’13, pages 365–378, New York, NY, USA, 2013.
ACM.
[27] R. Iyer, L. Zhao, F. Guo, R. Illikkal, S. Makineni,
D. Newell, Y. Solihin, L. Hsu, and S. Reinhardt.
QoS policies and architecture for cache/memory
in CMP platforms. In Proceedings of the 2007
ACM SIGMETRICS International Conference on
Measurement and Modeling of Computer Systems,
SIGMETRICS ’07, pages 25–36, New York, NY,
USA, 2007. ACM
[28] S. Jiang and X. Zhang. LIRS: An efficient low interreference recency set replacement policy to improve
buffer cache performance. SIGMETRICS Perform.
Eval. Rev., 30(1):31–42, June 2002.
[29] T. Johnson and D. Shasha. 2Q: A low overhead
high performance buffer management replacement
algorithm. In VLDB’94, Proceedings of 20th International Conference on Very Large Data Bases,
September 12-15, 1994, Santiago de Chile, Chile,
pages 439–450, 1994.
[30] H. Kasture and D. Sanchez. Ubik: Efficient cache
sharing with strict QoS for latency-critical workloads. In Proceedings of the 19th International Conference on Architectural Support for Programming
Languages and Operating Systems, ASPLOS ’14,
pages 729–742, New York, NY, USA, 2014. ACM.
[31] S. Kim, D. Chandra, and Y. Solihin. Fair cache
sharing and partitioning in a chip multiprocessor architecture. In Proceedings of the 13th International
Conference on Parallel Architectures and Compilation Techniques, PACT ’04, pages 111–122, Washington, DC, USA, 2004. IEEE Computer Society.
[32] D. Lee, J. Choi, J.-H. Kim, S. H. Noh, S. L. Min,
Y. Cho, and C. S. Kim. On the existence of a spectrum of policies that subsumes the least recently
used (LRU) and least frequently used (LFU) policies. In ACM SIGMETRICS Performance Evaluation Review, volume 27, pages 134–143. ACM,
1999.
[33] D. Lee, J. Choi, J.-H. Kim, S. H. Noh, S. L. Min,
Y. Cho, and C. S. Kim. LRFU: A spectrum of policies that subsumes the least recently used and least
frequently used policies. IEEE transactions on Computers, (12):1352–1361, 2001.
[34] C. Li and A. L. Cox. GD-Wheel: a cost-aware
replacement policy for key-value stores. In Proceedings of the Tenth European Conference on Computer
Systems, page 5. ACM, 2015.
[35] S. Li, H. Lim, V. W. Lee, J. H. Ahn, A. Kalia,
M. Kaminsky, D. G. Andersen, O. Seongil, S. Lee,
and P. Dubey. Architecting to achieve a billion requests per second throughput on a single key-value
store server platform. In Proceedings of the 42nd
Annual International Symposium on Computer Architecture, pages 476–488. ACM, 2015.
[36] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky. MICA: A holistic approach to fast in-memory
key-value storage. In 11th USENIX Symposium
on Networked Systems Design and Implementation
(NSDI 14), pages 429–444, Seattle, WA, Apr. 2014.
USENIX Association.
[37] J. N. Matthews, D. Roselli, A. M. Costello, R. Y.
Wang, and T. E. Anderson. Improving the performance of log-structured file systems with adaptive
methods. In Proceedings of the Sixteenth ACM Symposium on Operating Systems Principles, SOSP ’97,
pages 238–251, New York, NY, USA, 1997. ACM.
[38] N. Megiddo and D. S. Modha. Arc: A self-tuning,
low overhead replacement cache. In FAST, volume 3,
pages 115–130, 2003.
[39] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski,
H. Lee, H. C. Li, R. McElroy, M. Paleczny, D. Peek,
P. Saab, D. Stafford, T. Tung, and V. Venkataramani. Scaling Memcache at Facebook. In Presented
as part of the 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI
13), pages 385–398, Lombard, IL, 2013. USENIX.
[40] E. J. O’neil, P. E. O’neil, and G. Weikum. The
LRU-K page replacement algorithm for database
disk buffering. ACM SIGMOD Record, 22(2):297–
306, 1993.
[41] D. Ongaro, S. M. Rumble, R. Stutsman, J. Ousterhout, and M. Rosenblum. Fast Crash Recovery in
RAMCloud. In Proceedings of the Twenty-Third
ACM Symposium on Operating Systems Principles,
pages 29–41. ACM, 2011.
[42] J. Ousterhout, A. Gopalan, A. Gupta, A. Kejriwal, C. Lee, B. Montazeri, D. Ongaro, S. J. Park,
H. Qin, M. Rosenblum, S. Rumble, R. Stutsman, and
S. Yang. The RAMCloud Storage System. ACM
Transactions on Computer Systems, 33(3):7:1–7:55,
Aug. 2015.
[43] Q. Pu, H. Li, M. Zaharia, A. Ghodsi, and I. Stoica. FairRide: Near-optimal, fair cache sharing. In
13th USENIX Symposium on Networked Systems Design and Implementation (NSDI 16), pages 393–406,
Santa Clara, CA, Mar. 2016. USENIX Association.
[44] M. Rosenblum and J. K. Ousterhout. The design
and implementation of a log-structured file system.
ACM Transactions on Computer Systems (TOCS),
10(1):26–52, 1992.
[45] S. M. Rumble, A. Kejriwal, and J. Ousterhout. Logstructured Memory for DRAM-based Storage. In
FAST, pages 1–16, 2014.
[46] T. Saemundsson, H. Bjornsson, G. Chockler, and
Y. Vigfusson. Dynamic performance profiling of
cloud caches. In Proceedings of the ACM Symposium on Cloud Computing, SOCC ’14, pages 28:1–
28:14, New York, NY, USA, 2014. ACM.
[47] M. Seltzer, K. Bostic, M. K. McKusick, and
C. Staelin. An implementation of a log-structured
file system for UNIX. In Proceedings of the USENIX
Winter 1993 Conference Proceedings on USENIX
Winter 1993 Conference Proceedings, pages 3–3.
USENIX Association, 1993.
[48] M. Seltzer, K. A. Smith, H. Balakrishnan, J. Chang,
S. McMains, and V. Padmanabhan. File system
logging versus clustering: A performance comparison. In Proceedings of the USENIX 1995 Technical
Conference Proceedings, pages 21–21. USENIX Association, 1995.
[49] D. Shue, M. J. Freedman, and A. Shaikh. Performance isolation and fairness for multi-tenant cloud
storage. In Presented as part of the 10th USENIX
Symposium on Operating Systems Design and Implementation (OSDI 12), pages 349–362, Hollywood,
CA, 2012. USENIX.
[50] I. Stefanovici, E. Thereska, G. O’Shea, B. Schroeder,
H. Ballani, T. Karagiannis, A. Rowstron, and
T. Talpey. Software-defined caching: Managing
caches in multi-tenant data centers. In Proceedings
of the Sixth ACM Symposium on Cloud Computing,
pages 174–181. ACM, 2015.
[51] L. Tang, Q. Huang, W. Lloyd, S. Kumar, and K. Li.
RIPQ: Advanced photo caching on flash for Facebook. In 13th USENIX Conference on File and
Storage Technologies (FAST 15), pages 373–386,
Santa Clara, CA, Feb. 2015. USENIX Association.
[52] C. A. Waldspurger. Lottery and stride scheduling:
Flexible proportional-share resource management.
Technical report, Cambridge, MA, USA, 1995.
[53] C. A. Waldspurger. Memory resource management
in VMware ESX server. SIGOPS Oper. Syst. Rev.,
36(SI):181–194, Dec. 2002.
