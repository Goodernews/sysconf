[1] Farhana Aleen and Nathan Clark. 2009. Commutativity Analysis for Software Parallelization: Letting Program Transformations See the Big Picture. In Proceedings of the 14th International Conference on Architectural Support for Programming Languages and Operating Systems (XIV). ACM, New York, NY, USA, 241-252. DOL: http://dx.doi.org/10.1145/1508244.1508273



[2] Miltos Allamanis and Charles Sutton. 2013. Mining Source Code Repositories at Massive Scale using Language Modeling. In

Working Conference on Mining Software Repositories (MSR’13). 207-216.



[3] Glenn Ammons, Rastislav Bodik, and James R. Larus. 2002. Mining Specifications. In Proceedings of the 29th ACM SIGPLAN

SIGACT Symposium on Principles of Programming Languages (POPL ’02). ACM, 4-16. DOL: http://dx.doi.org/10.1145/

503272.503275



[4] Raymond P.L. Buse and Westley R. Weimer. 2008. Automatic Documentation Inference for Exceptions. In Proceedings of the

2008 International Symposium on Software Testing and Analysis (ISSTA ’08). ACM, New York, NY, USA, 273-282. DOL:

http://dx.doi.org/10.1145/1390630.1390664



[5] Patrick Cousot and Radhia Cousot. 1977. Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs

by Construction or Approximation of Fixpoints. In Proceedings of the 4th ACM SIGACT-SIGPLAN Symposium on Principles

of Programming Languages (POPL ’77). ACM, New York, NY, USA, 238-252. DOI : http://dx.doi.org/10.1145/512950.512973



[6] Patrick Cousot, Radhia Cousot, Manuel Fahndrich, and Francesco Logozzo. 2013. Automatic Inference of Necessary

Preconditions. In in Proceedings of the 14th Conference on Verification, Model Checking and Abstract Interpretation

(VMCAI’13). Springer Verlag. http://research.microsoft.com/apps/pubs/default.aspx?id=174239



[7] Patrick Cousot, Radhia Cousot, and Francesco Logozzo. 2011. Precondition Inference from Intermittent Assertions and

Application to Contracts on Collections. In Proceedings of the 12th International Conference on Verification, Model Checking,

and Abstract Interpretation (VMCAT’11). Springer-Verlag, 150-168. http://dl.acm.org/citation.cfm?id=1946284. 1946296



[8] Valentin Dallmeier, Nikolai Knopp, Christoph Mallon, Sebastian Hack, and Andreas Zeller. 2010. Generating Test Cases for

Specification Mining. In Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA 10).

ACM, New York, NY, USA, 85-96. DOI: http://dx.doi.org/10.1145/1831708.1831719



[9] Valentin Dallmeier, Christian Lindig, and Andreas Zeller. 2005. Lightweight Defect Localization for Java. In Proceedings

of the 19th European Conference on Object-Oriented Programming (ECOOP’05). Springer-Verlag, 528-550. DOI: http:

//dx.doi.org/10.1007/11531142_23



[10] Dawson Engler, David Yu Chen, Seth Hallem, Andy Chou, and Benjamin Chelf. 2001. Bugs As Deviant Behavior: A

General Approach to Inferring Errors in Systems Code. SIGOPS Oper. Syst. Rev. 35, 5 (Oct. 2001), 57-72. DOI: http:

//dx.doi.org/10.1145/502059.502041



[11] Michael D. Ernst, Jake Cockrell, William G. Griswold, and David Notkin. 1999. Dynamically Discovering Likely Program

Invariants to Support Program Evolution. In Proceedings of the 21st International Conference on Software Engineering

(ICSE’99). ACM, 213-224, DOI :http://dx.doi.org/10.1145/302405,302467



[12] Gordon Fraser and Andreas Zeller. 2011. Generating Parameterized Unit Tests. In Proceedings of the 2011 International

Symposium on Software Testing and Analysis (ISSTA ’11). ACM, New York, NY, USA, 364-374. DOL: http://dx.doi.org/10.

1145/2001420.2001464



[13] Mark Gabel and Zhendong Su. 2008. Javert: Fully Automatic Mining of General Temporal Properties from Dynamic Traces.

In Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering (SIGSOFT

°08/FSE-16). ACM, 339-349, DOI :http://dx.doi.org/10.1145/1453101.1453150



[14] Mark Gabel and Zhendong Su. 2012. Testing Mined Specifications. In Proceedings of the ACM SIGSOFT 20th International

Symposium on the Foundations of Software Engineering (FSE ’12). ACM, New York, NY, USA, Article 4, 11 pages. DOL:

http://dx.doi.org/10.1145/2393596.2393598



[15] Natalie Gruska, Andrzej Wasylkowski, and Andreas Zeller. 2010. Learning from 6,000 Projects: Lightweight Cross-project

Anomaly Detection. In Proceedings of the 19th International Symposium on Software Testing and Analysis (ISSTA ’10).

ACM, 119-130. DOI : http://dx.doi.org/10.1145/1831708,183 1723



[16] Anthony Hall. 1990. Seven Myths of Formal Methods. IEEE Software 7,5 (Sept. 1990), 11-19.



[17] Gary T. Leavens and Curtis Clifton. 2008. Lessons from the JML Project. In Verified Software: Theories, Tools, Experiments,

Zurich, Switzerland, Bertrand Meyer and Jim Woodcock (Eds.), Vol. 4171. 134-143.



[18] Gary T. Leavens and William E. Weihl. 1995. Specification and verification of object-oriented programs using supertype

ABSTRACT

---

ion. Acta Informatica 32 (August 1995), 705-778. Issue 8.



[19] Chang Liu, En Ye, and Debra J. Richardson. 2006. Software Library Usage Pattern Extraction Using a Software Model

Checker. In Proceedings of the 21st IEEE/ACM International Conference on Automated Software Engineering (ASE ’06). IEEE

Computer Society, 301-304. DOI : http://dx.doi.org/10.1109/ASE.2006.63



[20] Benjamin Livshits and Thomas Zimmermann. 2005. DynaMine: Finding Common Error Patterns by Mining Software

Revision Histories. In Proceedings of the 10th European Software Engineering Conference Held Jointly with 13th ACM

SIGSOFT International Symposium on Foundations of Software Engineering (ESEC/FSE-13). ACM, New York, NY, USA,

296-305. DOI : http://dx.doi.org/10.1145/1081706.1081754



[21] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 83. Publication date: October 2017.

Exploiting Implicit Beliefs to Resolve Sparse Usage Problem ... 83:29



[22] David Lo and Shahar Maoz. 2009. Mining Hierarchical Scenario-Based Specifications. In Proceedings of the 2009 IEEE/ACM

International Conference on Automated Software Engineering (ASE ’09). IEEE Computer Society, 359-370. DOI: http:

//dx.doi.org/10,1109/ASE.2009.19



[23] Amir Michail. 2000. Data Mining Library Reuse Patterns Using Generalized Association Rules. In Proceedings of the 22nd

International Conference on Software Engineering (ICSE’00). ACM, 167-176. DOI :http://dx.doi.org/10.1145/337180.337200



[24] Anh Cuong Nguyen and Siau-Cheng Khoo. 2011. Extracting Significant Specifications from Mining Through Mutation

Testing. In Proceedings of the 13th International Conference on Formal Methods and Software Engineering (ICFEM’11).

Springer-Verlag, Berlin, Heidelberg, 472-488. http://dl.acm.org/citation.cfm?id=2075089.2075130



[25] Hoan Anh Nguyen, Robert Dyer, Tien N. Nguyen, and Hridesh Rajan. 2014. Mining Preconditions of APIs in Large-scale

Code Corpus. In Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering

(FSE 2014), ACM, New York, NY, USA, 166-177. DOI: http://dx.doi.org/10.1145/2635868.2635924



[26] Tung Thanh Nguyen, Hoan Anh Nguyen, Nam H. Pham, Jafar M. Al-Kofahi, and Tien N. Nguyen. 2009. Graph-based Mining

of Multiple Object Usage Patterns. In Proceedings of the Symposium on Foundations of Software Engineering (ESEC/FSE

’09). ACM, 383-392, DOI : http://dx.doi.org/10.1145/1595696.1595767



[27] Corina S. Pasareanu, Peter C. Mehlitz, David H. Bushnell, Karen Gundy-Burlet, Michael Lowry, Suzette Person, and Mark

Pape. 2008. Combining Unit-Level Symbolic Execution and System-Level Concrete Execution for Testing Nasa Software.

In Proceedings of the 2008 International Symposium on Software Testing and Analysis (ISSTA ’08). ACM, New York, NY,

USA, 15-26. DOL: http://dx.doi.org/10.1145/1390630.1390635



[28] Corina S, Pasdreanu and Neha Rungta. 2010. Symbolic PathFinder: Symbolic Execution of Java Bytecode. In Proceedings of

the IEEE/ACM International Conference on Automated Software Engineering (ASE ’10). ACM, New York, NY, USA, 179-180.

DOI: http://dx.doi.org/10.1145/1858996.1859035



[29] Michael Pradel and Thomas R. Gross. 2009. Automatic Generation of Object Usage Specifications from Large Method

Traces. In Proceedings of the 2009 IEEE/ACM International Conference on Automated Software Engineering (ASE ’09). IEEE

Computer Society, 371-382. DOI : http://dx.doi.org/10.1109/ASE.2009.60



[30] Hridesh Rajan, Tien N. Nguyen, Gary T. Leavens, and Robert Dyer. 2015. Inferring Behavioral Specifications from Largescale Repositories by Leveraging Collective Intelligence. In Proceedings of the 37th International Conference on Software

Engineering - Volume 2 (ICSE ’15). IEEE Press, Piscataway, NJ, USA, 579-582. http://dl.acm.org/citation.cfm?id=2819009.

2819107



[31] Murali Krishna Ramanathan, Ananth Grama, and Suresh Jagannathan. 2007. Static Specification Inference Using Predicate

Mining. In Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI

’07). ACM, 123-134, DOI : http://dx.doi.org/10.1145/1250734,1250749



[32] Manos Renieris, Sébastien Chan-Tin, and Steven P. Reiss. 2004. Elided Conditionals. In Proceedings of the 5th ACM SIGPLANSIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE ’04). ACM, New York, NY, USA, 52-57.

DOI: http://dx.doi.org/10.1145/996821.996839



[33] Martin C. Rinard and Pedro C. Diniz. 1997. Commutativity Analysis: A New Analysis Technique for Parallelizing Compilers.

ACM Trans. Program. Lang. Syst. 19, 6 (Nov. 1997), 942-991. DOI: http://dx.doi.org/10.1145/267959.269969



[34] Joseph R. Ruthruff, Sebastian Elbaum, and Gregg Rothermel. 2006. Experimental Program Analysis: A New Program

Analysis Paradigm. In Proceedings of the 2006 International Symposium on Software Testing and Analysis (ISSTA ’06). ACM,

New York, NY, USA, 49-60. DOI : http://dx.doi.org/10.1145/1146238,.1146245



[35] Olin G. Shivers. 1991. Control-flow analysis of higher-order languages of taming lambda. (1991).



[36] Andrzej Wasylkowski, Andreas Zeller, and Christian Lindig. 2007. Detecting Object Usage Anomalies. In Proceedings of the

Symposium on Foundations of Software Engineering (ESEC-FSE ’07). ACM, 35-44. DOI : http://dx.doi.org/10.1145/1287624.

1287632



[37] Yi Wei, Carlo A. Furia, Nikolay Kazmin, and Bertrand Meyer. 2011. Inferring Better Contracts. In Proceedings of the 33rd

International Conference on Software Engineering (ICSE ’11). ACM, 191-200. DOI: http://dx.doi.org/10.1145/1985793.

1985820



[38] Westley Weimer and George C. Necula. 2005. Mining Temporal Specifications for Error Detection. In Proceedings of the 11th

International Conference on Tools and Algorithms for the Construction and Analysis of Systems (TACAS’05). Springer-Verlag,

461-476. DOI: http://dx.doi.org/10.1007/978-3-540-31980-1_30



[39] Chadd C. Williams and Jeffrey K. Hollingsworth. 2005. Automatic Mining of Source Code Repositories to Improve Bug

Finding Techniques. IEEE Trans. Softw. Eng. 31, 6 (2005), 466-480.



[40] Tao Xie and David Notkin. 2004. Mutually Enhancing Test Generation and Specification Inference. In Formal Approaches to

Software Testing: Third International Workshop on Formal Approaches to Testing of Software (FATES ’03). Springer Berlin

Heidelberg, Berlin, Heidelberg, 60-69. DOI: http://dx.doi.org/10.1007/978-3-540-24617-6_5



[41] Jinlin Yang, David Evans, Deepali Bhardwaj, Thirumalesh Bhat, and Manuvir Das. 2006. Perracotta: Mining Temporal API

Rules from Imperfect Traces. In Proceedings of the 28th International Conference on Software Engineering (ICSE ’06). ACM,

282-291. DOI: http://dx.doi.org/10.1145/1134285, 1134325



[42] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 83. Publication date: October 2017.
