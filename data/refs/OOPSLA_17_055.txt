[1] Gavin Bierman, Martin Abadi, and Mads Torgersen. 2014. Understanding typescript. In European Conference on ObjectOriented Programming. Springer, 257-281.



[2] Bard Bloom, John Field, Nathaniel Nystrom, Johan Ostlund, Gregor Richards, Rok StrniSa, Jan Vitek, and Tobias Wrigstad.

2009. Thorn: Robust Concurrent Scripting on the JVM. In Proceedings of the 24th ACM SIGPLAN Conference Companion

on Object Oriented Programming Systems Languages and Applications (OOPSLA ’09). ACM, New York, NY, USA, 789-790.

https://doi.org/10.1145/1639950.1640016



[3] Carl Friedrich Bolz, Antonio Cuni, Maciej Fijalkowski, and Armin Rigo. 2009. Tracing the meta-level: PyPy’s tracing

JIT compiler. In Proceedings of the 4th workshop on the Implementation, Compilation, Optimization of Object-Oriented

Languages and Programming Systems, ACM, 18-25.



[4] C. Chambers, D. Ungar, and E. Lee. 1989. An Efficient Implementation of SELF a Dynamically-typed Object-oriented

Language Based on Prototypes. In Conference Proceedings on Object-oriented Programming Systems, Languages and

Applications (OOPSLA ’89). ACM, New York, NY, USA, 49-70. https://doi.org/10.1145/74877.74884



[5] Maxime Chevalier-Boisvert and Marc Feeley. 2015. Simple and Effective Type Check Removal through Lazy Basic Block

Versioning. In 29th European Conference on Object-Oriented Programming (ECOOP 2015) (Leibniz International Proceedings

in Informatics (LIPIcs)), John Tang Boyland (Ed.), Vol. 37. Schloss Dagstuhl—Leibniz-Zentrum fuer Informatik, Dagstuhl,

Germany, 101-123. https://doi.org/10.4230/LIPIcs ECOOP.2015.101



[6] Maxime Chevalier-Boisvert and Marc Feeley. 2016. Interprocedural Type Specialization of JavaScript Programs Without Type

Analysis. In 30th European Conference on Object-Oriented Programming (ECOOP 2016) (Leibniz International Proceedings in

Informatics (LIPIcs)), Shriram Krishnamurthi and Benjamin S. Lerner (Eds.), Vol. 56. Schloss Dagstuhl—Leibniz-Zentrum

fuer Informatik, Dagstuhl, Germany, 7:1—7:24. https://doi.org/10.4230/LIPIcs ECOOP.2016.7



[7] Robert Bruce Findler and Matthias Felleisen. 2001. Contract Soundness for Object-oriented Languages. In Proceedings of the

16th ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications (OOPSLA ’01).

ACM, New York, NY, USA, 1-15. https://doi.org/10.1145/504282.504283



[8] Robert Bruce Findler and Matthias Felleisen. 2002. Contracts for Higher-order Functions. In Proceedings of the Seventh

ACM SIGPLAN International Conference on Functional Programming (ICFP ’02). ACM, New York, NY, USA, 48-59.

https://doi.org/10.1145/581478,.581484



[9] Andreas Gal, Brendan Eich, Mike Shaver, David Anderson, David Mandelin, Mohammad R. Haghighat, Blake Kaplan,

Graydon Hoare, Boris Zbarsky, Jason Orendorff, Jesse Ruderman, Edwin W. Smith, Rick Reitmaier, Michael Bebenita,

Mason Chang, and Michael Franz. 2009. Trace-based Just-in-time Type Specialization for Dynamic Languages. In

Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’09). ACM,

New York, NY, USA, 465-478. https://doi.org/10.1145/1542476.1542528



[10] Arjun Guha, Jacob Matthews, Robert Bruce Findler, and Shriram Krishnamurthi. 2007. Relationally-parametric polymorphic

contracts. In Proceedings of the 2007 symposium on Dynamic languages. ACM, 29-40.



[11] Aseem Rastogi, Nikhil Swamy, Cédric Fournet, Gavin Bierman, and Panagiotis Vekris. 2015. Safe &#38; Efficient Gradual

Typing for TypeScript. In Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL 15). ACM, New York, NY, USA, 167-180. https://doi.org/10.1145/2676726.2676971



[12] Gregor Richards, Francesco Zappa Nardelli, and Jan Vitek. 2015. Concrete types for TypeScript. In LIPIcs-Leibniz International

Proceedings in Informatics, Vol. 37. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.



[13] Jeremy G Siek, Michael M Vitousek, Matteo Cimini, and John Tang Boyland. 2015a. Refined criteria for gradual typing. In

LiPics-Leibniz International Proceedings in Informatics, Vol. 32. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.



[14] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 55. Publication date: October 2017.

The VM Already Knew That 55:27



[15] Jeremy G Siek, Michael M Vitousek, Matteo Cimini, Sam Tobin-Hochstadt, and Ronald Garcia. 2015b. Monotonic references

for efficient gradual typing. In European Symposium on Programming Languages and Systems. Springer, 432-456.



[16] Jeremy G. Siek and Philip Wadler. 2010. Threesomes, with and Without Blame. In Proceedings of the 37th Annual ACM

SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’10). ACM, New York, NY, USA, 365-376.

https://doi.org/10.1145/1706299.1706342



[17] Asumu Takikawa, Daniel Feltey, Ben Greenman, Max S. New, Jan Vitek, and Matthias Felleisen. 2016. Is Sound Gradual

Typing Dead?. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL ’16). ACM, New York, NY, USA, 456-468. https://doi.org/10.1145/2837614.2837630



[18] Sam Tobin-Hochstadt and Matthias Felleisen. 2008. The Design and Implementation of Typed Scheme. In Proceedings of the

35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’08). ACM, New York,

NY, USA, 395-406. https://doi.org/10.1145/1328438.1328486



[19] Michael M. Vitousek, Andrew M. Kent, Jeremy G. Siek, and Jim Baker. 2014. Design and Evaluation of Gradual Typing for

Python. In Proceedings of the 10th ACM Symposium on Dynamic Languages (DLS ’14). ACM, New York, NY, USA, 45-56.

https://doi.org/10.1145/2661088.2661101



[20] Philip Wadler and Robert Bruce Findler. 2009. Well-typed programs canaAZt be blamed. In European Symposium on

Programming. Springer, 1-16.



[21] Andreas W68, Christian Wirth, Daniele Bonetta, Chris Seaton, Christian Humer, and Hanspeter Méssenbick. 2014. An object

storage model for the truffle language implementation framework. In Proceedings of the 2014 International Conference on

Principles and Practices of Programming on the Java platform: Virtual machines, Languages, and Tools. ACM, 133-144.



[22] Tobias Wrigstad, Francesco Zappa Nardelli, Sylvain Lebresne, Johan Ostlund, and Jan Vitek. 2010. Integrating Typed and

Untyped Code in a Scripting Language. In Proceedings of the 37th Annual ACM SIGPLAN-SIGACT Symposium on Principles

of Programming Languages (POPL ’10), ACM, New York, NY, USA, 377-388. https://doi.org/10.1145/1706299,1706343



[23] Thomas Wiirthinger, Christian Wimmer, Andreas W68, Lukas Stadler, Gilles Duboscq, Christian Humer, Gregor Richards,

Doug Simon, and Mario Wolczko. 2013. One VM to rule them all. In Proceedings of the 2013 ACM international symposium

on New ideas, new paradigms, and reflections on programming & software. ACM, 187-204.



[24] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 55. Publication date: October 2017.
