
REFERENCES

[1] P. C. Kocher, “Timing Attacks on Implementations of DiffieHellman, RSA, DSS, and Other Systems,” in /6th Annual
International Cryptology Conference (CRYPTO’96), 1996.
[2] M. K. Reiter, “Side channels in multi-tenant environments,” in
Proceedings of the 2015 ACM Workshop on Cloud Computing
Security Workshop, 2015.

[3] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey,
you, get off of my cloud: Exploring information leakage in
third-party compute clouds,” in Proceedings of the 16th ACM
Conference on Computer and Communications Security, 2009.

[4] D. Brumley and D. Boneh, “Remote timing attacks are practical,”
in Proceedings of the 12th Annual USENIX Security Symposium,
(Berkeley, CA, USA), USENIX Association, 2003.

[5] B. Canvel, A. Hiltgen, S. Vaudenay, and M. Vuagnoux,
Password Interception in a SSL/TLS Channel. 2003.

[6] N. J. AlFardan and K. G. Paterson, “Lucky thirteen: Breaking
the TLS and DTLS record protocols,” in 2013 IEEE Symposium
on Security and Privacy, 2013.

[7] D. Gullasch, E. Bangerter, and S. Krenn, “Cache games —
bringing access-based cache attacks on aes to practice,” in
Proceedings of the 2011 IEEE Symposium on Security and
Privacy, 2011.

[8] A. Haeberlen, B. C. Pierce, and A. Narayan, “Differential
privacy under fire,” in Proceedings of the 20th Annual USENIX
Security Symposium, 2011.

[9] M. Andrysco, D. Kohlbrenner, K. Mowery, R. Jhala, S. Lerner,
and H. Shacham, “On subnormal floating point and abnormal
timing,” in 2015 IEEE Symposium on Security and Privacy,
2015.

[10] E. W. Felten and M. A. Schneider, “Timing attacks on
web privacy,” in Proceedings of the 7th ACM Conference on
Computer and Communications Security, 2000.

[11] A. Bortz and D. Boneh, “Exposing private information
by timing web applications,” in Proceedings of the 16th
International Conference on World Wide Web, 2007.

[12] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Crosstenant side-channel attacks in paas clouds,” in Proceedings of
the 2014 ACM Conference on Computer and Communications
Security, 2014.

[13] J. C. B. Almeida, M. Barbosa, G. Barthe, F Dupressoir, and
M. Emmi, “Verifying constant-time implementations,” in 25th
USENIX Security Symposium, (Austin, TX), Aug. 2016.

[14] B. Rodrigues, F. M. Quintao Pereira, and D. F. Aranha, “Sparse
representation of implicit flows with applications to side-channel
detection,” in Proceedings of the 25th International Conference
on Compiler Construction, 2016.

[15] G. Barthe, G. Betarte, J. Campo, C. Luna, and D. Pichardie,
“System-level non-interference for constant-time cryptography,”
in Proceedings of the 2014 ACM Conference on Computer and
Communications Security, 2014.

[16] D. Molnar, M. Piotrowski, D. Schultz, and D. Wagner, “The
program counter security model: Automatic detection and
removal of control-flow side channel attacks,” in Proceedings
of the 8th International Conference on Information Security
and Cryptology, 2006.

[17] A. Askarov, D. Zhang, and A. C. Myers, “Predictive black-box
mitigation of timing channels,” in Proceedings of the 17th ACM
Conference on Computer and Communications Security, 2010.

[18] B. Képf and M. Diirmuth, “A provably secure and efficient
countermeasure against timing attacks,” in Proceedings of the
22nd Annual IEEE Computer Security Foundations Symposium,
July 2009.

[19] M. Hofmann and S. Jost, “Static Prediction of Heap Space
Usage for First-Order Functional Programs,” in 30th ACM Symp.
on Principles of Prog. Langs. (POPL’03), 2003.

[20] J. Hoffmann, K. Aehlig, and M. Hofmann, “Multivariate Amortized Resource Analysis,” in 38th ACM Symp. on Principles of
Prog. Langs. (POPL’11), 2011.

[21] J. Hoffmann, A. Das, and S.-C. Weng, “Towards Automatic
Resource Bound Analysis for OCaml,” in 44th Symposium on
Principles of Programming Languages (POPL’ 17), 2017.

[22] J. Goguen and J. Meseguer, “Security Policies and Security
Models,” in In Proceedings of the 1982 IEEE Symposium on
Security and Privacy, 1982.

[23] J. McLean, “Security models and information flow,” in
Research in Security and Privacy, 1990. Proceedings., 1990
IEEE Computer Society Symposium on, May 1990.

[24] A. C. Myers and B. Liskov, “Complete, safe information
flow with decentralized labels,” in Security and Privacy, 1998.
Proceedings. 1998 IEEE Symposium on, May 1998.

[25] A. C. Myers and B. Liskov, “Protecting privacy using the
decentralized label model,” ACM Trans. Softw. Eng. Methodol.,
vol. 9, pp. 410-442, Oct. 2000.

[26] P. Li and S. Zdancewic, “Downgrading policies and relaxed
noninterference,” in Proceedings of the 32Nd ACM SIGPLANSIGACT Symposium on Principles of Programming Languages,
POPL ’05, (New York, NY, USA), pp. 158-170, ACM, 2005.

[27] R. Harper, Practical Foundations for Programming Languages.
Cambridge University Press, 2012.

[28] Anonymous, “Verifying and Synthesizing Constant-Resource
for double blind reviewing. Available uppon request., 2016.

[29] D. J. Bernstein, “Cache-timing Attacks on AES.” http://cryp.
to/antiforgery/cachetiming-20050414.pdf, 2005.

[30] C. Percival, “Cache missing for fun and profit,” in Proceedings
of BSDCan, 2005.

[31] V. Simonet, “Flow Caml.” http://cristal.inria.fr/~simonet/soft/
flowcaml/, 2003.

[32] F. Pottier and V. Simonet, “Information Flow Inference for ML,”
in In Proceedings of the 29th ACM Symposium on Principles
Of Programming Languages, 2002.

[33] N. Heintze and J. G. Riecke, “The SLam calculus: Programming with secrecy and integrity,” in In Conference Record
of the 25th ACM Symposium on Principles of Programming
Languages, 1998.
[34] D. Volpano, G. Smith, and C. Irvine, “A sound type system
for secure flow analysis,” in Journal of Computer Security,
pp. 167-187, 1996.

[35] R. E. Tarjan, “Amortized Computational Complexity,” SIAM J.
Algebraic Discrete Methods, vol. 6, no. 2, pp. 306-318, 1985.

[36] J. Hoffmann, K. Aehlig, and M. Hofmann, “Multivariate
Amortized Resource Analysis,” ACM Trans. Program. Lang.
Syst., 2012.

[37] S. Jost, K. Hammond, H.-W. Loidl, and M. Hofmann, “Static
Determination of Quantitative Resource Usage for Higher-Order
Programs,” in 37th ACM Symp. on Principles of Prog. Langs.
(POPL’ 10), 2010.

[38] S. Jost, H.-W. Loidl, K. Hammond, N. Scaife, and M. Hofmann, “Carbon Credits for Resource-Bounded Computations
using Amortised Analysis,” in 16th Symp. on Form. Meth.
(FM’09), 2009.

[39] D. Walker, “Substructural Type Systems,” Advanced Topics
in Types and Programming Languages. MIT Press, pp. 3-43,
2002.

[40] D. Zhang, A. Askarov, and A. C. Myers, “Language-Based
Control and Mitigation of Timing Channels,” in In Proceedings
of the SIGPLAN Conference on Programming Language Design
and Implementation, 2012.

[41] B. Képf, L. Mauborgne, and M. Ochoa, “Automatic quantification of cache side-channels,” in Proceedings of the 24th
International Conference on Computer Aided Verification, 2012.

[42] B. Képf and D. Basin, “An information-theoretic model for
adaptive side-channel attacks,” in Proceedings of the 14th ACM
Conference on Computer and Communications Security, 2007.

[43] J. Hoffmann, “RAML Web Site,” 2016. http://raml.co/

[44] M. Sulzmann, M. Miiller, and C. Zenger, “Hindley/Milner
Style Type Systems in Constraint Form,” in Research Report
ACRC-99-009, University of South Australia, School of Computer and Information Science, 1999.

[45] E. Yarrkov, “Cryptanalysis of XXTEA,” 2010.

[46] J. MacQueen, “Some methods for classification and analysis of
multivariate observations,” in Proceedings of the Fifth Berkeley
Symposium on Mathematical Statistics and Probability, Volume
1: Statistics, (Berkeley, Calif.), pp. 281-297, University of
California Press, 1967.

[47] J. Hoffmann and M. Hofmann, “Amortized Resource Analysis
with Polynomial Potential,” in 19th Euro. Symp. on Prog.
(ESOP’ 10), 2010.

[48] J. Hoffmann and Z. Shao, “Type-Based Amortized Resource
Analysis with Integers and Arrays,” in 12th International
Symposium on Functional and Logic Programming (FLOPS’14),
2014.

[49] H. R. SimGes, P. B. Vasconcelos, M. Florido, S. Jost, and
K. Hammond, “Automatic Amortised Analysis of Dynamic
Memory Allocation for Lazy Functional Programs,” in 17th Int.
Conf. on Funct. Prog. (ICFP’12), 2012.

[50] P. B. Vasconcelos, $. Jost, M. Florido, and K. Hammond,
“Type-Based Allocation Analysis for Co-recursion in Lazy
Functional Languages,” in 24th European Symposium on
Programming (ESOP’ 15), 2015.

[51] M. Hofmann and S. Jost, “Type-Based Amortised Heap-Space
Analysis,” in 15th Euro. Symp. on Prog. (ESOP’06), 2006.

[52] M. Hofmann and D. Rodriguez, “Automatic Type Inference
for Amortised Heap-Space Analysis,” in 22nd Euro. Symp. on
Prog. (ESOP’13), 2013.

[53] R. Atkey, “Amortised Resource Analysis with Separation
Logic,” in 19th Euro. Symp. on Prog. (ESOP’10), 2010.

[54] Q. Carbonneaux, J. Hoffmann, T. Ramananandro, and Z. Shao,
“End-to-End Verification of Stack-Space Bounds for C Programs,” in Conf. on Prog. Lang. Design and Impl. (PLDI’ 14),
p. 30, 2014.

[55] Q. Carbonneaux, J. Hoffmann, and Z. Shao, “Compositional
Certified Resource Bounds,” in 36th Conf: on Prog. Lang.
Design and Impl. (PLDI’15), 2015.

[56] T. Nipkow, “Amortized Complexity Verified,” in Interactive
Theorem Proving - 6th International Conference (ITP’15), 2015.

[57] A. Charguéraud and F. Pottier, “Machine-Checked Verification
of the Correctness and Amortized Complexity of an Efficient
Union-Find Implementation,” in Interactive Theorem Proving 6th International Conference (ITP’ 15), 2015.

[58] B. Campbell, “Amortised Memory Analysis using the Depth
of Data Structures,” in 18th Euro. Symp. on Prog. (ESOP’09),
2009.

[59] M. Hofmann and G. Moser, “Amortised Resource Analysis
and Typed Polynomial Interpretations,” in Rewriting and Typed
Lambda Caltculi (RTA-TLCA; 14), 2014.

[60] M. Hofmann and G. Moser, “Multivariate Amortised Resource
Analysis for Term Rewrite Systems,” in 13th International Conference on Typed Lambda Calculi and Applications (TLCA’ 15),
2015.

[61] P. B. Vasconcelos and K. Hammond, “Inferring Costs for

Recursive, Polymorphic and Higher-Order Functional Programs,
in Int. Workshop on Impl. of Funct. Langs. (IFL’03), 2003.

[62] P. Vasconcelos, Space Cost Analysis Using Sized Types. PhD
thesis, School of Computer Science, University of St Andrews,
2008.

[63] U. D. Lago and M. Gaboardi, “Linear Dependent Types
and Relative Completeness,” in 26th IEEE Symp. on Logic
in Computer Science (LICS’11), 2011.

[64] U. D. Lago and B. Petit, “The Geometry of Types,” in 40th
ACM Symp. on Principles Prog. Langs. (POPL’ 13), 2013.

[65] K. Crary and S. Weirich, “Resource Bound Certification,” in
27th ACM Symp. on Principles of Prog. Langs. (POPL’00),
pp. 184-198, 2000.
[66] N. A. Danielsson, “Lightweight Semiformal Time Complexity
Analysis for Purely Functional Data Structures,” in 35th ACM
Symp. on Principles Prog. Langs. (POPL’08), 2008.

[67] E. Cicek, D. Garg, and U. A. Acar, “Refinement Types for
Incremental Computational Complexity,” in 24th European
Symposium on Programming (ESOP’15), 2015.

[68] B. Grobauer, “Cost Recurrences for DML Programs,” in 6th
Int. Conf: on Funct. Prog. (ICFP’01), pp. 253-264, 2001.

[69] R. Benzinger, “Automated Higher-Order Complexity Analysis,”
Theor. Comput. Sci., vol. 318, no. 1-2, pp. 79-103, 2004.

[70] N. Danner, D. R. Licata, and R. Ramyaa, “Denotational Cost
Semantics for Functional Languages with Inductive Types,” in
29th Int. Conf. on Functional Programming (ICFP’ 15), 2012.

[71] M. Avanzini, U. D. Lago, and G. Moser, “Analysing the
Complexity of Functional Programs: Higher-Order Meets
First-Order,” in 29th Int. Conf. on Functional Programming
(ICFP’15), 2012.

[72] D. E. Alonso-Blas and S. Genaim, “On the limits of the
classical approach to cost analysis,” in 19th Int. Static Analysis
Symp. (SAS’12), 2012.

[73] A. Flores-Montoya and R. Hahnle, “Resource Analysis of
Complex Programs with Cost Equations,” in Programming
Languages and Systems - 12th Asian Symposiu (APLAS’ 14),
2014.

[74] E. Albert, J. C. Fernandez, and G. Romén-Diez, “Noncumulative Resource Analysis,” in Tools and Algorithms for
the Construction and Analysis of Systems - 21st International
Conference, (TACAS’ 15), 2015.

[75] S. Gulwani, K. K. Mehra, and T. M. Chilimbi, “SPEED: Precise and Efficient Static Estimation of Program Computational
Complexity,” in 36th ACM Symp. on Principles of Prog. Langs.
(POPL’09), 2009.

[76] R. Blanc, T. A. Henzinger, T. Hottelier, and L. Kovacs, “ABC:
Algebraic Bound Computation for Loops,” in Logic for Prog.,
Al, and Reasoning - 16th Int. Conf: (LPAR’10), 2010.

[77] F. Zuleger, M. Sinn, S. Gulwani, and H. Veith, “Bound Analysis of Imperative Programs with the Size-change Abstraction,”
in 18th Int. Static Analysis Symp. (SAS’11), 2011.

[78] M. Sinn, F. Zuleger, and H. Veith, “A Simple and Scalable
Approach to Bound Analysis and Amortized Complexity
Analysis,” in Computer Aided Verification - 26th Int. Conf.
(CAV’14), 2014.

[79] P. Cerny, T. A. Henzinger, L. Kovacs, A. Radhakrishna, and
J. Zwirchmayr, “Segment Abstraction for Worst-Case Execution
Time Analysis,” in 24th European Symposium on Programming
(ESOP’15), 2015.

[80] E. Albert, S. Genaim, and A. N. Masud, “On the Inference of
Resource Usage Upper and Lower Bounds,” ACM Transactions
on Computational Logic, vol. 14, no. 3, 2013.

[81] M. Avanzini and G. Moser, “A Combination Framework for
Complexity,” in 24th International Conference on Rewriting
Techniques and Applications (RTA’13), 2013.

[82] L. Noschinski, F. Emmes, and J. Giesl, “Analyzing Innermost
Runtime Complexity of Term Rewriting by Dependency Pairs,”
J. Autom. Reasoning, vol. 51, no. 1, pp. 27-56, 2013.

[83] M. Brockschmidt, F. Emmes, S. Falke, C. Fuhs, and J. Giesl,
“Alternating Runtime and Size Complexity Analysis of Integer
Programs,” in 20th Int. Conf. on Tools and Alg. for the Constr.
and Anal. of Systems (TACAS’14), 2014.

[84] F. Frohn, M. Naaf, J. Hensel, M. Brockschmidt, and J. Giesl,
“Lower Runtime Bounds for Integer Programs,” in Automated
Reasoning - 8th International Joint Conference (IJCAR’16),
2016.

[85] J. Agat, “Transforming out timing leaks,” in Proceedings
of the 27th ACM Symposium on Principles of Programming
Languages, 2000.

[86] D. Hedin and D. Sands, “Timing aware information flow
security for a javacard-like bytecode,” Electron. Notes Theor.
Comput. Sci., vol. 141, Dec. 2005.

[87] B. Coppens, I. Verbauwhede, K. D. Bosschere, and B. D.
Sutter, “Practical mitigations for timing-based side-channel
attacks on modern x86 processors,” in Proceedings of the 2009
30th IEEE Symposium on Security and Privacy, 2009.

[88] G. Barthe, T. Rezk, and M. Warnier, “Preventing timing leaks
through transactional branching instructions,” Electron. Notes
Theor. Comput. Sci., vol. 153, May 2006.

[89] D. Zhang, A. Askarov, and A. C. Myers, “Predictive mitigation
of timing channels in interactive systems,” in Proceedings of
the 18th ACM Conference on Computer and Communications
Security, 2011.

[90] P. Mardziel, M. S. Alvim, M. Hicks, and M. R. Clarkson,
“Quantifying information flow for dynamic secrets,” in Proceedings of the 2014 IEEE Symposium on Security and Privacy,
2014.

[91] C. Pasareanu, Q.-S. Phan, and P. Malacaria, “Multi-run sidechannel analysis using symbolic execution and max-smt,” in
Proceedings of the 29th IEEE Computer Security Foundations
Symposium, 2016.

[92] G. Doychev, D. Feld, B. Kopf, L. Mauborgne, and J. Reineke,
“Cacheaudit: A tool for the static analysis of cache side channels,”
in Proceedings of the 22nd USENIX Security Symposium,
(Washington, D.C.), USENIX, 2013.

[93] A. Sabelfeld and A. C. Myers, “Language-Based Information
Flow Security,” IEEE Journal on Selected Areas in Communications, vol. 21, no. 1, pp. 5-19, 2003.

[94] D. Brumley and D. Boneh, “Remote timing attacks are
practical,” in Computer Networks, 2005.

[95] D. Osvik, A. Shamir, and E. Tromer, “Cache attacks and
countermeasures: the case of AES,” in Topics in Cryptography,
2006.

