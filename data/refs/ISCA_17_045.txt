[1] K. Agrawal, J. T. Fineman, and J. Sukha, “Nested parallelism in transactional
memory,” in Proc. PPoPP, 2008.

[2] C.S. Ananian, K. Asanovié, B. C. Kuszmaul, C. E. Leiserson, and S. Lie, “Unbounded transactional memory,” in Proc. HPCA-11, 2005S.

[3] R.J. Anderson and J. C. Setubal, “On the parallel implementation of Goldberg’s
maximum flow algorithm,” in Proc. SPAA, 1992.

[4] D. A. Bader, H. Meyerhenke, P. Sanders, and D. Wagner, Eds., 10th DIMACS
Implementation Challenge Workshop, 2012.

[5] W. Baek, N. Bronson, C. Kozyrakis, and K. Olukotun, “Implementing and eval
uating nested parallel transactions in software transactional memory,” in Proc.

SPAA, 2010.

[6] W. Baek, N. Bronson, C. Kozyrakis, and K. Olukotun, “Making nested parallel

transactions practical using lightweight hardware support,” in Proc. ICS’10, 2010.

[7] W. Baek, C. C. Minh, M. Trautmann, C. Kozyrakis, and K. Olukotun, “The

OpenTM transactional application programming interface,” in Proc. PACT-16,

2007.

[8] N. Baumstark, G. Blelloch, and J. Shun, “Efficient implementation of a synchro
nous parallel push-relabel algorithm,” in Proc. ESA, 2015.

[9] G.E. Blelloch, J. T. Fineman, P. B. Gibbons, and J. Shun, “Internally deterministic

parallel algorithms can be fast,” in Proc. PPoPP, 2012.

[10] G. E. Blelloch, J. C. Hardwick, S. Chatterjee, J. Sipelstem, and M. Zagha, “Imple
mentation of a portable nested data-parallel language,” in Proc. PPoPP, 1993.

[11] C. Blundell, J. Devietti, E. C. Lewis, and M. M. Martin, “Making the fast case

common and the uncommon case simple in unbounded transactional memory,” in

Proc. ISCA-34, 2007.

[12] J. Bobba, N. Goyal, M. D. Hill, M. M. Swift, and D. A. Wood, “TokenTM:

Efficient execution of large transactions with hardware transactional memory,” in

Proc. ISCA-35, 2008.

[13] J. L. Carter and M. Wegman, “Universal classes of hash functions (extended),” in Proc. STOC-9, 1977.

[14] L. Ceze, J. Tuck, J. Torrellas, and C. Cascaval, “Bulk disambiguation of specula
tive threads in multiprocessors,” in Proc. ISCA-33, 2006.

[15] D. Chakrabarti, Y. Zhan, and C. Faloutsos, “R-MAT: A recursive model for graph

mining,” in Proc. SDM, 2004.

[16] P. Charles, C. Grothoff, V. Saraswat, C. Donawa, A. Kielstra, K. Ebcioglu, C. von
Praun, and V. Sarkar, “X10: An object-oriented approach to non-uniform cluster
computing,” in Proc. OOPSLA-20, 2005.

[17] G.-I. Cheng, M. Feng, C. E. Leiserson, K. H. Randall, and A. F. Stark, “Detecting
data races in Cilk programs that use locks,” in Proc. SPAA, 1998.

[18] B. V. Cherkassky and A. V. Goldberg, “On implementing the push-relabel method
for the maximum flow problem,” Algorithmica, 19(4), 1997.

[19] W. Chuang, S. Narayanasamy, G. Venkatesh, J. Sampson, M. Van Biesbrouck,
G. Pokam, B. Calder, and O. Colavin, “Unbounded page-based transactional
memory,” in Proc. ASPLOS-XI, 2006.

[20] J. Chung, C. C. Minh, A. McDonald, T. Skare, H. Chafi, B. D. Carlstrom,
C. Kozyrakis, and K. Olukotun, “Tradeoffs in transactional memory virtualization,”
in Proc. ASPLOS-XII, 2006.

[21] T. A. Davis and Y. Hu, “The University of Florida sparse matrix collection,” ACM
TOMS, 38(1), 2011.

[22] B. D. de Dinechin, R. Ayrignac, P.-E. Beaucamps, P. Couvert, B. Ganne, P. G.
de Massas, F. Jacquet, S. Jones, N. M. Chaisemartin, F. Riss, and T. Strudel, “A
clustered manycore processor architecture for embedded and accelerated applications,” in Proc. HPEC, 2013.

[23] J. Devietti, B. Lucia, L. Ceze, and M. Oskin, “DMP: Deterministic shared memory
multiprocessing,” in Proc. ASPLOS-XIV, 2009.

[24] N. Diegues and J. Cachopo, “Practical parallel nesting for software transactional
memory,” in Proc. DISC, 2013.

[25] A. Duran, E. Ayguadé, R. M. Badia, J. Labarta, L. Martinell, X. Martorell, and
J. Planas, “OmpSs: A proposal for programming heterogeneous multi-core architectures,” Parallel Processing Letters, 21(02), 2011.

[26] A, Duran, J. Corbalan, and E. Ayguadé, “Evaluation of OpenMP task scheduling
strategies,” in 4th Intl. Workshop in OpenMP, 2008.

[27] M. Frigo, C. E. Leiserson, and K. H. Randall, “The implementation of the Cilk-5
multithreaded language,” in Proc. PLDI, 1998.

[28] M. J. Garzaran, M. Prvulovic, J. M. Llaberfa, V. Vifials, L. Rauchwerger, and
J. Torrellas, “Tradeoffs in buffering speculative memory state for thread-level
speculation in multiprocessors,” in Proc. HPCA-9, 2003.

[29] D. Goldfarb and M. D. Grigoriadis, “A computational comparison of the dinic and
network simplex methods for maximum flow,” Annals of Operations Research,
13(1), 1988.

[30] D.C. Halbert and P. B. Kessler, “Windows of overlapping register frames,” CS
292R Final Report, UC Berkeley, 1980.

[31] L. Hammond, M. Willey, and K. Olukotun, “Data speculation support for a chip
multiprocessor,” in Proc. ASPLOS-VIIT, 1998.

[32] L. Hammond, V. Wong, M. Chen, B. D. Carlstrom, J. D. Davis, B. Hertzberg,
M. K. Prabhu, H. Wijaya, C. Kozyrakis, and K. Olukotun, “Transactional memory
coherence and consistency,” in Proc. ISCA-31, 2004.

[33] W. Hasenplaugh, T. Kaler, T. B. Schardl, and C. E. Leiserson, “Ordering heuristics
for parallel graph coloring,” in Proc. SPAA, 2014.

[34] D. R. Jefferson, “Virtual time,” ACM TOPLAS, 7(3), 1985.

[35] M. C. Jeffrey, S. Subramanian, M. Abeydeera, J. Emer, and D. Sanchez, “Datacentric execution of speculative parallel programs,” in Proc. MICRO-49, 2016.
[36] M. C. Jeffrey, S. Subramanian, C. Yan, J. Emer, and D. Sanchez, “‘A scalable
architecture for ordered parallelism,” in Proc. MICRO-48, 2015.

[37] M. C. Jeffrey, S. Subramanian, C. Yan, J. Emer, and D. Sanchez, “Unlocking
ordered parallelism with the Swarm architecture,” IEEE Micro, 36(3), 2016.

[38] C. Kim, D. Burger, and S. W. Keckler, “An adaptive, non-uniform cache structure
for wire-delay dominated on-chip caches,” in Proc. ASPLOS-X, 2002.

[39] J. Leskovec and A. Krevl, “SNAP datasets: Stanford large network dataset collection,” http://snap.stanford.edu/data, 2014.

[40] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J.
Reddi, and K. Hazelwood, “Pin: Building customized program analysis tools with
dynamic instrumentation,” in Proc. PLDI, 2005.

[41] A. McDonald, J. Chung, B. D. Carlstrom, C. C. Minh, H. Chafi, C. Kozyrakis,
and K. Olukotun, “Architectural semantics for practical transactional memory,”
in Proc. ISCA-33, 2006.

[42] C. C, Minh, J. Chung, C. Kozyrakis, and K. Olukotun, “STAMP: Stanford Transactional Applications for Multi-Processing,” in Proc. ITSWC, 2008.

[43] C. C. Minh, M. Trautmann, J. Chung, A. McDonald, N. Bronson, J. Casper,
C. Kozyrakis, and K. Olukotun, “An effective hybrid transactional memory system
with strong isolation guarantees,” in Proc. ISCA-34, 2007.

[44] M. J. Moravan, J. Bobba, K. E. Moore, L. Yen, M. D. Hill, B. Liblit, M. M. Swift,
and D. A. Wood, “Supporting nested transactional memory in LogTM,” in Proc.
ASPLOS-XII, 2006.

[45] J. E. B. Moss and A. L. Hosking, “Nested transactional memory: Model and
architecture sketches,” Science of Computer Programming, 63(2), 2006.

[46] Y. Ni, V. S. Menon, A.-R. Adl-Tabatabai, A. L. Hosking, R. L. Hudson, J. E. B.
Moss, B. Saha, and T. Shpeisman, “Open nesting in software transactional memory,” in Proc. PPoPP, 2007.

[47] H. Pan, K. Asanovié, R. Cohn, and C.-K. Luk, “Controlling program execution
through binary instrumentation,” SIGARCH Comput. Archit. News, 33(S), 2005.

[48] K. Pingali, D. Nguyen, M. Kulkarni, M. Burtscher, M. A. Hassaan, R. Kaleem,
T.-H. Lee, A. Lenharth, R. Manevich, M. Méndez-Lojo, D. Prountzos, and X. Sui,
“The tao of parallelism in algorithms,” in Proc. PLDI, 2011.

[49] N. Rapolu, K. Kambatla, S. Jagannathan, and A. Grama, “TransMR: Data-centric
programming beyond data parallelism,” in HotCloud, 2011.

[50] J. Renau, J. Tuck, W. Liu, L. Ceze, K. Strauss, and J. Torrellas, “Tasking with outof-order spawn in TLS chip multiprocessors: Microarchitecture and compilation,”
in Proc. ICS’05, 2005.

[51] C.J. Rossbach, O. §. Hofmann, and E. Witchel, “Is transactional programming
actually easier?” in Proc. PPoPP, 2010.

[52] D. Sanchez and C. Kozyrakis, “ZSim: Fast and accurate microarchitectural simulation of thousand-core systems,” in Proc. ISCA-40, 2013.

[53] D, Sanchez, L. Yen, M. D. Hill, and K. Sankaralingam, “Implementing signatures
for transactional memory,” in Proc. MICRO-40, 2007.

[54] J. Shun, G. E. Blelloch, J. T. Fineman, P. B. Gibbons, A. Kyrola, H. V. Simhadri,
and K. Tangwongsan, “Brief announcement: The problem based benchmark suite,”
in Proc. SPAA, 2012.

[55] T. Skare and C. Kozyrakis, “Early release: Friend or foe?” in Proc. WTW, 2006.

[56] G. S. Sohi, 8. E. Breach, and T. N. Vijaykumar, “Multiscalar processors,” in Proc.
ISCA-22, 1995.

[57] J. G. Steffan, C. B. Colohan, A. Zhai, and T. C. Mowry, “A scalable approach to
thread-level speculation,” in Proc. ISCA-27, 2000.

[58] J. G. Steffan and T. C. Mowry, “The potential for using thread-level data speculation to facilitate automatic parallelization,” in Proc. HPCA-4, 1998.

[59] G, J. Sussman and G. L. Steele Jr, “Scheme: A interpreter for extended lambda
calculus,” Higher-Order and Symbolic Computation, 11(4), 1998.

[60] A. S. Tanenbaum and D. J. Wetherall, Computer networks, Sth ed., P. Hall, Ed.,
2010.

[61] S. Tu, W. Zheng, E. Kohler, B. Liskov, and S. Madden, “Speedy transactions in
multicore in-memory databases,” in Proc. SOSP-24, 2013.

[62] N. Vachharajani, “Intelligent speculation for pipelined multithreading,” Ph.D.
dissertation, Princeton University, 2008.

[63] H. Volos, A. Welc, A.-R. Adl-Tabatabai, T. Shpeisman, X. Tian, and
R. Narayanaswamy, “NePalTM: Design and implementation of nested parallelism
for transactional memory systems,” in ECOOP, 2009.

[64] D. Wentzlaff, P. Griffin, H. Hoffmann, L. Bao, B. Edwards, C. Ramey, M. Mattina, C.-C. Miao, J. F Brown If, and A. Agarwal, “On-chip interconnection
architecture of the Tile Processor,” JEEE Micro, 27(5), 2007.

[65] L. Yen, J. Bobba, M. R. Marty, K. E. Moore, H. Volos, M. D. Hill, M. M. Swift,
and D. A. Wood, “LogTM-SE: Decoupling hardware transactional memory from
caches,” in Proc. HPCA-13, 2007.