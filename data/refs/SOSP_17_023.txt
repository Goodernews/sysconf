
[1] ABADI, D. J., CARNEY, D., CETINTEMEL, U., CHERNIACK, M.,
CONVEY, C., LEE, S., STONEBRAKER, M., TATBUL, N., AND
ZDONIK, S. Aurora: a new model and architecture for data stream
management. VLDB (2003).

[2] AKIDAU, T., BALIKOV, A., BEKIROGLU, K., CHERNYAK, S.,
HABERMAN, J., LAX, R., MCVEETY, S., MILLS, D., NORDSTROM,
P., AND WHITTLE, S. Millwheel: Fault-tolerant stream processing at
internet scale. In VLDB (2013), pp. 734-746.

[3] AKIDAU, T., BRADSHAW, R., CHAMBERS, C., CHERNYAK, S.,
FERNAANDEZ-MOCTEZUMA, R. J., LAX, R., MCVEETY, S., MILLS,
D., PERRY, F., SCHMIDT, E., AND WHITTLE, S. The Dataflow Model:
A Practical Approach to Balancing Correctness, Latency, and Cost in
Massive-Scale, Unbounded, Out-of-Order Data Processing. VLDB
(2015), 1792-1803.

[4] ANANTHANARAYANAN, G., GHODSI, A., SHENKER, S., AND STOICA, I. Effective straggler mitigation: Attack of the clones. In NSDI
(2013).

[5] ANANTHANARAYANAN, G., GHODSI, A., WANG, A., BORTHAKUR,
D., KANDULA, S., SHENKER, S., AND STOICA, I. Pacman: Coordinated memory caching for parallel jobs. In NSDI (2012).

[6] ANANTHANARAYANAN, G., KANDULA, S., GREENBERG, A., STOICA, L., Lu, Y., SAHA, B., AND HARRIS, E. Reining in the outliers in
Map-Reduce clusters using Mantri. In OSDI (2010).

[7] Apache Hadoop NextGen MapReduce (YARN). Retrieved
9/24/2013, URL: http://hadoop.apache.org/docs/current/hadoop-yarn/
hadoop-yarn-site/YARN. html.

[8] ARMBRUST, M., XIN, R. S., LIAN, C., HUAI, Y., LIU, D., BRADLEY,
J. K., MENG, X., KAFTAN, T., FRANKLIN, M. J., GHODSI, A., ET AL.
Spark SQL: Relational data processing in Spark. In SIGMOD (2015).

[9] BINGMANN, T., AXTMANN, M., JOBSTL, E., LAMM, S., NGUYEN,
H. C., Nog, A., SCHLAG, S., STUMPP, M., STURM, T., AND
SANDERS, P. Thrill: High-performance algorithmic distributed batch
data processing with c++. CoRR abs/1608.05634 (2016).

[10] BoNncz, P. A., ZUKOWSKI, M., AND NES, N. Monetdb/x100: Hyperpipelining query execution. In CIDR (2005), vol. 5, pp. 225-237.

[11] Boutin, E., EKANAYAKE, J., LIN, W., SHI, B., ZHOU, J., QIAN, Z.,
Wu, M., AND ZHOU, L. Apollo: scalable and coordinated scheduling
for cloud-scale computing. In OSDI (2014).

[12] BRAKMO, L. S., AND PETERSON, L. L. TCP Vegas: End to End
congestion avoidance on a global Internet. JEEE Journal on Selected
Areas in Communications 13, 8 (Oct. 1995), 1465-1480.

[13] CARBONE, P., FORA, G., EWEN, S., HARIDI, S., AND TZOUMAS, K.
Lightweight asynchronous snapshots for distributed dataflows. CoRR
abs/1506.08603 (2015).

[14] CARBONE, P., KATSIFODIMOS, A., EWEN, S., MARKL, V., HARIDI,
S., AND TZOUMAS, K. Apache Flink: Stream and Batch Processing in
a Single Engine. IEEE Data Engineering Bulletin (2015).

[15] CHAIKEN, R., JENKINS, B., LARSON, P-A., RAMSEY, B., SHAKIB,
D., WEAVER, S., AND ZHOU, J. SCOPE: easy and efficient parallel
processing of massive data sets. VLDB (2008), 1265-1276.

[16] CHAMBERS, C., RANIWALA, A., PERRY, F., ADAMS, S., HENRY,

SOSP ’17, October 28, 2017, Shanghai, China

R., BRADSHAW, R., AND NATHAN. FlumeJava: Easy, Efficient DataParallel Pipelines. In PLDI (2010).

[17] CHANDRASEKARAN, S., COOPER, O., DESHPANDE, A., FRANKLIN,
M. J., HELLERSTEIN, J. M., HONG, W., KRISHNAMURTHY, S.,
MADDEN, S. R., REISS, F., AND SHAH, M. A. TelegraphCQ: continuous dataflow processing. In SIGMOD (2003), ACM.

[18] CHANDy, K. M., AND LAMPORT, L. Distributed snapshots: determining global states of distributed systems. ACM Transactions on
Computer Systems (TOCS) 3, 1 (1985), 63-75.

[19] CHOWDHURY, M., ZAHARIA, M., MA, J., JORDAN, M. I., AND
STOICA, I. Managing data transfers in computer clusters with orchestra.
In SIGCOMM (2011).

[20] DAs, T., ZHONG, Y., STOICA, I., AND SHENKER, S. Adaptive stream
processing using dynamic batch sizing. In SOCC (2014).

[21] Extending the Yahoo! Streaming Benchmark. http://data-artisans.com/
extending-the-yahoo-streaming-benchmark.

[22] Structured Streaming In Apache Spark: A new high-level
API for streaming. https://databricks.com/blog/2016/07/28/
structured-streaming-in-apache-spark.html.

[23] DATANAMI. Kafka Tops 1 Trillion Messages Per Day at LinkedIn.
https://goo.gl/cY7VOz.

[24] DEAN, J., AND GHEMAWAT, S. MapReduce: Simplified Data Processing on Large Clusters. Communications of the ACM 51, 1 (2008).

[25] DRAGOJEVIC, A., NARAYANAN, D., NIGHTINGALE, E. B., RENZELMANN, M., SHAMIS, A., BADAM, A., AND CASTRO, M. No
Compromises: Distributed Transactions with Consistency, Availability,
and Performance. In SOSP (2015).

[26] FLORATOU, A., AGRAWAL, A., GRAHAM, B., RAO, S., AND RAMASAMY, K. Dhalion: self-regulating stream processing in heron.
Proceedings of the VLDB Endowment 10, 12 (2017), 1825-1836.

[27] ForD, D., LABELLE, F., POPOVICI, F. I., STOKELY, M., TRUONG,
V.-A., BARROSO, L., GRIMES, C., AND QUINLAN, S. Availability in
globally distributed storage systems. In OSDI (2010), pp. 61-74.

[28] GHoDsI, A., ZAHARIA, M., HINDMAN, B., KONWINSKI, A.,
SHENKER, S., AND STOICA, I. Dominant resource fairness: Fair
allocation of multiple resource types. In NSDI (2011).

[29] GRAEFE, G. Encapsulation of parallelism in the voleano query processing system. In SIGMOD (1990), pp. 102-111.

[30] GRAY, C., AND CHERITON, D. Leases: An efficient fault-tolerant
mechanism for distributed file cache consistency. In SOSP (1989),
pp. 202-210.

[31] GROSVENOR, M. P., SCHWARZKOPF, M., GoG, I., WATSON, R.
N. M., Moore, A. W., HAND, S., AND CROWCROFT, J. Queues
don’t matter when you can jump them! In NSDI (2015).

[32] HINDMAN, B., KONWINSKI, A., ZAHARIA, M., GHODSI, A.,
JOSEPH, A. D., KATZ, R., SHENKER, S., AND STOICA, I. Mesos: A
platform for fine-grained resource sharing in the data center. In NSDI
(2011).

[33] ISARD, M., AND ABADI, M. Falkirk wheel: Rollback recovery for
dataflow systems. arXiv preprint arXiv:1503.08877 (2015).

[34] ISARD, M., BUDIU, M., YU, Y., BIRRELL, A., AND FETTERLY,
D. Dryad: distributed data-parallel programs from sequential building
blocks. In Eurosys (2007).

[35] ISARD, M., PRABHAKARAN, V., CURREY, J., WIEDER, U., TALWAR,
K., AND GOLDBERG, A. Quincy: Fair scheduling for distributed
computing clusters. In SOSP (2009).

[36] JACOBSON, V. Congestion avoidance and control. ACM SIGCOMM
Computer Communication Review 18, 4 (1988), 314-329.

[37] JIANG, J., SEKAR, V., MILNER, H., SHEPHERD, D., STOICA, I.,
AND ZHANG, H. CFA: A Practical Prediction System for Video QoE
Optimization. In NSDI (2016), pp. 137-150.

[38] JOHNSTON, W. M., HANNA, J., AND MILLAR, R. J. Advances in
SOSP ’17, October 28, 2017, Shanghai, China

[39] KE, Q., ISARD, M., AND YU, Y. Optimus: a dynamic rewriting
framework for data-parallel execution plans. In Eurosys (2013), pp. 15–
28.

[40] KREPS, J., NARKHEDE, N., RAO, J., ET AL. Kafka: A distributed

messaging system for log processing. In NetDB (2011).

[41] KULKARNI, S., BHAGAT, N., FU, M., KEDIGEHALLI, V., KELLOGG,
C., MITTAL, S., PATEL, J. M., RAMASAMY, K., AND TANEJA, S.
Twitter heron: Stream processing at scale. In SIGMOD (2015), pp. 239–
250.

[42] LIN, W., QIAN, Z., XU, J., YANG, S., ZHOU, J., AND ZHOU, L.
Streamscope: continuous reliable distributed processing of big data
streams. In NSDI (2016), pp. 439–453.

[43] MASHAYEKHI, O., QU, H., SHAH, C., AND LEVIS, P. Scalable, fast
cloud computing with execution templates. CoRR abs/1606.01972
(2016).

[44] MCSHERRY, F., ISARD, M., AND MURRAY, D. G. Scalability! but
at what cost? In 15th Workshop on Hot Topics in Operating Systems
(HotOS XV) (2015).

[45] MEISNER, D., SADLER, C. M., BARROSO, L. A., WEBER, W.-D.,
AND WENISCH, T. F. Power management of online data-intensive
services. In ISCA (2011).

[46] SLA for Stream Analytics. https://azure.microsoft.com/en-us/support/

legal/sla/stream-analytics/v1_0/.

[47] MOTWANI, R., WIDOM, J., ARASU, A., BABCOCK, B., BABU,
S., DATAR, M., MANKU, G., OLSTON, C., ROSENSTEIN, J., AND
VARMA, R. Query processing, resource management, and approxima-
tion in a data stream management system. In CIDR (2003).

[48] MURRAY, D. G., MCSHERRY, F., ISAACS, R., ISARD, M., BARHAM,
P., AND ABADI, M. Naiad: a timely dataﬂow system. In SOSP (2013),
pp. 439–455.

[49] MURRAY, D. G., SCHWARZKOPF, M., SMOWTON, C., SMITH, S.,
MADHAVAPEDDY, A., AND HAND, S. Ciel: a universal execution
engine for distributed data-ﬂow computing. In NSDI (2011), pp. 113–
126.

[50] Stream-processing with Mantis. http://techblog.netﬂix.com/2016/03/

stream-processing-with-mantis.html.

[51] OUSTERHOUT, K., PANDA, A., ROSEN, J., VENKATARAMAN, S.,
XIN, R., RATNASAMY, S., SHENKER, S., AND STOICA, I. The case
for tiny tasks in compute clusters. In HotOS (2013).

[52] OUSTERHOUT, K., WENDELL, P., ZAHARIA, M., AND STOICA, I.
Sparrow: distributed, low latency scheduling. In SOSP (2013), pp. 69–
84.

[53] RECHT, B., RE, C., WRIGHT, S., AND NIU, F. HOGWILD!: A lock-
free approach to parallelizing stochastic gradient descent. In Advances

in Neural Information Processing Systems (2011), pp. 693–701.


[54] SCHELTER, S., EWEN, S., TZOUMAS, K., AND MARKL, V. All
roads lead to rome: optimistic recovery for distributed iterative data
processing. In CIKM (2013).

[55] SELINGER, P. G., ASTRAHAN, M. M., CHAMBERLIN, D. D., LORIE,
R. A., AND PRICE, T. G. Access path selection in a relational database
management system. In SIGMOD (1979), pp. 23-34.

[S56] STONEBRAKER, M., CETINTEMEL, U., AND ZDONIK, S. The 8
requirements of real-time stream processing. SIGMOD Record 34, 4
(Dec. 2005), 42-47.

[S57] TOSHNIWAL, A., TANEJA, S., SHUKLA, A., RAMASAMY, K., PATEL,
J.M., KULKARNI, S., JACKSON, J., GADE, K., FU, M., DONHAM,
J., ET AL. Storm at twitter. In SIGMOD (2014).

[58] Observability at Twitter: technical overview. https://goo.gl/wAHi2L

[59] Apache Spark, Preparing for the Next Wave of Reactive Big Data.
http://goo.gl/FqEh94.

[60] VERMA, A., CHO, B., ZEA, N., GUPTA, I., AND CAMPBELL, R. H.
Breaking the mapreduce stage barrier. Cluster computing 16, 1 (2013),
191-206.

[61] VERMA, A., PEDROSA, L., KORUPOLU, M., OPPENHEIMER, D.,
TUNE, E., AND WILKES, J. Large-scale cluster management at google
with borg. In Eurosys (2015).

[62] YADWADKAR, N. J., ANANTHANARAYANAN, G., AND KATZ, R.
Wrangler: Predictable and faster jobs using fewer resources. In SOCC
(2014).

[63] Benchmarking Streaming Computation Engines at Yahoo! https://
yahooeng.tumblr.com/post/135321837876.

[64] Yu, Y., ISARD, M., FETTERLY, D., BUDIU, M., ERLINGSSON, U.,
GUNDA, P., AND CURREY, J. Dryadling: A system for general-purpose
distributed data-parallel computing using a high-level language. In
OSDI (2008).

[65] ZAHARIA, M., BORTHAKUR, D., SEN SARMA, J., ELMELEEGY, K.,
SHENKER, S., AND STOICA, I. Delay scheduling: A Simple Technique
for Achieving Locality and Fairness in Cluster Scheduling. In Eurosys
(2010).

[66] ZAHARIA, M., CHOWDHURY, M., DAS, T., DAVE, A., MA, J., McCAULEY, M., FRANKLIN, M., SHENKER, S., AND STOICA, I. Resilient distributed datasets: A fault-tolerant abstraction for in-memory
cluster computing. In NSDI (2012).

[67] ZAHARIA, M., DAS, T., LI, H., HUNTER, T., SHENKER, S., AND
STOICA, I. Discretized streams: Fault-tolerant streaming computation
at scale. In SOSP (2013).

[68] ZHANG, T., CHOWDHERY, A., BAHL, P. V., JAMIESON, K., AND
BANERJEE, S. The design and implementation of a wireless video
surveillance system. In Proceedings of the 21st Annual International Conference on Mobile Computing and Networking (2015), ACM,
pp. 426-438.
