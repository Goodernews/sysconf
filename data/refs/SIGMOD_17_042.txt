
[1] Y. Amsterdamer, Y. Grossman, T. Milo, and P. Senellart.

Crowd mining. In SIGMOD, 2013.

[2] L. Breiman. Random forests. Machine Learning, 45(1):5–32,

2001.

[3] C. Chai, G. Li, J. Li, D. Deng, and J. Feng. Cost-eﬀective

crowdsourced entity resolution: A partial-order approach. In
SIGMOD, 2016.

[4] S. Chaudhuri, V. Ganti, and R. Kaushik. A primitive operator

for similarity joins in data cleaning. In ICDE, 2006.
[5] X. Chu, I. F. Ilyas, and P. Koutris. Distributed data

deduplication. In VLDB, 2016.

[6] S. Das, A. Doan, P. S. G. C., C. Gokhale, and P. Konda. The

Magellan data repository.
https://sites.google.com/site/anhaidgroup/projects/data.

[7] S. Das et al. Falcon: Scaling up hands-oﬀ crowdsourced entity

matching to build cloud services
http://pages.cs.wisc.edu/∼anhai/papers/falcon-tr.pdf.
Technical Report.

[8] A. Das Sarma, A. Jain, A. Machanavajjhala, and P. Bohannon.

An automatic blocking mechanism for large-scale
de-duplication tasks. In CIKM, 2012.

[9] S. B. Davidson, S. Khanna, T. Milo, and S. Roy. Using the

crowd for top-k and group-by queries. In ICDT, 2013.

[10] D. Deng, G. Li, H. Wen, and J. Feng. An eﬃcient partition
based method for exact set similarity joins. In VLDB, 2016.

[11] V. Efthymiou, G. Papadakis, G. Papastefanatos, K. Stefanidis,

and T. Palpanas. Parallel meta-blocking: Realizing scalable
entity resolution over large, heterogeneous data. In Big Data,
2015.

[12] J. Fan, M. Zhang, S. Kok, M. Lu, and B. C. Ooi. CrowdOp:

Query optimization for declarative crowdsourcing systems.
TKDE, 27(8):2078–2092, 2015.

[13] M. J. Franklin, D. Kossmann, T. Kraska, S. Ramesh, and

R. Xin. CrowdDB: Answering queries with crowdsourcing. In
SIGMOD, 2011.

[14] M. J. Franklin, B. Trushkowsky, P. Sarkar, and T. Kraska.

Crowdsourced enumeration queries. In ICDE, 2013.

[15] H. Galhardas, D. Florescu, D. Shasha, E. Simon, and C.-A.

Saita. Declarative data cleaning: Language, model, and
algorithms. In VLDB, 2001.

[16] I. Gog, M. Schwarzkopf, N. Crooks, M. P. Grosvenor,

A. Clement, and S. Hand. Musketeer: all for one, one for all in
data processing systems. In EuroSys, 2015.

[17] C. Gokhale, S. Das, A. Doan, J. F. Naughton, R. Rampalli,

J. Shavlik, and X. Zhu. Corleone: Hands-oﬀ crowdsourcing for
entity matching. In SIGMOD, 2014.

[18] S. Guo, A. Parameswaran, and H. Garcia-Molina. So who won?:

Dynamic max discovery with the crowd. In SIGMOD, 2012.
[19] D. Haas, S. Krishnan, J. Wang, M. J. Franklin, and E. Wu.

Wisteria: Nurturing scalable data cleaning infrastructure. In
VLDB, 2015.

[20] D. Haas, J. Wang, E. Wu, and M. J. Franklin. CLAMShell:

Speeding up crowds for low-latency data labeling. In VLDB,
2016.

[21] F. Hueske, M. Peters, A. Krettek, M. Ringwald, K. Tzoumas,
V. Markl, and J.-C. Freytag. Peeking into the optimization of
data ﬂow programs with mapreduce-style udfs. In ICDE, 2013.
[22] Z. Khayyat et al. BigDansing: A system for big data cleansing.

In SIGMOD, 2015.

[23] L. Kolb, H. K¨opcke, A. Thor, and E. Rahm. Learning-based

entity resolution with MapReduce. In CloudDb, 2011.

[24] L. Kolb, A. Thor, and E. Rahm. Parallel sorted neighborhood

blocking with MapReduce. In BTW, 2011.

[25] G. Li, J. He, D. Deng, and J. Li. Eﬃcient similarity join and

search on multi-attribute data. In SIGMOD, 2015.

[26] A. Marcus, D. Karger, S. Madden, R. Miller, and S. Oh.

Counting with the crowd. In VLDB, 2013.

[27] A. Marcus and A. Parameswaran. Crowdsourced data

management: Industry and academic perspectives. Foundations
and Trends in Databases, 6(1-2):1–161, 2015.

[28] A. Marcus, E. Wu, D. Karger, S. Madden, and R. Miller.

Human-powered sorts and joins. In VLDB, 2011.

[29] A. Marcus, E. Wu, D. R. Karger, S. Madden, and R. C. Miller.

Crowdsourced databases: Query processing with people. In
CIDR, 2011.

[30] B. Mozafari, P. Sarkar, M. Franklin, M. Jordan, and

S. Madden. Scaling up crowd-sourcing to very large datasets: A
case for active learning. In VLDB, 2014.

[31] A. Okcan and M. Riedewald. Processing theta-joins using

MapReduce. In SIGMOD, 2011.

[32] A. Parameswaran, A. D. Sarma, H. Garcia-Molina,

N. Polyzotis, and J. Widom. Human-assisted graph search: It’s
okay to ask questions. In VLDB, 2011.

[33] A. G. Parameswaran, H. Garcia-Molina, H. Park, N. Polyzotis,

A. Ramesh, and J. Widom. CrowdScreen: Algorithms for
ﬁltering data with humans. In SIGMOD, 2012.

[34] A. G. Parameswaran, H. Park, H. Garcia-Molina, N. Polyzotis,

and J. Widom. Deco: Declarative crowdsourcing. In CIKM,
2012.

[35] A. G. Parameswaran and N. Polyzotis. Answering queries using

humans, algorithms and databases. In CIDR, 2011.

[36] H. Park and J. Widom. Query optimization over crowdsourced

data. In VLDB, 2013.

[37] A. Rheinl¨ander, A. Heise, F. Hueske, U. Leser, and

F. Naumann. SOFA: An extensible logical optimizer for
udf-heavy data ﬂows. Information Systems, 52:96–125, 2015.
[38] C. Rong, W. Lu, X. Wang, X. Du, Y. Chen, and A. K. Tung.

Eﬃcient and scalable processing of string similarity join.
TKDE, 25(10):2217–2230, 2013.

[39] S. Sarawagi and A. Kirpal. Eﬃcient set joins on similarity

predicates. In SIGMOD, 2004.

[40] A. D. Sarma, Y. He, and S. Chaudhuri. ClusterJoin: A

similarity joins framework using Map-Reduce. In VLDB, 2014.

[41] R. Vernica, M. J. Carey, and C. Li. Eﬃcient parallel

set-similarity joins using MapReduce. In SIGMOD, 2010.

[42] N. Vesdapunt, K. Bellare, and N. N. Dalvi. Crowdsourcing

algorithms for entity resolution. In VLDB, 2014.

[43] J. Wang, J. Feng, and G. Li. Trie-Join: Eﬃcient trie-based

string similarity joins with edit-distance constraints. In VLDB,
2010.

[44] J. Wang, T. Kraska, M. J. Franklin, and J. Feng. CrowdER:

Crowdsourcing entity resolution. In VLDB, 2012.

[45] J. Wang, G. Li, T. Kraska, M. J. Franklin, and J. Feng.

Leveraging transitive relations for crowdsourced joins. In
SIGMOD, 2013.

[46] S. E. Whang, P. Lofgren, and H. Garcia-Molina. Question

selection for crowd entity resolution. In VLDB, 2013.

[47] C. Xiao, W. Wang, and X. Lin. Ed-Join: An eﬃcient algorithm

for similarity joins with edit distance constraints. In VLDB,
2008.

[48] C. Xiao, W. Wang, X. Lin, J. X. Yu, and G. Wang. Eﬃcient

similarity joins for near-duplicate detection. TODS,
36(3):15:1–15:41, 2011.

[49] C. Yan, Y. Song, J. Wang, and W. Guo. Eliminating the

redundancy in mapreduce-based entity resolution. In CCGRID,
2015.

[50] M. Yu, G. Li, D. Deng, and J. Feng. String similarity search

and join: A survey. Frontiers of Computer Science,
10(3):399–417, 2016.

