[1] Rui Abreu, Peter Zoeteweij, and Arjan J. C. van Gemund. 2006. An
Evaluation of Similarity Coe￿cients for So￿ware Fault Localization.
In Paci￿c Rim Intl. Symp. on Dependable Computing.

[2] Adobe Systems Inc. 2017. Adobe Crash Reporter. h￿ps://helpx.adobe.

com/creative-suite/kb/changing-se￿ings-crash-reporter.html.

[3] Alfred V. Aho, Ravi Sethi, and Je￿rey D. Ullman. 1986. Compilers:

principles, techniques, and tools.

Lecture Notes:

[4] Johnathan Aldrich. 2017.

ysis.
resources/pointer.pdf.

Pointer Anal-
h￿ps://www.cs.cmu.edu/⇠aldrich/courses/15-819O-13sp/
[5] Lars O. Andersen. 1994. Program Analysis and Specialization for
the C Programming Language. Ph.D. Dissertation. University of
Copenhagen.

[6] Apache So￿ware Foundation. 2010. Apache Benchmark (ab). h￿p:

//h￿pd.apache.org/docs/2.0/programs/ab.html.

[7] Apache So￿ware Foundation. 2013. Apache h￿pd. h￿p://h￿pd.

apache.org.

[8] Apache So￿ware Foundation. 2017. Apache Commons DBCP. h￿ps:

//commons.apache.org/proper/commons-dbcp/.

[9] Apache So￿ware Foundation. 2017. Apache Derby. h￿ps://db.apache.

org/derby/.

groovy-lang.org/.

apache.org/log4j/2.x/.

apache.org/.

[10] Apache So￿ware Foundation. 2017. Apache Groovy.

h￿p://

[11] Apache So￿ware Foundation. 2017. Apache Log4j. h￿ps://logging.

[12] Apache So￿ware Foundation. 2017. Apache Lucene. h￿ps://lucene.

[13] Apple Inc. 2017. MacOSX CrashReporter. h￿ps://developer.apple.

com/library/content/technotes/tn2004/tn2123.html.

[14] armetm 2017.

ARM Embedded Trace Macrocell

(ETM).

h￿p://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.
ihi0014q/index.html.

[15] Joy Arulraj, Po-Chun Chang, Guoliang Jin, and Shan Lu. 2013.
Production-run So￿ware Failure Diagnosis via Hardware Perfor-
mance Counters. In Intl. Conf. on Architectural Support for Program-
ming Languages and Operating Systems.

[16] Joy Arulraj, Guoliang Jin, and Shan Lu. 2014. Leveraging the Short-
term Memory of Hardware to Diagnose Production-run So￿ware
Failures. In Intl. Conf. on Architectural Support for Programming Lan-
guages and Operating Systems.

[17] Michael D. Bond, Katherine E. Coons, and Kathryn S. McKinley.
2010. PACER: Proportional detection of data races. In Intl. Conf. on
Programming Language Design and Implem.

[18] Sebastian Burckhardt, Rajeev Alur, and Milo M. K. Martin. 2007.
CheckFence: Checking Consistency of Concurrent Data Types on
Relaxed Memory Models. In Intl. Conf. on Programming Language
Design and Implem.

[19] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE:
Unassisted and Automatic Generation of High-coverage Tests for
Complex Systems Programs. In USENIX Conference on Operating
Systems Design and Implementation.

[20] Miguel Castro, Manuel Costa, and Jean-Philippe Martin. 2008. Be￿er
Bug Reporting with Be￿er Privacy. In Intl. Conf. on Architectural
Support for Programming Languages and Operating Systems.

[21] Trishul M. Chilimbi, Ben Liblit, Krishna Mehra, Aditya V. Nori, and
Kapil Vaswani. 2009. HOLMES: E￿ective Statistical Debugging via
E￿cient Path Pro￿ling. In Intl. Conf. on So￿ware Engineering.

[22] Clang 2017. ￿e Clang compiler. h￿p://clang.llvm.org/.
[23] Weidong Cui, Marcus Peinado, Sang Kil Cha, Yanick Fratantonio, and
Vasileios P. Kemerlis. 2016. RETracer: Triaging Crashes by Reverse
Execution from Partial Memory Dumps. In International Conference

on So￿ware Engineering.

ninja/.

[24] CVE-2016-5195. 2017. Dirty Cow Vulnerability. h￿ps://dirtycow.

[25] Rayside Derek. 2005. Points-to analysis. Technical report, MIT CSAIL.
[26] EnderUnix. 2017. Aget. h￿p://www.enderunix.org/aget/.
[27] Eucalyptus Open Source Project. 2017. Eucalyptus. h￿ps://github.

com/eucalyptus.

[28] Brad Fitzpatrick. 2013. Memcached. h￿p://memcached.org.
[29] Free So￿ware Foundation Inc. 2017. java lang VMSystem.c. h￿ps:

//tinyurl.com/nx28nym.

[30] Je￿ Gilchrist. 2017. Parallel BZIP2. h￿p://compression.ca/pbzip2.
[31] Kirk Glerum, Kinshuman Kinshumann, Steve Greenberg, Gabriel
Aul, Vince Orgovan, Greg Nichols, David Grant, Gretchen Loihle,
and Galen Hunt. 2009. Debugging in the (Very) Large: Ten Years of
Implementation and Experience. In ACM Symp. on Operating Systems
Principles.

[32] Patrice Godefroid and Nachiappan Nagappan. 2008. Concurrency at
Microso￿ – An Exploratory Survey. In Intl. Conf. on Computer Aided
Veri￿cation.

[33] Google Inc. 2017. Chrome Error and Crash Reporting. h￿ps://support.

google.com/chrome/answer/96817?hl=enl.

[34] Joseph Y. Halpern and Judea Pearl. 2005. Causes and Explanations:
A Structural-Model Approach. Part I: Causes. ￿e British Journal for
the Philosophy of Science.

[35] Intel Corporation. 2013. Intel Processor Trace. h￿ps://so￿ware.intel.

com/en-us/blogs/2013/09/18/processor-tracing.

[36] Intel Corporation. 2017. Intel 64 and IA-32 Architectures So￿ware

[37] Intel Corporation. 2017. Intel Processor Trace Decoder. h￿ps://github.

Developer’s Manual.

com/01org/processor-trace.

[38] Jenkins Open Source Project. 2017. Jenkins. h￿ps://jenkins.io/.
[39] Guoliang Jin, Aditya ￿akur, Ben Liblit, and Shan Lu. 2010. Instru-
mentation and sampling strategies for cooperative concurrency bug
isolation. In International Conference on Object Oriented Programming
Systems Languages and Applications.

[40] Sebastian Burckhardt John Erickson, Madanlal Musuvathi and Kirk
Olynyk. 2010. E￿ective Data-Race Detection for the Kernel. In Symp.
on Operating Sys. Design and Implem.

[41] James A. Jones and Mary Jean Harrold. 2005. Empirical Evaluation of
the Tarantula Automatic Fault-localization Technique. In IEEE/ACM
International Conference on Automated So￿ware Engineering.

[42] Baris Kasikci, Benjamin Schubert, Cristiano Pereira, Gilles Pokam,
and George Candea. 2015. Failure Sketching: A Technique for Au-
tomated Root Cause Diagnosis of In-production Failures. In ACM
Symp. on Operating Systems Principles.

[43] Baris Kasikci, Cristian Zam￿r, and George Candea. 2012. Data Races
vs. Data Race Bugs: Telling the Di￿erence with Portend. In Interna-
tional Conference on Architectural Support for Programming Languages
and Operating Systems.

[44] Baris Kasikci, Cristian Zam￿r, and George Candea. 2013. RaceMob:
Crowdsourced Data Race Detection. In ACM Symp. on Operating
Systems Principles.

[45] Baris Kasikci, Cristian Zam￿r, and George Candea. 2015. Automated
Classi￿cation of Data Races Under Both Strong and Weak Memory
Models. ACM Trans. Program. Lang. Syst..

[46] M. G. Kendall. 1938. A New Measure of Rank Correlation. Biometrika.
[47] Ali Kheradmand, Baris Kasikci, and Arjan George Candea. 2014. Lock-
out: E￿cient Testing for Deadlock Bugs. In Workshop on Determinism
and Correctness in Parallel Programming.

[48] Leslie Lamport. 1978. Time, clocks, and the ordering of events in a

distributed system. 21, 7.

SOSP ’17, October 28, 2017, Shanghai, China

Baris Kasikci, Weidong Cui, Xinyang Ge, and Ben Niu

jo2odgl.

[49] Chris La￿ner and Vikram Adve. 2004. LLVM: A Compilation Frame-
work for Lifelong Program Analysis and Transformation. In Intl.
Symp. on Code Generation and Optimization.

[50] Nancy G. Leveson and Clark S. Turner. 1993. An Investigation of the

￿erac-25 Accidents. IEEE Computer.

[51] Ben Liblit, Alex Aiken, Alice X. Zheng, and Michael I. Jordan. 2003.
Bug isolation via remote program sampling. In Intl. Conf. on Program-
ming Language Design and Implem.

[52] Ben Liblit, Alex Aiken, Alice X. Zheng, and Michael I. Jordan. 2003.
Sampling User Executions for Bug Isolation. In ￿e Workshop on
Remote Analysis and Measurement of So￿ware Systems.

[53] Benjamin Robert Liblit. 2004. Cooperative Bug Isolation. Ph.D. Dis-

sertation. University of California, Berkeley.

[54] Ziyi Lin, Darko Marinov, Hao Zhong, Yuting Chen, and Jianjun Zhao.
2015. JaConTeBe: A Benchmark Suite of Real-World Java Concur-
rency Bugs. In IEEE/ACM International Conference on Automated
So￿ware Engineering.

[55] Linux. 2017. Linux man pages, clock ge￿ime. h￿ps://tinyurl.com/

[56] Shan Lu, Soyeon Park, Eunsoo Seo, and Yuanyuan Zhou. 2008. Learn-
ing from Mistakes – A Comprehensive Study on Real World Concur-
rency Bug Characteristics. In International Conference on Architectural
Support for Programming Languages and Operating Systems.

[57] Brandon Lucia, Joseph Devie￿i, Karin Strauss, and Luis Ceze. 2008.
Atom-Aid: Detecting and Surviving Atomicity Violations. In Intl.
Symp. on Computer Architecture.

[58] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur
Klauser, Geo￿ Lowney, Steven Wallace, Vijay Janapa Reddi, and
Kim Hazelwood. 2005. PIN: building customized program analysis
tools with dynamic instrumentation. In Intl. Conf. on Programming
Language Design and Implem.

[59] Nuno Machado, Brandon Lucia, and Lu´ıs Rodrigues. 2015. Concur-
rency Debugging with Di￿erential Schedule Projections. In Intl. Conf.
on Programming Language Design and Implem.

[60] Ali Mashtizadeh, Tal Gar￿nkel, David Terei, David Mazie`res, and
Mendel Rosenblum. 2017. Towards Practical Default-On Multi-Core
Record/Replay. In Intl. Conf. on Architectural Support for Programming
Languages and Operating Systems.

[61] Steve McConnell. 2004. Code Complete. Microso￿ Press.
[62] Pablo Montesinos, Luis Ceze, and Josep Torrellas. 2008. DeLorean:
Recording and Deterministically Replaying Shared-Memory Multi-
processor Execution E￿ciently. In Intl. Symp. on Computer Architec-
ture.

[63] Pablo Montesinos, Ma￿hew Hicks, Samuel T. King, and Josep Torrel-
las. 2009. Capo: A So￿ware-hardware Interface for Practical Deter-
ministic Multiprocessor Replay. In Intl. Conf. on Architectural Support
for Programming Languages and Operating Systems.

[64] Mozilla Corporation. 2017. Mozilla rr. h￿p://rr-project.org/.
[65] MySQL 2010. MySQL Benchmark Tool. h￿ps://dev.mysql.com/

downloads/benchmarks.html.

[66] MySQL 2010. h￿p://www.mysql.com/.
[67] Satish Narayanasamy, Gilles Pokam, and Brad Calder. 2005. BugNet:
Continuously Recording Program Execution for Deterministic Replay
Debugging. In Intl. Symp. on Computer Architecture.

[68] George C. Necula, Sco￿ McPeak, S.P. Rahul, and Westley Weimer.
2002. CIL: Intermediate Language and Tools for Analysis and Trans-
formation of C Programs. In Intl. Conf. on Compiler Construction.

[69] Netcra￿ Survey 2013. Netcra￿ Web Server Survey. h￿p://h￿pd.

apache.org.

[70] Gene Novark, Emery D. Berger, and Benjamin G. Zorn. 2008. Ex-
terminator: Automatically Correcting Memory Errors with High
Probability. Commun. ACM.

com/.

[71] Marek Olszewski, Jason Ansel, and Saman Amarasinghe. 2009. Kendo:

e￿cient deterministic multithreading in so￿ware. SIGPLAN Not..

[72] Oracle. 2017. Java Development Kit. h￿p://openjdk.java.net/.
[73] Oracle Corp. 2017. Diagnose a Hung Process. h￿ps://docs.oracle.com/

javase/8/docs/technotes/guides/troubleshoot/hangloop002.html.

[74] Soyeon Park, Weiwei Xiong, Zuoning Yin, Rini Kaushik, Kyu H. Lee,
Shan Lu, and Yuanyuan Zhou. 2009. PRES: Probabilistic Replay with
Execution Sketching on Multiprocessors. In ACM Symp. on Operating
Systems Principles.

[75] Je￿ H. Perkins, Sunghun Kim, Sam Larsen, Saman Amarasinghe,
Jonathan Bachrach, Michael Carbin, Carlos Pacheco, Frank Sher-
wood, Stelios Sidiroglou, Greg Sullivan, Weng-Fai Wong, Yoav Zibin,
Michael D. Ernst, and Martin Rinard. 2010. Automatically Patching
Errors in Deployed So￿ware. In Symp. on Operating Sys. Design and
Implem.

[76] Gilles Pokam, Klaus Danne, Cristiano Pereira, Rolf Kassa, Tim
Kranich, Shiliang Hu, Justin Go￿schlich, Nima Honarmand, Nathan
Dautenhahn, Samuel T. King, and Josep Torrellas. 2013. ￿ickRec:
Prototyping an Intel Architecture Extension for Record and Replay
of Multithreaded Programs. In Intl. Symp. on Computer Architecture.
[77] Gilles Pokam, Cristiano Pereira, Shiliang Hu, Ali-Reza Adl-Tabatabai,
Justin Go￿schlich, Jungwoo Ha, and Youfeng Wu. 2011. CoreRacer:
A Practical Memory Race Recorder for Multicore x86 TSO Processors.
In IEEE/ACM International Symposium on Microarchitecture.

[78] Transmission Project. 2017. Transmission. h￿ps://transmissionbt.

[79] C. J. Van Rijsbergen. 1979. Information Retrieval.
[80] Capegmini S.A. 2015.

Capgemini World ￿ality Report
h￿ps://www.uk.capgemini.com/thought-leadership/

2015-2016.
world-quality-report-2016-17.

[81] Caitlin Sadowski and Jaeheon Yi. 2014. How Developers Use Data
Race Detection Tools. In Workshop on Evaluation and Usability of
Programming Languages and Tools.

[82] Swarup Kumar Sahoo, John Criswell, Chase Geigle, and Vikram
Adve. 2013. Using Likely Invariants for Automated So￿ware Fault
Localization. In Proceedings of the Eighteenth International Conference
on Architectural Support for Programming Languages and Operating
Systems.

[83] Benjamin Schubert and Baris Kasikci. 2017. Bugbase. h￿ps://github.

[84] skylake-cache 2013.

Skylake speci￿cations.

h￿p://www.7-

[85] Soot

2017.

Soot

- A Java optimization framework.

com/dslab-ep￿/bugbase.

cpu.com/cpu/Skylake.html.

h￿ps://sable.github.io/soot/.

[86] SQLite 2013. SQLite. h￿p://www.sqlite.org/.
[87] Bjarne Steensgaard. 1996. Points-to analysis in almost linear time. In

Intl. Conf. on Programming Language Design and Implem.

[88] ￿e Associated Press. 2004. General Electric Acknowledges North-

eastern Blackout Bug. h￿p://www.securityfocus.com/news/8032.

[89] ￿e Chromium Project. 2017. Chromium Issues. h￿ps://bugs.

chromium.org.

[90] Joseph Tucek, Shan Lu, Chengdu Huang, Spiros Xanthos, and
Yuanyuan Zhou. 2007. Triage: diagnosing production run failures at
the user’s site. In ACM Symp. on Operating Systems Principles.

[91] Ubuntu. 2017. Ubuntu Error. h￿ps://wiki.ubuntu.com/ErrorTracker.
[92] Kaushik Veeraraghavan, Dongyoon Lee, Benjamin Wester, Jessica
Ouyang, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. 2011.
DoublePlay: Parallelizing Sequential Logging and Replay. In Intl.
Conf. on Architectural Support for Programming Languages and Oper-
ating Systems.

[93] Yan Wang, Harish Patil, Cristiano Pereira, Gregory Lueck, Rajiv
Gupta, and Iulian Neamtiu. 2014. DrDebug: Deterministic Replay

Lazy Diagnosis of In-Production Concurrency Bugs

SOSP ’17, October 28, 2017, Shanghai, China

Based Cyclic Debugging with Dynamic Slicing. In Intl. Symp. on Code
Generation and Optimization.

[94] Junfeng Yang, Ang Cui, Sal Stolfo, and Simha Sethumadhavan. 2012.
Concurrency A￿acks. In ￿e Fourth USENIX Workshop on Hot Topics
in Parallelism.

[95] Oliver Yang. 2017. Pitfalls of TSC usage. h￿p://oliveryang.net/2015/

09/pitfalls-of-TSC-usage/.

[96] Zuoning Yin, Ding Yuan, Yuanyuan Zhou, Shankar Pasupathy, and
Lakshmi Bairavasundaram. 2011. How Do Fixes Become Bugs?.
In ACM SIGSOFT European Conference on Foundations of So￿ware
Engineering.

[97] Jie Yu and Satish Narayanasamy. 2009. A Case for an Interleav-
ing Constrained Shared-Memory Multi-Processor. In Intl. Symp. on
Computer Architecture.

[98] Ding Yuan, Haohui Mai, Weiwei Xiong, Lin Tan, Yuanyuan Zhou, and
Shankar Pasupathy. 2010. SherLog: error diagnosis by connecting
clues from run-time logs. In Intl. Conf. on Architectural Support for

Programming Languages and Operating Systems.

[99] Cristian Zam￿r and George Candea. 2010. Execution Synthesis: A
Technique for Automated Debugging. In ACM EuroSys European Conf.
on Computer Systems.

[100] Cristian Zam￿r, Baris Kasikci, Johannes Kinder, Edouard Bugnion,
and George Candea. 2013. Automated Debugging for Arbitrarily
Long Executions. In Workshop on Hot Topics in Operating Systems.
[101] Andreas Zeller and Ralf Hildebrandt. 2002. Simplifying and Isolating
Failure-Inducing Input. IEEE Transactions on So￿ware Engineering.
[102] Tong Zhang, Changhee Jung, and Dongyoon Lee. 2017. ProRace:
Practical Data Race Detection for Production Use. In Proceedings of
the Twenty-Second International Conference on Architectural Support
for Programming Languages and Operating Systems.

[103] Wei Zhang, Junghee Lim, Ramya Olichandran, Joel Scherpelz, Guo-
liang Jin, Shan Lu, and ￿omas Reps. 2011. ConSeq: Detecting
Concurrency Bugs through Sequential Errors. In Intl. Conf. on Archi-
tectural Support for Programming Languages and Operating Systems.

