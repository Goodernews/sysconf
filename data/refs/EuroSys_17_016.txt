[1] Securing the Future of Authentication with ARM TrustZonebased Trusted Execution Environment and Fast Identity
Online (FIDO). https://www.arm.com/files/pdf/
TrustZone-and-FIDO-white-paper.pdf, 2015. Accessed: February, 2017.

[2] ab—Apache HTTP server benchmarking tool. https:
//httpd.apache.org/docs/2.4/programs/ab.html,
2016. Accessed: February, 2017.

[3] Analysis of nginx 1.3.9/1.4.0 stack buffer overflow
and x64 exploitation (CVE-2013-2028). http:
//www.vnsecurity.net/research/2013/05/21/
analysis - of - nginx- cve-2013-2028.htm1,
Accessed: February, 2017.

[4] Anatomy of OpenSSL’s Heartbleed: Just four bytes trigger
horror bug. http://www. theregister.co.uk/2014/04/
09/heartbleed_explained/, 2016. Accessed: February,
2017.

[5] Apache HTTP server project. http://httpd.apache.org/,
2016. Accessed: February, 2017.

[6] Cloud Computing - SME Survey. https://www.enisa.
europa.eu/publications/cloud- computing-smesurvey, 2016. Accessed: February, 2017.

2016.

[7] CloudCamp: Five key concerns raised about cloud computing.
http://www.itnews.com.au/news/cloudcamp- fivekey- concerns - raised- about - cloud- computing223980, 2016. Accessed: February, 2017.

[8] Intel 64 and IA-32 Architectures Software Developer’s
Manual. http://www .intel.com/content/dam/
www/public/us/en/documents/manuals/64- ia
32- architectures -software-developer- systemprogramming - manual -325384.pdf, 2016. Accessed:
February, 2017.

[9] Intel Memory Protection Extensions Enabling Guide (rev.
1.01). https ://software.intel.com/sites/default/
files/managed/9d/f6/Intel_MPX_EnablingGuide.
pdf, 2016. Accessed: February, 2017.

[10] Introduction to SPARC M7 and Silicon Secured Memory
(SSM). https://swisdev.oracle.com/_files/What Is-SSM. html, 2016. Accessed: February, 2017.

[11] libmemcached. http://libmemcached.org/, 2016.
Accessed: February, 2017.

[12] Memcached bug: CVE-2011-4971. http://www.
cvedetails.com/cve/cve-2011- 4971, 2016. Accessed:
February, 2017.

[13] nginx: The Architecture of Open Source Applications.
http://www. aosabook.org/en/nginx.html, 2016.
Accessed: February, 2017.

[14] The Heartbleed Bug. http://heartbleed.com/, 2016.
Accessed: February, 2017.

[15] uthash: Hash Table for C Structures. https://troydhanson.
github.io/uthash/, 2016. Accessed: February, 2017.

[16] P. Akritidis, C. Cadar, C. Raiciu, M. Costa, and M. Castro.
Preventing memory error exploits with WIT. In Proceedings
of the IEEE Symposium on Security and Privacy (SP), 2008.

1s

[17] P. Akritidis, M. Costa, M. Castro, and S. Hand. Baggy Bounds
Checking: An efficient and backwards-compatible defense
against out-of-bounds errors. In Proceedings of the 18th
Conference on USENIX Security Symposium (Sec), 2009.

[18] Anselm R Garbe. Static Linux. http://sta.1li/faq.
Accessed: February, 2017.

[19] S. Arnautov, B. Trach, FE. Gregor, T. Knauth, A. Martin,
C. Priebe, J. Lind, D. Muthukumaran, D. O’ Keeffe, M. L.
Stillwell, D. Goltzsche, D. Eyers, R. Kapitza, P. Pietzuch, and
C. Fetzer. SCONE: Secure Linux Containers with Intel SGX.
In Proceedings of the 12th USENIX Symposium on Operating
Systems Design and Implementation (OSDI), 2016.

[20] T. M. Austin, S. E. Breach, G. S. Sohi, T. M. Austin, S. E.
Breach, and G. S. Sohi. Efficient detection of all pointer and
array access errors. In Proceedings of the ACM SIGPLAN
1994 conference on Programming language design and
implementation (PLDI), 1994.

[21] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Niirnberger, and
J. Pewny. You can run but you can’t read: Preventing disclosure
exploits in executable code. In Proceedings of the 2014
ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2014.

[22] A. Baumann, M. Peinado, and G. Hunt. Shielding applications
from an untrusted cloud with Haven. In Proceedings of the
11th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), 2014.

[23] E. D. Berger and B. G. Zorn. DieHard: Probabilistic memory
safety for unsafe languages. In Proceedings of the 27th ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), 2006.

[24] S. Bhatkar and R. Sekar. Data space randomization. In
Proceedings of the 5th International Conference on Detection
of Intrusions and Malware, and Vulnerability Assessment
(DIMVA), 2008.

[25] C. Bienia and K. Li. PARSEC 2.0: A new benchmark suite
for chip-multiprocessors. In Proceedings of the 5th Annual
Workshop on Modeling, Benchmarking and Simulation (MoBS),
2009.

[26] M. Brunink, M. Susskraut, and C. Fetzer. Boundless memory
allocations for memory safety and high availability. In Proceedings of the 2011 IEEE/TFIP 41st International Conference on
Dependable Systems & Networks (DSN), 2011.

[27] N. Burow, S. Carr, S. Brunthaler, M. Payer, J. Nash, P. Larsen,
and M. Franz. Control-Flow Integrity: Precision, security, and
performance. arXiv preprint arXiv: 1602.04056, 2016.

[28] C. Cadar, P. Akritidis, M. Costa, J.-P. Martin, and M. Castro.
Data randomization. Technical Report MSR-TR-2008-120,
Microsoft Research, 2008.

[29] M. Castro, M. Costa, and T. Harris. Securing software by enforcing data-flow integrity. In Proceedings of the 7th Symposium on
Operating Systems Design and Implementation (OSDI), 2006.

[30] S. Checkoway and H. Shacham. Iago attacks: Why the system
call API is a bad untrusted RPC interface. In Proceedings of the
18th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2013.
[31] X. Chen, H. Bos, and C. Giuffrida. CodeArmor: Virtualizing the
Code Space to Counter Disclosure Attacks. In Proceedings of
the European Symposium on Security and Privacy (EuroS&P),
2017.

[32] D. Chisnall, C. Rothwell, R. N. Watson, J. Woodruff, M. Vadera,
S. W. Moore, M. Roe, B. Davis, and P. G. Neumann. Beyond the
PDP-11: Architectural Support for a Memory-Safe C Abstract
Machine. In Proceedings of the 20th International Conference
on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2015.

[33] V. Costan and S. Devadas. Intel SGX Explained.
Cryptology ePrint Archive, Report 2016/086, 2016.
http://eprint.iacr.org/2016/086.

[34] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R.
Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code
randomization resilient to memory disclosure. In Proceedings
of the IEEE Symposium on Security and Privacy (SP), 2015.

[35] D. Dhurjati and V. Adve. Backwards-compatible array bounds
checking for C with very low overhead. In Proceeding of the
28th international conference on Software engineering (ICSE),
2006.

[36] D. Dhurjati, S. Kowshik, and V. Adve. SAFECode: Enforcing
alias analysis for weakly typed languages. In Proceedings of the
27th ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), 2006.

[37] G. J. Duck and R. H. C. Yap. Heap bounds protection with
Low Fat Pointers. In Proceedings of the 25th International
Conference on Compiler Construction (CC’ 16), 2016.

[38] G. J. Duck, R. H.C. Yap, and L. Cavallaro. Stack Bounds Protection with Low Fat Pointers. In Proceedings of the 2017 Network
and Distributed System Security Symposium (NDSS ’17),2017.

[39] U. Erlingsson, M. Abadi, M. Vrable, M. Budiu, and G. C.
Necula. Xfi: Software guards for system address spaces. In
Proceedings of the 7th Symposium on Operating Systems
Design and Implementation (OSDI), 2006.

[40] B. Fitzpatrick. Distributed caching with Memcached. In Linux
Journal, 2004.

[41] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced
operating system security through efficient and fine-grained
address space randomization. In Proceeding of the 21st
USENIX Security Symposium (Sec), 2012.

[42] J. Graham-Cumming. Incident report on memory leak caused
by Cloudflare parser bug. https://blog.cloudflare.
com/ incident - report-on-memory- Leak- caused- bycloudflare-parser-bug/. Accessed: February, 2017.

[43] J. L. Henning. SPEC CPU2006 benchmark descriptions.
SIGARCH Computer Architecture News, 2006.

[44] R. W. M. Jones and P. H. J. Kelly. Backwards-compatible
bounds checking for arrays and pointers in C programs. In
Proceedings of the 3rd International Workshop on Automatic
Debugging (AADEBUG), 1997.

[45] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address Space
Layout Permutation (ASLP): Towards fine-grained randomization of commodity software. In Proceedings of the 22nd Annual
Computer Security Applications Conference (ACSAC), 2006.

=
[46] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar,
and D. Song. Code-pointer integrity. In Proceedings of the
11th USENIX Conference on Operating Systems Design and
Implementation (OSDI), 2014.

[47] A. Kwon, U. Dhawan, J. M. Smith, T. EF Knight, Jr, and
A. DeHon. Low-fat pointers: Compact encoding and efficient
gate-level implementation of fat pointers for spatial safety
and capability-based security. In Proceedings of the 2013
ACM SIGSAC Conference on Computer and Communications
Security (CCS), 2013.

[48] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK:
Automated software diversity. In Proceedings of the 35th IEEE
Symposium on Security and Privacy (SP),2014.

[49] C. Lattner and V. Adve. LLVM: A compilation framework for
lifelong program analysis and transformation. In Proceedings
of the International Symposium on Code Generation and
Optimization (CGO), 2004.

[50] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee.
ASLR-Guard: Stopping address space leakage for code reuse
attacks. In Proceedings of the 22nd ACM SIGSAC Conference
on Computer and Communications Security (CCS), 2015.

[51] V. B. Lvin, G. Novark, E. D. Berger, and B. G. Zorn.
Archipelago: Trading address space for reliability and security.
In Proceedings of the 13th International Conference on
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2008.

[52] A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Maziéres.
CCFI: Cryptographically enforced control flow integrity.
In Proceedings of the 22nd ACM SIGSAC Conference on
Computer and Communications Security (CCS), 2015.

[53] EF McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas,
H. Shafi, V. Shanbhogue, and U. R. Savagaonkar. Innovative
instructions and software model for isolated execution. In Proceedings of the 2nd International Workshop on Hardware and
Architectural Support for Security and Privacy (HASP), 2013.

[54] K. Memarian, J. Matthiesen, J. Lingard, K. Nienhuis, D. Chisnall, R. N. M. Watson, and P. Sewell. Into the Depths of C:
Elaborating the De Facto Standards. In Proceedings of the 37th
ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), 2016.

[55] S. Nagarakatte, M. M. K. Martin, and S. Zdancewic. Everything
You Want to Know About Pointer-Based Checking. In Leibniz
International Proceedings in Informatics (LIPIcs), 2015.

[56] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic.
SoftBound: Highly compatible and complete spatial memory
safety for C. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation
(PLDI), 2009.

[57] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic.
CETS: Compiler Enforced Temporal Safety for C. In
Proceedings of the 2010 International Symposium on Memory
Management (ISMM), 2010.

[58] N. Nethercote and J. Seward. Valgrind: A Framework for
Heavyweight Dynamic Binary Instrumentation. In Proceedings
of the 2007 ACM SIGPLAN conference on Programming
language design and implementation (PLDI), 2007.
[59] A. M. Niranjan Hasabnis and R. Sekar. Light-weight bounds
checking. In Proceedings of the 2012 ACMAEEE International
Symposium on Code Generation and Optimization (CGO),
2012.

[60] O. Obhrimenko, M. Costa, C. Fournet, C. Gkantsidis,
M. Kohlweiss, and D. Sharma. Observing and preventing
leakage in MapReduce. In Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications
Security (CCS), 2015.

[61] O. Oleksenko, D. Kuvaiskii, P. Bhatotia, P. Felber, and C. Fetzer.
Intel MPX Explained: An Empirical Study of Intel MPX
and Software-based Bounds Checking Approaches. 2017,
arXiv:1702.00719.

[62] O. Oleksenko, D. Kuvaiskii, P. Bhatotia, and C. Fetzer. Fex:
A software systems evaluator. In Proceedings of the 2017
IEEEAFIP 47th International Conference on Dependable
Systems & Networks (DSN), 2017.

[63] C. Ranger, R. Raghuraman, A. Penmetsa, G. Bradski, and
C. Kozyrakis. Evaluating MapReduce for multi-core and
multiprocessor systems. In Proceedings of the IEEE 13th
International Symposium on High Performance Computer
Architecture (HPCA), 2007.

[64] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, and T. Leu. A dynamic technique for eliminating buffer overflow vulnerabilities
(and other memory errors). In Proceedings of the 20th Annual
Computer Security Applications Conference (ACSAC), 2004.

[65] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and
W. S. Beebee, Jr. Enhancing server availability and security
through failure-oblivious computing. In Proceedings of the
6th Conference on Symposium on Operating Systems Design
& Implementation (OSDI), 2004.

[66] Roman Shaposhnik. What does dynamic linking and com
munism have got in common? https://blogs.oracle.
com/ rvs/entry/what_does_dynamic_linking_and.
Accessed: February, 2017.

[67] O. Ruwase and M. S. Lam. A practical dynamic buffer overflow
detector. In Proceeding of the Network and Distributed System
Security Symposium (NDSS), 2004.

[68] J. Seo, B. Lee, S. Kim, M.-W. Shih, I. Shin, D. Han, and T. Kim.
SGX-Shield: Enabling Address Space Layout Randomization
for SGX Programs. In Proceedings of the Network and
Distributed System Security Symposium (NDSS), 2017.

[69] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov.
AddressSanitizer: A fast address sanity checker. In Proceedings
of the 2012 USENIX Annual Technical Conference (ATC), 2012.

[70] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and
D. Boneh. On the effectiveness of address-space randomization.
In Proceedings of the 11th ACM Conference on Computer and
Communications Security (CCS), 2004.

[71] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena. Preventing
page faults from telling your secrets. In Proceedings of the
11th ACM Asia Conference on Computer and Communications
Security (AsiaCCS), 2016.

[72] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen,
and A.-R. Sadeghi. Just-In-Time Code Reuse: On the effec
tiveness of fine-grained address space layout randomization.
In Proceedings of the 2013 IEEE Symposium on Security and

Privacy (SP), 2013.

[73] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund,
and T. Walter. Breaking the memory secrecy assumption. In
Proceedings of the Second European Workshop on System
Security (EUROSEC), 2009.

[74] L. Szekeres, M. Payer, T. Wei, and D. Song. SoK: Eternal War
in Memory. In Proceedings of the 2013 IEEE Symposium on
Security and Privacy (SP), 2013.

[75] J. Tang, Y. Cui, Q. Li, K. Ren, J. Liu, and R. Buyya. Ensuring
security and privacy preservation for cloud data services. ACM
Computing Surveys, 2016.

[76] Ulrich Drepper. Static Linking Considered Harmful.
https://ww.akkadia.org/drepper/no_static_
Linking. html. Accessed: February, 2017.

[77] V. van der Veen, N. Dutt Sharma, L. Cavallaro, and H. Bos.
Memory errors: The past, the present, and the future. In
Proceedings of the 15th International Symposium on Research
in Attacks, Intrusions and Defenses (RAID), 2012.

[78] Various authors. Dynamic Linking. http://harmful.
cat-v.org/software/dynamic-linking/. Accessed:
February, 2017.

[79] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham.
Efficient software-based fault isolation. In Proceedings of the
Fourteenth ACM Symposium on Operating Systems Principles
(SOSP), 1993.

[80] J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar, and
W. Joosen. RIPE: Runtime intrusion prevention evaluator. In
Proceedings of the 27th Annual Computer Security Applications
Conference (ACSAC), 2011.

[81] J. Woodruff, R. N. Watson, D. Chisnall, S$. W. Moore, J. Anderson, B. Davis, B. Laurie, P. G. Neumann, R. Norton, and
M. Roe. The CHERI capability model: Revisiting RISC in
an age of risk. In Proceeding of the 41st Annual International
Symposium on Computer Architecture (ISCA), 2014.

[82] W. Xu, D. C. DuVarney, and R. Sekar. An efficient and
backwards-compatible transformation to ensure memory safety
of C programs. ACM SIGSOFT Software Engineering Notes,
2004.

[83] Y. Xu, W. Cui, and M. Peinado. Controlled-channel attacks:
Deterministic side channels for untrusted operating systems.
In Proceedings of the 2015 IEEE Symposium on Security and
Privacy (SP), 2015.

[84] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou. Practical control flow integrity and
randomization for binary executables. In Proceedings of the
IEEE Symposium on Security and Privacy (SP), 2013.