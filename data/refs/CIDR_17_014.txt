REFERENCES

[1] Peloton Database Management System. http://pelotondb.org.
[2] M. Abadi and et al. TensorFlow: Large-Scale Machine Learning on
Heterogeneous Distributed Systems. CoRR, abs/1603.04467, 2016.
[3] S. Abdelwahed and et al. A control-based framework for
self-managing distributed computing systems. WOSS’04, pages 3–7.
[4] D. Agrawal and et al. Database scalability, elasticity, and autonomy in
the cloud. DASFAA, pages 2–15, 2011.
[5] S. Agrawal, S. Chaudhuri, and V. R. Narasayya. Automated selection
of materialized views and indexes in SQL databases. VLDB, 2000.
[6] S. Agrawal and et al. Integrating vertical and horizontal partitioning
into automated physical database design. SIGMOD, 2004.
[7] I. Alagiannis, S. Idreos, and A. Ailamaki. H2o: A hands-free adaptive
store. SIGMOD, pages 1103–1114, 2014.
[8] O. D. Anderson. Time Series Analysis and Forecasting: The
Box-Jenkins Approach. Butterworth & Co Publishers, 1976.
[9] J. Arulraj and et al. Bridging the archipelago between row-stores and
column-stores for hybrid workloads. SIGMOD, pages 583–598, 2016.
[10] D. Basu and et al. Cost-Model Oblivious Database Tuning with
Reinforcement Learning, pages 253–268. 2015.
[11] P. Belknap, B. Dageville, K. Dias, and K. Yagoub. Self-tuning for SQL
performance in Oracle Database 11g. ICDE, pages 1694–1700, 2009.
[12] P. Bernstein, M. Brodie, S. Ceri, and et al. The asilomar report on
database research. SIGMOD record, 27(4):74–80, 1998.
[13] E. Cecchet, R. Singh, and et al. Dolly: Virtualization-driven database
provisioning for the cloud. VEE ’11, pages 51–62, 2011.
[14] S. Ceri, S. Navathe, and G. Wiederhold. Distribution design of logical
database schemas. IEEE Trans. Softw. Eng., 9(4):487–504, 1983.
[15] S. Chaudhuri and V. Narasayya. Autoadmin “what-if” index analysis
utility. SIGMOD Rec., 27(2):367–378, 1998.
[16] S. Chaudhuri and V. Narasayya. Self-tuning database systems: a
decade of progress. VLDB, pages 3–14, 2007.
[17] S. Chaudhuri and V. R. Narasayya. An efficient cost-driven index
selection tool for microsoft SQL server. VLDB, pages 146–155, 1997.
[18] S. Chaudhuri and G. Weikum. Rethinking db system architecture:
Towards a self-tuning RISC-style database system. VLDB’00.
[19] C. Curino, E. P. Jones, and et al. Workload-aware database monitoring
and consolidation. SIGMOD, pages 313–324, 2011.
[20] S. Das, F. Li, and et al. Automated demand-driven resource scaling in
relational database-as-a-service. SIGMOD, pages 1923–1934, 2016.
[21] S. Das and et al. Elastras: An elastic, scalable, and self-managing
transactional database for the cloud. ACM TDS, 38(1):5:1–5:45, 2013.
[22] B. Debnath, D. Lilja, and M. Mokbel. SARD: A statistical approach
for ranking database tuning parameters. ICDEW, pages 11–18, 2008.
[23] K. Dias, M. Ramacher, U. Shaft, V. Venkataramani, and G. Wood.
Automatic performance diagnosis and tuning in oracle. CIDR, 2005.
[24] N. Du, X. Ye, and J. Wang. Towards workflow-driven database system
workload modeling. DBTest, pages 1–6, 2009.
[25] S. Duan, V. Thummala, and S. Babu. Tuning database configuration
parameters with iTuned. VLDB, 2:1246–1257, August 2009.
[26] S. Elnaffar, P. Martin, and R. Horman. Automatically classifying
database workloads. CIKM, pages 622–624, 2002.
[27] M. R. Frank, E. Omiecinski, and S. B. Navathe. Adaptive and
automated index selection in RDBMS. EDBT, pages 277–292, 1992.
[28] G. Graefe and et al. Transactional support for adaptive indexing.
VLDB, 23(2):303–328, 2014.
[29] C. Gupta and et al. PQR: Predicting Query Execution Times for
Autonomous Workload Management. ICAC, pages 13–22, 2008.
[30] H. Gupta, V. Harinarayan, A. Rajaraman, and J. D. Ullman. Index
selection for olap. ICDE, pages 208–219, 1997.

[31] J. M. Hellerstein and M. Stonebraker. What goes around comes around.
chapter Transaction Management, pages 2–41. 4th edition, 2005.
[32] S. Hochreiter and J. Schmidhuber. Long short-term memory. Neural
Comput., 9(8):1735–1780, Nov. 1997.
[33] M. Holze and N. Ritter. Towards workload shift detection and
prediction for autonomic databases. In PIKM, pages 109–116, 2007.
[34] M. Holze and N. Ritter. Autonomic Databases: Detection of Workload
Shifts with n-Gram-Models. In ADBIS, pages 127–142, 2008.
[35] S. Idreos. Data systems that are easy to design (SIGMOD Blog).
http://wp.sigmod.org/?p=1617, June 2015.
[36] S. Idreos, M. L. Kersten, and S. Manegold. Database cracking. CIDR,
pages 68–78, 2007.
[37] J. O. Kephart. Research challenges of autonomic computing. ICSE,
pages 15–22, 2005.
[38] S. Kumar. Oracle Database 10g: The self-managing database, Nov.
2003. White Paper.
[39] E. Kwan, S. Lightstone, and et al. Automatic configuration for IBM
DB2 universal database. Technical report, IBM, jan 2002.
[40] G. Lanfranchi and et al. Toward a new landscape of sys. mgmt. in an
autonomic computing env. IBM Syst. J., 42(1):119–128, 2003.
[41] B. Mozafari and et al. Performance and resource modeling in
highly-concurrent oltp workloads. SIGMOD, pages 301–312, 2013.
[42] D. Narayanan, E. Thereska, and A. Ailamaki. Continuous resource
monitoring for self-predicting DBMS. MASCOTS’05, pages 239–248.
[43] A. Pavlo and et al. On Predictive Modeling for Optimizing Transaction
Execution in Parallel OLTP Systems. VLDB, 5:85–96, 2011.
[44] J. Rao, C. Zhang, N. Megiddo, and G. Lohman. Automating physical
database design in a parallel database. SIGMOD’02, pages 558–569.
[45] J. Richalet and et al. Model predictive heuristic control: Applications
to industrial processes. Automatica, 14(5):413–428, 1978.
[46] F. Rosenthal and W. Lehner. Efficient in-database maintenance of
arima models. SSDBM, pages 537–545. 2011.
[47] N. Roy and et al. Finding approximate POMDP solutions through
belief compression. J. Artif. Intell. Res. (JAIR), 23:1–40, 2005.
[48] N. Roy and et al. Efficient autoscaling in the cloud using predictive
models for workload forecasting. CLOUD, pages 500–507, 2011.
[49] E. Samaras, M. Shinzuka, and A. Tsurui. ARMA representation of
random processes. J. of Eng. Mechanics, 111(3):449–461, 1985.
[50] C. Sapia. PROMISE: Predicting Query Behavior to Enable Predictive
Caching Strategies for OLAP Systems. DaWaK, pages 224–233, 2000.
[51] D. Silver, A. Huang, and et al. Mastering the game of go with deep
neural networks and tree search. Nature, 529:484–503, 2016.
[52] A. A. Soror and et al. Automatic virtual machine configuration for
database workloads. SIGMOD, pages 953–966, 2008.
[53] N. Srivastava and et al. Dropout: A simple way to prevent neural
networks from overfitting. J. ML. Res., 15(1):1929–1958, 2014.
[54] M. Stonebraker and U. Cetintemel. "one size fits all": An idea whose
time has come and gone. ICDE, pages 2–11, 2005.
[55] A. J. Storm, C. Garcia-Arellano, and et al. Adaptive self-tuning
memory in DB2. VLDB, pages 1081–1092, 2006.
[56] D. G. Sullivan and et al. Using probabilistic reasoning to automate
software tuning. SIGMETRICS, pages 404–405, 2004.
[57] W. Tian, P. Martin, and W. Powley. Techniques for automatically
sizing multiple buffer pools in DB2. CASCON, pages 294–302, 2003.
[58] G. Valentin, M. Zuliani, and et al. DB2 advisor: an optimizer smart
enough to recommend its own indexes. ICDE, pages 101–110, 2000.
[59] G. Weikum and et al. Self-tuning db technology and info services:
From wishful thinking to viable engineering. VLDB’02, pages 20–31.
[60] D. Wiese and et al. Autonomic tuning exp.: A frmwk. for best-practice
oriented autonomic db tuning. CASCON, pages 3:27–3:41, 2008.
[61] K. Yagoub, P. Belknap, B. Dageville, K. Dias, S. Joshi, and H. Yu.
Oracle’s sql performance analyzer. IEEE Data Eng. Bul., 31(1), 2008.
[62] Q. Yao, A. An, and X. Huang. Finding and analyzing database user
sessions. DASFAA, pages 851–862, 2005.
[63] D. Y. Yoon, N. Niu, and B. Mozafari. Dbsherlock: A performance
diagnostic tool for transactional databases. SIGMOD, 2016.
[64] D. C. Zilio, J. Rao, and et al. DB2 design advisor: integrated
automatic physical database design. VLDB, pages 1087–1097, 2004.

