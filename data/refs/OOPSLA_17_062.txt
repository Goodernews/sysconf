[1] Martin Abadi and Leslie Lamport. 1991. The Existence of Refinement Mappings. Theor. Comput. Sci. 82, 2 (May 1991),

253-284, https://doi.org/10.1016/0304-3975(91)90224-P



[2] Parosh Abdulla, Stavros Aronis, Bengt Jonsson, and Konstantinos Sagonas. 2014. Optimal dynamic partial order reduction.

In ACM SIGPLAN Notices, Vol. 49. ACM, 373-384.



[3] Tamarah Arons, Amir Pnueli, Sitvanit Ruah, Ying Xu, and Lenore Zuck. 2001. Parameterized Verification with Automatically

Computed Inductive Assertions. Springer Berlin Heidelberg, Berlin, Heidelberg, 221-234.



[4] Samik Basu, Tevfik Bultan, and Meriem Ouederni. 2012. Synchronizability for verification of asynchronously communicating

systems. In International Workshop on Verification, Model Checking, and Abstract Interpretation. Springer, 56-71.



[5] Nikolaj Bjorner, Ken McMillan, and Andrey Rybalchenko. 2013. On Solving Universally Quantified Horn Clauses. In SAS.



[6] Luca Cardelli. 1984. Compiling a functional language. In Proceedings of the 1984 ACM Symposium on LISP and functional

programming. ACM, 208-217.



[7] Minas Charalambides, Peter Dinges, and Gul Agha. 2016. Parameterized, concurrent session types for asynchronous

multi-actor interactions. Science of Computer Programming 115 (2016), 100-126.



[8] Alessandro Cimatti, Iman Narasamdya, and Marco Roveri. 2011. Boosting Lazy Abstraction for SystemC with Partial Order

Reduction. In TACAS.



[9] Patrick Cousot and Radhia Cousot. 1977. Abstract interpretation: a unified lattice model for static analysis of programs by

construction or approximation of fixpoints. In Proceedings of the 4th ACM SIGACT-SIGPLAN symposium on Principles of

programming languages. ACM, 238-252.



[10] Jeffrey Dean and Sanjay Ghemawat. 2004. MapReduce: Simplified Data Processing on Large Clusters. In OSDI.



[11] Pierre-Malo Deniélou, Nobuko Yoshida, Andi Bejleri, and Raymond Hu. 2012. Parameterised Multiparty Session Types.

Logical Methods in Computer Science 8, 4 (2012). https://doi.org/10.2168/LMCS-8(4:6)2012



[12] Ankush Desai, Pranav Garg, and P Madhusudan. 2014. Natural proofs for asynchronous programs using almost-synchronous

reductions. In ACM SIGPLAN Notices, Vol. 49. ACM, 709-725.



[13] Ankush Desai, Shaz Qadeer, and Sanjit A. Seshia. 2015. Systematic testing of asynchronous reactive systems. In Proceedings

of the 2015 10th Joint Meeting on Foundations of Software Engineering, ESEC/FSE 2015, Bergamo, Italy, August 30 - September

4, 2015. 73-83.



[14] Disco-Project. 2017. Disco MapReduce. http://discoproject.org. (April 2017).



[15] E. D’Osualdo, J. Kochems, and C.-H. L. Ong. 2013. Automatic Verification of Erlang-Style Concurrency. In Proceedings of the

20th Static Analysis Symposium (SAS’13). Springer-Verlag.



[16] Emanuele D’Osualdo, Jonathan Kochems, and Luke Ong. 2012. Soter: An Automatic Safety Verifier for Erlang. In Proceedings

of the 2Nd Edition on Programming Systems, Languages and Applications Based on Actors, Agents, and Decentralized Control

ions (AGERE! 2012). ACM, New York, NY, USA, 137-140. https://doi.org/10.1145/2414639.2414658



[17] Cezara Dragoi, Thomas A Henzinger, Helmut Veith, Josef Widder, and Damien Zufferey. 2014. A logic-based framework for

verifying consensus algorithms. In International Conference on Verification, Model Checking, and Abstract Interpretation.

Springer, 161-181.



[18] Cezara Dragoi, Thomas A Henzinger, and Damien Zufferey. 2016. PSYNC: A partially synchronous language for fault-tolerant

distributed algorithms. ACM SIGPLAN Notices 51, 1 (2016), 400-415.



[19] Tayfun Elmas, Shaz Qadeer, and Serdar Tasiran. 2009. A Calculus of Atomic Actions. In Proceedings of the 36th Annual

ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’09). ACM, New York, NY, USA, 2-15.

https://doi.org/10.1145/1480881.1480885



[20] Jeff Epstein, Andrew P Black, and Simon Peyton-Jones. 2011. Towards Haskell in the cloud. In ACM SIGPLAN Notices, Vol. 46.

ACM, 118-129.



[21] Azadeh Farzan, Zachary Kincaid, and Andreas Podelski. 2014. Proofs that count. ACM SIGPLAN Notices 49, 1 (2014),

151-164.



[22] Cormac Flanagan and Patrice Godefroid. 2005. Dynamic partial-order reduction for model checking software. In ACM

Sigplan Notices, Vol. 40. ACM, 110-121.



[23] Cormac Flanagan and Shaz Qadeer. 2003. A type and effect system for atomicity. In ACM SIGPLAN Notices, Vol. 38. ACM,

338-349,



[24] Lars-Ake Fredlund and Hans Svensson. 2007. McErlang: a model checker for a distributed functional programming language.

In ACM SIGPLAN Notices, Vol. 42. ACM, 125-136.



[25] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 110. Publication date: October 2017.

110:26 Alexander Bakst, Klaus v. Gleissenthall, Rami Gékhan Kic1, and Ranjit Jhala



[26] Klaus v Gleissenthall, Nikolaj Bjorner, and Andrey Rybalchenko. 2016. Cardinalities and universal quantifiers for verifying

parameterized systems. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and

Implementation. ACM, 599-613.



[27] Patrice Godefroid, J van Leeuwen, J Hartmanis, G Goos, and Pierre Wolper. 1996. Partial-order methods for the verification of

concurrent systems: an approach to the state-explosion problem. Vol. 1032. Springer Heidelberg.



[28] Kohei Honda. 1993. Types for dyadic interaction. In CONCUR.



[29] Kohei Honda, Eduardo RB Marques, Francisco Martins, Nicholas Ng, Vasco T Vasconcelos, and Nobuko Yoshida. 2012.

Verification of MPI programs using session types. In European MPI Users’ Group Meeting. Springer, 291-293.



[30] Kohei Honda, Nobuko Yoshida, and Marco Carbone. 2008. Multiparty asynchronous session types.. In POPL.



[31] Kohei Honda, Nobuko Yoshida, and Marco Carbone. 2016. Multiparty Asynchronous Session Types. }, ACM 63, 1, Article 9

(March 2016), 67 pages. https://doi.org/10.1145/2827695



[32] Frank Huch. 1999. Verification of Erlang Programs using Abstract Interpretation and Model Checking. In Proceedings of the

fourth ACM SIGPLAN International Conference on Functional Programming (ICFP ’99), Paris, France, September 27-29, 1999.

261-272. https://doi-org/10.1145/317636.317908



[33] Charles Edwin Killian, James W. Anderson, Ranjit Jhala, and Amin Vahdat. 2007. Life, Death, and the Critical Transition:

Finding Liveness Bugs in Systems Code. In 4th Symposium on Networked Systems Design and Implementation (NSDI 2007),

April 11-13, 2007, Cambridge, Massachusetts, USA, Proceedings.



[34] Igor Konnov, Helmut Veith, and Josef Widder. 2015. SMT and POR beat counter abstraction: Parameterized model checking

of threshold-based distributed algorithms. In International Conference on Computer Aided Verification. Springer, 85-102.



[35] Butler Lampson and Howard E. Sturgis. 1976. Crash Recovery in a Distributed Data Storage System. In Technical report

XEROX Palo Alto Research Center.



[36] Richard J. Lipton. 1975. Reduction: A Method of Proving Properties of Parallel Programs. Commun. ACM 18, 12 (Dec. 1975),

717-721, https://doi.org/10.1145/361227.361234



[37] Simon Marlow. 2012. Parallel and concurrent programming in Haskell. In Central European Functional Programming School.

Springer, 339-401.



[38] Kenneth L, McMillan. 1999. Verification of Infinite State Systems by Compositional Model Checking. In Correct Hardware

Design and Verification Methods, 10th IFIP WG 10.5 Advanced Research Working Conference, CHARME ’99, Bad Herrenalb,

Germany, September 27-29, 1999, Proceedings. 219-234. https://doi.org/10.1007/3-540-48153-2_17



[39] Neil Mitchell and Colin Runciman. 2009. Losing functions without gaining data: another look at defunctionalisation. In

Proceedings of the 2nd ACM SIGPLAN Symposium on Haskell. ACM, 13-24.



[40] David Monniaux and Francesco Alberti. 2015. A Simple Abstraction of Arrays and Maps by Program Translation. Springer

Berlin Heidelberg, Berlin, Heidelberg, 217-234. https://doi.org/10.1007/978-3-662-48288-9_13



[41] Nicholas Ng and Nobuko Yoshida. 2016. Static Deadlock Detection for Concurrent Go by Global Session Graph Synthesis.

In CC.



[42] C. Norris IP and David L. Dill. 1996. Better verification through symmetry. Formal Methods in System Design 9, 1 (1996),

41-75. https://doi.org/10.1007/BF00625968



[43] Dominic Orchard and Nobuko Yoshida. 2016. Effects as sessions, sessions as effects. In POPL.



[44] Oded Padon, Kenneth L McMillan, Aurojit Panda, Mooly Sagiv, and Sharon Shoham. 2016. Ivy: safety verification by

interactive generalization. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and

Implementation. ACM, 614-630.



[45] Amir Pnueli, Sitvanit Ruah, and Lenore Zuck. 2001. Automatic deductive verification with invisible invariants. In International

Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer, 82-97.



[46] Amir Pnueli, Jessie Xu, and Lenore Zuck. 2002. Liveness with (0, 1, 00)-counter abstraction. In International Conference on

Computer Aided Verification. Springer, 107-122.



[47] Alejandro Sanchez, Sriram Sankaranarayanan, César Sanchez, and Bor-Yuh Evan Chang. 2012. Invariant Generation for

Parametrized Systems Using Self-reflection. Springer Berlin Heidelberg, Berlin, Heidelberg, 146-163. https://doi.org/10.

1007/978-3-642-33125-1_12



[48] Stephen F Siegel. 2005. Efficient verification of halting properties for MPI programs with wildcard receives. In International

Workshop on Verification, Model Checking, and Abstract Interpretation. Springer, 413-429.



[49] Stephen F Siegel and George S Avrunin. 2005. Modeling wildcard-free MPI programs for verification. In Proceedings of the

tenth ACM SIGPLAN symposium on Principles and practice of parallel programming. ACM, 95-106.



[50] Stephen F Siegel and Ganesh Gopalakrishnan. 2011. Formal analysis of message passing. In International Workshop on

Verification, Model Checking, and Abstract Interpretation. Springer, 2-18.



[51] Stephen F. Siegel and Timothy K. Zirkel. [n. d.]. Automatic Formal Verification of MPI-Based Parallel Programs. 309-310.



[52] Alexander J. Summers and Peter Miiller. 2016. Actor Services. In ESOP.



[53] Samira Tasharofi, Rajesh K. Karmani, Steven Lauterburg, Axel Legay, Darko Marinov, and Gul Agha. 2012. TransDPOR:

A Novel Dynamic Partial-order Reduction Technique for Testing Actor Programs. In Proceedings of the 14th Joint IFIP



[54] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 110. Publication date: October 2017.

Verifying Distributed Programs via Canonical Sequentialization 110:27



[55] WG 6.1 International Conference and Proceedings of the 32Nd IFIP WG 6.1 International Conference on Formal Techniques

for Distributed Systems (FMOODS’12/FORTE 12). Springer-Verlag, Berlin, Heidelberg, 219-234. https://doi.org/10.1007/

978-3-642-30793-5_14



[56] Bjorn Wachter, Daniel Kroening, and Joel Ouaknine. 2013. Verifying multi-threaded software with Impact. In Formal Methods

in Computer-Aided Design (FMCAD), 2013. IEEE, 210-217.



[57] James R Wilcox, Doug Woos, Pavel Panchekha, Zachary Tatlock, Xi Wang, Michael D Ernst, and Thomas Anderson. 2015.

Verdi: a framework for implementing and formally verifying distributed systems. In ACM SIGPLAN Notices, Vol. 50. ACM,

357-368.



[58] Junfeng Yang, Tisheng Chen, Ming Wu, Zhilei Xu, Xuezheng Liu, Haoxiang Lin, Mao Yang, Fan Long, Lintao Zhang, and

Lidong Zhou. 2009. MODIST: Transparent Model Checking of Unmodified Distributed Systems. In Proceedings of the 6th

USENIX Symposium on Networked Systems Design and Implementation, NSDI 2009, April 22-24, 2009, Boston, MA, USA.

213-228.



[59] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 110. Publication date: October 2017.
