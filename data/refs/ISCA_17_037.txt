[1] Sarita V. Adve and Kourosh Gharachorloo. 1996. Shared Memory Consistency
Models: A Tutorial. Computer 29, 12 (Dec. 1996), 66–76. https://doi.org/10.
1109/2.546611
[2] C. Scott Ananian, Krste Asanovic, Bradley C. Kuszmaul, Charles E. Leiserson,
and Sean Lie. 2005. Unbounded Transactional Memory. In Proceedings of
the 11th International Symposium on High-Performance Computer Architecture
(HPCA ’05). IEEE Computer Society, Washington, DC, USA, 316–327. https:
//doi.org/10.1109/HPCA.2005.41
[3] ARM. 2016. ARMv8-A architecture evolution. (2016). https://community.arm.
com/groups/processors/blog/2016/01/05/armv8-a-architecture-evolution.
[4] Rachata Ausavarungnirun, Kevin Kai-Wei Chang, Lavanya Subramanian,
Gabriel H. Loh, and Onur Mutlu. 2012. Staged Memory Scheduling: Achieving High Performance and Scalability in Heterogeneous Systems. In Proceedings of the 39th Annual International Symposium on Computer Architecture
(ISCA ’12). IEEE Computer Society, Washington, DC, USA, 416–427. http:
//dl.acm.org/citation.cfm?id=2337159.2337207
[5] Kumud Bhandari, Dhruva R. Chakrabarti, and Hans-J. Boehm. 2012. Implications of CPU Caching on Byte-addressable Non-Volatile Memory Programming.
Technical Report HPL-2012-236. Hewlett-Packard.
[6] Colin Blundell, Milo M.K. Martin, and Thomas F. Wenisch. 2009. InvisiFence:
Performance-transparent Memory Ordering in Conventional Multiprocessors. In
Proceedings of the 36th Annual International Symposium on Computer Architecture (ISCA ’09). ACM, New York, NY, USA, 233–244. https://doi.org/10.1145/
1555754.1555785
[7] Hans-J. Boehm and Sarita V. Adve. 2008. Foundations of the C++ Concurrency
Memory Model. In Proceedings of the 29th ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI ’08). ACM, New
York, NY, USA, 68–78. https://doi.org/10.1145/1375581.1375591
[8] Hans-J. Boehm and Dhruva R. Chakrabarti. 2016. Persistence Programming
Models for Non-volatile Memory. In Proceedings of the 2016 ACM SIGPLAN
International Symposium on Memory Management (ISMM 2016). ACM, New
York, NY, USA, 55–67. https://doi.org/10.1145/2926697.2926704
[9] Luis Ceze, James Tuck, Pablo Montesinos, and Josep Torrellas. 2007. BulkSC:
Bulk Enforcement of Sequential Consistency. In Proceedings of the 34th Annual
International Symposium on Computer Architecture (ISCA ’07). ACM, New York,
NY, USA, 278–289. https://doi.org/10.1145/1250662.1250697
[10] Dhruva R. Chakrabarti, Hans-J. Boehm, and Kumud Bhandari. 2014. Atlas:
Leveraging Locks for Non-volatile Memory Consistency. In Proceedings of the
2014 ACM International Conference on Object Oriented Programming Systems
Languages & Applications (OOPSLA ’14). ACM, New York, NY, USA, 433–452.
https://doi.org/10.1145/2660193.2660224
[11] Andreas Chatzistergiou, Marcelo Cintra, and Stratis D. Viglas. 2015.
REWIND: Recovery Write-Ahead System for In-Memory Non-Volatile DataStructures. PVLDB 8, 5 (2015), 497–508. http://www.vldb.org/pvldb/vol8/
p497-chatzistergiou.pdf
[12] Sangyeun Cho and Hyunjin Lee. 2009. Flip-N-Write: A Simple Deterministic Technique to Improve PRAM Write Performance, Energy and Endurance.
In Proceedings of the 42Nd Annual IEEE/ACM International Symposium on
Microarchitecture (MICRO 42). ACM, New York, NY, USA, 347–357. https:
//doi.org/10.1145/1669112.1669157
[13] Joel Coburn, Adrian M. Caulfield, Ameen Akel, Laura M. Grupp, Rajesh K. Gupta,
Ranjit Jhala, and Steven Swanson. 2011. NV-Heaps: Making Persistent Objects
Fast and Safe with Next-generation, Non-volatile Memories. In Proceedings of
the Sixteenth International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA,
105–118. https://doi.org/10.1145/1950365.1950380
[14] Jeremy Condit, Edmund B. Nightingale, Christopher Frost, Engin Ipek, Benjamin Lee, Doug Burger, and Derrick Coetzee. 2009. Better I/O Through Byteaddressable, Persistent Memory. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP ’09). ACM, New York, NY, USA,
133–146. https://doi.org/10.1145/1629575.1629589
[15] Brian F. Cooper, Adam Silberstein, Erwin Tam, Raghu Ramakrishnan, and Russell
Sears. 2010. Benchmarking Cloud Serving Systems with YCSB. In Proceedings
of the 1st ACM Symposium on Cloud Computing (SoCC ’10). ACM, New York,
NY, USA, 143–154. https://doi.org/10.1145/1807128.1807152
[16] Timothy J Dell. 1997. A white paper on the benefits of chipkill-correct ECC for
PC server main memory. IBM Microelectronics Division (1997), 1–23.
[17] Kshitij Doshi, Ellis Giles, and Peter J. Varman. Atomic persistence for SCM with
a non-intrusive backend controller. In 2016 IEEE International Symposium on
High Performance Computer Architecture, HPCA 2016, Barcelona, Spain, March
12-16, 2016.
[18] Subramanya R. Dulloor, Sanjay Kumar, Anil Keshavamurthy, Philip Lantz,
Dheeraj Reddy, Rajesh Sankaran, and Jeff Jackson. 2014. System Software
for Persistent Memory. In Proceedings of the Ninth European Conference on Computer Systems (EuroSys ’14). ACM, New York, NY, USA, Article 15, 15 pages.
https://doi.org/10.1145/2592798.2592814
[19] Kourosh Gharachorloo, Daniel Lenoski, James Laudon, Phillip Gibbons, Anoop
Gupta, and John Hennessy. 1990. Memory Consistency and Event Ordering in
Scalable Shared-memory Multiprocessors. In Proceedings of the 17th Annual
International Symposium on Computer Architecture (ISCA ’90). ACM, New York,
NY, USA, 15–26. https://doi.org/10.1145/325164.325102
[20] Andrew Hay, Karin Strauss, Timothy Sherwood, Gabriel H. Loh, and Doug Burger.
2011. Preventing PCM Banks from Seizing Too Much Power. In Proceedings
of the 44th Annual IEEE/ACM International Symposium on Microarchitecture
(MICRO-44). ACM, New York, NY, USA, 186–195. https://doi.org/10.1145/
2155620.2155642
[21] Intel. 2014. Intel Architecture Instruction Set Extensions Programming Reference
(319433-022). (2014). https://software.intel.com/sites/default/files/managed/0d/
53/319433-022.pdf.
[22] Intel and Micron. 2015. Intel and Micron Produce Breakthrough Memory Technology. (2015). http://newsroom.intel.com/community/intel_newsroom/blog/
2015/07/28/intel-and-micron-produce-breakthrough-memory-technology.
[23] Joseph Izraelevitz, Terence Kelly, and Aasheesh Kolli. 2016. Failure-Atomic Persistent Memory Updates via JUSTDO Logging. In Proceedings of the Twenty-First
International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS ’16). ACM, New York, NY, USA, 427–442.
https://doi.org/10.1145/2872362.2872410
[24] Joseph Izraelevitz, Hammurabi Mendes, and Michael L. Scott. 2016. Linearizability of Persistent Memory Objects Under a Full-System-Crash Failure Model. In Distributed Computing: 30th International Symposium, DISC
2016, Paris, France, September 27-29, 2016. Proceedings, Cyril Gavoille and
David Ilcinkas (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 313–327.
https://doi.org/10.1007/978-3-662-53426-7_23
[25] Arpit Joshi, Vijay Nagarajan, Marcelo Cintra, and Stratis Viglas. 2015. Efficient
Persist Barriers for Multicores. In Proceedings of the 48th International Symposium on Microarchitecture (MICRO-48). ACM, New York, NY, USA, 660–671.
https://doi.org/10.1145/2830772.2830805
[26] Arpit Joshi, Vijay Nagarajan, Marcelo Cintra, and Stratis Viglas. 2017. ATOM:
Atomic Durability in Non-volatile Memory through Hardware Support for Logging. In 23rd International Conference on High-Performance Computer Architecture (HPCA-23 2017). 1–12.
[27] Yoongu Kim, Dongsu Han, Onur Mutlu, and Mor Harchol-Balter. 2010. ATLAS:
A scalable and high-performance scheduling algorithm for multiple memory
controllers. In 16th International Conference on High-Performance Computer
Architecture (HPCA-16 2010), 9-14 January 2010, Bangalore, India. 1–12. https:
//doi.org/10.1109/HPCA.2010.5416658
[28] Yoongu Kim, Michael Papamichael, Onur Mutlu, and Mor Harchol-Balter. 2010.
Thread Cluster Memory Scheduling: Exploiting Differences in Memory Access
Behavior. In Proceedings of the 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO ’43). IEEE Computer Society, Washington,
DC, USA, 65–76. https://doi.org/10.1109/MICRO.2010.51
[29] Aasheesh Kolli, Steven Pelley, Ali Saidi, Peter M. Chen, and Thomas F. Wenisch.
2016. High-Performance Transactions for Persistent Memories. In Proceedings
of the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’16). ACM, New York,
NY, USA, 399–411. https://doi.org/10.1145/2872362.2872381
[30] Aasheesh Kolli, Jeff Rosen, Stephan Diestelhorst, Ali Saidi, Steven Pelley, Sihang
Liu, Peter M. Chen, and Thomas F. Wenisch. 2016. Delegated persist ordering. In
49th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO
2016, Taipei, Taiwan, October 15-19, 2016. 1–13. https://doi.org/10.1109/MICRO.
2016.7783761
[31] Benjamin C. Lee, Engin Ipek, Onur Mutlu, and Doug Burger. 2009. Architecting
Phase Change Memory As a Scalable Dram Alternative. In Proceedings of the
36th Annual International Symposium on Computer Architecture (ISCA ’09).
ACM, New York, NY, USA, 2–13. https://doi.org/10.1145/1555754.1555758
[32] Ren-Shuo Liu, De-Yu Shen, Chia-Lin Yang, Shun-Chih Yu, and ChengYuan Michael Wang. 2014. NVM Duet: Unified Working Memory and Persistent
Store Architecture. In Proceedings of the 19th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS
’14). ACM, New York, NY, USA, 455–470. https://doi.org/10.1145/2541940.
2541957
[33] Youyou Lu, Jiwu Shu, Long Sun, and Onur Mutlu. 2014. Loose-Ordering Consistency for persistent memory. In 32nd IEEE International Conference on Computer Design, ICCD 2014, Seoul, South Korea, October 19-22, 2014. 216–223.
https://doi.org/10.1109/ICCD.2014.6974684
[34] Brandon Lucia, Luis Ceze, Karin Strauss, Shaz Qadeer, and Hans-J. Boehm.
2010. Conflict Exceptions: Simplifying Concurrent Language Semantics with
Precise Hardware Exceptions for Data-races. In Proceedings of the 37th Annual
International Symposium on Computer Architecture (ISCA ’10). ACM, New York,
NY, USA, 210–221. https://doi.org/10.1145/1815961.1815987
[35] Amirhossein Mirhosseini, Aditya Agrawal, and Josep Torrellas. 2016. Survive:
Pointer-based In-DRAM Incremental Checkpointing for Low-Cost Data Persistence and Rollback-Recovery. IEEE Computer Architecture Letters (2016).
[36] Sanketh Nalli, Swapnil Haria, Mark D. Hill, Michael M. Swift, Haris Volos, and
Kimberly Keeton. 2017. An Analysis of Persistent Memory Use with WHISPER.
In Proceedings of the 22nd International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS ’17).
[37] Dushyanth Narayanan and Orion Hodson. 2012. Whole-system Persistence. In
Proceedings of the Seventeenth International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS XVII). ACM, New
York, NY, USA, 401–410. https://doi.org/10.1145/2150976.2151018
[38] Faisal Nawab, Dhruva Chakrabarti, Terence Kelly, and Charles B. Morey III. 2014.
Procrastination Beats Prevention: Timely Sufficient Persistence for Efficient Crash
Resilience. Technical Report HPL-2014-70. Hewlett-Packard.
[39] Simo Neuvonen, Antoni Wolski, Markku Manner, and Vilho Raatikka. 2011.
Telecom Application Transaction Processing Benchmark. (2011).
http:
//tatpbenchmark.sourceforge.net/.
[40] Jessica Ouyang, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. 2013.
. . . And Region Serializability for All. In Presented as part of the 5th USENIX
Workshop on Hot Topics in Parallelism.
[41] Steven Pelley, Peter M. Chen, and Thomas F. Wenisch. 2014. Memory Persistency. In Proceeding of the 41st Annual International Symposium on Computer Architecuture (ISCA ’14). IEEE Press, Piscataway, NJ, USA, 265–276.
http://dl.acm.org/citation.cfm?id=2665671.2665712
[42] Moinuddin K. Qureshi, John Karidis, Michele Franceschini, Vijayalakshmi Srinivasan, Luis Lastras, and Bulent Abali. 2009. Enhancing Lifetime and Security
of PCM-based Main Memory with Start-gap Wear Leveling. In Proceedings of
the 42Nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 42). ACM, New York, NY, USA, 14–23. https://doi.org/10.1145/1669112.
1669117
[43] Moinuddin K. Qureshi, Andre Seznec, Luis A. Lastras, and Michele M. Franceschini. 2011. Practical and Secure PCM Systems by Online Detection of Malicious
Write Streams. In Proceedings of the 2011 IEEE 17th International Symposium on
High Performance Computer Architecture (HPCA ’11). IEEE Computer Society,
Washington, DC, USA, 478–489. http://dl.acm.org/citation.cfm?id=2014698.
2014882
[44] Moinuddin K. Qureshi, Vijayalakshmi Srinivasan, and Jude A. Rivers. 2009.
Scalable High Performance Main Memory System Using Phase-change Memory
Technology. In Proceedings of the 36th Annual International Symposium on
Computer Architecture (ISCA ’09). ACM, New York, NY, USA, 24–33. https:
//doi.org/10.1145/1555754.1555760
[45] Jinglei Ren, Jishen Zhao, Samira Khan, Jongmoo Choi, Yongwei Wu, and Onur
Mutlu. 2015. ThyNVM: Enabling Software-transparent Crash Consistency in
Persistent Memory Systems. In Proceedings of the 48th International Symposium
on Microarchitecture (MICRO-48). ACM, New York, NY, USA, 672–685. https:
//doi.org/10.1145/2830772.2830802
[46] Scott Rixner, William J. Dally, Ujval J. Kapasi, Peter Mattson, and John D.
Owens. 2000. Memory Access Scheduling. In Proceedings of the 27th Annual
International Symposium on Computer Architecture (ISCA ’00). ACM, New York,
NY, USA, 128–138. https://doi.org/10.1145/339647.339668
[47] Aritra Sengupta, Swarnendu Biswas, Minjia Zhang, Michael D. Bond, and Milind
Kulkarni. 2015. Hybrid Static–Dynamic Analysis for Statically Bounded Region
Serializability. SIGARCH Comput. Archit. News 43, 1 (March 2015), 561–575.
https://doi.org/10.1145/2786763.2694379
[48] Jaroslav Sevcik and Peter Sewell. 2011. C/C++11 mappings to processors. (2011).
https://www.cl.cam.ac.uk/~pes20/cpp/cpp0xmappings.html.
[49] Transaction Processing Performance Council (TPC). 2010. TPC Benchmark B.
(2010). http://www.tpc.org/tpc_documents_current_versions/pdf/tpc-c_v5-11.
pdf.
[50] Ten H Tzen and Lionel M Ni. 1991. Dynamic Loop Scheduling for Share-Memory
Multiprocessors.. In ICPP (2). 247–250.
[51] Shivaram Venkataraman, Niraj Tolia, Parthasarathy Ranganathan, and Roy H.
Campbell. 2011. Consistent and Durable Data Structures for Non-volatile Byteaddressable Memory. In Proceedings of the 9th USENIX Conference on File and
Stroage Technologies (FAST’11). USENIX Association, Berkeley, CA, USA, 5–5.
http://dl.acm.org/citation.cfm?id=1960475.1960480
[52] Haris Volos, Sanketh Nalli, Sankarlingam Panneerselvam, Venkatanathan
Varadarajan, Prashant Saxena, and Michael M. Swift. 2014. Aerie: Flexible
File-system Interfaces to Storage-class Memory. In Proceedings of the Ninth
European Conference on Computer Systems (EuroSys ’14). ACM, New York, NY,
USA, Article 14, 14 pages. https://doi.org/10.1145/2592798.2592810
[53] Haris Volos, Andres Jaan Tack, and Michael M. Swift. 2011. Mnemosyne:
Lightweight Persistent Memory. In Proceedings of the Sixteenth International
Conference on Architectural Support for Programming Languages and Operating
Systems (ASPLOS XVI). ACM, New York, NY, USA, 91–104. https://doi.org/10.
1145/1950365.1950379
[54] Tianzheng Wang and Ryan Johnson. 2014. Scalable Logging Through Emerging
Non-volatile Memory. Proc. VLDB Endow. 7, 10 (June 2014), 865–876. https:
//doi.org/10.14778/2732951.2732960
[55] Xiaojian Wu and A. L. Narasimha Reddy. 2011. SCMFS: A File System for
Storage Class Memory. In Proceedings of 2011 International Conference for High
Performance Computing, Networking, Storage and Analysis (SC ’11). ACM, New
York, NY, USA, Article 39, 11 pages. https://doi.org/10.1145/2063384.2063436
[56] C. Xu, D. Niu, N. Muralimanohar, R. Balasubramonian, T. Zhang, S. Yu, and Y.
Xie. 2015. Overcoming the challenges of crossbar resistive memory architectures.
In 2015 IEEE 21st International Symposium on High Performance Computer
Architecture (HPCA). 476–488. https://doi.org/10.1109/HPCA.2015.7056056
[57] Jianhui Yue and Yifeng Zhu. 2013. Accelerating Write by Exploiting PCM
Asymmetries. In Proceedings of the 2013 IEEE 19th International Symposium on
High Performance Computer Architecture (HPCA) (HPCA ’13). IEEE Computer
Society, Washington, DC, USA, 282–293. https://doi.org/10.1109/HPCA.2013.
6522326
[58] Jishen Zhao, Sheng Li, Doe Hyun Yoon, Yuan Xie, and Norman P. Jouppi. 2013.
Kiln: Closing the Performance Gap Between Systems with and Without Persistence Support. In Proceedings of the 46th Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO-46). ACM, New York, NY, USA, 421–
432. https://doi.org/10.1145/2540708.2540744
[59] Jishen Zhao, Onur Mutlu, and Yuan Xie. 2014. FIRM: Fair and High-Performance
Memory Control for Persistent Memory Systems. In Proceedings of the 47th
Annual IEEE/ACM International Symposium on Microarchitecture (MICRO-47).
IEEE Computer Society, Washington, DC, USA, 153–165. https://doi.org/10.
1109/MICRO.2014.47
[60] P. Zhou, Y. Du, Y. Zhang, and J. Yang. 2010. Fine-grained QoS scheduling for
PCM-based main memory systems. In 2010 IEEE International Symposium on
Parallel Distributed Processing (IPDPS). 1–12. https://doi.org/10.1109/IPDPS.
2010.5470451
[61] Ping Zhou, Bo Zhao, Jun Yang, and Youtao Zhang. 2009. A Durable and Energy
Efficient Main Memory Using Phase Change Memory Technology. In Proceedings
of the 36th Annual International Symposium on Computer Architecture (ISCA ’09).
ACM, New York, NY, USA, 14–23. https://doi.org/10.1145/1555754.1555759
