[1] Intel processor trace decoder library.
https://github.com/01org/processortrace.
[2] Intel PT Micro Tutorial.
https://sites.google.com/site/
intelptmicrotutorial.
[3] Linux perf documentation.
https://github.com/torvalds/linux/tree/
master/tools/perf.
[4] Mozilla rr.
https://github.com/mozilla/rr.
[5] The PARSEC benchmarks.
http://parsec.cs.princeton.edu/.
[6] Racey: A stress test for deterministic execution. http://pages.cs.wisc.edu/~markhill/
racey.html.
[7] A real-world bug caused by relaxed consistency.
http://stackoverflow.com/questions/
16159203.
[8] G. Altekar and I. Stoica. Odr: Output-deterministic
replay for multicore debugging. In Proceedings of
the ACM SIGOPS 22Nd Symposium on Operating
Systems Principles, SOSP, 2009.
[9] T. S. architecture manual. Version 9. SPARC International, Inc. 1994.
[10] J. Arulraj, P.-C. Chang, G. Jin, and S. Lu.
Production-run software failure diagnosis via hardware performance counters. In Proceedings of the
Eighteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, 2013.
[11] T. Ball and J. R. Larus. Efficient path profiling. In
Proceedings of the 29th Annual ACM/IEEE International Symposium on Microarchitecture, MICRO
29, 1996.
[12] C. Cadar, D. Dunbar, and D. Engler. Klee: Unassisted and automatic generation of high-coverage
tests for complex systems programs. In Proceedings of the 8th USENIX Conference on Operating
Systems Design and Implementation, OSDI, 2008.
[13] Y. Chen and H. Chen. Scalable deterministic replay
in a parallel full-system emulator. In Proceedings
of the 18th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP,
2013.
[14] L. De Moura and N. Bjørner. Z3: An efficient
smt solver. In Tools and Algorithms for the Construction and Analysis of Systems, pages 337–340.
Springer, 2008.
[15] J. Gray. Why do computers stop and what can be
done about it? In Symposium on Reliability in Distributed Software and Database Systems, pages 3–
12. IEEE Computer Society, 1986.
[16] D. R. Hower and M. D. Hill. Rerun: Exploiting
episodes for lightweight memory race recording. In
Proceedings of the 35th Annual International Symposium on Computer Architecture, ISCA, 2008.
[17] J. Huang, P. Liu, and C. Zhang. Leap: Lightweight
deterministic multi-processor replay of concurrent
java programs. In Proceedings of the Eighteenth
ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE, 2010.
[18] J. Huang, C. Zhang, and J. Dolby. Clap: Recording
local executions to reproduce concurrency failures.
In Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, 2013.
[19] B. Kasikci, B. Schubert, C. Pereira, G. Pokam, and
G. Candea. Failure sketching: A technique for automated root cause diagnosis of in-production failures. In Proceedings of the 25th Symposium on Operating Systems Principles, SOSP, 2015.
[20] D. Lee, P. M. Chen, J. Flinn, and S. Narayanasamy.
Chimera: Hybrid program analysis for determinism. In Proceedings of the 33rd ACM SIGPLAN
Conference on Programming Language Design and
Implementation, PLDI, 2012.
[21] D. Lee, M. Said, S. Narayanasamy, and Z. Yang.
Offline symbolic analysis to infer total store order.
In 2011 IEEE 17th International Symposium on
High Performance Computer Architecture, pages
357–358. IEEE, 2011.
[22] D. Lee, M. Said, S. Narayanasamy, Z. Yang, and
C. Pereira. Offline symbolic analysis for multiprocessor execution replay. In Proceedings of the
42Nd Annual IEEE/ACM International Symposium
on Microarchitecture, MICRO-44, 2009.
[23] P. Liu, X. Zhang, O. Tripp, and Y. Zheng. Light:
Replay via tightly bounded recording. In Proceedings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation,
PLDI, 2015.
[24] N. Machado, D. Quinta, B. Lucia, and L. Rodrigues. Concurrency debugging with differential schedule projections. ACM Trans. Softw. Eng.
Methodol., 25(2), Apr. 2016.
[25] P. Montesinos, L. Ceze, and J. Torrellas. Delorean:
Recording and deterministically replaying sharedmemory multiprocessor execution ef?ciently. In
Proceedings of the 35th Annual International Symposium on Computer Architecture, ISCA, 2008.
[26] S. Narayanasamy, G. Pokam, and B. Calder.
Bugnet: Continuously recording program execution for deterministic replay debugging. In Proceedings of the 32Nd Annual International Symposium on Computer Architecture, ISCA, 2005.
[27] S. Park, Y. Zhou, W. Xiong, Z. Yin, R. Kaushik,
K. H. Lee, and S. Lu. Pres: Probabilistic replay
with execution sketching on multiprocessors. In
Proceedings of the ACM SIGOPS 22Nd Symposium
on Operating Systems Principles, SOSP, 2009.
[28] G. Pokam, C. Pereira, S. Hu, A.-R. Adl-Tabatabai,
J. Gottschlich, J. Ha, and Y. Wu. Coreracer: A
practical memory race recorder for multicore x86
tso processors. In Proceedings of the 44th Annual
IEEE/ACM International Symposium on Microarchitecture, MICRO-44, 2011.
[29] P. Pratikakis, J. S. Foster, and M. Hicks. Locksmith:
Context-sensitive correlation analysis for race detection. In Proceedings of the 27th ACM SIGPLAN
Conference on Programming Language Design and
Implementation, PLDI ’06, 2006.
[30] K. Vaswani, M. J. Thazhuthaveetil, and Y. N.
Srikant. A programmable hardware path profiler.
In Proceedings of the International Symposium on
Code Generation and Optimization, CGO, 2005.
[31] K. Veeraraghavan, D. Lee, B. Wester, J. Ouyang,
P. M. Chen, J. Flinn, and S. Narayanasamy. Doubleplay: Parallelizing sequential logging and replay. In Proceedings of the Sixteenth International
Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS,
2011.
[32] D. Weeratunge, X. Zhang, and S. Jagannathan. Analyzing multicore dumps to facilitate concurrency
bug reproduction. In Proceedings of the Fifteenth
Edition of ASPLOS on Architectural Support for
Programming Languages and Operating Systems,
ASPLOS, 2010.
[33] M. Xu, R. Bodik, and M. D. Hill. A” flight data
recorder” for enabling full-system multiprocessor
deterministic replay. In Computer Architecture,
2003. Proceedings. 30th Annual International Symposium on, pages 122–133. IEEE, 2003.
[34] Z. Yang, M. Yang, L. Xu, H. Chen, and B. Zang.
Order: Object centric deterministic replay for java.
In Proceedings of the 2011 USENIX Conference on
USENIX Annual Technical Conference, USENIXATC, 2011.
[35] J. Yu, S. Narayanasamy, C. Pereira, and G. Pokam.
Maple: A coverage-driven testing tool for multithreaded programs. In ACM SIGPLAN Conference
on Object Oriented Programming, Systems, Languages, and Applications, pages 485–502, 2012.
[36] X. Yuan, C. Wu, Z. Wang, J. Li, P.-C. Yew,
J. Huang, X. Feng, Y. Lan, Y. Chen, and Y. Guan.
Recbulc: Reproducing concurrency bugs using local clocks. In Proceedings of the 37th International
Conference on Software Engineering - Volume 1,
ICSE, 2015.
[37] C. Zamfir and G. Candea. Execution synthesis: A
technique for automated software debugging. In
Proceedings of the 5th European Conference on
Computer Systems, EuroSys, 2010.
[38] J. Zhou, X. Xiao, and C. Zhang. Stride: Searchbased deterministic replay in polynomial time via
bounded linkage. In Proceedings of the 34th International Conference on Software Engineering,
ICSE, 2012.
