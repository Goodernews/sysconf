[1] AHO, A. V., LAM, M. S., SETHI, R., AND ULLMAN, J. D. Compilers: Principles, Techniques,
and Tools, 2nd ed. Addison Wesley, 2006.
[2] ANDERSEN, J., AND LAWALL, J. L. Generic
patch inference. In Proc. of the 23rd IEEE International Conference on Automated Software Engineering (ASE’08) (Sept. 2008)
[3] ANGLUIN, D. Learning regular sets from queries
and counterexamples. Information and Computation 75, 2 (Nov. 1987), 87–106.
[4] BAKKEN, D. E., ZHAN, Z., JONES, C. C., AND
KARR, D. A. Middleware support for voting and
data fusion. In Proc. of the 2001 International
Conference on Dependable Systems and Networks
(DSN’01) (July 2001).
[5] BAROWY, D. W., GULWANI, S., HART, T., AND
ZORN, B. Flashrelate: Extracting relational data
from semi-structured spreadsheets using examples.
In Proc. of the Conference on Programing Language Design and Implementation (PLDI’15) (June
2015).
[6] BARTOLI, A., DAVANZO, G., DE LORENZO, A.,
MEDVET, E., AND SORIO, E. Automatic synthesis
of regular expressions from examples. Computer
47, 12 (Dec. 2014), 72–80.
[7] BARTOLI, A., DE LORENZO, A., MEDVET, E.,
AND TARLAO, F. Inference of regular expressions
for text extraction from examples. IEEE Transactions on Knowledge and Data Engineering 28, 5
(May 2016), 1217–1230.
[8] BERGER, E. D., AND ZORN, B. G. Diehard:
probabilistic memory safety for unsafe languages.
In Proc. of the Conference on Programing Language Design and Implementation (PLDI’06) (June
2006).
[9] BONGARD, J., AND LIPSON, H. Active coevolutionary learning of deterministic finite automata.
Journal of Machine Learning Research 6 (Dec.
2005), 1651–1678.
[10] BRAUER, F., RIEGER, R., MOCAN, A., AND
BARCZYNSKI, W. M. Enabling information extraction by inference of regular expressions from
sample entities. In Proc. of the 22th ACM International Conference on Information and Knowledge
Management (CIKM’11) (Oct. 2011).
[11] CADAR, C., AND HOSEK, P. Multi-version software updates. In Proc. of the 4th Workshop on Hot
Topics in Software Upgrades (HotSWUp’12) (June
2012).
[12] CHEN, L., AND AVIZIENIS, A. N-version programming: A fault-tolerance approach to reliability of software operation. In Proc. of the 8th IEEE
International Symposium on Fault Tolerant Computing (FTCS’78) (June 1978).
[13] COX, B., EVANS, D., FILIPI, A., ROWANHILL, J., HU, W., DAVIDSON, J., KNIGHT,
J., NGUYEN-TUONG, A., AND HISER, J. Nvariant systems: A secretless framework for security through diversity. In Proc. of the 15th USENIX
Security Symposium (USENIX Security’06) (JulyAug. 2006).
[14] CRAMERI, O., KNEZEVIC, N., KOSTIC, D.,
BIANCHINI, R., AND ZWAENEPOEL, W. Staged
deployment in Mirage, an integrated software upgrade testing and distribution system. In Proc. of
the 21st ACM Symposium on Operating Systems
Principles (SOSP’07) (Oct. 2007).
[15] FESER, J. K., CHAUDHURI, S., AND DILLIG, I.
Synthesizing data structure transformations from
input-output examples. In Proc. of the Conference
on Programing Language Design and Implementation (PLDI’15) (June 2015).
[16] GULWANI, S. Dimensions in program synthesis.
In Proc. of the 12th ACM SIGPLAN Symposium on
Principles and Practice of Declarative Programming (PPDP’10) (July 2010).
[17] GULWANI, S. Automating string processing in
spreadsheets using input-output examples. In Proc.
of the 38th ACM Symposium on the Principles of
Programming Languages (POPL’11) (Jan. 2011).
[18] HOSEK, P., AND CADAR, C. Safe software updates via multi-version execution. In Proc. of the
35th International Conference on Software Engineering (ICSE’13) (May 2013).
[19] HOSEK, P., AND CADAR, C. Varan the Unbelievable: An efficient N-version execution framework.
In Proc. of the 20th International Conference on
Architectural Support for Programming Languages
and Operating Systems (ASPLOS’15) (Mar. 2015).
[20] KONING, K., BOS, H., AND GIUFFRIDA, C.
Secure and efficient multi-variant execution using
hardware-assisted process virtualization. In Proc.
of the 2016 46th International Conference on Dependable Systems and Networks (DSN’16) (June
2016).
[21] LEE, M., SO, S., AND OH, H. Synthesizing regular expressions from examples for introductory automata assignments. In Proc. of the 2016 International Conference on Generative Programming and
Component Engineering (GPCE’16) (Oct. 2016).
[22] MAURER, M., AND BRUMLEY, D. TACHYON:
Tandem execution for efficient live patch testing. In Proc. of the 21st USENIX Security Symposium
(USENIX Security’12) (Aug. 2012).
[23] MCCANNE, S., AND JACOBSON, V. The BSD
packet filter: A new architecture for user-level
packet capture. In Proc. of the 1993 Winter
USENIX Conference (USENIX Winter’93) (Jan.
1993).
[24] NETHERCOTE, N., AND SEWARD, J. Valgrind: A
program supervision framework. Electronic Notes
in Theoretical Computer Science 89, 2 (2003).
[25] NETHERCOTE, N., AND SEWARD, J. Valgrind:
a framework for heavyweight dynamic binary instrumentation. In Proc. of the Conference on
Programing Language Design and Implementation
(PLDI’07) (June 2007).
[26] PAREKH, R., AND HONAVAR, V. G. Learning dfa
from simple examples. Machine Learning 44, 1-2
(July 2001), 9–35.
[27] PERELMAN, D., GULWANI, S., GROSSMAN, D.,
AND PROVOST, P. Test-driven synthesis. In Proc.
of the Conference on Programing Language Design
and Implementation (PLDI’14) (June 2014).
[28] PINA, L., AND HICKS, M. Tedsuto: a general framework for testing dynamic software updates. In Proc. of the IEEE International Conference on Software Testing, Verification, and Validation (ICST’16) (Apr. 2016).
[29] SALAMAT, B., JACKSON, T., GAL, A., AND
FRANZ, M. Orchestra: intrusion detection using
parallel execution and monitoring of program variants in user-space. In Proc. of the 4th European
Conference on Computer Systems (EuroSys’09)
(Mar.-Apr. 2009).
[30] SEREBRYANY, K., BRUENING, D., POTAPENKO,
A., AND VYUKOV, D. AddressSanitizer: A fast address sanity checker. In Proc. of the 2012 USENIX
Annual Technical Conference (USENIX ATC’12)
(June 2012).
[31] SEREBRYANY, K., AND ISKHODZHANOV, T.
ThreadSanitizer—data race detection in practice. In
Workshop on Binary Instrumentation and Applications (12 2009).
[32] SEWARD, J., AND NETHERCOTE, N. Using
Valgrind to detect undefined value errors with
bit-precision. In Proc. of the 2005 USENIX
Annual Technical Conference (USENIX ATC’05)
(Apr. 2005).
[33] STEPANOV, E., AND SEREBRYANY, K. MemorySanitizer: fast detector of uninitialized memory use in C++. In Proc. of the International
Symposium on Code Generation and Optimization
(CGO’15) (Feb. 2015).
[34] VOLCKAERT, S., COPPENS, B., VOULIMENEAS,
A., HOMESCU, A., LARSEN, P., SUTTER, B. D.,
AND FRANZ, M. Secure and efficient application
monitoring and replication. In Proc. of the 2016
USENIX Annual Technical Conference (USENIX
ATC’16) (June 2016).
[35] XUE, H., DAUTENHAHN, N., AND KING, S. T.
Using replicated execution for a more secure and
reliable web browser. In Proc. of the 19th Network and Distributed System Security Symposium
(NDSS’12) (Feb. 2012).
[36] YIN, Z., YUAN, D., ZHOU, Y., PASUPATHY, S.,
AND BAIRAVASUNDARAM, L. How do fixes become bugs? In Proc. of the joint meeting of the European Software Engineering Conference and the
ACM Symposium on the Foundations of Software
Engineering (ESEC/FSE’11) (Sept. 2011).
