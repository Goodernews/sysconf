[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti.
Control-flow integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, November 2005.
[2] Matthew Arnold and Barbara G. Ryder. A framework for reducing
the cost of instrumented code. In Proceedings of the 2001 ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), Snowbird, Utah, June 2001.
[3] Adam Belay, Andrea Bittau, Ali Mashtizadeh, David Terei, David
Mazieres, and Christos Kozyrakis. Dune: Safe user-level access
to privileged CPU features. In Proceedings of the 10th Symposium on Operating Systems Design and Implementation (OSDI),
Hollywood, CA, October 2012.
[4] Tom Bergan, Owen Anderson, Joseph Devietti, Luis Ceze, and
Dan Grossman. Coredet: A compiler and runtime system for
deterministic multithreaded execution. In Proceedings of the 15th
International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), Pittsburgh,
PA, March 2010.
[5] Philippe Bergheaud, Dinesh Subhraveti, and Marc Vertes. Fault
tolerance in multiprocessor systems via application cloning. In
Proceedings of the 27th IEEE International Conference on Distributed Computing Systems (ICDCS), Toronto, Canada, June
2007.
[6] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazieres,
and Dan Boneh. Blind return oriented programming (brop), 2014.
http://www.scs.stanford.edu/brop.
[7] Danilo Bruschi, Lorenzo Cavallaro, and Andrea Lanzi. Diversified process replicÃ˛e for defeating memory error exploits. In
Proceedings of the 2007 International Performance, Computing,
and Communications Conference (IPCCC), New Orleans, LA,
April 2007.
[8] Roberto Capizzi, Antonio Longo, V. N. Venkatakrishnan, and
A. Prasad Sistla. Preventing information leaks through shadow
executions. In Proceedings of the 2008 International Conference
on Software Engineering (ICSE), Anaheim, CA, December 2008.
[9] Liming Chen and Algirdas Avizienis. N-version programming: A
fault-tolerance approach to reliability of software operation. In
Fault-Tolerant Computing, 1995, Jun. 1995.
[10] Benjamin Cox, David Evans, Adrian Filipi, Jonathan Rowanhill,
Wei Hu, Jack Davidson, John Knight, Anh Nguyen-Tuong, and
Jason Hiser. N-variant systems: A secretless framework for security through diversity. In Proceedings of the 15th Usenix Security
Symposium (Security), Vancouver, Canada, July 2006.
[11] Stephen Crane, Andrei Homescu, Stefan Brunthaler, Per Larsen,
and Michael Franz. Thwarting cache side-channel attacks through
dynamic software diversity. In Proceedings of the 2015 Annual
Network and Distributed System Security Symposium (NDSS), San
Diego, CA, February 2015.
[12] Exploit Database. nginx 1.3.9-1.4.0 - dos poc, 2013. https:
//www.exploit-db.com/exploits/25499.
[13] Exploit Database. nginx 1.3.9/1.4.0 x86 - brute force exploit, 2013.
https://www.exploit-db.com/exploits/26737.
[14] CVE Details. Vulnerabilities By Date, 2016. http://www.
cvedetails.com/browse-by-date.php.
[15] Evelyn Duesterwald and Vasanth Bala. Software profiling for
hot path prediction: less is more. ACM SIGARCH Computer
Architecture News, December 2000.
[16] Zakir Durumeric, James Kasten, David Adrian, J. Alex Halderman, Michael Bailey, Frank Li, Nicolas Weaver, Johanna Amann,
Jethro Beekman, Mathias Payer, and Vern Paxson. The matter of
heartbleed. In Proceedings of the 2014 Conference on Internet
Measurement Conference, IMC ’14, 2014.
[17] Laura Effinger-Dean, Brandon Lucia, Luis Ceze, Dan Grossman,
and Hans-J. Boehm. Ifrit: interference-free regions for dynamic
data-race detection. In Proceedings of the 23th Annual ACM Conference on Object-Oriented Programming, Systems, Languages,
and Applications (OOPSLA), Tucson, AZ, October 2012.
[18] Cormac Flanagan and Stephen N Freund. Atomizer: A dynamic
atomicity checker for multithreaded programs. In Proceedings
of the 31st ACM Symposium on Principles of Programming Languages (PoPL), Venice, Italy, January 2004.
[19] Andrei Homescu, Steven Neisius, Per Larsen, Stefan Brunthaler,
and Michael Franz. Profile-guided Automated Software Diversity.
In Proceedings of the 2013 International Symposium on Code
Generation and Optimization (CGO), Shenzhen, China, February
2013.
[20] Petr Hosek and Cristian Cadar. Safe software updates via multiversion execution. In Proceedings of the 35th International Conference on Software Engineering (ICSE), San Francisco, CA, May
2013.
[21] Petr Hosek and Cristian Cadar. Varan the unbelievable, an efficient
n-version execution framework. In Proceedings of the 20th International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), Istanbul, Turkey,
March 2015.
[22] Intel. Improving real-time performance by utilizing cache allocation technology, 2015. http://www.intel.com/content/
dam/www/public/us/en/documents/white-papers/
cache-allocation-technology-white-paper.pdf.
[23] Aamer Jaleel. Memory characterization of workloads using
instrumentation-driven simulation, 2010. http://www.jaleels.
org/ajaleel/publications/SPECanalysis.pdf.
[24] Koen Koning, Herbert Bos, and Cristiano Giuffrida. Secure and
efficient multi-variant execution using hardware-assisted process
virtualization. In Proceedings of the 46th International Conference
on Dependable Systems and Networks (DSN), Toulouse, France,
June 2016.
[25] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George
Candea, R. Sekar, and Down Song. Code pointer integrity. In
Proceedings of the 11th Symposium on Operating Systems Design
and Implementation (OSDI), Broomfield, Colorado, October 2014.
[26] Tongping Liu, Charlie Curtsinger, and Emery D. Berger. Dthreads:
Efficient and deterministic multithreading. In Proceedings of the
23rd ACM Symposium on Operating Systems Principles (SOSP),
Cascais, Portugal, October 2011.
[27] LLVM. UndefinedBehaviorSanitizer (UBSan) is a fast undefined
behavior detector, Feb. 2015. http://clang.llvm.org/docs/
UndefinedBehaviorSanitizer.html.
[28] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and
Steve Zdancewic. SoftBound: Highly compatible and complete
spatial memory safety for C. In Proceedings of the 2009 ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), Dublin, Ireland, June 2009.
[29] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve
Zdancewic. CETS: Compiler enforced temporal safety for C. In
Proceedings of the 2010 International Symposium on Memory
Management (ISMM), Toronto, Canada, June 2010.
[30] Marek Olszewski, Jason Ansel, and Saman Amarasinghe. Kendo:
Efficient deterministic multithreading in software. In Proceedings
of the 14th International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS),
Washington, DC, March 2009.
[31] Luis Pina and Cristian Cadar. Towards deployment-time dynamic
analysis of server applications. In Proceedings of the 13th International Workshop on Dynamic Analysis (WODA), Pittsburgh, PA,
October 2015.
[32] Babak Salamat, Todd Jackson, Andreas Gal, and Michael Franz.
Orchestra: Intrusion detection using parallel execution and monitoring of program variants in user-space. In Proceedings of the
ACM EuroSys Conference, Nuremberg, Germany, March 2009.
[33] Konstantin Serebryany, Derek Bruening, Alexander Potapenko,
and Dmitry Vyukov. AddressSanitizer: A fast address sanity
checker. In Proceedings of the 2012 ATC Annual Technical Conference (ATC), Boston, MA, June 2012.
[34] Hovav Shacham. The geometry of innocent flesh on the bone:
Return-into-libc without function calls (on the x86). In Proceedings of the 14th ACM Conference on Computer and Communications Security (CCS), Alexandria, VA, October–November 2007.
[35] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra
Modadugu, and Dan Boneh. On the effectiveness of address-space
randomization. In Proceedings of the 11th ACM Conference on
Computer and Communications Security (CCS), Washington, DC,
October 2004.
[36] Evgeniy Stepanov and Konstantin Serebryany. MemorySanitizer:
fast detector of uninitialized memory use in C++. In Proceedings
of the 2015 International Symposium on Code Generation and
Optimization (CGO), San Francisco, CA, February 2015.
[37] Laszlo Szekeres, Mathias Payer, Tao Wei, and Dawn Song. SoK:
Eternal war in memory. In Proceedings of the 34th IEEE Symposium on Security and Privacy (Oakland), San Francisco, CA, May
2013.
[38] Victor van der Veen, Nitish dutt Sharma, Lorenzo Cavallaro, and
Herbert Bos. Memory errors: The past, the present, and the
future. In Proceedings of the 15th International Conference on
Research in Attacks, Intrusions, and Defenses (RAID), Amsterdam,
Netherlands, September 2012.
[39] Kaushik Veeraraghavan, Peter M. Chen, Jason Flinn, and Satish
Narayanasamy. Detecting and surviving data races using complementary schedules. In Proceedings of the 23rd ACM Symposium
on Operating Systems Principles (SOSP), Cascais, Portugal, October 2011.
[40] Stijn Volckaert, Bart Coppens, Bjorn De Sutter, Koen De Bosschere, Per Larsen, and Michael Franz. Taming Parallelism in a
Multi-Variant Execution Environment. In Proceedings of the ACM
EuroSys Conference, Belgrade, Serbia, April 2017.
[41] Stijn Volckaert, Bart Coppens, and Bjorn De Sutte. Cloning your
gadgets: Complete ROP attack immunity with multi-variant execution. IEEE Transactions on Dependable and Secure Computing,
13(4):437–450, July 2016.
[42] Stijn Volckaert, Bart Coppens, Alexios Voulimeneas, Andrei
Homescu, Per Larsen, Bjorn De Sutter, and Michael Franz. Secure
and efficient application monitoring and replication. In Proceedings of the 2016 ATC Annual Technical Conference (ATC), Denver,
CO, June 2016.
[43] Jonas Wagner, Volodymyr Kuznetsov, George Candea, and Johannes Kinder. High system-code security with low overhead. In
Proceedings of the 36th IEEE Symposium on Security and Privacy
(Oakland), San Jose, CA, May 2015.
[44] Hui Xue, Nathan Dautenhahn, and Samuel T. King. Using replicated execution for a more secure and reliable web browser. In
Proceedings of the 19th Annual Network and Distributed System
Security Symposium (NDSS), San Diego, CA, February 2012.
[45] Aydan Yumerefendi, Benjamin Mickle, and Landon P. Cox.
Tightlip: Keeping applications from spilling the beans. In Proceedings of the 4th Symposium on Networked Systems Design and
Implementation (NSDI), Cambridge, MA, April 2007.
