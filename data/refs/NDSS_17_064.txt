[1] “CVE-2016-1234, CVE-2016-3191, CVE-2016-6297, CVE-2016-
6289.”

[2] M. Abadi, M. Budiu, Z. Erlingsson, and J. Ligatti, “Control-Flow

Integrity,” in Computer and Communication Security. ACM, 2005.

[3] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy Bounds
Checking: An Efﬁcient and Backwards-Compatible Defense Against
Out-of-Bounds Errors,” in USENIX Security Symposium. USENIX,
2009.

[4] T. Austin, S. Breach, and G. Sohi, “Efﬁcient Detection of All Pointer
and Array Access Errors,” in Programming Language Design and
Implementation. ACM, 1994.

[5] M. Castro, M. Costa, and T. Harris, “Securing Software by Enforcing
Data-ﬂow Integrity,” in USENIX Symposium on Operating Systems
Design and Implementation. USENIX, 2006.

[6] S. Chen, J. Xu, E. Sezer, P. Gauriar, and R. Iyer, “Non-control-
data Attacks are Realistic Threats,” in USENIX Security Symposium.
USENIX, 2005.

[7] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida,
“StackArmor: Comprehensive Protection From Stack-based Memory
Error Vulnerabilities for Binaries,” in Network and Distributed System
Security Symposium. The Internet Society, 2015.

[8] T. Dang, P. Maniatis, and D. Wagner, “The Performance Cost of Shadow
Stacks and Stack Canaries,” in ACM Symposium on Information,
Computer and Communications Security. ACM, 2015.

[9] B. Ding, Y. He, Y. Wu, A. Miller, and J. Criswell, “Baggy Bounds
with Accurate Checking,” in International Symposium on Software
Reliability Engineering Workshops.

IEEE Computer Society, 2012.

[10] G. Duck and R. Yap, “Heap Bounds Protection with Low Fat Pointers,”

in Compiler Construction. ACM, 2016.

[11] F. Eigler, “Mudﬂap: Pointer Use Checking for C/C++,” in GCC Devel-

oper’s Summit, 2003.

[12] Heartbleed bug, http://heartbleed.com, 2016.
[13] H. Hu, S. Shinde, S. Adrian, Z. Chua, P. Saxena, and Z. Liang, “Data-
Oriented Programming: On the Expressiveness of Non-Control Data
Attacks,” in IEEE Symposium on Security and Privacy. IEEE Computer
Society, 2016.
[14] Intel Corporation, “Intel 64 and IA-32 Architectures Software Devel-
opers Manual,” 2016.


[15] T. Jim, G. Morrisett, D. Grossman, M. Hicks, J. Cheney, and Y. Wang,
“Cyclone: A Safe Dialect of C,” in USENIX Annual Technical Confer-
ence. USENIX, 2002.

[16] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song,
“Code-pointer Integrity,” in USENIX Symposium on Operating Systems
Design and Implementation. USENIX, 2014.
[17] A. Kwon, U. Dhawan, J. Smith, T. Knight, and A. DeHon, “Low-fat
Pointers: Compact Encoding and Efﬁcient Gate-level Implementation
of Fat Pointers for Spatial Safety and Capability-based Security,” in
Computer and Communications Security. ACM, 2013.

[18] LLVM, http://llvm.org, 2016.
[19] S. Nagarakatte, Z. Santosh, M. Jianzhou, M. Milo, and S. Zdancewic,
“SoftBound: Highly Compatible and Complete Spatial Memory Safety
for C,” in Programming Language Design and Implementation. ACM,
2009.

[20] G. Necula, J. Condit, M. Harren, S. McPeak, and W. Weimer, “CCured:
Type-safe Retroﬁtting of Legacy Software,” Transactions on Program-
ming Languages and Systems, 2005.

[21] PaX, “Address Space Layout Randomization,” http://pax.grsecurity.net/

docs/aslr.txt.

[22] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Ad-
dressSanitizer: A Fast Address Sanity Checker,” in USENIX Annual
Technical Conference. USENIX, 2012.

[23] SPEC, https://www.spec.org/cpu2006/, 2016.
[24] L. Szekeres, M. Payer, T. Wei, and D. Song, “SoK: Eternal War
IEEE

in Memory,” in IEEE Symposium on Security and Privacy.
Computer Society, 2013.

[25] Tor, “The Tor Project,” https://www.torproject.org/.
[26] V. van der Veen, N. Dutt-Sharma, L. Cavallaro, and H. Bos, “Memory
Errors: The Past, the Present, and the Future,” in Research in Attacks,
Intrusions, and Defenses. Springer, 2012.

[27] A. Ven, “New Security Enhancements in Red Hat Enterprise Linux,”

http://www.redhat.com/f/pdf/rhel/WHP0006US Execshield.pdf.
[28] J. Wilander and M. Kamkar, “A Comparison of Publicly Available Tools
for Dynamic Buffer Overﬂow Prevention,” in Network and Distributed
System Security Symposium. The Internet Society, 2003.
[29] J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar, and W. Joosen,
“RIPE: Runtime Intrusion Prevention Evaluator,” in Annual Computer
Security Applications Conference. ACM, 2011.

[30] Y. Younan, P. Philippaerts, L. Cavallaro, R. Sekar, F. Piessens, and
W. Joosen, “PAriCheck: An Efﬁcient Pointer Arithmetic Checker for
C Programs,” in Information, Computer and Communications Security.
ACM, 2010.

[31] Y. Younan, D. Pozza, F. Piessens, and W. Joosen, “Extended Protection
Against Stack Smashing Attacks Without Performance Loss,” in Annual
Computer Security Applications Conference.
IEEE Computer Society,
2006.

