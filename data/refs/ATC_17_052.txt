[1] AVGERINOS, T., REBERT, A., CHA, S. K., AND BRUMLEY, D.
Enhancing Symbolic Execution with Veritesting. In Proceedings
of the 36th International Conference on Software Engineering
(ICSE) (Hyderabad, India, May–June 2014).
[2] BABIC´ , D., MARTIGNONI, L., MCCAMANT, S., AND SONG,
D. Statically-Directed Dynamic Automated Test Generation. In
Proceedings of the International Symposium on Software Testing
and Analysis (ISSTA) (Toronto, Canada, July 2011).
[3] BOUNIMOVA, E., GODEFROID, P., AND MOLNAR, D. Billions
and Billions of Constraints: Whitebox Fuzz Testing in Production.
In Proceedings of the 2013 International Conference on Software
Engineering (ICSE) (2013), pp. 122–131.
[4] BOYAPATI, C., KHURSHID, S., AND MARINOV, D. Korat: Automated Testing Based on Java Predicates. In Proceedings of
the International Symposium on Software Testing and Analysis
(ISSTA) (2002).
[5] BUGRARA, S., AND ENGLER, D. Redundant State Detection
for Dynamic Symbolic Execution. In Proceedings of the 2013
USENIX Annual Technical Conference (ATC) (San Jose, CA, June
2013).
[6] CADAR, C., DUNBAR, D., AND ENGLER, D. KLEE: Unassisted
and Automatic Generation of High-coverage Tests for Complex
Systems Programs. In Proceedings of the 8th USENIX Symposium
on Operating Systems Design and Implementation (OSDI) (San
Diego, CA, Dec. 2008).
[7] CADAR, C., GANESH, V., PAWLOWSKI, P. M., DILL, D. L.,
AND ENGLER, D. R. EXE: Automatically Generating Inputs of
Death. In Proceedings of the 13th ACM Conference on Computer
and Communications Security (CCS) (Alexandria, VA, Oct.–Nov.
2006).
[8] CADAR, C., AND SEN, K. Symbolic Execution for Software
Testing: Three Decades Later. Communications of the ACM 56, 2
(2013), 82–90.
[9] CHA, S. K., AVGERINOS, T., REBERT, A., AND BRUMLEY,
D. Unleashing Mayhem on Binary Code. In Proceedings of the
33rd IEEE Symposium on Security and Privacy (Oakland) (San
Francisco, CA, May 2012).
[10] CHIPOUNOV, V., KUZNETSOV, V., AND CANDEA, G. S2E: A
Platform for In Vivo Multi-Path Analysis of Software Systems.
In Proceedings of the 16th ACM International Conference on
Architectural Support for Programming Languages and Operating
Systems (ASPLOS) (Newport Beach, CA, Mar. 2011).
[11] CVE. CVE-2013-5065, 2013. http://www.cve.mitre.org/
cgi-bin/cvename.cgi?name=CVE-2013-5065.
[12] DENG, X., LEE, J., AND ROBBY. Bogor/Kiasan: A k-bounded
Symbolic Execution for Checking Strong Heap Properties of Open
Systems. In IEEE/ACM International Conference on Automated
Software Engineering (ASE) (2006).
[13] DOLAN-GAVITT, B., HULIN, P., KIRDA, E., LEEK, T., MAMBRETTI, A., ROBERTSON, W., ULRICH, F., AND WHELAN, R.
LAVA: Large-scale Automated Vulnerability Addition. In Proceedings of the 37th IEEE Symposium on Security and Privacy
(Oakland) (San Jose, CA, May 2016).
[14] ENGLER, D., AND DUNBAR, D. Under-Constrained Execution:
Making Automatic Code Destruction Easy and Scalable. In Proceedings of the International Symposium on Software Testing and
Analysis (ISSTA) (London, UK, July 2007).
[15] ESAGE LAB. IOCTL Fuzzer: Windows Kernel Driver Fuzzer.
https://code.google.com/archive/p/ioctlfuzzer/.
[16] GODEFROID, P. Compositional Dynamic Test Generation. In
Proceedings of the 34th ACM Symposium on Principles of Programming Languages (POPL) (Nice, France, Jan. 2007).
[17] GODEFROID, P., LEVEN, M. Y., AND MOLNAR, D. Automated
Whitebox Fuzz Testing. In Proceedings of the 15th Annual Network and Distributed System Security Symposium (NDSS) (San
Diego, CA, Feb. 2008).
[18] GODEFROID, P., AND LUCHAUP, D. Automatic Partial Loop
Summarization in Dynamic Test Generation. In Proceedings of
the International Symposium on Software Testing and Analysis
(ISSTA) (Toronto, Canada, July 2011).
[19] HALLER, I., SLOWINSKA, A., NEUGSCHWANDTNER, M., AND
BOS, H. Dowsing for Overflows: A Guided Fuzzer to Find Buffer
Boundary Violations. In Proceedings of the 22th USENIX Security
Symposium (Security) (Washington, DC, Aug. 2013).
[20] INTEL. Introduction to Intel Memory Protection Extensions. https://software.intel.com/en-us/
articles/introduction-to-intel-memory-protectionextensions.
[21] “J00RU” JURCZYK, M. Windows X86-64 System Call Table (NT/2000/XP/2003/Vista/2008/7/2012/8). http://j00ru.
vexillium.org/ntapi_64/.
[22] JAMROZIK, K., FRASER, G., TILLMAN, N., AND DE HALLEUX,
J. Generating Test Suites with Augmented Dynamic Symbolic
Execution. In Proceedings of International Conference on Tests
and Proofs (2013).
[23] JAMROZIK, K., FRASER, G., TILLMANN, N., AND HALLEUX,
J. D. Augmented Dynamic Symbolic Execution. In Proceedings
of IEEE/ACM International Conference on Automated Software
Engineering (ASE) (2012).
[24] JONES, D. Trinity: A Linux System Call Fuzz Tester. http:
//codemonkey.org.uk/projects/trinity/.
[25] KHURSHID, S., PAS˘ AREANU ˘ , C. S., AND VISSER, W. Generalized symbolic execution for model checking and testing. In
Proceedings of the 9th International Conference on Tools and
Algorithms for the Construction and Analysis of Systems (TACAS)
(2003).
[26] KOSMATOV, N., LEGEARD, B., PEUREUX, F., AND UTTING,
M. Boundary Coverage Criteria for Test Generation from Formal
Models. In Proceedings of 15th International Symposium on
Software Reliability Engineering (ISSRE) (2004).
[27] KUZNETSOV, V., CHIPOUNOV, V., AND CANDEA, G. Testing
Closed-Source Binary Device Drivers with DDT. In Proceedings
of the 2010 USENIX Annual Technical Conference (ATC) (Boston,
MA, June 2010).
[28] KUZNETSOV, V., SZEKERES, L., PAYER, M., CANDEA, G.,
SEKAR, R., AND SONG, D. Code-Pointer Integrity. In Proceedings of the 11th USENIX Symposium on Operating Systems Design
and Implementation (OSDI) (Broomfield, Colorado, Oct. 2014).
[29] MAJUMDAR, R., AND SEN, K. Hybrid Concolic Testing. In
Proceedings of the 29th International Conference on Software
Engineering (ICSE) (Minneapolis, MN, May 2007).
[30] MARINESCU, P. D., AND CADAR, C. make test-zesti: A Symbolic Execution Solution for Improving Regression Testing. In
Proceedings of the 34th International Conference on Software
Engineering (ICSE) (Zurich, Switzerland, June 2012).
[31] MARTIGNONI, L., MCCAMANT, S., POOSANKAM, P., SONG,
D., AND MANIATIS, P. Path-Exploration Lifting: Hi-Fi Tests for
Lo-Fi Emulators. In Proceedings of the 17th ACM International
Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS) (London, UK, Mar. 2012).
[32] MICROSOFT. KeBugCheckEX routine (Windows Drivers).
https://msdn.microsoft.com/en-us/library/windows/
hardware/ff551961(v=vs.85).aspx
[33] MICROSOFT. Methods for Accessing Data Buffers.
https://msdn.microsoft.com/en-us/library/windows/
hardware/ff554436(v=vs.85).aspx.
[34] MICROSOFT. NtCreateFile Function (Windows). https:
//msdn.microsoft.com/en-us/library/bb432380(v=vs.
85).aspx.
[35] MICROSOFT. NtDeviceIoControlFile function (Windows). https://msdn.microsoft.com/en-us/library/
ms648411(v=vs.85).aspx.
[36] MOLNAR, D., LI, X. C., AND WAGNER, D. A. Dynamic Test
Generation To Find Integer Bugs in x86 Binary Linux Programs.
In Proceedings of the 18th USENIX Security Symposium (Security)
(Montreal, Canada, Aug. 2009).
[37] NAGARAKATTE, S., ZHAO, J., MARTIN, M. M. K., AND
ZDANCEWIC, S. SoftBound: Highly Compatible and Complete
Spatial Memory Safety for C. In Proceedings of the 2009 ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI) (Dublin, Ireland, June 2009).
[38] PANDITA, R., XIE, T., TILLMANN, N., AND DE HALLEUX, J.
Guided Test Generation for Coverage Criteria. In Proceedings of
IEEE International Conference on Software Maintenance (ICSM)
(2010).
[39] RAMOS, D., AND ENGLER, D. Practical, Low-effort Verification
of Real Code using Under-constrained Execution. In Proceedings of the 23rd International Conference on Computer Aided
Verification (CAV) (Snowbird, UT, July 2011).
[40] RAMOS, D. A., AND ENGLER, D. Under-Constrained Symbolic
Execution: Correctness Checking for Real Code. In Proceedings
of the 24th USENIX Security Symposium (Security) (Washington,
DC, Aug. 2015).
[41] RENZELMANN, M. J., KADAV, A., AND SWIFT, M. M. SymDrive: Testing Drivers without Devices. In Proceedings of the
10th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (Hollywood, CA, Oct. 2012).
[42] SAXENA, P., POOSANKAM, P., MCCAMANT, S., AND SONG,
D. Loop-Extended Symbolic Execution on Binary Programs. In
Proceedings of the International Symposium on Software Testing
and Analysis (ISSTA) (Chicago, IL, July 2009).
[43] SHOSHITAISHVILI, Y., WANG, R., HAUSER, C., KRUEGEL, C.,
AND VIGNA, G. Firmalice - Automatic Detection of Authentication Bypass Vulnerabilities in Binary Firmware. In Proceedings
of the 2015 Annual Network and Distributed System Security Symposium (NDSS) (San Diego, CA, Feb. 2015).
[44] SIDIROGLOU-DOUSKOS, S., LAHTINEN, E., RITTENHOUSE,
N., PISELLI, P., LONG, F., KIM, D., AND RINARD, M. Targeted
Automatic Integer Overflow Discovery Using Goal-Directed Conditional Branch Enforcement. In Proceedings of the 20th ACM International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS) (Istanbul, Turkey,
Mar. 2015).
[45] SLOWINSKA, A., STANCESCU, T., AND BOS, H. Howard: A
Dynamic Excavator for Reverse Engineering Data Structures. In
Proceedings of the 18th Annual Network and Distributed System
Security Symposium (NDSS) (San Diego, CA, Feb. 2011).
[46] STEPHENS, N., GROSEN, J., SALLS, C., DUTCHER, A., WANG,
R., CORBETTA, J., SHOSHITAISHVILI, Y., KRUEGEL, C., AND
VIGNA, G. Driller: Augmenting Fuzzing Through Selective
Symbolic Execution. In Proceedings of the 2016 Annual Network
and Distributed System Security Symposium (NDSS) (San Diego,
CA, Feb. 2016).
[47] WANG, T., WEI, T., LIN, Z., AND ZOU, W. IntScope: Automatically Detecting Integer Overflow Vulnerability in X86 Binary
Using Symbolic Execution. In Proceedings of the 16th Annual
Network and Distributed System Security Symposium (NDSS) (San
Diego, CA, Feb. 2009).
[48] WANG, X., ZHANG, L., AND TANOFSKY, P. Experience Report:
How is Dynamic Symbolic Execution Different from Manual
Testing? A Study on KLEE. In Proceedings of the International
Symposium on Software Testing and Analysis (ISSTA) (Baltimore,
MD, July 2015).
[49] XIE, Y., AND AIKEN, A. Scalable Error Detection using Boolean
Satisfiability. In Proceedings of the 32nd ACM Symposium on
Principles of Programming Languages (POPL) (Long Beach, CA,
Jan. 2005).
[50] YANG, J., SAR, C., TWOHEY, P., CADAR, C., AND ENGLER, D.
Automatically Generating Malicious Disks using Symbolic Execution. In Proceedings of the 27th IEEE Symposium on Security
and Privacy (Oakland) (Oakland, CA, May 2006).
