9. REFERENCES
[1] Scikit-Learn. http://scikit-learn.org.
[2] TPC-C. http://www.tpc.org/tpcc/.
[3] K. Andreev and H. R¨acke. Balanced graph
partitioning. In Proceedings of the Sixteenth Annual
ACM Symposium on Parallelism in Algorithms and
Architectures, SPAA ’04, pages 120–124, New York,
NY, USA, 2004. ACM.
[4] M. J. Cahill, U. R¨ohm, and A. D. Fekete. Serializable
isolation for snapshot databases. In Proceedings of the
2008 ACM SIGMOD International Conference on
Management of Data, SIGMOD ’08, pages 729–738,
New York, NY, USA, 2008. ACM.
[5] B. F. Cooper, A. Silberstein, E. Tam,
R. Ramakrishnan, and R. Sears. Benchmarking cloud
serving systems with ycsb. In Proceedings of the 1st
ACM Symposium on Cloud Computing, SoCC ’10,
pages 143–154, New York, NY, USA, 2010. ACM.
[6] C. Curino, E. Jones, Y. Zhang, and S. Madden.
Schism: A workload-driven approach to database
replication and partitioning. Proc. VLDB Endow.,
3(1-2):48–57, Sept. 2010.
[7] J. Huang and D. J. Abadi. Leopard: Lightweight
edge-oriented partitioning and replication for dynamic
graphs. Proc. VLDB Endow., 9(7):540–551, Mar. 2016.
[8] R. Kallman, H. Kimura, J. Natkins, A. Pavlo,
A. Rasin, S. Zdonik, E. P. C. Jones, S. Madden,
M. Stonebraker, Y. Zhang, J. Hugg, and D. J. Abadi.
H-store: A high-performance, distributed main
memory transaction processing system. Proc. VLDB
Endow., 1(2):1496–1499, Aug. 2008.
[9] G. Karypis and V. Kumar. A fast and high quality
multilevel scheme for partitioning irregular graphs.
SIAM J. Sci. Comput., 20(1):359–392, Dec. 1998.
[10] P.-A. Larson, S. Blanas, C. Diaconu, C. Freedman,
J. M. Patel, and M. Zwilling. High-performance
concurrency control mechanisms for main-memory
databases. Proc. VLDB Endow., 5(4):298–309, Dec.
2011.
[11] N. Narula, C. Cutler, E. Kohler, and R. Morris. Phase
reconciliation for contended in-memory transactions.
In 11th USENIX Symposium on Operating Systems
Design and Implementation (OSDI 14), pages
511–524, Broomfield, CO, Oct. 2014. USENIX
Association.
[12] A. Quamar, K. A. Kumar, and A. Deshpande. Sword:
scalable workload-aware data placement for
transactional workloads. In EDBT, 2013.
[13] K. Ren, J. M. Faleiro, and D. J. Abadi. Design
principles for scaling multi-core oltp under high
contention. In Proceedings of the 2016 International
Conference on Management of Data, SIGMOD ’16,
pages 1583–1598, New York, NY, USA, 2016. ACM.
[14] K. Ren, A. Thomson, and D. J. Abadi. Lightweight
locking for main memory database systems. In
Proceedings of the 39th international conference on
Very Large Data Bases, PVLDB’13, pages 145–156.
VLDB Endowment, 2013.
[15] M. Serafini, R. Taft, A. J. Elmore, A. Pavlo,
A. Aboulnaga, and M. Stonebraker. Clay:
Fine-grained adaptive partitioning for general
database schemas. Proc. VLDB Endow., 10:445–456,
December 2016.
[16] Z. Shang, F. Li, J. X. Yu, Z. Zhang, and H. Cheng.
Graph analytics through fine-grained parallelism. In
Proceedings of the 2016 International Conference on
Management of Data, SIGMOD ’16, pages 463–478,
New York, NY, USA, 2016. ACM.
[17] R. Taft, E. Mansour, M. Serafini, J. Duggan, A. J.
Elmore, A. Aboulnaga, A. Pavlo, and M. Stonebraker.
E-store: Fine-grained elastic partitioning for
distributed transaction processing systems. Proc.
VLDB Endow., 8(3):245–256, Nov. 2014.
[18] S. Tu, W. Zheng, E. Kohler, B. Liskov, and
S. Madden. Speedy transactions in multicore
in-memory databases. In Proceedings of the
Twenty-Fourth ACM Symposium on Operating
Systems Principles, SOSP ’13, pages 18–32, New York,
NY, USA, 2013. ACM.
[19] T. Wang and H. Kimura. Mostly-optimistic
concurrency control for highly contended dynamic
workloads on a thousand cores. Proc. VLDB Endow.,
10(2):49–60, Oct. 2016.
[20] C. Xie, C. Su, C. Littley, L. Alvisi, M. Kapritsos, and
Y. Wang. High-performance acid via modular
concurrency control. In Proceedings of the 25th
Symposium on Operating Systems Principles, SOSP
’15, pages 279–294, New York, NY, USA, 2015. ACM.
[21] X. Yu, G. Bezerra, A. Pavlo, S. Devadas, and
M. Stonebraker. Staring into the abyss: An evaluation
of concurrency control with one thousand cores. Proc.
VLDB Endow., 8(3):209–220, Nov. 2014.
[22] X. Yu, A. Pavlo, D. Sanchez, and S. Devadas. Tictoc:
Time traveling optimistic concurrency control. In
Proceedings of the 2016 International Conference on
Management of Data, SIGMOD ’16, pages 1629–1642,
New York, NY, USA, 2016. ACM.
[23] W. Zheng, S. Tu, E. Kohler, and B. Liskov. Fast
databases with fast durability and recovery through
multicore parallelism. In Proceedings of the 11th
USENIX Conference on Operating Systems Design
and Implementation, OSDI’14, pages 465–477,
Berkeley, CA, USA, 2014. USENIX Association.
