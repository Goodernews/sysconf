[1] S. Blagodurov, S. Zhuravlev, A. Fedorova, and A. Kamali, “A case for numa-aware contention management on multicore systems,” in Proceed- ings of the 19th international conference on Parallel architectures and compilation techniques. ACM, 2010, pp. 557–558.
[2] M. Herlihy and N. Shavit, The Art of Multiprocessor Programming. San Francisco, CA, USA: Morgan Kaufmann Publishers Inc., 2008.
[3] M. Herlihy, V. Luchangco, and M. Moir, “Obstruction-free synchroniza- tion: Double-ended queues as an example,” in Proceedings of the 23rd International Conference on Distributed Computing Systems, ser. ICDCS
’03. Washington, DC, USA: IEEE Computer Society, 2003, pp. 522–.
[4] M. Herlihy, “Wait-free synchronization,” ACM Trans. Program. Lang. Syst., vol. 13, no. 1, pp. 124–149, Jan. 1991.
[5] P. Chuong, F. Ellen, and V. Ramachandran, “A universal construction for wait-free transaction friendly data structures,” in Proceedings of the Twenty-second Annual ACM Symposium on Parallelism in Algorithms and Architectures, ser. SPAA ’10. New York, USA: ACM, 2010, pp. 335–344.
[6] P. Fatourou and N. D. Kallimanis, “A highly-efficient wait-free universal construction,” in Proceedings of the Twenty-third Annual ACM Symposium
on Parallelism in Algorithms and Architectures, ser. SPAA ’11. New
York, NY, USA: ACM, 2011, pp. 325–334.
[7] M. Herlihy, “A methodology for implementing highly concurrent data
objects,” ACM Trans. Program. Lang. Syst., vol. 15, no. 5, pp. 745–770,
Nov. 1993.
[8] Intel, “Reference for intel threading building blocks,” https:// www.
threadingbuildingblocks.org/, 2016.
[9] D. Dechev, P. Pirkelbauer, and B. Stroustrup, “Lock-Free Dynamically
Resizable Arrays,” in Principles of Distributed Systems, ser. Lecture Notes in Computer Science, M. M. A. A. Shvartsman, Ed. Springer Berlin Heidelberg, Dec. 2006, no. 4305, pp. 142–156.
[10] S. Feldman, C. Valera-Leon, and D. Dechev, “An Efficient Wait-Free Vector,” IEEE Transactions on Parallel and Distributed Systems, vol. 27, no. 3, pp. 654–667, Mar. 2016.
[11] D. Hendler, I. Incze, N. Shavit, and M. Tzafrir, “Flat combining and the synchronization-parallelism tradeoff,” in Proceedings of the Twenty- second Annual ACM Symposium on Parallelism in Algorithms and Archi- tectures, ser. SPAA ’10. New York, NY, USA: ACM, 2010, pp. 355–364.
[12] P. Fatourou and N. D. Kallimanis, “Revisiting the combining synchroniza- tion technique,” SIGPLAN Not., vol. 47, no. 8, pp. 257–266, Feb. 2012.
[13] Y. Oyama, K. Taura, and A. Yonezawa, “Executing parallel programs with synchronization bottlenecks e ciently,” in Proceedings of International Workshop on Parallel and Distributed Computing for Symbolic and Irregular Applications, ser. PDSIA’99. World Scientific., 1999.
[14] I. Calciu, H. Mendes, and M. Herlihy, The Adaptive Priority Queue with Elimination and Combining. Berlin, Heidelberg: Springer Berlin Heidelberg, 2014, pp. 406–420.
[15] D. Dechev, P. Pirkelbauer, and B. Stroustrup, “Understanding and ef- fectively preventing the aba problem in descriptor-based lock-free de- signs,” in Proceedings of the 13th IEEE International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing, ser. ISORC ’10, 2010, pp. 185–192.
[16] A. Kogan and E. Petrank, “A methodology for creating fast wait-free data structures,” SIGPLAN Not., vol. 47, no. 8, pp. 141–150, Feb. 2012.
[17] P.-C. Yew, N.-F. Tzeng, and D. H. Lawrie, “Distributing hot-spot address-
ing in large-scale multiprocessors,” IEEE Trans. Comput., vol. 36, no. 4,
pp. 388–395, Apr. 1987.
[18] N. Shavit and A. Zemach, “Combining funnels,” J. Parallel Distrib.
Comput., vol. 60, no. 11, pp. 1355–1387, Nov. 2000.
[19] P. Fatourou and N. D. Kallimanis, “A Highly-efficient Wait-free Universal
Construction,” in Proceedings of the Twenty-third Annual ACM Sympo- sium on Parallelism in Algorithms and Architectures, ser. SPAA ’11. New York, NY, USA: ACM, 2011, pp. 325–334.
[20] L. Lamport, “How to make a multiprocessor computer that correctly executes multiprocess programs,” IEEE Transactions on Computers, vol. C-28, no. 9, pp. 690–691, Sept 1979.
[21] M. P. Herlihy and J. M. Wing, “Linearizability: A correctness condition for concurrent objects,” ACM Trans. Program. Lang. Syst., vol. 12, no. 3, pp. 463–492, Jul. 1990.
[22] G. Barnes, “A method for implementing lock-free shared-data structures,” in Proceedings of the Fifth Annual ACM Symposium on Parallel Algo- rithms and Architectures, ser. SPAA ’93. New York, NY, USA: ACM, 1993, pp. 261–270.
[23] T. L. Harris, “A pragmatic implementation of non-blocking linked-lists,” in Proceedings of the 15th International Conference on Distributed Computing, ser. DISC ’01, 2001, pp. 300–314.
[24] D. Hendler, N. Shavit, and L. Yerushalmi, “A Scalable Lock-free Stack Algorithm,” in Proceedings of the Sixteenth Annual ACM Symposium on Parallelism in Algorithms and Architectures, ser. SPAA ’04. New York, NY, USA: ACM, 2004, pp. 206–215.
[25] T. David, R. Guerraoui, and V. Trigonakis, “Asynchronized concurrency: The secret to scaling concurrent search data structures,” SIGARCH Com- put. Archit. News, vol. 43, no. 1, pp. 631–644, Mar. 2015.
[26] K.Fraser,“Practicallock-freedom,”PhDthesis,UniversityofCambridge, 2004.
[27] T. A. Brown, “Reclaiming memory for lock-free data structures: There has to be a better way,” in Proceedings of the 2015 ACM Symposium on Principles of Distributed Computing, ser. PODC ’15. New York, NY, USA: ACM, 2015, pp. 261–270.
[28] M. M. Michael, “Hazard pointers: Safe memory reclamation for lock-free objects,” IEEE Trans. Parallel Distrib. Syst., vol. 15, no. 6, pp. 491–504, Jun. 2004.
[29] S. Ghemawat and P. Menage, “Tcmalloc : Thread-caching malloc,” http: //goog-perftools.sourceforge.net/doc/tcmalloc.html, 2009.
