[1] Saswat Anand, Corina S. Pasareanu, and Willem Visser. 2006. Symbolic Execution with Abstract Subsumption Checking
(SPIN).

[2] Saswat Anand, Corina S. Pasareanu, and Willem Visser. 2007. JPF-SE: A Symbolic Execution Extension to Java PathFinder
(TACAS).

[3] Clark Barrett, Roberto Sebastiani, Sanjit A. Seshia, and Cesare Tinelli. 2008a. Handbook of Satisfiability. Chapter Satisfiability
Modulo Theories, 127-149,

[4] Clark Barrett, Roberto Sebastiani, Sanjit A. Seshia, and Cesare Tinelli. 2008b. Handbook of Satisfiability. Chapter Satisfiability
Modulo Theories, 737-797.

[5] Nikolaj Bjorner, Vijay Ganesh, Raphaél Michel, and Margus Veanes. 2012. An SMT-LIB format for sequences and regular
expressions (SMT Workshop).

[6] Rastislav Bodik, Satish Chandra, Joel Galenson, Doug Kimelman, Nicholas Tung, Shaon Barman, and Casey Rodarmor. 2010.
Programming with Angelic Nondeterminism (POPL).

[7] James Bornholt, Emina Torlak, Dan Grossman, and Luis Ceze. 2016. Optimizing Synthesis with Metasketches (POPL).

[8] Chandrasekhar Boyapati, Sarfraz Khurshid, and Darko Marinov. 2002. Korat: Automated Testing Based on Java Predicates
(ISSTA).

[9] Cristian Cadar, Vijay Ganesh, Peter M. Pawlowski, David L. Dill, and Dawson R. Engler. 2006. EXE: Automatically Generating
Inputs of Death (CCS).

[10] Jens R. Calamé, Natalia Ioustinova, and Jaco van de Pol. 2007. Automatic Model-Based Generation of Parameterized Test
Cases Using Data Abstraction. ENTCS 191 (2007), 25-48.

[11] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2011. S2E: A Platform for In-vivo Multi-path Analysis
of Software Systems (Proceedings of the Sixteenth International Conference on Architectural Support for Programming
Languages and Operating Systems).

[12] Koen Claessen and John Hughes. 2000. QuickCheck: A Lightweight Tool for Random Testing of Haskell Programs (ICFP).

[13] Brett Daniel, Danny Dig, Kely Garcia, and Darko Marinov. 2007. Automated Testing of Refactoring Engines (ESEC-FSE).

[14] Jeremy Dick and Alain Faivre. 1993. Automating the generation and sequencing of test cases from model-based specifications
(International Symposium of Formal Methods Europe).

[15] Gordon Fraser and Andrea Arcuri. 2011. EvoSuite: automatic test suite generation for object-oriented software (ESEC/FSE).

[16] Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. 2008. Grammar-based Whitebox Fuzzing (PLDI).

[17] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: Directed Automated Random Testing (PLDI).

[18] Patrice Godefroid, Michael Y Levin, and David A Molnar. 2008. Automated Whitebox Fuzz Testing (NDSS).

[19] John B. Goodenough and Susan L. Gerhart. 1975. Toward a Theory of Test Data Selection. In Proceedings of the International
Conference on Reliable Software.

[20] Sumit Gulwani. 2012. Synthesis from examples: Interaction models and algorithms (SYNASC).

[21] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 91. Publication date: October 2017.
91:24 Talia Ringer, Dan Grossman, Daniel Schwartz-Narbonne, and Serdar Tasiran

[22] Susmit Jha and Sanjit A. Seshia. 2014. Are there good mistakes? A theoretical analysis of CEGIS (3rd Workshop on Synthesis
(SYNT)).

[23] Brittany Johnson, Yoonki Song, Emerson Murphy-Hill, and Robert Bowdidge. 2013. Why Don’t Software Developers Use
Static Analysis Tools to Find Bugs? (ICSE).

[24] Sarfraz Khurshid and Darko Marinov. 2004. TestEra: Specification-Based Testing of Java Programs Using SAT. ASE (2004).

[25] Ali Sinan Kéksal, Viktor Kuncak, and Philippe Suter. 2012. Constraints As Control (POPL).

[26] Ivan Kuraj, Viktor Kuncak, and Daniel Jackson. 2015. Programming with Enumerable Sets of Structures (OOPSLA).

[27] Leonidas Lampropoulos, Diane Gallois-Wong, Catalin Hritcu, John Hughes, Benjamin C. Pierce, and Li-yao Xia. 2017.
Beginner’s Luck: A Language for Property-based Generators (POPL).

[28] Nuo Li, Tao Xie, Nikolai Tillmann, Jonathan de Halleux, and Wolfram Schulte. 2009. Reggae: Automated Test Generation
for Programs Using Complex Regular Expressions (ASE).

[29] Tianyi Liang, Andrew Reynolds, Cesare Tinelli, Clark Barrett, and Morgan Deters. 2014. A DPLL(T) Theory Solver for a
Theory of Strings and Regular Expressions (CAV).

[30] Tim Mackinnon, Steve Freeman, and Philip Craig. 2001. Extreme Programming Examined. Chapter Endo-testing: Unit
Testing with Mock Objects, 287-301.

[31] Phil McMinn, Muzammil Shahbaz, and Mark Stevenson. 2012. Search-Based Test Input Generation for String Data Types
Using the Results of Web Queries (International Conference on Software Testing, Verification and Validation).

[32] Kuldeep S. Meel, Moshe Y. Vardi, Supratik Chakraborty, Daniel J. Fremont, Sanjit A. Seshia, Dror Fried, Alexander Ivrii, and
Sharad Malik. 2015. Constrained Sampling and Counting: Universal Hashing Meets SAT Solving. CoRR (2015).

[33] Simeon Ntafos. 1998. On Random and Partition Testing (ISSTA).

[34] Carlos Pacheco and Michael D. Ernst. 2007. Randoop: Feedback-directed Random Testing for Java (OOPSLA).

[35] Pablo Ponzio, Nazareno Aguirre, Marcelo F. Frias, and Willem Visser. 2016. Field-exhaustive Testing (FSE).

[36] Nicolas Rosner, Valeria Bengolea, Pablo Ponzio, Shadi Abdul Khalek, Nazareno Aguirre, Marcelo F. Frias, and Sarfraz
Khurshid. 2014. Bounded Exhaustive Test Input Generation from Hybrid Invariants (OOPSLA).

[37] Hesam Samimi, Rebecca Hicks, Ari Fogel, and Todd Millstein. 2013. Declarative Mocking (ISSTA).

[38] Koushik Sen, Darko Marinov, and Gul Agha. 2005. CUTE: A Concolic Unit Testing Engine for C (ESEC/FSE).

[39] Valerio Senni and Fabio Fioravanti. 2012. Generation of Test Data Structures Using Constraint Logic Programming (TAP).

[40] Ali Shahbazi and James Miller. 2016. Black-Box String Test Case Generation Through a Multi-Objective Optimization. IEEE
Transactions on Software Engineering (2016), 361-378.

[41] Armando Solar Lezama. 2008. Program Synthesis By Sketching. Ph.D. Dissertation. EECS Department, University of California,
Berkeley.

[42] Nikolai Tillmann and Jonathan De Halleux. 2008. Pex—white box test generation for. net (TAP).

[43] Emina Torlak and Rastislav Bodik. 2013. Growing Solver-aided Languages with Rosette (Onward!).

[44] Emina Torlak and Daniel Jackson. 2007. Kodkod: A Relational Model Finder (TACAS).

[45] Minh-Thai Trinh, Duc-Hiep Chu, and Joxan Jaffar. 2014. S3: A Symbolic String Solver for Vulnerability Detection in Web
Applications (CCS).

[46] Richard Uhler and Nirav Dave. 2013. Smten: Automatic Translation of High-level Symbolic Computations into SMT Queries
(CAV).

[47] Yunhui Zheng, Xiangyu Zhang, and Vijay Ganesh. 2013. Z3-str: A Z3-based String Solver for Web Application Analysis
(FSE).

[48] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 91. Publication date: October 2017.
