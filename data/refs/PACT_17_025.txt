[1] Http://code.google.com/p/v8.

[2] Http:/Auajit.org.

[3] K. Adams, J. Evans, B. Maher, G. Ottoni, A. Paroski,
B. Simmers, E. Smith, and O. Yamauchi, “The hiphop
virtual machine,” in Proceedings of the 2014 ACM
International Conference on Object Oriented Programming
Systems Languages & Applications, ser. OOPSLA °14.
ACM, 2014. [Online]. Available: http://doi.acm.org/10.1145/
2660193.2660199

[4] L. O. Andersen, “Program analysis and specialization for
the C programming language,” Ph.D. dissertation, DIKU,
University of Copenhagen, 1994.

[5] V. Bala, E. Duesterwald, and S. Banerjia, “Dynamo: A transparent dynamic optimization system,” in Proceedings of the
ACM SIGPLAN ’00 Conference on Programming Language
Design and Implementation, June 2000.

[6] U. Bondhugula, A. Hartono, J. Ramanujam, and P. Sadayappan, “A practical automatic polyhedral parallelizer and
locality optimizer,” in PLDI, 2008.

[7] M. J. Bridges, “The velocity compiler: Extracting efficient
multicore execution from legacy sequential codes,’ Ph.D.
dissertation, Department of Computer Science, Princeton University, November 2008.

[8] S. Campanoni, T. Jones, G. Holloway, V. J. Reddi, G.-Y.
Wei, and D. Brooks, “Helix: Automatic parallelization of
irregular programs for chip multiprocessing,” in Proceedings
of the Tenth International Symposium on Code Generation
and Optimization, ser. CGO 12. ACM, 2012.

[9] M. Cintra and D. R. Llanos, “Design space exploration of a
software speculative parallelization scheme,” IEEE Transactions on Parallel Distributed Systems, Jane 2005.

[10] R. Collobert, K. Kavukcuoglu, and C. Farabet, “Torch7: A
matlab-like environment for machine learning,” in BigLearn,
NIPS Workshop, 2011.

[11] C. Consel, L. Hornof, F. Noél, J. Noyé, and N. Volansche, “A
uniform approach for compile-time and run-time specialization,” in Selected Papers from the International Seminar on
Partial Evaluation, 1996.

[12] EF H. Dang, H. Yu, and L. Rauchwerger, “The R-LRPD
test: Speculative parallelization of partially parallel loops,”
in IPDPS ’02: Proceedings of the 16th International Parallel
and Distributed Processing Symposium, 2002.
[13] D. Dice and N. Shavit, “Understanding tradeoffs in software
transactional memory,” in Proceedings of the International
Symposium on Code Generation and Optimization, ser. CGO
’07. IEEE Computer Society, 2007.
[14] C. Ding, X. Shen, K. Kelsey, C. Tice, R. Huang, and
C. Zhang, “Software behavior oriented parallelization,” in
PLDI ’07: Proceedings of the 2007 ACM SIGPLAN Conference on Programming Language Design and Implementation.
ACM, 2007.
[15] J. Ferrante, K. J. Ottenstein, and J. D. Warren, “The program
dependence graph and its use in optimization,” ACM Transactions on Programming Languages and Systems, July 1987.
[16] A. Gal, B. Eich, M. Shaver, D. Anderson, D. Mandelin,
M. R. Haghighat, B. Kaplan, G. Hoare, B. Zbarsky, J. Orendorff, J. Ruderman, E. W. Smith, R. Reitmaier, M. Bebenita,
M. Chang, and M. Franz, “Trace-based just-in-time type
specialization for dynamic languages,” in Proceedings of the
30th ACM SIGPLAN Conference on Programming Language
Design and Implementation, ser. PLDI ’09. ACM, 2009.
[17] B. Grant, M. Mock, M. Philipose, C. Chambers, and S. Eggers, “Annotation-directed run-time specialization in C,” in
Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation
(PEPM), 1997.
[18] N. P. Johnson, H. Kim, P. Prabhu, A. Zaks, and D. I. August,
“Speculative separation for privatization and reductions,”
Programming Language Design and Implementation (PLDI),
June 2012.
[19] H. Kim, N. P. Johnson, J. W. Lee, S. A. Mahlke, and D. I. August, “Automatic speculative doall for clusters,” International
Symposium on Code Generation and Optimization (CGO),
March 2012.
[20] M. Kulkarni, K. Pingali, B. Walter, G. Ramanarayanan,
K. Bala, and L. P. Chew, “Optimistic parallelism requires
abstractions,” in Proceedings of the 28th ACM SIGPLAN
Conference on Programming Language Design and Implementation (PLDI), 2007.
[21] C. Lattner and V. Adve, “LLVM: A compilation framework
for lifelong program analysis & transformation,” in Proceedings of the Annual International Symposium on Code
Generation and Optimization (CGO), 2004.
[22] W. Liu, J. Tuck, L. Ceze, W. Ahn, K. Strauss, J. Renau, and
J. Torrellas, “POSH: a TLS compiler that exploits program
structure,” in PPoPP ’06: Proceedings of the 11th ACM
SIGPLAN Symposium on Principles and Practice of Parallel
Programming, 2006.
[23] L. Lu, W. Ji, and M. L. Scott, “Dynamic enforcement of
determinism in a parallel scripting language,” in Proceedings
of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation, ser. PLDI ’14. ACM,
2014.
[24] Lua, http://www.lua.org/.
[25] X. Ma, J. Li, and N. Samatova, “Automatic parallelization of
scripting languages: Toward transparent desktop parallel computing,” in Parallel and Distributed Processing Symposium,
2007. IPDPS 2007. IEEE International, March 2007.
[26] H. Makholm, “Specializing C — an introduction to the
principles behind C-Mix/II,” University of Copenhagen, Department of Computer Science, Tech. Rep., 1999.
[27] M. Mehrara, P. C. Hsu, M. Samadi, and S. Mahlke, “Dynamic parallelization of javascript applications using an ultralightweight speculation mechanism,” in 2011 IEEE 17th
International Symposium on High Performance Computer
Architecture, Feb 2011, pp. 87–98.
[28] M. Mehrara, J. Hao, P.-C. Hsu, and S. Mahlke, “Parallelizing
sequential applications on commodity hardware using a lowcost software transactional memory,” in Proceedings of the
2009 ACM SIGPLAN Conference on Programming Language
Design and Implementation, 2009.
[29] C. C. Minh, J. Chung, C. Kozyrakis, and K. Olukotun, “Stamp: Stanford transactional applications for multiprocessing,” in Workload Characterization, 2008. IISWC
2008. IEEE International Symposium on, Sept 2008.
[30] M. Mock, M. Berryman, C. Chambers, and S. Eggers, “Calpa:
A tool for automating dynamic compilation,” in Proceedings
of the Second Workshop on Feedback-Directed Optimization,
November 1999.
[31] S. C. Muller, G. Alonso, A. Amara, and A. Csillaghy, ¨
“Pydron: Semi-automatic parallelization for multi-core and
the cloud,” in Proceedings of the 11th USENIX Conference
on Operating Systems Design and Implementation, ser.
OSDI ’14. USENIX Association, 2014. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2685048.2685100
[32] Multicore, http://www.rforge.net/doc/packages/multicore/multicore.html.
[33] T. Oh, H. Kim, N. P. Johnson, J. W. Lee, and D. I. August,
“Practical automatic loop specialization,” in Proceedings of
the Eighteenth International Conference on Architectural
Support for Programming Languages and Operating Systems,
ser. ASPLOS ’13. ACM, 2013.
[34] G. Ottoni and D. I. August, “Communication optimizations
for global multi-threaded instruction scheduling,” in Proceedings of the 13th ACM International Conference on Architectural Support for Programming Languages and Operating
Systems, March 2008.
[35] G. Ottoni, R. Rangan, A. Stoler, and D. I. August, “Automatic
thread extraction with decoupled software pipelining,” in In
Proceedings of the 38th IEEE/ACM International Symposium
on Microarchitecture. IEEE Computer Society, 2005.
[36] G. Ottoni, R. Rangan, N. Vachharajani, and D. I. August,
“Decoupled software pipelining: A promising technique to
exploit thread level parallelism,” in Proceedings of the 4th
Workshop on Explicitly Parallel Instruction Computing Techniques, March 2005.
[37] Perl, http://www.perl.org/.
[38] L.-N. Pouchet, “PolyBench: the Polyhedral Benchmark
suite,”
http://www-roc.inria.fr/ pouchet/software/polybench/download.
[39] P. Prabhu, S. Ghosh, Y. Zhang, N. P. Johnson, and D. I.
August, “Commutative set: A language extension for implicit
parallel programming,” in Proceedings of the 32nd ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), 2011.
[40] P. Prabhu, T. B. Jablin, A. Raman, Y. Zhang, J. Huang,
H. Kim, N. P. Johnson, F. Liu, S. Ghosh, S. Beard, T. Oh,
M. Zoufaly, D. Walker, and D. I. August, “A survey of the
practice of computational science,” Proceedings of the 24th
ACM/IEEE Conference on High Performance Computing,
Networking, Storage and Analysis (SC), November 2011.
[41] PyMPI, http://pympi.sourceforge.net/.
[42] Pypar, https://code.google.com/p/pypar/.
[43] Pypy, http://pypy.org/.
[44] Python, http://www.python.org/.
[45] C. G. Quinones, C. Madriles, J. S ˜ anchez, P. Marcuello, ´
A. Gonzalez, and D. M. Tullsen, “Mitosis compiler: an infras- ´
tructure for speculative threading based on pre-computation
slices,” in Proceedings of the 2005 ACM SIGPLAN conference on Programming language design and implementation.
ACM, 2005.
[46] A. Raman, H. Kim, T. R. Mason, T. B. Jablin, and D. I.
August, “Speculative parallelization using software multithreaded transactions,” in Proceedings of the Fifteenth International Symposium on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2010.
[47] E. Raman, G. Ottoni, A. Raman, M. Bridges, and D. I.
August, “Parallel-stage decoupled software pipelining,” in
Proceedings of the Annual International Symposium on Code
Generation and Optimization (CGO), 2008.
[48] L. Rauchwerger and D. A. Padua, “The LRPD test: Speculative run-time parallelization of loops with privatization
and reduction parallelization,” IEEE Transactions on Parallel
Distributed Systems, February 1999.
[49] RMPI, http://www.stats.uwo.ca/faculty/yu/Rmpi/.
[50] A. Rubinsteyn, E. Hielscher, N. Weinman, and D. Shasha,
“Parakeet: A just-in-time parallel accelerator for python,” in
Proceedings of the 4th USENIX Conference on Hot Topics in
Parallelism, ser. HotPar’12. USENIX Association, 2012.
[51] B. Saha, A.-R. Adl-Tabatabai, and Q. Jacobson, “Architectural
support for software transactional memory,” in Proceedings
of the 39th Annual IEEE/ACM International Symposium on
Microarchitecture, ser. MICRO 39. IEEE Computer Society,
2006.
[52] A. Shankar, S. S. Sastry, R. Bod´ık, and J. E. Smith, “Runtime
specialization with optimistic heap analysis,” in Proceedings
of the 20th annual ACM SIGPLAN conference on Objectoriented programming, systems, languages, and applications,
2005.
[53] N. Shavit and D. Touitou, “Software transactional memory,”
in Proceedings of the Fourteenth Annual ACM Symposium on
Principles of Distributed Computing, ser. PODC ’95. ACM,
1995.
[54] J. G. Steffan, C. Colohan, A. Zhai, and T. C. Mowry,
“The STAMPede approach to thread-level speculation,” ACM
Transactions on Computer Systems, February 2005.
[55] J. Talbot, Z. DeVito, and P. Hanrahan, “Riposte: A tracedriven compiler and parallel vm for vector code in r,” in
Proceedings of the 21st International Conference on Parallel
Architectures and Compilation Techniques, ser. PACT ’12.
ACM, 2012.
[56] W. Thies, V. Chandrasekhar, and S. Amarasinghe, “A practical approach to exploiting coarse-grained pipeline parallelism in C programs,” in Proceedings of the 40th Annual
IEEE/ACM International Symposium on Microarchitecture
(MICRO), 2007.
[57] C. Tian, M. Feng, and R. Gupta, “Supporting speculative
parallelization in the presence of dynamic data structures,”
in Proceedings of the 2010 ACM SIGPLAN Conference on
Programming Language Design and Implementation, ser.
PLDI ’10. ACM, 2010.
[58] C. Tian, M. Feng, V. Nagarajan, and R. Gupta, “Copy or
discard execution model for speculative parallelization on
multicores,” in Proceedings of the 41st Annual IEEE/ACM
International Symposium on Microarchitecture, ser. MICRO
41. IEEE Computer Society, 2008.
[59] G. Tournavitis, Z. Wang, B. Franke, and M. F. O’Boyle,
“Towards a holistic approach to auto-parallelization: Integrating profile-driven parallelism detection and machine-learning
based mapping,” in Proceedings of the 2009 ACM SIGPLAN
Conference on Programming Language Design and Implementation, ser. PLDI ’09, 2009.
[60] N. Vachharajani, “Intelligent speculation for pipelined multithreading,” Ph.D. dissertation, Princeton, NJ, USA, 2008.
[61] N. Vachharajani, R. Rangan, E. Raman, M. J. Bridges,
G. Ottoni, and D. I. August, “Speculative decoupled software
pipelining,” in PACT ’07: Proceedings of the 16th International Conference on Parallel Architecture and Compilation
Techniques. IEEE Computer Society, 2007.
[62] H. Vandierendonck, S. Rul, and K. De Bosschere, “The Paralax infrastructure: Automatic parallelization with a helping
hand,” in Proceedings of the 19th International Conference
on Parallel Architecture and Compilation Techniques (PACT),
2010.
[63] C. Wang, Y. Wu, E. Borin, S. Hu, W. Liu, D. Sager,
T.-f. Ngai, and J. Fang, “Dynamic parallelization of
single-threaded binary programs using speculative slicing,”
in Proceedings of the 23rd International Conference on
Supercomputing, ser. ICS ’09. ACM, 2009. [Online].
Available: http://doi.acm.org/10.1145/1542275.1542302
[64] H. Yu, H.-J. Ko, and Z. Li, “General data structure expansion for multi-threading,” in Proceedings of the 34th ACM
SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’13. ACM, 2013.
[65] H. Zhong, M. Mehrara, S. Lieberman, and S. Mahlke, “Uncovering hidden loop level parallelism in sequential applications,” in Proceedings of the 14th International Symposium
on High-Performance Computer Architecture (HPCA), 2008.
