[1] Breadth First Search.

https://en.wikipedia.org/wiki/Breadth-first_search.

[2] Building a follower model from scratch.

https://engineering.pinterest.com/blog/
building-follower-model-scratch.

[3] Demining the “Join Bomb” with graph queries.

http://neo4j.com/blog/
demining-the-join-bomb-with-graph-queries/.
[4] FlockDB. https://github.com/twitter/flockdb.
[5] Function Shipping: Separating Logical and Physical Tiers.
https://docs.oracle.com/cd/A87860_01/doc/appdev.817/
a86030/adx16nt4.htm.

[6] gMark Queries for LDBC Social Network Benchmark.

https://github.com/graphMark/gmark/tree/master/demo/
social/social-translated.

[7] Introducing FlockDB.

https://blog.twitter.com/2010/introducing-flockdb.

[8] Introducing Graph Search Beta. http://newsroom.fb.com/

news/2013/01/introducing-graph-search-beta/.

[9] LinkBench.

https://github.com/facebookarchive/linkbench.

[10] Microsoft GraphView.

https://github.com/facebookarchive/linkbench.

[11] Neo4j. http://neo4j.com/.
[12] Neo4j Pushes Graph DB Limits Past a Quadrillion Nodes.

https://www.datanami.com/2016/04/26/
neo4j-pushes-graph-db-limits-past-quadrillion-nodes/.

[13] openCypher. http://www.opencypher.org.
[14] OrientDB. http://orientdb.com/.
[15] Property Graph Model. https://github.com/tinkerpop/

blueprints/wiki/Property-Graph-Model.

[16] Sparksee by Sparsity Technologies.

http://www.sparsity-technologies.com.

[17] Sufﬁx Array.

http://en.wikipedia.org/wiki/Suffix_array.

[18] Titan. http://thinkaurelius.github.io/titan/.
[19] Titan Data Model. http://s3.thinkaurelius.com/docs/

titan/current/data-model.html.

[20] Virtuoso Universal Server.

http://virtuoso.openlinksw.com.

[21] R. Agarwal, A. Khandelwal, and I. Stoica. Succinct:
Enabling Queries on Compressed Data. In USENIX
Symposium on Networked Systems Design and
Implementation (NSDI), 2015.

[22] A. Ahmed, N. Shervashidze, S. Narayanamurthy,

V. Josifovski, and A. J. Smola. Distributed Large-scale
Natural Graph Factorization. In ACM International
Conference on World Wide Web (WWW), 2013.

[23] A. Anand, C. Muthukrishnan, S. Kappes, A. Akella, and

S. Nath. Cheap and large cams for high performance
data-intensive networked systems. In NSDI, 2010.
[24] T. G. Armstrong, V. Ponnekanti, D. Borthakur, and

M. Callaghan. Linkbench: A database benchmark based
on the facebook social graph. In ACM International
Conference on Management of Data (SIGMOD), 2013.
[25] G. Bagan, A. Bonifati, R. Ciucanu, G. H. L. Fletcher,

A. Lemay, and N. Advokaat. Generating ﬂexible workloads
for graph databases. Proceedings of the VLDB Endowment
(PVLDB), 9(13):1457–1460, 2016.

[26] P. Barceló Baeza. Querying graph databases. In ACM

Symposium on Principles of Database Systems (PODS),
pages 175–188, 2013.

[27] Bharat, Krishna and Broder, Andrei and Henzinger,

Monika and Kumar, Puneet and Venkatasubramanian,
Suresh. The connectivity server: Fast access to linkage
information on the web. Computer networks and ISDN
Systems, 30, 1998.

[28] P. Boldi and S. Vigna. The Webgraph Framework I:

Compression Techniques. In International Conference on
World Wide Web (WWW), 2004.

[29] N. Bronson, Z. Amsden, G. Cabrera, P. Chakka, P. Dimov,
H. Ding, J. Ferris, A. Giardullo, S. Kulkarni, H. Li, et al.
TAO: Facebook’s Distributed Data Store for the Social
Graph. In USENIX Annual Technical Conference (ATC),
2013.

[30] D. Calvanese, G. De Giacomo, M. Lenzerini, and M. Y.

Vardi. Rewriting of regular expressions and regular path
queries. In ACM Symposium on Principles of Database
Systems (PODS), pages 194–204, 1999.

[31] F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A.
Wallach, M. Burrows, T. Chandra, A. Fikes, and R. E.
Gruber. Bigtable: A distributed storage system for
structured data. ACM Transactions on Computer Systems
(TOCS), 26(2):4, 2008.

[32] F. Chierichetti, R. Kumar, S. Lattanzi, M. Mitzenmacher,
A. Panconesi, and P. Raghavan. On Compressing Social
Networks. In ACM International Conference on Knowledge
Discovery and Data Mining (KDD), 2009.

[33] I. F. Cruz, A. O. Mendelzon, and P. T. Wood. A graphical

query language supporting recursion. In ACM
International Conference on Management of Data
(SIGMOD), pages 323–330, 1987.

[34] C. Curino, E. Jones, Y. Zhang, and S. Madden. Schism: a
Workload-Driven Approach to Database Replication and
Partitioning. Proceedings of the VLDB Endowment, 2010.

[35] A. Dubey, G. D. Hill, R. Escriva, and E. G. Sirer. Weaver: A

High-Performance, Transactional Graph Store Based on
Reﬁnable Timestamps. CoRR, abs/1509.08443, 2015.

[36] O. Erling, A. Averbuch, J. Larriba-Pey, H. Chaﬁ,

A. Gubichev, A. Prat, M.-D. Pham, and P. Boncz. The ldbc
social network benchmark: Interactive workload. In ACM
International Conference on Management of Data
(SIGMOD), pages 619–630, 2015.

[37] W. Fan, J. Li, X. Wang, and Y. Wu. Query Preserving Graph

Compression. In ACM International Conference on
Management of Data (SIGMOD), 2012.

[38] J. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J.
Franklin, and I. Stoica. GraphX: Graph Processing in a
Distributed Dataﬂow Framework. In USENIX Symposium
on Operating Systems Design and Implementation (OSDI),
2014.

[39] C. Hernández and G. Navarro. Compression of Web and

Social Graphs supporting Neighbor and Community
Queries. In ACM Workshop on Social Network mining and
Analysis (SNAKDD), 2011.

[40] C. Hernández and G. Navarro. Compressed

Representations for Web and Social Graphs. Knowledge
and Information Systems, 40(2), 2014.

[41] Jure Leskovec and Andrej Krevl. SNAP Datasets: Stanford

Large Network Dataset Collection.
http://snap.stanford.edu/data, 2014.

[42] A. Khandelwal, R. Agarwal, and I. Stoica. BlowFish:

Dynamic Storage-Performance Tradeoff in Data Stores. In
USENIX Symposium on Networked Systems Design and
Implementation (NSDI), 2016.

[43] A. Kyrola, G. E. Blelloch, and C. Guestrin. GraphChi:

Large-Scale Graph Computation on Just a PC. In USENIX
Symposium on Operating Systems Design and
Implementation (OSDI), 2012.

[44] Lakshman, Avinash and Malik, Prashant. Cassandra: A
Decentralized Structured Storage System. ACM SIGOPS
Operating Systems Review, 44, 2010.

[45] K. Lang. Finding good nearly balanced cuts in power law

graphs. Preprint, 2004.

[46] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W. Mahoney.
Community Structure in Large Networks: Natural Cluster
Sizes and the Absence of Large Well-Deﬁned Clusters.
Internet Mathematics, 2009.

[47] L. Libkin and D. Vrgoˇc. Regular path queries on graphs
with data. In ACM International Conference on Database
Theory (ICDT), pages 74–85, 2012.

[48] Y. Low, J. E. Gonzalez, A. Kyrola, D. Bickson, C. E.

Guestrin, and J. Hellerstein. GraphLab: A New
Framework For Parallel Machine Learning. arXiv preprint
arXiv:1408.2041, 2014.

[49] A. Maccioni and D. J. Abadi. Scalable pattern matching

over compressed graphs via dedensiﬁcation. In ACM
International Conference on Knowledge Discovery and Data
Mining (SIGKDD), 2016.

[50] U. Manber and G. Myers. Sufﬁx Arrays: A new method for

on-line string searches. SIAM Journal on Computing
(SICOMP), 1993.

[51] N. Martinez-Bazan, S. Gómez-Villamor, and

F. Escalé-Claveras. DEX: A high-performance graph
database management system. In IEEE Data Engineering
Workshops (ICDEW), 2011.

[52] H. Maserrat and J. Pei. Neighbor Query Friendly

Compression of Social Networks. In ACM International
Conference on Knowledge Discovery and Data Mining
(KDD), 2010.

[53] J. C. Mogul, F. Douglis, A. Feldmann, and

B. Krishnamurthy. Potential beneﬁts of delta encoding and
data compression for HTTP. In ACM SIGCOMM Computer
Communication Review, 1997.

[54] B. Shao, H. Wang, and Y. Li. Trinity: A Distributed Graph

Engine on a Memory Cloud. In ACM International
Conference on Management of Data (SIGMOD). ACM,
2013.

[55] J. Shun and G. E. Blelloch. Ligra: A Lightweight Graph

Processing Framework for Shared Memory. In ACM
SIGPLAN Symposium on Principles and Practice of Parallel
Programming (PPoP), 2013.

[56] J. Shun, L. Dhulipala, and G. Blelloch. Smaller and Faster:
Parallel Processing of Compressed Graphs with Ligra+. In
IEEE Data Compression Conference (DCC), 2015.

[57] Y. J. Song, M. K. Aguilera, R. Kotla, and D. Malkhi. RPC

Chains: Efﬁcient Client-server Communication in
Geodistributed Systems. In USENIX Symposium on
Networked Systems Design and Implementation (NSDI),
2009.

[58] R. Wang, C. Conrad, and S. Shah. Using Set Cover to

Optimize a Large-Scale Low Latency Distributed Graph. In
Workshop on Hot Topics in Cloud Computing (HotCloud),
2013.

