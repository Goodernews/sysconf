[1] O. Mutlu and L. Subramaniam, “Research Problems and
Opportunities in Memory Systems,’ SUPERFRI, 2015.

[2] G. Cox and A. Bhattacharjee, “Efficient Address Translation
with Multiple Page Sizes,” ASPLOS, 2017.

[3] R. Cooksey, S. Jourdan, and D. Grunwald, “A Stateless,
Content-Directed Data Prefetching Mechanism,” ASPLOS,
2002.

[4] O. Mutlu, “Memory Scaling: A Systems Architecture Perspec-
tive,” MEMCON, 2015.

[5] B. Jacob, “The Memory System: You Can’t Avoid It; You
Can’t Ignore It; You Can’t Fake It,” Morgan Claypool Synthesis
Lectures Series, 2009.

[6] K. Chang, P. Nair, S. Ghose, D. Lee, M. Qureshi, and O. Mutlu,
“Low-Cost Inter-Linked Subarrays (LISA): Enabling Fast Inter-
Subarray Data Movement in DRAM,” HPCA, 2016.

[7] V. Seshadri, T. Mullins, A. Boroumand, O. Mutlu, P. Gibbons,
M. Kozuch, and T. Mowry, “Gather-Scatter DRAM: In-DRAM
Address Translation to Improve the Spatial Locality of Non-unit
Strided Accesses,” MICRO, 2015.

[8] K. K.-W. Chang, D. Lee, Z. Chishti, A. Alameldeen, C. Wilk-
erson, Y. Kim, and O. Mutlu, “Improving DRAM Performance
by Parallelizing Refreshes with Accesses,” HPCA, 2014.

[9] V. Seshadri, Y. Kim, C. Fallin, D. Lee, R. Ausavarungnirun,
G. Pekhimenko, Y. Luo, O. Mutlu, M. Kozuch, P. Gibbons, and
T. Mowry, “RowClone: Fast and Energy-Efficient In-DRAM
Bulk Data Copy and Initialization,” MICRO, 2013.

[10] D. Lee, Y. Kim, V. Seshadri, J. Liu, L. Subramaniam, and
O. Mutlu, “Tiered-Latency DRAM: A Low Latency and Low
Cost DRAM Architecture,’ HPCA, 2013.

[11] S.-L. Lu, Ying-Chen, and C.-L. Yang, “Improving DRAM
Latency with Dynamic Asymmetric Subarray,” MICRO, 2015.

[12] Y. H. Son, O. Seongil, Y. Ro, J. Lee, and J. H. Ahn, “Reducing
Memory Access Latency with Asymmetric DRAM Bank
Organizations,” ISCA, 2013.

[13] A. Udipi, N. Muralimanohar, N. Chatterjee, R. Balasubra-
monian, A. Davis, and N. Jouppi, “Rethinking DRAM Design
and Organization for Energy-Constrained Multi-Cores,” ISCA,
2010.
[14] Y. Kim, V. Seshadri, D. Lee, J. lee, and O. Mutlu, “A Case
for Exploiting Subarray-Level Parallelism (SALP) in DRAM,”
ISCA, 2012.

[15] H. Hassan, G. Pekhimenko, N. Vijaykumar, V. Seshadri,
D. Lee, O. Ergin, and O. Mutlu, “ChargeCache: Reducing
DRAM Latency by Exploiting Row Access Locality,” HPCA,
2016.

[16] X. Shen, F. Shong, H. Meng, S. An, and Z. Zhang, “Rbpp:
A Row Based DRAM Page Policy for the Manycore Era,”
ICPADS, 2014.

[17] M. Awasthi, D. Nellans, R. Balasubramonian, and A. Davis,
“Prediction based DRAM Row-Buffer Management in the
Many-Core Era,” PACT, 2011.

[18] N. Dwarkanath, Gulur, M. Mehendale, R. Manikantan, and
R. Govindarajan, “Multiple Sub-Row Buffers in DRAM: Un-
locking Performance and Energy Improvement Opportunities,”
ICS, 2012.

[19] Y. Kim, D. Han, O. Mutlu, and M. Harchol-Balter, “Atlas:
A scalable and high-performance scheduling algorithm for
multiple memory constrollers,” HPCA, 2010.

[20] O. Mutlu and T. Moscibroda, “Parallelism-Aware Batch
Scheduling: Enhancing Both Performance and Fairness of
Shared DRAM Systems,” ISCA, 2008.

[21] K. Nesbit, N. Aggarwal, J. Laudon, and J. Smith, “Fair
Queueing Memory Systems,” MICRO, 2006.

[22] D. Abts, N. Enright-Jerger, J. Kim, D. Gibson, and M. Lipasti,
“Achieving Predictable Performance Through Better Memory
Controller Placement in Many-Core CMPs,” ISCA, 2009.

[23] L. Subramanian, D. Lee, V. Seshadri, H. Rastogi, and
O. Mutlu, “BLISS: Balancing Performance, Fairness, and
Complexity in Memory Access Scheduling,” TPDS, 2016.

[24] L. Subramanian, D. Lee, V. Seshadri, H. Rastogi, and
O. Mutlu, “The Blacklisting Memory Scheduler: Achieving
High Performance and Fairness at Low Cost,” ICCD, 2014.

[25] K. Sudan, N. Chatterjee, D. Nellans, M. Awasthi, R. Bala-
subramonian, and A. Davis, ““Micro-Pages: Increasing DRAM
Efficiency with Locality-Aware Data Placement,” ASPLOS,
2010.

[26] H. Huang, P. Pillai, and K. Shin, “Design and Implementation
of Power-Aware Virtual Memory,” USENIX ATC, 2003.

[27] L. Peeled, S. Mannor, U. Weiser, and Y. Etsion, “Semantic
Locality and Context-based Prefetching Using Reinforcement
Learning,” ISCA, 2015.

[28] M. Shevgoor, S. Koladiya, R. Balasubramonian, C. Wilker-
son, S. Pugsley, and Z. Chisti, “Efficiently Prefetching Complex
Address Patterns,’ MICRO, 2015.

[29] A. Fuchs, S. Mannor, U. Weiser, and Y. Etsion, “Loop-Aware
Memory Prefetching Using Code Block Working Sets,” MICRO,
2014.

[30] T. Barr, A. Cox, and S. Rixner, “SpecTLB: A Mechanism for
Speculative Address Translation,” JSCA, 2011.

[31] A. Bhattacharjee, D. Lustig, and M. Martonosi, “Shared Last-
Level TLBs for Chip Multiprocessors,” HPCA, 2011.

[32] D. Lustig, A. Bhattacharjee, and M. Martonosi, “TLB
Improvements for Chip Multiprocessors: Inter-Core Cooperative
Prefetchers and Shared Last-Level TLBs,” TACO, 2012.

[33] A. Bhattacharjee and M. Martonosi, “Inter-Core Cooperative
TLB Prefetchers for Chip Multiprocessors,’ ASPLOS, 2010.

[34] B. Pham, V. Vaidyanathan, A. Jaleel, and A. Bhattacharjee,
“CoLT: Coalesced Large-Reach TLBs,’ MICRO, 2012.

[35] B. Pham, A. Bhattacharjee, Y. Eckert, and G. Loh, “Increasing
TLB Reach by Exploiting Clustering in Page Translations,”
HPCA, 2014.

[36] B. Pham, J. Vesely, G. Loh, and A. Bhattacharjee, “Large
Pages and Lightweight Memory Management in Virtualized.
Systems: Can You Have it Both Ways?,” MICRO, 2015.

[37] V. Karakostas, J. Gandhi, A. Cristal, M. Hill, K. McKinley,
M. Nemirovsky, M. Swift, and O. Unsal, “Energy-Efficient
Address Translation,’ HPCA, 2016.

[38] V. Karakostas, J. Gandhi, FE Ayar, A. Cristal, M. Hill,
K. McKinley, M. Nemirovsky, M. Swift, and O. Unsal,
“Redundant Memory Mappings for Fast Access to Large
Memories,” ISCA, 2015.

[39] A. Basu, J. Gandhi, J. Chang, M. Hill, and M. Swift, “Efficient
Virtual Memory for Big Memory Servers,” ISCA, 2013.

[40] J. Gandhi, A. Basu, M. Hill, and M. Swift, “Efficient Memory
Virtualization,’ MICRO, 2014.

[41] M. Papadopoulou, X. Tong, A. Seznec, and A. Moshovos,
“Prediction-Based Superpage-Friendly TLB Designs,” HPCA,
2014.

[42] A. Arcangeli, “Transparent Hugepage Support,’ KVM Forum,
2010.

[43] S. Rixner, W. Dally, U. Kapasi, P. Mattson, and J. Owens,
“Memory Access Scheduling,” ISCA, 2000.

[44] X. Yu, C. Hughes, N. Satish, and S. Devadas, “IMP: Indirect
Memory Prefetcher,” MICRO, 2015.

[45] T. Barr, A. Cox, and S. Rixner, “Translation Caching: Skip,
Don’t Walk (the Page Table),” ZSCA, 2010.

[46] A. Bhattacharjee, “Large-Reach Memory Management Unit
Caches,” MICRO, 2013.

[47] A. Clements, F. Kaashoek, and N. Zeldovich, ““RadixVM:
Scalable Address Spaces for Multithreaded Applications,”
Eurosys, 2013.

[48] A. Clements, F. Kaashoek, and N. Zeldovich, “Scalable
Address Spaces Using RCU Balanced Trees,” ASPLOS, 2012.

[49] D. Lustig, G. Sethi, M. Martonosi, and A. Bhattacharjee,
“COATCheck: Verifying Memory Ordering at the Hardware-OS
Interface,” ASPLOS, 2016.

[50] R. Bhargava, B. Serebrin, F. Spadini, and S. Manne, “Accel-
erating Two-Dimensional Page Walks for Virtualized Systems,”
ASPLOS, 2008.

[51] A. Basu, M. Hill, and M. Swift, “Reducing Memory Refer-
ence Energy with Opportunistic Virtual Caching,” JSCA, 2012.

[52] Intel, “Haswell microarchitecture,” www.7-cpu.com/cpu/Haswell.himl.
[53] Intel, “Skylake microarchitecture,” www.7-cpu.com/cpu/Skylake. html.
[54] H. Yoon, J. Meza, R. Ausavarungnirun, R. Harding, and
O. Mutlu, “Row Buffer Locality Aware Caching Policies for
Hybrid Memories,” ICCD, 2012.

[55] J. Vesely, A. Basu, M. Oskin, G. Loh, and A. Bhattacharjee,
“Observations and Opportunities in Architecting Shared Virtual
Memory for Heterogeneous Systems,” JSPASS, 2016.

[56] D. Nelson, A. Pillepich, S. Genel, M. Vogelsberger,
V. Springel, P. Torrey, V. Rodriguez-Gomez, D. Sijacki, G. Sny-
der, B. Griffen, F. Marinacci, L. Blecha, L. Sales, D. Xu, and
L. Hernquist, “The Ilustris Simulation: Public Data Release,”
Arxiv, 2015.

[57] Q. Deng, D. Meisner, L. Ramos, T. Wenisch, and R. Bianchini,
“MemScale: Active Low-Power Modes for Main Memory,”
ASPLOS, 2011.

[58] Q. Deng, D. Meisner, A. Bhattacharjee, T. Wenisch, and
R. Bianchini, “CoScale: Coordinatd CPU and Memory System
DVFS in Server Systems,” MICRO, 2012.

[59] J. Navarro, S. Iyer, P. Druschel, and A. Cox, “Practical,
Transparent Operating System Support for Superpages,” OSDI,
2002.