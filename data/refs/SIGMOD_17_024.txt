
[1] Aliyun. https://intl.aliyun.com.
[2] DBpedia. http://wiki.dbpedia.org/Datasets.
[3] Giraph. http://giraph.apache.org/.
[4] GRAPE. http://grapedb.io/.
[5] Movielens. http://grouplens.org/datasets/movielens/.
[6] MPICH. https://www.mpich.org/.
[7] Snap. http://snap.stanford.edu/data/index.html.
[8] Traﬃc.

http://www.dis.uniroma1.it/challenge9/download.shtml.

[9] U. A. Acar. Self-Adjusting Computation. PhD thesis, CMU,

2005.

[10] J. Bang-Jensen and G. Z. Gutin. Digraphs: Theory,

Algorithms and Applications. Springer, 2008.

[11] P. A. Bernstein and N. Goodman. Concurrency control in

distributed database systems. ACM Comput. Surv.,
13(2):185–221.

[28] N. D. Jones. An introduction to partial evaluation. ACM

Computing Surveys, 28(3), 1996.

[29] H. J. Karloﬀ, S. Suri, and S. Vassilvitskii. A model of

computation for MapReduce. In SODA, 2010.

[30] G. Karypis and V. Kumar. METIS–unstructured graph

partitioning and sparse matrix ordering system, version 2.0.
Technical report, 1995.

[31] A. Khan, Y. Wu, C. C. Aggarwal, and X. Yan. Nema: Fast

graph search with label similarity. PVLDB, 6(3), 2013.
[32] M. Kim and K. S. Candan. SBV-Cut: Vertex-cut based

graph partitioning using structural balance vertices. Data
& Knowledge Engineering, 72:285–303, 2012.

[33] Y. Koren, R. Bell, C. Volinsky, et al. Matrix factorization

techniques for recommender systems. Computer,
42(8):30–37, 2009.

[34] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin,

and J. M. Hellerstein. Distributed GraphLab: A framework
for machine learning in the cloud. PVLDB, 5(8), 2012.

[35] G. Malewicz, M. H. Austern, A. J. C. Bik, J. C. Dehnert,

I. Horn, N. Leiser, and G. Czajkowski. Pregel: a system for
large-scale graph processing. In SIGMOD, 2010.

[36] T. Mytkowicz, M. Musuvathi, and W. Schulte.

Data-parallel ﬁnite-state machines. In ASPLOS, 2014.

[37] K. Pingali, D. Nguyen, M. Kulkarni, M. Burtscher, M. A.

Hassaan, R. Kaleem, T.-H. Lee, A. Lenharth, R. Manevich,
M. M´endez-Lojo, et al. The tao of parallelism in algorithms.
In ACM Sigplan Notices, volume 46, pages 12–25, 2011.
[38] C. Radoi, S. J. Fink, R. M. Rabbah, and M. Sridharan.

Translating imperative code to MapReduce. In OOPSLA,
2014.

[12] E. G. Boman, K. D. Devine, and S. Rajamanickam.

[39] G. Ramalingam and T. Reps. An incremental algorithm for

Scalable matrix computations on large scale-free graphs
using 2D graph partitioning. In SC, 2013.

a generalization of the shortest-path problem. J.
Algorithms, 21(2):267–305, 1996.

[13] F. Bourse, M. Lelarge, and M. Vojnovic. Balanced graph

[40] G. Ramalingam and T. Reps. On the computational

edge partition. In SIGKDD, pages 1456–1465, 2014.

[14] P. Buneman, G. Cong, W. Fan, and A. Kementsietsidis.

Using partial evaluation in distributed query evaluation. In
VLDB, 2006.

[15] E. Cohen, E. Halperin, H. Kaplan, and U. Zwick.

Reachability and distance queries via 2-hop labels.
SICOMP, 32(5):1338–1355, 2003.

[16] L. P. Cordella, P. Foggia, C. Sansone, and M. Vento. A
(sub) graph isomorphism algorithm for matching large
graphs. TPAMI, 26(10):1367–1372, 2004.

[17] J. Dean and S. Ghemawat. MapReduce: simpliﬁed data

processing on large clusters. Commun. ACM, 51(1), 2008.

complexity of dynamic graph problems. TCS, 158(1-2),
1996.

[41] V. Raychev, M. Musuvathi, and T. Mytkowicz.

Parallelizing user-deﬁned aggregations using symbolic
execution. In SOSP, 2015.

[42] S. Salihoglu and J. Widom. GPS: a graph processing

system. In SSDBM, 2013.

[43] I. Stanton and G. Kliot. Streaming graph partitioning for
large distributed graphs. In KDD, pages 1222–1230, 2012.

[44] Y. Tian, A. Balmin, S. A. Corsten, and J. M.

Shirish Tatikonda. From “think like a vertex” to “think like
a graph”. PVLDB, 7(7):193–204, 2013.

[18] W. Fan, C. Hu, and C. Tian. Incremental graph

[45] P. Trinder. A Functional Database. PhD thesis, University

computations: Doable and undoable. In SIGMOD, 2017.

of Oxford, 1989.

[19] W. Fan, J. Li, S. Ma, N. Tang, Y. Wu, and Y. Wu. Graph
pattern matching: From intractability to polynomial time.
In PVLDB, 2010.

[20] W. Fan, J. Li, X. Wang, and Y. Wu. Query preserving

graph compression. In SIGMOD, 2012.

[21] W. Fan, X. Wang, and Y. Wu. Incremental graph pattern

matching. TODS, 38(3), 2013.

[22] W. Fan, X. Wang, and Y. Wu. Distributed graph

simulation: Impossibility and possibility. PVLDB, 7(12),
2014.

[23] M. L. Fredman and R. E. Tarjan. Fibonacci heaps and

their uses in improved network optimization algorithms.
JACM, 34(3):596–615, 1987.

[24] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and

C. Guestrin. Powergraph: Distributed graph-parallel
computation on natural graphs. In USENIX, 2012.

[25] J. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J.

Franklin, and I. Stoica. GraphX: Graph processing in a
distributed dataﬂow framework. In OSDI, 2014.

[26] T. J. Harris. A survey of PRAM simulation techniques.

ACM Comput. Surv., 26(2):187–206, 1994.

[27] M. R. Henzinger, T. Henzinger, and P. Kopke. Computing

simulations on ﬁnite and inﬁnite graphs. In FOCS, 1995.

[46] L. G. Valiant. A bridging model for parallel computation.

Commun. ACM, 33(8):103–111, 1990.

[47] L. G. Valiant. General purpose parallel architectures. In

Handbook of Theoretical Computer Science, Vol A. 1990.

[48] J. Vinagre, A. M. Jorge, and J. Gama. Fast incremental

matrix factorization for recommendation with positive-only
feedback. In International Conference on User Modeling,
Adaptation, and Personalization, 2014.

[49] G. Wang, W. Xie, A. J. Demers, and J. Gehrke.

Asynchronous large-scale graph processing made easy. In
CIDR, 2013.

[50] D. Yan, J. Cheng, Y. Lu, and W. Ng. Blogel: A

block-centric framework for distributed computation on
real-world graphs. PVLDB, 7(14):1981–1992, 2014.

[51] D. Yan, J. Cheng, K. Xing, Y. Lu, W. Ng, and Y. Bu.
Pregel algorithms for graph connectivity problems with
performance guarantees. PVLDB, 7(14):1821–1832, 2014.

[52] Y. Zhou, L. Liu, K. Lee, C. Pu, and Q. Zhang. Fast

iterative graph computation with resource aware graph
parallel abstractions. In HPDC, 2015.

