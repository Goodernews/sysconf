[1] Apache Cassandra. http: //cassandra. apache. org.

[2] libeds: Library of lock-free and fine-grained algorithms. http: //1i
beds. sourceforge .net.

[3] Intel Thread Building Blocks: a C++ template library for task parallelism. http://www. threadingbuildingblocks.org.

[4] Project voldemort: A distributed key-value storage system. http:
//project-voldemort.com.

[5] LevelDB, a fast and lightweight key/value database library by
Google, 2005. https://github.com/google/leveldb, commit
2d0320a458d0e6a20fff46d5f80b1 8bfdcece7018.

[6] HyperLevelDB, a fork of LevelDB intended to meet the needs
of HyperDex while remaining compatible with LevelDB,
2014, https: //github.com/rescrv/HyperLevelDB, commit
40ce80173a8d72443c5£92e3c072a54ed9 1 Obab9.

[7] RocksDB _hash-based memtable implementations, 2014.
https: //github. com/facebook/rocksdb/wiki/Hash-based
-memtable- implementations.

[8] CLHT, a very fast and scalable (ock-based and lock-free) concurrent
hash table with cache-line sized buckets, 2015. https: //github.com
/LPD-EPFL/CLHT.

[9] ASCYLIB, a concurrent-search data-structure library with over 40
implementantions of linked lists, hash tables, skip lists, binary search
trees, queues, and stacks, 2016. https: //github. com/LPD-EPFL/AS
CYLIB.

[10] Public implementation of the cLSM algorithm, on top of RocksDB,
2016. https: //github. com/guyg8/rocksdb/commits/write_thr
oughput.

[11] Apache HBase, a distributed, scalable, big data store, 2016. http:
//hbase. apache. org/.

[12] RocksDB, a persistent key-value store for fast storage
environments, 2016. http://rocksdb.org/, commit
efd013d6d8ef3607e9c004dee047726538f0 163d.

[13] RocksDB commit describing how to enable cLSM features,
2016. https: //github. com/facebook/rocksdb/commi t/7d87f02
799bd@a8 fd36df 24 fab5baa4968615c86.

[14] RocksDB performance benchmarks, 2016. https: //github.com/f
acebook/rocksdb/wiki/Performance-Benchmarks.

[15] A. S. Aiyer, M. Bautin, G. J. Chen, P. Damania, P. Khemani,
K. Muthukkaruppan, K. Ranganathan, N. Spiegelberg, L. Tang, and
M. Vaidya. Storage infrastructure behind facebook messages: Using
HBase at scale. IEEE Data Engineering Bulletin, 35(2), 2012.

[16] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and M. Paleczny. Workload analysis of a large-scale key-value store. ACM SIGMETRICS
Performance Evaluation Review, 40(1), 2012.

[17] D. Basin, E. Bortnikov, A. Braginsky, G. Golan Gueta, E. Hillel,
I. Keidar, and M. Sulamy. Brief announcement: A key-value map for
massive real-time analytics. PODC 2016.

[18] F. Chang, J. Dean, S. Ghemawat, W. C. Hsieh, D. A. Wallach, M. Burrows, T. Chandra, A. Fikes, and R. E. Gruber. Bigtable: A distributed
storage system for structured data. ACM Transactions on Computer
Systems, 26(2), 2008.

[19] B. F. Cooper, R. Ramakrishnan, U. Srivastava, A. Silberstein, P. Bohannon, H.-A. Jacobsen, N. Puz, D. Weaver, and R. Yerneni. PNUTS:
Yahoo!’s hosted data serving platform. Proceedings of the VLDB Endowment, 1(2), 2008.

[20] T. Cormen, C. Leiserson, R. Rivest, and C. Stein. Introduction to
Algorithms. MIT Press, 2009.

[21] T. David, R. Guerraoui, and V. Trigonakis. Asynchronized concurrency: The secret to scaling concurrent search data structures. ASPLOS 2015.

[22] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati, A. Lakshman,
A. Pilchin, S. Sivasubramanian, P. Vosshall, and W. Vogels. Dynamo:
Amazon’s highly available key-value store. ACM SIGOPS Operating
Systems Review, 41(6), 2007.

[23] J. Duffy. Concurrent Programming on Windows. Microsoft Windows
Development Series. Pearson Education, 2008.

[24] R. Escriva, B. Wong, and E. G. Sirer. Hyperdex: A distributed,
searchable key-value store. SIGCOMM Computer Communication
Review, 42(4), 2012.

[25] B. Fan, D. G. Andersen, and M. Kaminsky. MemC3: Compact
and concurrent memcache with dumber caching and smarter hashing.
NSDI 2013.

[26] G. Golan-Gueta, E. Bortnikov, E. Hillel, and I. Keidar. Scaling concurrent log-structured data stores. Eurosys 2015.

[27] D. Guniguntala, P. E. McKenney, J. Triplett, and J. Walpole. The
read-copy-update mechanism for supporting real-time applications on
shared-memory multiprocessor systems with linux. IBM Systems
Journal, 47(2), 2008.

[28] D. Hendler, I. Incze, N. Shavit, and M. Tzafrir. Flat combining and
the synchronization-parallelism tradeoff. SPAA 2010.

[29] M. Herlihy and N. Shavit. The Art of Multiprocessor Programming,
Revised Reprint. Morgan Kaufmann Publishers Inc., 1st edition, 2012.

[30] M. P. Herlihy and J. M. Wing. Linearizability: A correctness condition for concurrent objects. ACM Transactions on Programming Languages and Systems, 12(3), 1990.

[31] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky. MICA: A holistic
approach to fast in-memory key-value storage. management, 15(32),
2014.

[32] Y. Mao, E. Kohler, and R. T. Morris. Cache craftiness for fast multicore key-value storage. Eurosys 2012.

[33] P. E. McKenney and J. D. Slingwine. Read-copy update: Using
execution history to solve concurrency problems. PDCS 1998.

[34] P. E. McKenney, D. Sarma, A. Arcangeli, A. Kleen, O. Krieger, and
R. Russell. Read copy update. Ottawa Linux Symposium 2001.

[35] P. O’Neil, E. Cheng, D. Gawlick, and E. O’Neil. The log-structured
merge-tree (LSM-tree). Acta Informatica, 33(4), 1996.

[36] J. Ousterhout and F. Douglis. Beating the I/O bottleneck: A case for
log-structured file systems. ACM SIGOPS Operating Systems Review,
23(1), 1989.

[37] C. H. Papadimitriou. The serializability of concurrent database updates. J. ACM, 26(4), 1979.

[38] W. Pugh. Skip lists: A probabilistic alternative to balanced trees.
Communications of the ACM, 33(6), 1990.

[39] R. Sears and R. Ramakrishnan. bLSM: a general purpose log structured merge tree. SIGMOD/PODS 2012. ACM, 2012.

[40] R. Sedgewick and K. Wayne. Algorithms. Pearson Education, 4th
edition, 2014.

[41] A. Tanenbaum and H. Bos. Modern Operating Systems. Prentice Hall,
2014.

[42] G. Wu, X. He, and B. Eckart. An adaptive write buffer management
scheme for flash-based SSDs. ACM Transactions on Storage, 8(1),
2012.

[43] X. Wu, Y. Xu, Z. Shao, and S. Jiang. LSM-trie: An LSM-tree-based
ultra-large key-value store for small data items. USENIX ATC 2015.