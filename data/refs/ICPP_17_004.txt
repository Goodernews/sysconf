[1] J. J. Dongarra, P. Luszczek, and A. Petitet, “The LINPACK benchmark:
Past, present, and future.” Concurrency Computat.: Pract. Exper., no. 15,
2003.
[2] TOP500, “Top500 website,” ”http://www.top500.org/”.
[3] J. Dongarra, “HPCG benchmarking,” ”http://www.sandia.gov/
∼maherou/docs/HPCG-Benchmark.pdf”.
[4] Graph500, “Graph500,” ”http://www.graph500.org/”, 2017.
[5] R. Balasubramonian, J. Chang, T. Manning, and et al., “Near-Data
Processing: Insights from a MICRO-46 Workshop,” Micro, IEEE, 2014.
[6] Innovative computing laboratory - University of Tennesee, “HPCG
handout,” http://www.hpcg-benchmark.org/overview/index.html, 2014.
[7] V. Marjanovic, J. Gracia, and C. W. Glass, “Performance Modeling of
the HPCG Benchmark,” in Performance Modeling, Benchmarking and
Simulation of High Performance Computer Systems Workshop, 2014.
[8] J. Park, M. Smelyanskiy, K. Vaidyanathan, and et al., “Efﬁcient SharedMemory Implementation of HPCG Benchmark and its Application to
Unstructured Matrices,” ”http://pcl.intel-research.net/publications/sc14
hpcg.pdf”, 2014.
[9] ——, “HPCG on Intel Architecture Update Nov 2015,” ”http://www.
hpcg-benchmark.org/downloads/sc15/sc15-hpcg-bof-intel.pdf”, 2015.
[10] L. Grinberg, “Performance portable single source-code implemention of
sparse linear algebra operations on CPUs and GPUs,” ”https://asc.llnl.
gov/DOE-COE-Mtg-2016/talks/2-13 Grinberg.pdf”, 2016.
[11] F. Checconi and F. Petrini, “Traversing trillions of edges in real time:
Graph exploration on large-scale parallel machines,” in IPDPS ’14,
2014.
[12] Y. Yasui and K. Fujisawa, “Fast and scalable NUMA-based thread
parallel breadth-ﬁrst search,” in International Conference on High Performance Computing Simulation, 2015.
[13] Z. Cui, L. Chen, M. Chen, and et al., “Evaluation and Optimization of
Breadth-First Search on NUMA Cluster,” in IEEE Cluster, 2012.
[14] J. Ahn, S. Hong, S. Yoo, O. Mutlu, and K. Choi, “A Scalable Processingin-memory Accelerator for Parallel Graph Processing,” in International
Symposium on Computer Architecture, 2015.
[15] M. Gao, G. Ayers, and C. Kozyrakis, “Practical Near-Data Processing
for In-Memory Analytics Frameworks,” in Conference on Parallel
Architectures and Compilation Techniques, 2015.
[16] M. A. Z. Alves, M. Diener, P. C. Santos, and et al., “Large vector
extensions inside the HMC,” in Design, Automation and Test in Europe
Conference, 2016.
[17] R. Nair, S. F. Antao, C. Bertolli, and et al., “Active Memory Cube:
A processing-in-memory architecture for exascale systems,” IBM J. of
Research and Development, 2015.
[18] E. Vermij, C. Hagleitner, L. Fiorin, and et al., “An Architecture for
Near-data Processing Systems,” in Computing Frontiers, 2016.
[19] W. J. Starke, J. Stuecheli, D. M. Daly, and et al., “The cache and memory
subsystems of the IBM POWER8 processor,” IBM Journal of Research
and Development, 2015.
[20] HMC Consortium, ”http://www.hybridmemorycube.org/”, 2017.
[21] X. Liu, D. Buono, F. Checconi, and et al., “An Early Performance Study
of Large-Scale POWER8 SMP Systems,” in IEEE International Parallel
and Distributed Processing Symposium, May 2016.
[22] S. Li, J. H. Ahn, R. Strong, J. Brockman, D. Tullsen, and N. Jouppi,
“McPAT: An integrated power, area, and timing modeling framework
for multicore and manycore architectures,” in MICRO-42, 2009.
[23] C. Johnson, D. H. Allen, J. Brown, and et al., “A wire-speed power
processor: 2.3GHz 45nm SOI with 16 cores and 64 threads,” in IEEE
international Solid-State Circuits Conference, 2010.
[24] IBM, “System Energy Estimator,” ”http://www-912.ibm.com/see/
EnergyEstimator”, 2017.
[25] D. Sanchez and C. Kozyrakis, “ZSim: Fast and Accurate Microarchitectural Simulation of Thousand-core Systems,” SIGARCH Computer
Architure News, 2013.
[26] T. Iwashita, H. Nakashima, and Y. Takahashi, “Algebraic Block MultiColor Ordering Method for Parallel Multi-Threaded Sparse Triangular
Solver in ICCG Method,” in IEEE International Parallel & Distributed
Processing Symposium, 2012.
[27] Intel,
“General
Memory,”
”http://www.intel.com/content/www/
us/en/intel-developer-forum-idf/san-francisco/2016/idf-2016-sanfrancisco.html”, 2016.
[28] NVIDIA, “K80,” ”https://images.nvidia.com/content/pdf/kepler/TeslaK80-BoardSpec-07317-001-v05.pdf”.
[29] A. Buluç and K. Madduri, “Parallel breadth-ﬁrst search on distributed
memory systems,” International Conference for High Performance Computing, Networking, Storage and Analysis, 2011.
[30] F. Checconi, F. Petrini, J. Willcock, and et al., “Breaking the speed
and scalability barriers for graph exploration on distributed-memory
machines,” in Supercompute, Nov 2012.
[31] Y. Yasui, K. Fujisawa, and K. Goto, “NUMA-optimized parallel breadthﬁrst search on multicore single-node system,” in IEEE BigData ’13,
2013.
[32] S. Beamer, K. Asanović, and D. Patterson, “Direction-optimizing
Breadth-First Search,” in Supercomputing, 2012.
[33] Z. Guz, M. Awasthi, M. Balakrishnan, and et al., “Real-Time Analytics
as the Killer Application for Processing-In-Memory,” 2nd Workshop on
Near-Data Processing (WoNDP), 2014.
