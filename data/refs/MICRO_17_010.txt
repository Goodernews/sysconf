[1] H. Akinaga and H. Shima. 2010. Resistive Random Access Memory (ReRAM)
Based on Metal Oxides. Proc. IEEE 98, 12 (Dec 2010), 2237-2251. https:
//doi.org/10.1109/JPROC.2010.2070830

[2] NVM Library Team at Intel. 2016. Persistent Memory Programming. (August
2016). http://pmem.io.

[3] Amro Awad, Sergey Blagodurov, and Yan Solihin. 2016. Write-Aware Management of NVM-based Memory Extensions. In Proceedings of the 2016 International
Conference on Supercomputing (ICS ’16). ACM, New York, NY, USA, Article 9,
12 pages. https://doi.org/10.1145/2925426.2926284

[4] Amro Awad, Pratyusa Manadhata, Stuart Haber, Yan Solihin, and William
Horne. 2016. Silent Shredder: Zero-Cost Shredding for Secure Non-Volatile
Main Memory Controllers. In Proceedings of the Twenty-First International
Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’16). ACM, New York, NY, USA, 263-276. https:
/doi.org/10.1145/2872362.2872377

[5] Amro Awad, Yipeng Wang, Deborah Shands, and Yan Solihin. 2017. ObfusMem:
A Low-Overhead Access Obfuscation for Trusted Memories. In Proceedings of
the 44th Annual International Symposium on Computer Architecture (ISCA ’17).
ACM, New York, NY, USA, 107-119. https://doi.org/10.1145/3079856.3080230
[6] Dhruva R. Chakrabarti, Hans-J. Boehm, and Kumud Bhandari. 2014. Atlas:
Leveraging Locks for Non-volatile Memory Consistency. In Proceedings of the
2014 ACM International Conference on Object Oriented Programming Systems
Languages & Applications (OOPSLA ’ 14), ACM, New York, NY, USA, 433-452.
https://doi.org/10.1145/2660193.2660224

[7] Andreas Chatzistergiou, Marcelo Cintra, and Stratis D. Viglas. 2015. REWIND:
Recovery write-ahead System for in-memory non-volatile data-structures. Proc.
VLDB Endow. 8, 5 (Jan. 2015), 497-508. https://doi.org/10.14778/2735479.
2735483

[8] Joel Coburn, Adrian M. Caulfield, Ameen Akel, Laura M. Grupp, Rajesh K. Gupta,
Ranjit Jhala, and Steven Swanson. 2011. NV-Heaps: Making Persistent Objects
Fast and Safe with Next-generation, Non-volatile Memories. In Proceedings of
the Sixteenth International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA,
105-118. https://doi.org/10.1145/1950365.1950380

[9] Jeremy Condit, Edmund B. Nightingale, Christopher Frost, Engin Ipek, Benjamin Lee, Doug Burger, and Derrick Coetzee. 2009. Better I/O Through Byteaddressable, Persistent Memory. In Proceedings of the ACM SIGOPS 22Nd Symposium on Operating Systems Principles (SOSP ’09). ACM, New York, NY, USA,
133-146. https://doi.org/10.1145/1629575.1629589

[10] K. Doshi, E. Giles, and P. Varman. 2016. Atomic persistence for SCM with a
non-intrusive backend controller. In 2016 IEEE International Symposium on High
Performance Computer Architecture (HPCA). 77-89. https://doi.org/10.1109/
HPCA.2016.7446055

[11] Subramanya R. Dulloor, Amitabha Roy, Zheguang Zhao, Narayanan Sundaram,
Nadathur Satish, Rajesh Sankaran, Jeff Jackson, and Karsten Schwan. 2016. Data
Tiering in Heterogeneous Memory Systems. In Proceedings of the Eleventh European Conference on Computer Systems (EuroSys ’16). ACM, New York, NY,
USA, Article 15, 16 pages. https://doi.org/10.1145/2901318.2901344

[12] Yiming Huai, Frank Albert, Paul Nguyen, Mahendra Pakala, and Thierry Valet.
2004. Observation of spin-transfer switching in deep submicron-sized and lowresistance magnetic tunnel junctions. Applied Physics Letters 84, 16 (2004),
3118-3120. https://doi.org/10.1063/1.1707228

[13] Jian Huang, Karsten Schwan, and Moinuddin K. Qureshi. 2014. NVRAM-aware
Logging in Transaction Systems. Proc. VLDB Endow. 8, 4 (Dec. 2014), 389-400.
https://doi.org/10.14778/2735496.2735502

[14] Intel. 2016. Intel 64 and IA-32 Architectures Developer’s Manual: Vol. 3A.
Intel. https://www.intel.com/content/www/us/en/architecture-and-technology/
64-ia-32-architectures-software-developer-vol-3a-part- 1-manual.html

[15] Intel. 2016. Intel 64 and IA-32 Architectures Optimization Reference Manual.
Intel. https://Awww.intel.com/content/www/us/en/architecture-and-technology/
64-ia-32-architectures-optimization-manual.html

[16] Intel and Micron. 2015. Intel and Micron Produce Breakthrough Memory Technology. (Jul. 2015). — https://newsroom.intel.com/news-releases/
intel-and-micron-produce-breakthrough-memory-technology

[17] Joseph Izraelevitz, Terence Kelly, and Aasheesh Kolli. 2016, Failure-Atomic Persistent Memory Updates via JUSTDO Logging. In Proceedings of the Twenty-First
International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS ’16). ACM, New York, NY, USA, 427-442.
https://doi.org/10.1145/2872362.2872410

[18] Arpit Joshi, Vijay Nagarajan, Marcelo Cintra, and Stratis Viglas. 2015. Efficient

Persist Barriers for Multicores. In Proceedings of the 48th International Symposium on Microarchitecture (MICRO-48). ACM, New York, NY, USA, 660-671.
https://doi.org/10.1145/2830772.2830805

[19] A, Joshi, V. Nagarajan, S. Viglas, and M. Cintra. 2017. ATOM: Atomic Durability

in Non-volatile Memory through Hardware Logging. In 2017 IEEE International

Symposium on High Performance Computer Architecture (HPCA). 361-372. https:
//doi.org/10.1109/HPCA.2017.50

[20] T. Kawahara, R. Takemura, K. Miura, J. Hayakawa, S. Ikeda, Y. Lee, R. Sasaki, Y.
Goto, K. Ito, T. Meguro, F, Matsukura, H. Takahashi, H. Matsuoka, and H. Ohno.
2007. 2Mb Spin-Transfer Torque RAM (SPRAM) with Bit-by-Bit Bidirectional

Current Write and Parallelizing-Direction Current Read. In 2007 IEEE International Solid-State Circuits Conference. Digest of Technical Papers. 480-617.
https://doi.org/10.1109/ISSCC.2007.373503

[21] Wook-Hee Kim, Jinwoong Kim, Woongki Baek, Beomseok Nam, and Youjip

Won. 2016. NVWAL: Exploiting NVRAM in Write-Ahead Logging. In Proceedings of the Twenty-First International Conference on Architectural Support for

Programming Languages and Operating Systems (ASPLOS ’16). ACM, New York,
NY, USA, 385-398. https://doi.org/10.1145/2872362.2872392

[22] E. KAijltAijrsay, M. Kandemir, A. Sivasubramaniam, and O. Mutlu. 2013. Evaluating STT-RAM as an energy-efficient main memory alternative. In 2013 IEEE

International Symposium on Performance Analysis of Systems and Software (ISPASS). 256-267. https://doi.org/10.1109/ISPASS.2013.6557176

[23] Aasheesh Kolli, Steven Pelley, Ali Saidi, Peter M. Chen, and Thomas F. Wenisch.
2016. High-Performance Transactions for Persistent Memories. In Proceedings of
the Twenty-First International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS ’16). ACM, New York, NY,

USA, 399-411. https://doi.org/10.1145/2872362.287238 1

[24] A. Kolli, J. Rosen, S. Diestelhorst, A. Saidi, S. Pelley, S. Liu, P. M. Chen, and
T. F. Wenisch. 2016. Delegated persist ordering. In 2016 49th Annual IEEE/ACM
International Symposium on Microarchitecture (MICRO). 1-13. https://doi.org/10.
1109/MICRO.2016.7783761
[25] M. H. Kryder and C. S. Kim. 2009. After Hard Drives - What Comes Next?
IEEE Transactions on Magnetics 45, 10 (Oct 2009), 3406-3413. https://doi.org/
10.1109/TMAG.2009.2024 163
[26] Benjamin C. Lee, Engin Ipek, Onur Mutlu, and Doug Burger. 2009. Architecting
Phase Change Memory As a Scalable Dram Alternative. In Proceedings of the 36th
Annual International Symposium on Computer Architecture (ISCA ’09). ACM,
New York, NY, USA, 2-13. https://doi.org/10.1145/1555754.1555758
[27] Benjamin C. Lee, Ping Zhou, Jun Yang, Youtao Zhang, Bo Zhao, Engin Ipek,
Onur Mutlu, and Doug Burger. 2010. Phase-Change Technology and the Future of
Main Memory. [EEE Micro 30, 1 (Jan. 2010), 143-143. https://doi.org/10.1109/
MM.2010.24
[28] Zhongqi Li, Ruijin Zhou, and Tao Li. 2013. Exploring High-performance and
Energy Proportional Interface for Phase Change Memory Systems. In Proceedings
of the 2013 IEEE 19th International Symposium on High Performance Computer
Architecture (HPCA) (HPCA ’13). IEEE Computer Society, Washington, DC,
USA, 210-221. https://doi.org/10.1109/HPCA.2013.6522320
[29] Mengxing Lin, Mingxing Zhang, Kang Chen, Xuehai Qian, Yongwei Wu, Weimin
Zheng, and Jinglei Ren. 2017. DudeTM: Building Durable Transactions with
Decoupling for Persistent Memory. In Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS ’17). ACM, New York, NY, USA, 329-343.
https://doi.org/10.1145/3037697.30377 14
[30] Youyou Lu, Jiwu Shu, Long Sun, and Onur Mutlu. 2014. Loose-Ordering Consistency for persistent memory. In 32nd International Conference on Computer
Design.
[31] Tulian Moraru, David G. Andersen, Michael Kaminsky, Niraj Tolia, Parthasarathy
Ranganathan, and Nathan Binkert. 2013. Consistent, Durable, and Safe Memory
Management for Byte-addressable Non Volatile Main Memory. In Proceedings
of the First ACM SIGOPS Conference on Timely Results in Operating Systems
(TRIOS ’13). ACM, New York, NY, USA, Article 1, 17 pages. https://doi.org/10.
1145/2524211.2524216
[32] Dushyanth Narayanan and Orion Hodson. 2012. Whole-system Persistence. In
Proceedings of the Seventeenth International Conference on Architectural Support
for Programming Languages and Operating Systems (ASPLOS XVII). ACM, New
York, NY, USA, 401-410. https://doi.org/10.1145/2150976.2151018
[33] Faisal Nawab, Dhruva Chakrabarti, Terence Kelly, and Charles Morrey. 2015.
Procrastination Beats Prevention: Timely Sufficient Persistence for Efficient Crash
Resilience. In International Conference on Extending Database Technology.
[34] Faisal Nawab, Dhruva Chakrabarti, Terence Kelly, and Charles Morrey. 2015.
Zeto-Overhead NVM Crash Resilience. In Non-Volatile Memories Workshop.
[35] Gihwan Oh, Sangchul Kim, Sang-Won Lee, and Bongki Moon. 2015. SQLite
Optimization with Phase Change Memory for Mobile Applications. Proc. VLDB
Endow. 8, 12 (Aug. 2015), 1454-1465. https://doi.org/10.14778/2824032.2824044
[36] Avadh Patel, Furat Afram, Shunfei Chen, and Kanad Ghose. 2011. MARSSx86:
A Full System Simulator for x86 CPUs. In Design Automation Conference.
[37] Steven Pelley, Peter M. Chen, and Thomas F. Wenisch. 2014. Memory Persistency. In Proceeding of the 41st Annual International Symposium on Computer Architecuture (ISCA ’14). IEEE Press, Piscataway, NJ, USA, 265-276.
http://dl.acm.org/citation.cfim ?id=2665671.2665712
[38] Steven Pelley, Thomas F, Wenisch, Brian T. Gold, and Bill Bridge. 2013. Storage
Management in the NVRAM Era. Proc. VLDB Endow. 7, 2 (Oct. 2013), 121-132.
https://doi.org/10.14778/2732228.2732231
[39] Moinuddin K. Qureshi, John Karidis, Michele Franceschini, Vijayalakshmi Srinivasan, Luis Lastras, and Bulent Abali. 2009. Enhancing Lifetime and Security
of PCM-based Main Memory with Start-gap Wear Leveling. In Proceedings of
the 42Nd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO 42). ACM, New York, NY, USA, 14-23. https://doi.org/10.1145/1669112.
1669117
[40] Raghunath Rajachandrasekar, Sreeram Potluri, Akshay Venkatesh, Khaled Hamidouche, Md. Wasi-ur Rahman, and Dhabaleswar K. (DK) Panda. 2014. MICCheck: A Distributed Check Pointing Framework for the Intel Many Integrated
Cores Architecture. In Proceedings of the 23rd International Symposium on Highperformance Parallel and Distributed Computing (HPDC 714), ACM, New York,
NY, USA, 121-124. https://doi.org/10.1145/2600212.2600713
[41] Jinglei Ren, Jishen Zhao, Samira Khan, Jongmoo Choi, Yongwei Wu, and Onur
Mutlu. 2015. ThyNVM: Enabling Software-transparent Crash Consistency in
Persistent Memory Systems. In Proceedings of the 48th International Symposium
on Microarchitecture (MICRO-48). ACM, New York, NY, USA, 672-685. https:
/doi.org/10.1145/2830772.2830802
[42] Seunghee Shin, James Tuck, and Yan Solihin. 2017. Hiding the Long Latency of
Persist Barriers Using Speculative Execution. In Proceedings of the 44th Annual
International Symposium on Computer Architecture (ISCA ’17), ACM, New York,
NY, USA, 175-186. https://doi.org/10.1145/3079856.3080240

[43] Haris Volos, Andres Jaan Tack, and Michael M. Swift. 2011. Mnemosyne:
Lightweight Persistent Memory. In Proceedings of the Sixteenth International
Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA, 91-104. https:
/doi.org/10.1145/1950365.1950379

[44] C. Wang, Q. Wei, J. Yang, C. Chen, and M. Xue. 2015. How to be consistent
with persistent memory? An evaluation approach. In 2015 IEEE International
Conference on Networking, Architecture and Storage (NAS). 186-194. https:
/doi.org/10.1109/NAS.2015.7255223

[45] Tianzheng Wang and Ryan Johnson. 2014. Scalable Logging Through Emerging
Non-volatile Memory. Proc. VLDB Endow. 7, 10 (June 2014), 865-876. https:
/doi.org/10.14778/273295 1.2732960

[46] Jun Yang, Qingsong Wei, Cheng Chen, Chundong Wang, Khai Leong Yong, and
Bingsheng He. 2015. NV-Tree: Reducing Consistency Cost for NVM-based
Single Level Systems. In Proceedings of the 13th USENIX Conference on File
and Storage Technologies (FAST’15). USENIX Association, Berkeley, CA, USA,
167-181. http://dl.acm.org/citation.cfim ?id=2750482.2750495

[47] J. Joshua Yang and R. Stanley Williams. 2013. Memristive Devices in Computing
System: Promises and Challenges. J. Emerg. Technol. Comput. Syst. 9, 2, Article
11 (May 2013), 20 pages. https://doi.org/10.1145/2463585.2463587

[48] Jishen Zhao, Sheng Li, Doe Hyun Yoon, Yuan Xie, and Norman P. Jouppi. 2013.
Kiln: Closing the Performance Gap Between Systems with and Without Persistence Support. In Proceedings of the 46th Annual IEEE/ACM International
Symposium on Microarchitecture (MICRO-46), ACM, New York, NY, USA, 421432. https://doi.org/10.1145/2540708.2540744

[49] Ping Zhou, Bo Zhao, Jun Yang, and Youtao Zhang. 2009. A Durable and Energy
Efficient Main Memory Using Phase Change Memory Technology. In Proceedings
of the 36th Annual International Symposium on Computer Architecture (ISCA ’09).
ACM, New York, NY, USA, 14-23. https://doi.org/10.1145/1555754.1555759
