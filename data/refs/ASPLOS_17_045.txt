[1] Advanced Micro Devices (AMD). AMD64 architecture programmer’s manual. Technical report, 2016. URL: http:
//developer.amd.com/resources/developerguides-manuals.

[2] S. V. Adve and M. D. Hill. Weak ordering—a new definition. In
17th Annual International Symposium on Computer Architecture
(ISCA), 1990.

[3] J. Alglave and L. Maranget. Towards a formalization of the HSA
memory model in the cat language. Technical report, 2016.
HSA Foundation Specification Version 1.1. URL: http://
www.hsafoundation.com/?ddownload=5381.

[4] J. Alglave, L. Maranget, S. Sarkar, and P. Sewell. Fences in weak
memory models. In 22nd International Conference on Computer
Aided Verification (CAV), 2010.

[5] J. Alglave, L. Maranget, and M. Tautschnig. Herding cats: Modelling, simulation, testing, and data mining for weak memory.
ACM Transanctions on Programming Languages and Systems
(TOPLAS), 36(2):7:1-7:74, July 2014. ISSN 0164-0925.

[6] J. Alglave, M. Batty, A. F. Donaldson, G. Gopalakrishnan,
J. Ketema, D. Poetzl, T. Sorensen, and J. Wickerson. GPU concurrency: Weak behaviours and programming assumptions. In
20th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2015a.

[7] J. Alglave, L. Maranget, and M. Tautschnig. Herding cats:
Modelling, simulation, testing, and data mining for weak
memory, companion material, Power litmus tests. 2015b. URL:
http://diy.inria.fr/cats/showlogs/powertests.tgqz.

[8] AMD. Revision guide for AMD family 10h processors. Technical
report, 2012. Bug 254. URL: http: //support.amd.com/
TechDocs/41322\_10h\_Rev\_Gd. pdf.

[9] ARM. Cortex-A9 MPCore™, programmer advice notice, readafter-read hazards. Technical report, 2011. URL: http:
//infocenter.arm.com/help/topic/com.arm.
doc.uan0004a/UAN0004A\_a9\_read\_read.pdf.

[10] ARM Holdings. ARM architecture reference manuals. Technical report, 2016. URL: http: //infocenter.arm.com/
help/topic/com.arm.doc.set.architecture.

[11] M. Batty, A. F. Donaldson, and J. Wickerson. Overhauling sc
atomics in cll and opencl. In 43rd Annual Symposium on
Principles of Programming Languages (POPL), 2016.

[12] H.-J. Boehm and S. V. Adve. Foundations of the C++ concurrency
memory model. In 29th Annual Conference on Programming
Language Design and Implementation (PLDI), 2008.

[13] H.-J. Boehm and B. Demsky. Outlawing ghosts: Avoiding out-ofthin-air results. In Workshop on Memory Systems Performance
and Correctness (MSPC), 2014.

[14] S. Hangal, D. Vahia, C. Manovit, and J.-Y. J. Lu. TSOtool: A program for verifying memory systems using the memory consistency model. In 31st Annual International Symposium on Computer Architecture (ISCA), 2004.

[15] Intel.
ily memory ordering.

A formal specification of Intel Itanium processor famTechnical report, 2002. URL:

ftp://download.intel.com/design/Itanium/
Downloads/25142901.pdf.

[16] Intel. Intel Xeon processor E5 v3 product family, processor specification update. Technical report, 2016a. Bug HSE44.
URL: http: //www.intel.com/content/dam/
www/public/us/en/documents/specificationupdates/xeon-e5-v3-spec-update. pdf.

[17] Intel. Intel@64 and IA-32 architectures software developer manuals. Technical report, 2016b. URL:
http://www.intel.com/content/www/us/
en/processors/architectures-softwaredeveloper-manuals.html.

[18] International Organization for Standardization (SO). Information
technology — programming languages — C, ISO/IEC 9899:2011.
Technical report, Dec. 201 1a.

[19] International Organization for Standardization (SO). Information technology — programming languages — C++, ISO/IEC
14882:2011. Technical report, Sept. 201 1b.

[20] D. Jackson. Alloy: A lightweight object modelling notation. In
ACM Transactions on Software Engineering and Methodology
(TOSEM), volume 11, Apr. 2002. URL: http://alloy.
mit.edu.

[21] Khronos Group. The OpenCL specification, version 2.1. Technical report, 2015. URL: https://www.khronos.org/
registry/cl/specs/opencl-2.1.pdf.

[22] L. Lamport. How to make a multiprocessor computer that correctly executes multiprocess programs. [EEE Transactions on
Computers, 28, 1979.

[23] D. Lustig, G. Sethi, M. Martonosi, and A. Bhattacharjee.
COATCheck: Verifying memory ordering at the hardware-OS
interface. In 21st International Conference on Architectural
Support for Programming Languages and Operating Systems
(ASPLOS), 2016.

[24] S. Mador-Haim, R. Alur, and M. M. K. Martin. Generating litmus
tests for contrasting memory consistency models. In 22nd International Conference on Computer Aided Verification (CAV),
2010.

[25] S. Mador-Haim, L. Maranget, S. Sarkar, K. Memarian, J. Alglave,
S. Owens, R. Alur, M. M. K. Martin, P. Sewell, and D. Williams.
An axiomatic memory model for power multiprocessors. In
24th International Conference on Computer Aided Verification
(CAV), 2012.

[26] Y. A. Manerkar, C. Trippel, D. Lustig, M. Pellauer, and
M. Martonosi. Counterexamples and proof loophole for the
C/C++ to POWER and ARMv7 trailing-sync compiler mappings. arXiv, 1611.01507v2, Nov 2016.

[27] C. Manovit, S. Hangal, H. Chafi, A. McDonald, C. Kozyrakis, and
K. Olukotun. Testing implementations of transactional memory.
In 15th International Conference on Parallel Architectures and
Compilation Techniques (PACT), 2006.

[28] A. Milicevic, J. P. Near, E. Kang, and D. Jackson. Alloy*: A
higher-order relational constraint solver. In 37th International
Conference on Software Engineering (ICSE), 2015.

[29] S. Owens, S. Sarkar, and P. Sewell. A better x86 memory model:
x86-TSO. In 22nd International Conference on Theorem Proving in Higher Order Logics (TPHOLs), 2009.
Power.org. Power ISA™version 2.07. Technical report, 2013. URL: https://www.power.org/wpcontent /uploads/2013/05/PowerISA\_V2.07\
_PUBLIC. pdf.

[30] S. Sarkar, P. Sewell, J. Alglave, L. Maranget, and D. Williams.
Understanding POWER multiprocessors, companion material, POWER and ARM litmus tests. Technical report,
2011a. URL: https://www.cl.cam.ac.uk/~pes20/
ppc-supplemental/test6é.pdf.

[31] S. Sarkar, P. Sewell, J. Alglave, L. Maranget, and D. Williams.
Understanding POWER multiprocessors. In 32nd Conference
on Programming Language Design and Implementation (PLDI),
201 1b.

[32] J. Sevéfk and D. Aspinall. On validity of program transformations
in the java memory model. In 22nd European Conference on
Object-Oriented Programming (ECOOP), 2008.

[33] T. Sorensen and A. F Donaldson. Exposing errors related to
weak memory in GPU applications. In 37th Conference on

[34] Programming Language Design and Implementation (PLDI),
2016.

[35] SPARC International. The SPARC architecture manual, version 9.
Technical report, 1993.

[36] E. Torlak and D. Jackson. Kodkod: A relational model finder. In
13th International Conference on Tools and Algorithms for the
Construction and Analysis of Systems (TACAS), 2007.

[37] V. Vafeiadis, T. Balabonski, S. Chakraborty, R. Morisset, and
F. Zappa Nardelli. Common compiler optimisations are invalid
in the C11 memory model and what we can do about it. In 42nd
Symposium on Principles of Programming Languages (POPL),
2015.

[38] J. Wickerson, M. Batty, T. Sorensen, and G. A. Constantinides.
Automatically comparing memory consistency models. 44th
Symposium on Principles of Programming Languages (POPL),
2017.