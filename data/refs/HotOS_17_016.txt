[1] M. K. Aguilera, J. C. Mogul, J. L. Wiener, P. Reynolds, and
A. Muthitacharoen. Performance debugging for distributed systems of black boxes. In SOSP ’03, pages 74-89, 2003.

[2] S. Amani, A. Hixon, Z. Chen, C. Rizkallah, P. Chubb, L. O’Connor,
J. Beeren, Y. Nagashima, J. Lim, T. Sewell, J. Tuong, G. Keller,
T. Murray, G. Klein, and G. Heiser. CoGENT: Verifying highassurance file system implementations. In ASPLOS, pages 175188, 2016.

[3] M. Attariyan, M. Chow, and J. Flinn. X-ray: Automating root-cause
diagnosis of performance anomalies in production software. In
OSDI, pages 307-320, 2012.

[4] P. Barham, A. Donnelly, R. Isaacs, and R. Mortier. Using Magpie
for request extraction and workload modelling. In OSDI, pages
259-272, 2004.

[5] A. Chanda, A. L. Cox, and W. Zwaenepoel. Whodunit: Transactional profiling for multi-tier applications. In EuroSys’07, pages
17-30, 2007.

[6] H. Chen, D. Ziegler, T. Chajed, A. Chlipala, M. F. Kaashoek, and
N. Zeldovich. Using Crash Hoare logic for certifying the FSCQ
file system. In SOSP, pages 18-37, 2015.

[7] T. Chen, L. I. Ananiev, and A. V. Tikhonov. Keeping kernel
performance from regressions. In Linux Symposium, volume 1,
pages 93-102, 2007.

[8] P. Deligiannis, A. F. Donaldson, and Z. Rakamaric. Fast and precise
symbolic analysis of concurrency bugs in device drivers (t).
In Automated Software Engineering (ASE’15), pages 166-177.
TEEE, 2015.

[9] D. Engler and K. Ashcraft. RacerX: Effective, static detection of
race conditions and deadlocks. In SOSP, pages 237-252, 2003.

[10] J. Erickson, M. Musuvathi, S. Burckhardt, and K. Olynyk. Effective
data-race detection for the kernel. In OSDI’10, pages 151-162,
2010.

[11] C. Frost, M. Mammarella, E. Kohler, A. de los Reyes, S. Hovsepian, A. Matsuoka, and L. Zhang. Generalized file system
dependencies. In SOSP ’07, pages 307-320, 2007.

[12] R. Gu, Z. Shao, H. Chen, X. N. Wu, J. Kim, V. Sjéberg, and
D. Costanzo. CertiKOS: an extensible architecture for building
certified concurrent OS kernels. In OSDI, pages 653-669, 2016.

[13] G. Klein, K. Elphinstone, G. Heiser, J. Andronick, D. Cock, P. Derrin, D. Elkaduwe, K. Engelhardt, R. Kolanski, M. Norrish,
T. Sewell, H. Tuch, and S. Winwood. seL4: formal verification
of an OS kernel. In SOSP, pages 207-220, 2009.

[14] Leon System for Verification, Aug. 2010. https: //leon.epfl.c
h/.

[15] X. Liu, Z. Guo, X. Wang, F. Chen, X. Lian, J. Tang, M. Wu, M. F.
Kaashoek, and Z. Zhang. D®S: debugging deployed distributed
systems. In NSDI, pages 423-437, 2008.

[16] J.-P. Lozi, B. Lepers, J. Funston, F. Gaud, V. Quéma, and A. Fedorova. The Linux scheduler: a decade of wasted cores. In EuroSys’16, pages 1:1-1:16. ACM, 2016.

[17] H. Mai, E. Pek, H. Xue, S. T. King, and P. Madhusudan. Verifying
security invariants in ExpressOS. In ASPLOS, pages 293-304,

2013.
[18] F. Mérillon, L. Réveillére, C. Consel, R. Marlet, and G. Muller.

Devil: An IDL for hardware programming. In OSDI’00, 2000.

[19] G. Muller, C. Consel, R. Marlet, L. P. Barreto, F. Merillon, and
L. Reveillere. Towards robust OSes for appliances: A new
approach based on domain-specific languages. In Proceedings of
the 9th workshop on ACM SIGOPS European workshop, pages
19-24. ACM, 2000.

[20] G. Muller, J. L. Lawall, and H. Duchesne. A framework for simplifying the development of kernel schedulers: Design and performance evaluation. In Ninth IEEE International Symposium on
High-Assurance Systems Engineering (HASE’05), pages 56-65.
TEEE, 2005.

[21] Multiple run-queues for BFS , Dec. 2012. https: //lwn.net/Art
icles/529280/.

[22] M. Musuvathi, D. Y. W. Park, A. Chou, D. R. Engler, and D. L.
Dill. CMC: a pragmatic approach to model checking real code.
In OSDI’02, pages 75-88, 2002.

[23] S. E. Perl and W. E. Weihl. Performance assertion checking. In
SOSP ’93, pages 134-145, New York, NY, USA, 1993.

[24] L. Ryzhyk, P. Chubb, I. Kuz, and G. Heiser. Dingo: Taming device
drivers. In EuroSys, pages 275-288. ACM, 2009.

[25] S. K. Sahoo, J. Criswell, C. Geigle, and V. Adve. Using likely
invariants for automated software fault localization. In ASPLOS
’13, pages 139-152, 2013.

[26] S. Savage, M. Burrows, G. Nelson, P. Sobalvarro, and T. Anderson.
Eraser: a dynamic data race detector for multithreaded programs.
ACM TOCS, 15(4):391-411, Nov. 1997.

[27] A. Schiipbach, A. Baumann, T. Roscoe, and S. Peter. A declarative
language approach to device configuration. In ASPLOS’/1,
pages 119-132. ACM, 2011.

[28] K. Shen, M. Zhong, and C. Li. I/O system performance debugging using model-driven anomaly characterization. In FAST’05,
pages 309-322, 2005.

[29] V. Vojdani, K. Apinis, V. R6tov, H. Seidl, V. Vene, and R. Vogler.
Static race detection for device drivers: The goblint approach.
In Automated Software Engineering (ASE’ 16), pages 391-402.
TEEE, 2016.

[30] C. Xu and E C. M. Lau. Load balancing in parallel computers:
theory and practice, volume 381. Springer Science & Business
Media, 1996.

[31] J. Yang, P. Twohey, D. Engler, and M. Musuvathi. Using model
checking to find serious file system errors. ACM TOCS, 24(4):
393-423, Nov. 2006.