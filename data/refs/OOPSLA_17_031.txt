[1] Parosh Aziz Abdulla, Mohamed Faouzi Atig, Bengt Jonsson, and Carl Leonardsson. 20161. Stateless Model Checking for

POWER. In Proceedings of 28th International Conference on Computer Aided Verification (CAV ’16) (LNCS), Vol. 9780.

Springer-Verlag, 134-156.



[2] Tatsuya Abe and Toshiyuki Maeda. 2014. A General Model Checking Framework for Various Memory Consistency Models.

In Proceedings of 19th Workshop on High-Level Parallel Programming Models and Supportive Environments (HIPS ’14). IEEE,

332-341,



[3] Tatsuya Abe and Toshiyuki Maeda. 2016. Observation-based Concurrent Program Logic for Relaxed Memory Consistency

Models. In Proceedings of 15th Asian Symposium on Programming Languages and Systems (APLAS ’16) (LNCS), Vol. 10017.

Springer-Verlag, 63-84.



[4] Tatsuya Abe and Toshiyuki Maeda. 2017. Concurrent Program Logic for Relaxed Memory Consistency Models with

Dependencies across Loop Iterations. Journal of Information Processing 25 (2017), 244-255.



[5] Tatsuya Abe, Tomoharu Ugawa, Toshiyuki Maeda, and Kousuke Matsumoto. 2016. Reducing State Explosion for Software

Model Checking with Relaxed Memory Consistency Models. In Proceedings of Symposium on Dependable Software



[6] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 53. Publication date: October 2017.

53:24 Tomoharu Ugawa, Tatsuya Abe, and Toshiyuki Maeda



[7] Engineering Theories, Tools and Applications (SETTA ’16) (LNCS), Vol. 9984. Springer-Verlag, 118-135.



[8] Sarita V. Adve and Kourosh Gharachorloo. 1996. Shared memory consistency models: a tutorial. IEEE Computer 29, 12 (Dec.

1996), 66-76.



[9] Peter MAijller Alexander J. Summers. 2017, Automating Deductive Verification for Weak-Memory Programs. (2017).

arXiv:1703.06368.



[10] ARM 2016. ARM Architechture Reference Manual ARMvé8, for ARMv8-A architechture profile. ARM.



[11] Azul. 2008. Pauseless Garbage Collection. White paper AWP-005—-020. Azul Systems Inc. http://www.azulsystems.com/

products/whitepaper/wp_pgce.pdf



[12] David F. Bacon, Clement R. Attanasio, Han Bok Lee, V. T. Rajan, and Stephen E. Smith. 2001. Java Without the Coffee Breaks:

A Nonintrusive Multiprocessor Garbage Collector. In Proceedings of ACM SIGPLAN 2001 Conference on Programming

Language Design and Implementation (PLDI ’01). ACM Press, 92-103. https://doi.org/10.1145/378795.378819



[13] Henry G. Baker. 1979. Optimizing Allocation and Garbage Collection of Spaces in MacLLisp. In Artificial Intelligence: An

MIT Perspective, Winston and Brown (Eds.). MIT Press. http://home.pipeline.com/~hbaker1/OptAlloc.ps.gz



[14] Sebastian Burckhardt, Rajeev Alur, and Milo M. K. Martin. 2007. CheckFence: checking consistency of concurrent data

types on relaxed memory models. In Proceedings of 28th ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’07). ACM Press, 12-21.



[15] Damien Doligez and Georges Gonthier. 1994. Portable, Unobtrusive Garbage Collection for Multiprocessor Systems. In

Proceedings of 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’94). ACM Press,

70-83. https://doi.org/10.1145/174675.174673



[16] Rodrigo Ferreira, Xinyu Feng, and Zhong Shao. 2010. Parameterized Memory Models and Concurrent Separation Logic. In

Proceedings of 19th European Symposium on Programming (ESOP ’10). 267-286.



[17] Shaked Flur, Kathryn E. Gray, Christopher Pulte, Susmit Sarkar, Ali Sezgin, Luc Maranget, Will Deacon, and Peter Sewell.

2016. Modelling the ARMv8 Architecture, Operationally: Concurrency and ISA. In Proceedings of 43rd annual ACM

SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’16). ACM Press, 608-621.



[18] Peter Gammie, Antony L. Hosking, and Kai Engelhardt. 2015. Relaxing Safely: Verified On-the-Fly Garbage Collection for

x86-TSO. In Proceedings of 36th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI

’15). ACM Press, 99-109. https://doi.org/10,1145/2737924,.2738006



[19] Robert H. Halstead. 1985. Multilisp: A Language for Concurrent Symbolic Computation. ACM Transactions on Programming

Languages and Systems 7, 4 (Oct. 1985), 501-538. https://doi.org/10.1145/4472.4478



[20] Chris Hawblitzel and Erez Petrank. 2009. Automated Verification of Practical Garbage Collectors. In Proceedings of

36th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages. ACM Press, 441-453. https:

//doi.org/10.1145/1480881.1480935



[21] Richard L. Hudson and J. Eliot B. Moss. 2001. Sapphire: Copying GC Without Stopping The World. In Joint ACM-ISCOPE

Conference on Java Grande. ACM Press, 48-57. https://doi.org/10.1145/376656.376810



[22] Richard L. Hudson and J. Eliot B. Moss. 2003. Sapphire: Copying Garbage Collection Without Stopping the World. Concurrency

and Computation: Practice and Experience 15, 3-5 (2003), 223-261. https://doi.org/10.1002/cpe.712



[23] IBM. 2015. Power ISA(TM) Version 3.0.



[24] Intel. 2016. Intel® 64 and I[A-32 Architectures Software Developer’s Manual.



[25] ISO/IEC 14882:2011. 2011. Programming Language C++.



[26] ISO/IEC 9899:2011. 2011. Programming Language C.



[27] Richard Jones, Antony Hosking, and Eliot Moss. 2012. The Garbage Collection Handbook: The Art of Automatic Memory

Management. Chapman & Hall.



[28] Bengt Jonsson. 2008. State-space exploration for concurrent algorithms under weak memory orderings: (preliminary

version). SIGARCH Computer Architecture News 36, 5 (2008), 65-71.



[29] Jan-Oliver Kaiser, Hoang-Hai Dang, Derek Dreyer, Ori Lahav, and Viktor Vafeiadis. 2017. Strong Logic for Weak Memory:

Reasoning About Release-Acquire Consistency in Iris. In Proceedings of 31st European Conference on Object-Oriented

Programming (ECOOP ’17) (LIPics). Schloss Dagstuhl—Leibniz-Zentrum fuer Informatik, 17:1-17:29.



[30] Haim Kermany and Erez Petrank. 2006. The Compressor: Concurrent, Incremental and Parallel Compaction. In Proceedings

of 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’06). ACM Press, 354-363.

https://doi.org/10.1145/1133981.1134023



[31] Daniel Kroening and Michael Tautschnig. 2014. CBMC - C Bounded Model Checker - (Competition Contribution). In

Proceedings of Tools and Algorithms for Construction and Analysis of Systems (TACAS ’14) (LNCS), Vol. 8413. Springer-Verlag,

389-391,



[32] Ori Lahav and Viktor Vafeiadis. 2015. Owicki-Gries Reasoning for Weak Memory Models. In Proceedings of 42nd International

Colloquium on Automata, Languages, and Programming (ICALP ’15). 311-323.



[33] Yi Lin, Kunshan Wang, Stephen M. Blackburn, Antony L. Hosking, and Michael Norrish. 2015. Stop and Go: Understanding

Yieldpoint Behavior. In Proceedings of 2015 International Symposium on Memory Management (ISMM 15). ACM Press,



[34] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 53. Publication date: October 2017.

Model Checking Copy Phases of Concurrent Copying GC with Various Memory Models — 53:25



[35] 70-80. https://doi.org/10.1145/10.1145/2754169,2754187



[36] Alexander Linden and Pierre Wolper. 2010. An Automata-Based Symbolic Approach for Verifying Programs on Relaxed

Memory Models. In Proceedings of 17th International SPIN Workshop on Model Checking of Software (SPIN ’10) (LNCS),

Vol. 6349. Springer-Verlag, 212-226.



[37] Bill McCloskey, David F. Bacon, Perry Cheng, and David Grove. 2008. Staccato: A Parallel and Concurrent Real-time

Compacting Garbage Collector for Multiprocessors. IBM Research Report RC24505. IBM Research. htip://domino.watson.

ibm.com/comm/research_people.nsf/pages/dgrove.rc24504.html



[38] Scott Nettles and James O’Toole. 1993. Real-Time Replication-Based Garbage Collection. In Proceedings of 34th ACM

SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’93). ACM Press, 217-226. https:

//doi.org/10.1145/155090.155111



[39] Scott M. Nettles, James W. O’Toole, David Pierce, and Nicholas Haines. 1992. Replication-Based Incremental Copying

Collection. In Proceedings of International Workshop on Memory Management (IWMM ’92). ACM Press, 357-364. https:

//doi.org/10.1007/BFb0017201



[40] Brian Norris and Brian Demsky. 2013. CDSchecker: checking concurrent data structures written with C/C++ atomics. In

Proceedings of 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and

Applications (OOPSLA ’13). ACM Press, 131-150.



[41] Peizhao Ou and Brian Demsky. 2017. Checking Concurrent Data Structures Under the C/C++11 Memory Model. In

Proceedings of 22nd ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP ’17). ACM Press,

45-59,



[42] Scott Owens. 2010. Reasoning about the Implementation of Concurrency Abstractions on x86-TSO. In Proceedings of

European Conference on Object-Oriented Programming (ECOOP ’10) (LNCS), Vol. 6183. Springer-Verlag, 478-503.



[43] Filip Pizlo, Daniel Frampton, Erez Petrank, and Bjarne Steensgard. 2007a. Stopless: A Real-Time Garbage Collector for

Multiprocessors. In Proceedings of 6th International Symposium on Memory Management (ISMM ’07). ACM Press, 159-172.

https://doi.org/10.1145/1296907.1296927



[44] Filip Pizlo, Antony L. Hosking, and Jan Vitek. 2007b. Hierarchical Real-time Garbage Collection. In Proceedings of 2007 ACM

SIGPLAN/SIGBED Conference on Languages, Compilers, and Tools for Embedded Systems (LCTES ’07). ACM Press, 123-133.

https://doi.org/10.1145/1254766.1254784



[45] Filip Pizlo, Erez Petrank, and Bjarne Steensgaard. 2008. A Study of Concurrent Real-Time Garbage Collectors. In Proceedings

of 29th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’08). ACM Press, 33-44.

https://doi.org/10.1145/1379022.1375587



[46] Filip Pizlo, Lukasz Ziarek, Petr Maj, Antony L. Hosking, Ethan Blanton, and Jan Vitek. 2010. Schism: Fragmentation-Tolerant

Real-Time Garbage collection. In Proceedings of 31st ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’10). ACM Press, 146-159. https://doi.org/10.1145/1806596.1806615



[47] Tom Ridge. 2010. A Rely-Guarantee Proof System for x86-TSO. In Proceedings of International Conference on Verified Software:

Theories, Tools, and Experiments (VSTTE ’10). Springer-Verlag, 55-70.



[48] Carl G. Ritson, Tomoharu Ugawa, and Richard Jones. 2014. Exploring Garbage Collection with Haswell Hardware Transactional Memory. In Proceedings of 2014 International Symposium on Memory Management (ISMM 714). ACM Press, 105-115.

https://doi.org/10.1145/2602988.2602992



[49] Mooly Sagiv, Thomas Reps, and Reinhard Wilhelm. 2002. Parametric shape analysis via 3-valued logic. ACM Transactions

on Programming Languages and Systems 24, 3 (2002), 217-298.



[50] Vijay A. Saraswat, Radha Jagadeesan, Maged Michael, and Christoph von Praun. 2007. A Theory of Memory Models. In

Proceedings of 12th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP 07). ACM Press,

161-172. https://doi.org/10.1145/1229428.1229469



[51] Susmit Sarkar, Peter Sewell, Jade Alglave, Luc Maranget, and Derek Williams. 2011. Understanding POWER multiprocessors.

In Proceedings of 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’11). ACM

Press, 175-186.



[52] SV-COMP. 2016. Competition on Software Verification. (2016). https://sv-comp.sosy-lab.org/.



[53] Ermenegildo Tomasco, Omar Inverso Truc Nguyen Lam, Bernd Fischer, Salvatore La Torre, and Gennaro Parlato. 2016. Lazy

Sequentialization for TSO and PSO via Shared Memory Abstractions. In Proceedings of Formal Methods in Computer-Aided

Design (FMCAD ’16). IEEE, 193-200.



[54] Oleg Travkin, Annika Miitze, and Heike Wehrheim. 2013. SPIN as a Linearizability Checker under Weak Memory Models.

In Proceedings of Haifa Verification Conference (LNCS), Vol. 8244. Springer-Verlag, 311-326.



[55] Oleg Travkin and Heike Wehrheim. 2016. Verification of Concurrent Programs on Weak Memory Models. In Proceedings of

International Confederation for Thermal Analysis and Calorimetry (ICTAC ’16) (LNCS), Vol. 9965. Springer-Verlag, 3-24.



[56] Aaron Turon, Viktor Vafeiadis, and Derek Dreyer. 2014. GPS: Navigating weak memory with ghosts, protocols, and

separation. In Proceedings of 2014 ACM International Conference on Object Oriented Programming Systems Languages and

Applications (OOPSLA ’14). ACM Press, 691-707.



[57] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 53. Publication date: October 2017.

53:26 Tomoharu Ugawa, Tatsuya Abe, and Toshiyuki Maeda



[58] Tomoharu Ugawa, Richard Jones, and Carl G. Ritson. 2014. Reference Object Processing in On-The-Fly Garbage Collection.

In Proceedings of 2014 International Symposium on Memory Management (ISMM ’14). ACM Press, 59-69. https://doi.org/

10.1145/2602988.2602991



[59] Viktor Vafeiadis and Chinmay Narayan. 2013. Relaxed separation logic: A program logic for C11 concurrency. In Proceedings

of 2013 ACM SIGPLAN International Conference on Object Oriented Programming Systems Languages and Applications

(OOPSLA ’13). ACM Press, 867-884.



[60] FI. van der Berg. 2013. Model checking LLVM IR using LTSmin: using relaxed memory model semantics. Master’s thesis.

University of Twente.



[61] Martin T. Vechev, Eran Yahav, David F. Bacon, and Noam Rinetzky. 2007. CGCExplorer: A Semi-Automated Search Procedure

for Provably Correct Concurrent Collectors. In Proceedings of 28th ACM SIGPLAN Conference on Programming Language

Design and Implementation (PLDI ’07). ACM Press, 456-467. https://doi.org/10.1145/1250734.1250787



[62] Yue Yang, Ganesh Gopalakrishnan, and Gary Lindstrom. 2005. UMM: an operational memory model specification framework

with integrated model checking capability. Concurrency and Computation: Practice and Experience 17, 5-6 (2005), 465-487.



[63] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 53. Publication date: October 2017.
