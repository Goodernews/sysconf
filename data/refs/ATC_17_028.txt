[1] Apache Cassandra. http://cassandra.apache.org.
[2] Memcached, an open source, high-performance, distributed
memory object caching system. https://memcached.org/.
[3] Redis, an open source, in-memory data structure store. https:
//redis.io/.
[4] LevelDB, a fast and lightweight key/value database library by
Google, 2005. https://github.com/google/leveldb.
[5] Leveled Compaction in Apache Cassandra,
2011.
http://www.datastax.com/dev/blog/leveled-compact
ion-in-apache-cassandra.
[6] When to Use Leveled Compaction, 2012. http://www.datast
ax.com/dev/blog/when-to-use-leveled-compaction.
[7] Hyperleveldb performance benchmarks., 2013. http://hyperd
ex.org/performance/leveldb/.
[8] Inside hyperleveldb., 2013. http://hackingdistributed.com
/2013/06/17/hyperleveldb/.
[9] HyperLevelDB, a fork of LevelDB intended to meet the needs
of HyperDex while remaining compatible with LevelDB., 2014.
https://github.com/rescrv/HyperLevelDB.
[10] Improving compaction in Cassandra with cardinality estimation,
2014. http://www.datastax.com/dev/blog/improving-com
paction-in-cassandra-with-cardinality-estimation.
[11] Apache HBase, a distributed, scalable, big data store, 2016. ht
tp://hbase.apache.org/.
[12] RocksDB, a persistent key-value store for fast storage environments, 2016. http://rocksdb.org/.
[13] RocksDB options of compaction priority, 2016. http://rocksd
b.org/blog/2016/01/29/compaction_pri.html.
[14] RocksDB tuning guide, 2016. https://github.com/faceboo
k/rocksdb/wiki/RocksDB-Tuning-Guide.
[15] A HMAD , M. Y., AND K EMME , B. Compaction management in
distributed key-value datastores. Proc. VLDB Endow. 8, 8 (Apr.
2015), 850–861.
[16] ATIKOGLU , B., X U , Y., F RACHTENBERG , E., J IANG , S., AND
PALECZNY, M. Workload analysis of a large-scale key-value
store. In ACM SIGMETRICS Performance Evaluation Review
(2012), vol. 40.
[17] BALMAU , O., G UERRAOUI , R., T RIGONAKIS , V., AND
Z ABLOTCHI , I. Flodb: Unlocking memory in persistent keyvalue stores. In Proceedings of the Twelfth European Conference
on Computer Systems (New York, NY, USA, 2017), EuroSys ’17,
ACM, pp. 80–94.
[18] B ĂSESCU , C., C ACHIN , C., E YAL , I., H AAS , R., S ORNIOTTI ,
A., V UKOLI Ć , M., AND Z ACHEVSKY, I. Robust data sharing
with key-value stores. DSN 2012.
[19] B ENDER , M. A., FARACH -C OLTON , M., JANNEN , W., J OHN SON , R., K USZMAUL , C., B., P ORTER , D. E., Y UAN , J., AND
Z HAN , Y. An introduction to bε -trees and write-optimization.
login 40, 5 (Oct. 2015).
[20] B RODAL , G. S., AND FAGERBERG , R. Lower bounds for external memory dictionaries. In Proceedings of the Fourteenth Annual ACM-SIAM Symposium on Discrete Algorithms (Philadelphia, PA, USA, 2003), SODA ’03, Society for Industrial and Applied Mathematics, pp. 546–554.
[21] C ANO , I., A IYAR , S., AND K RISHNAMURTHY, A. Characterizing private clouds: A large-scale empirical analysis of enterprise
clusters. SOCC 2016.
[22] C HANG , F., D EAN , J., G HEMAWAT, S., H SIEH , W. C., WAL LACH , D. A., B URROWS , M., C HANDRA , T., F IKES , A., AND
G RUBER , R. E. Bigtable: A distributed storage system for structured data. ACM Transactions on Computer Systems 26, 2 (2008).
[23] C HANG , L.-P. On efficient wear leveling for large-scale flashmemory storage systems. In Proceedings of the 2007 ACM Symposium on Applied Computing (New York, NY, USA, 2007), SAC
’07, ACM, pp. 1126–1130.
[24] DAYAN , N., ATHANASSOULIS , M., AND I DREOS , S. Monkey:
Optimal navigable key-value store. In Proceedings of the 2017
ACM International Conference on Management of Data (New
York, NY, USA, 2017), SIGMOD ’17, ACM, pp. 79–94.
[25] D E C ANDIA , G., H ASTORUN , D., JAMPANI , M., K AKULAPATI ,
G., L AKSHMAN , A., P ILCHIN , A., S IVASUBRAMANIAN , S.,
VOSSHALL , P., AND VOGELS , W. Dynamo: amazon’s highly
available key-value store. SOSP 2007.
[26] D ONG , S., C ALLAGHAN , M., G ALANIS , L., B ORTHAKUR , D.,
S AVOR , T., AND S TRUM , M. Optimizing space amplification
in rocksdb. In CIDR 2017, 8th Biennial Conference on Innovative Data Systems Research, Chaminade, CA, USA, January 8-11,
2017, Online Proceedings (2017).
[27] D ONG , S., C ALLAGHAN , M., G ALANIS , L., B ORTHAKUR , D.,
S AVOR , T., AND S TUMM , M. Optimizing space amplification in
rocksdb.
[28] F USY, É., O LIVIER , G., AND M EUNIER , F. Hyperloglog: The
analysis of a near-optimal cardinality estimation algorithm. AofA
2007.
[29] G OLAN -G UETA , G., B ORTNIKOV, E., H ILLEL , E., AND K EI DAR , I. Scaling concurrent log-structured data stores. Eurosys
2015.
[30] H EULE , S., N UNKESSER , M., AND H ALL , A. Hyperloglog in
practice: algorithmic engineering of a state of the art cardinality
estimation algorithm. ICDT 2013.
[31] JANNEN , W., Y UAN , J., Z HAN , Y., A KSHINTALA , A., E SMET,
J., J IAO , Y., M ITTAL , A., PANDEY, P., R EDDY, P., WALSH , L.,
B ENDER , M. A., FARACH -C OLTON , M., J OHNSON , R., K USZ MAUL , B. C., AND P ORTER , D. E. Betrfs: Write-optimization
in a kernel file system. Trans. Storage 11, 4 (Nov. 2015), 18:1–
18:29.
[32] K USZMAUL , B. A comparison of fractal trees to log-structured
merge (lsm) trees. White Paper (2014).
[33] L EE , S., L IU , M., J UN , S., X U , S., K IM , J., AND A RVIND , A.
Application-managed flash. In Proceedings of the 14th Usenix
Conference on File and Storage Technologies (Berkeley, CA,
USA, 2016), FAST’16, USENIX Association, pp. 339–353.
[34] L IM , H., A NDERSEN , D. G., AND K AMINSKY, M. Towards
accurate and fast evaluation of multi-stage log-structured designs.
FAST 2016.
[35] L IM , H., FAN , B., A NDERSEN , D. G., AND K AMINSKY,
M. Silt: A memory-efficient, high-performance key-value store.
SOSP 2011.
[36] L IM , H., H AN , D., A NDERSEN , D. G., AND K AMINSKY, M.
MICA: A holistic approach to fast in-memory key-value storage.
management 15, 32 (2014).
[37] L U , L., P ILLAI , T. S., A RPACI -D USSEAU , A. C., AND
A RPACI -D USSEAU , R. H. Wisckey: Separating keys from values in ssd-conscious storage. FAST 2016.
[38] M ARMOL , L., S UNDARARAMAN , S., TALAGALA , N., AND
R ANGASWAMI , R. Nvmkv: A scalable, lightweight, ftl-aware
key-value store. USENIX ATC 2015.
[39] M ARMOL , L., S UNDARARAMAN , S., TALAGALA , N., R AN GASWAMI , R., D EVENDRAPPA , S., R AMSUNDAR , B., AND
G ANESAN , S. Nvmkv: A scalable and lightweight flash aware
key-value store. HotStorage 2014.
[40] O’N EIL , P., C HENG , E., G AWLICK , D., AND O’N EIL , E. The
log-structured merge-tree (LSM-tree). Acta Informatica 33, 4
(1996).
[41] O USTERHOUT, J., AND D OUGLIS , F. Beating the I/O bottleneck: A case for log-structured file systems. ACM SIGOPS Operating Systems Review 23, 1 (1989).
[42] PAPAGIANNIS , A., S ALOUSTROS , G., G ONZÁLEZ -F ÉREZ , P.,
AND B ILAS , A. Tucana: Design and implementation of a fast
and efficient scale-up key-value store. In Proceedings of the
2016 USENIX Conference on Usenix Annual Technical Conference (Berkeley, CA, USA, 2016), USENIX ATC ’16, USENIX
Association, pp. 537–550.
[43] RUSSELL , S., AND N ORVIG , P. Artificial intelligence: a modern
approach (2nd edition).
[44] S EARS , R., AND R AMAKRISHNAN , R. bLSM: a general purpose
log structured merge tree. SIGMOD/PODS 2012, ACM.
[45] S HETTY, P., S PILLANE , R., M ALPANI , R., A NDREWS , B.,
S EYSTER , J., AND Z ADOK , E. Building workload-independent
storage with vt-trees. FAST 2013.
[46] WANG , P., S UN , G., J IANG , S., O UYANG , J., L IN , S., Z HANG ,
C., AND C ONG , J. An efficient design and implementation of
lsm-tree based key-value store on open-channel ssd. In Proceedings of the Ninth European Conference on Computer Systems (New York, NY, USA, 2014), EuroSys ’14, ACM, pp. 16:1–
16:14.
[47] W U , X., X U , Y., S HAO , Z., AND J IANG , S. LSM-trie: An
LSM-tree-based ultra-large key-value store for small data items.
USENIX ATC 2015.
[48] YANG , J., P LASSON , N., G ILLIS , G., TALAGALA , N., AND
S UNDARARAMAN , S. Don’t stack your log on my log. INFLOW
2014.
[49] Y UAN , J., Z HAN , Y., JANNEN , W., PANDEY, P., A KSHINTALA ,
A., C HANDNANI , K., D EO , P., K ASHEFF , Z., WALSH , L.,
B ENDER , M. A., FARACH -C OLTON , M., J OHNSON , R., K USZ MAUL , B. C., AND P ORTER , D. E. Optimizing every operation in a write-optimized file system. In Proceedings of the 14th
Usenix Conference on File and Storage Technologies (Berkeley,
CA, USA, 2016), FAST’16, USENIX Association, pp. 1–14.
