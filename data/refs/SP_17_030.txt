
[1] “Executable and Linkable Format (ELF),” http://www.skyfree.org/linux/

references/ELF_Format.pdf.

[2] “Ioactive_elf_parsing_with_melkor.pdf,” http://www.ioactive.com/pdfs/

IOActive_ELF_Parsing_with_Melkor.pdf.

[3] “Isartor test suite (terms of use & download) - pdf association,” https:

//www.pdfa.org/isartor-test-suite-terms-of-use-download/.

[4] “libFuzzer - a library for coverage-guided fuzz testing - LLVM 3.9

documentation,” http://llvm.org/docs/LibFuzzer.html.

[5] “Nezha (chinese protection god),” http://www.godchecker.com/pantheo

n/chinese-mythology.php?deity=NEZHA.

[6] “Santizercoverage - Clang 4.0 documentation,” http://clang.llvm.org/doc

s/SanitizerCoverage.html.

[7] “The EFF SSL Observatory,” https://www.eff.org/observatory.
[8] “Undeﬁned behavior sanitizer - Clang 4.0 documentation,” http://clang.

llvm.org/docs/UndeﬁnedBehaviorSanitizer.html.

[9] “Virusshare.com,” https://virusshare.com/.
[10] “Internet X.509 public key infrastructure certiﬁcate policy and certiﬁca-

tion practices framework,” http://www.ietf.org/rfc/rfc2527.txt, 1999.

[11] “The TLS protocol version 1.0,” http://tools.ietf.org/html/rfc2246, 1999.
[12] “HTTP over TLS,” http://www.ietf.org/rfc/rfc2818.txt, 2000.
[13] “System v application binary interface,” https://refspecs.linuxfoundation

.org/elf/gabi4+/contents.html, April 2001.

[14] “The Transport Layer Security (TLS) protocol version 1.1,” http://tools.

ietf.org/html/rfc4346, 2006.

[15] “Internet X.509 public key infrastructure certiﬁcate and certiﬁcate revo-

cation list (CRL) proﬁle,” http://tools.ietf.org/html/rfc5280, 2008.

[16] “The Transport Layer Security (TLS) protocol version 1.2,” http://tools.

ietf.org/html/rfc5246, 2008.

[17] “Representation and veriﬁcation of domain-based application service
identity within Internet public key infrastructure using X.509 (PKIX)
certiﬁcates in the context of Transport Layer Security (TLS),” http:
//tools.ietf.org/html/rfc6125, 2011.

[18] “The Secure Sockets Layer (SSL) protocol version 3.0,” http://tools.ietf

.org/html/rfc6101, 2011.

[19] “Xz utils,” http://tukaani.org/xz/, 2015.
[20] “The Transport Layer Security (TLS) Protocol Version 1.3,” https://tool

s.ietf.org/html/draft-ietf-tls-tls13-14, 2016.

[21] G. Argyros, I. Stais, S. Jana, A. D. Keromytis, and A. Kiayias,
“SFADiff: Automated evasion attacks and ﬁngerprinting using black-
box differential automata learning,” in Proceedings of the 2016 ACM
SIGSAC Conference on Computer and Communications Security (CCS).
ACM, 2016, pp. 1690–1701.

[22] O. Bastani, R. Sharma, A. Aiken, and P. Liang, “Synthesizing program
input grammars,” in Proceedings of the 38th ACM SIGPLAN Conference
on Programming Language Design and Implementation (PLDI). ACM,
2017.

[23] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based grey-
box fuzzing as markov chain,” in Proceedings of
the 23rd ACM
Conference on Computer and Communications Security (CCS), 2016,
pp. 1–12.

[24] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov, “Using
frankencerts for automated adversarial testing of certiﬁcate validation in
SSL/TLS implementations,” in Proceedings of the 2014 IEEE Sympo-
sium on Security and Privacy (S&P).
IEEE Computer Society, 2014,
pp. 114–129.

[25] D. Brumley, J. Caballero, Z. Liang, J. Newsome, and D. Song, “Towards
automatic discovery of deviations in binary implementations with appli-
cations to error detection and ﬁngerprint generation,” in 16th USENIX
Security Symposium (USENIX Security ’07). USENIX Association,
2007.

[26] C. Cadar, D. Dunbar, D. R. Engler et al., “Klee: Unassisted and
automatic generation of high-coverage tests for complex systems pro-
grams.” in 8th USENIX Symposium on Operating Systems Design and
Implementation (OSDI), vol. 8, 2008, pp. 209–224.

[27] C. Cadar and D. Engler, “Execution generated test cases: How to make
systems code crash itself,” in International SPIN Workshop on Model
Checking of Software. Springer, 2005, pp. 2–23.

[28] S. K. Cha, M. Woo, and D. Brumley, “Program-adaptive mutational
fuzzing,” in 2015 IEEE Symposium on Security and Privacy (S&P),
May 2015, pp. 725–741.

[29] P. Chapman and D. Evans, “Automated black-box detection of side-
channel vulnerabilities in web applications,” in Proceedings of the 18th
ACM conference on Computer and Communications Security (CCS).
ACM, 2011, pp. 263–274.

[30] L. Chen and A. Avizienis, “N-version programming: A fault-tolerance
approach to reliability of software operation,” in Digest of Papers FTCS-
8: Eighth Annual International Conference on Fault Tolerant Computing,
1978, pp. 3–9.

[31] Y. Chen, T. Su, C. Sun, Z. Su, and J. Zhao, “Coverage-directed
differential testing of JVM implementations,” in Proceedings of the
37th ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI). ACM, 2016, pp. 85–99.

[32] Y. Chen and Z. Su, “Guided differential testing of certiﬁcate validation
in SSL/TLS implementations,” in Proceedings of the 10th Joint Meeting
on Foundations of Software Engineering (FSE). ACM, 2015, pp. 793–
804.

[33] M. Georgiev, S.

Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The most dangerous code in the world: validating SSL
certiﬁcates in non-browser software,” in Proceedings of the 2012 ACM
conference on Computer and Communications Security (CCS). ACM,
2012, pp. 38–49.

[34] P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based whitebox
fuzzing,” in Proceedings of the 29th ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI), 2008, pp.
206–215.

[35] P. Godefroid, N. Klarlund, and K. Sen, “Dart: directed automated
random testing,” in Proceedings of the 2005 ACM SIGPLAN conference
on Programming Language Design and Implementation (PLDI), vol. 40,
no. 6. ACM, 2005, pp. 213–223.

[36] P. Godefroid, M. Y. Levin, D. A. Molnar et al., “Automated whitebox
the 2008 Network and Distributed

fuzz testing.” in Proceedings of
Systems Symposium (NDSS), vol. 8, 2008, pp. 151–166.

[37] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing for
overﬂows: A guided fuzzer to ﬁnd buffer boundary violations,” in 22nd
USENIX Security Symposium (USENIX Security ’13). Washington,
D.C.: USENIX, 2013, pp. 49–64.

[38] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments,”
in 21st USENIX Security Symposium (USENIX Security ’12), 2012, pp.
445–458.

[39] A. D. Householder and J. M. Foote, “Probability-based parameter
selection for black-box fuzz testing,” in CMU/SEI Technical Report -
CMU/SEI-2012-TN-019, 2012.

[40] S. Jana, Y. Kang, S. Roth, and B. Ray, “Automatically Detecting Error
Handling Bugs using Error Speciﬁcations,” in 25th USENIX Security
Symposium (USENIX Security), Austin, August 2016.

[41] S. Jana and V. Shmatikov, “Abusing ﬁle processing in malware detectors
for fun and proﬁt,” in Proceedings of the 2012 IEEE Symposium on
Security and Privacy (S&P).
IEEE Computer Society, 2012, pp. 80–
94.

[42] Y. Kang, B. Ray, and S. Jana, “APEx: Automated Inference of Error
Speciﬁcations for C APIs,” in 31st IEEE/ACM International Conference
on Automated Software Engineering (ASE), Singapore, September 2016.
[43] J. C. King, “Symbolic execution and program testing,” Communications

of the ACM, vol. 19, no. 7, pp. 385–394, 1976.

[44] J. C. Knight and N. G. Leveson, “An experimental evaluation of
the assumption of independence in multiversion programming,” IEEE
Transactions on Software Engineering, no. 1, pp. 96–109, 1986.

[45] J. Kornblum, “Identifying almost identical ﬁles using context triggered

piecewise hashing,” Digital Investigation, vol. 3, pp. 91–97, 2006.

[46] P. Laskov et al., “Practical evasion of a learning-based classiﬁer: A case
study,” in 2014 IEEE Symposium on Security and Privacy (S&P). IEEE,
2014, pp. 197–211.

[47] V. Le, C. Sun, and Z. Su, “Finding deep compiler bugs via guided
stochastic program mutation,” in Proceedings of the 2015 ACM SIG-
PLAN International Conference on Object-Oriented Programming, Sys-
tems, Languages, and Applications (OOPSLA), vol. 50, no. 10. ACM,
2015, pp. 386–399.

[48] B. A. Malloy and J. F. Power, “An interpretation of purdom’s algorithm
for automatic generation of test cases,” in International Conference on
Computer and Information Science, 2001.

[49] D. Marinov and S. Khurshid, “Testera: A novel

framework for
automated testing of java programs,” in Proceedings of the 16th IEEE
International Conference on Automated Software Engineering (ASE).

[50] P. M. Maurer, “Generating test data with enhanced context-free gram-

mars,” IEEE Software, vol. 7, no. 4, pp. 50–55, 1990.

[51] W. M. McKeeman, “Differential testing for software,” Digital Technical

Journal, vol. 10, no. 1, pp. 100–107, 1998.

[52] B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the
reliability of unix utilities,” Communications of the ACM, vol. 33, no. 12,
pp. 32–44, 1990.

[53] R. P. Pargas, M. J. Harrold, and R. R. Peck, “Test-data generation using
genetic algorithms,” Software Testing Veriﬁcation and Reliability, vol. 9,
no. 4, pp. 263–282, 1999.

[54] D. A. Ramos and D. R. Engler, “Practical,

low-effort equivalence
veriﬁcation of real code,” in International Conference on Computer
Aided Veriﬁcation. Springer, 2011, pp. 669–685.

[55] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos,
“Vuzzer: Application-aware evolutionary fuzzing,” in Proceedings of the
Network and Distributed System Security Symposium (NDSS), 2017.

[56] J. Ruderman, “Introducing jsfunfuzz,” https://www.squarefree.com

/2007/08/02/introducing-jsfunfuzz/.

[57] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Ad-
dresssanitizer: a fast address sanity checker,” in 2012 USENIX Annual
Technical Conference (USENIX ATC 2012), 2012, pp. 309–318.

[58] E. G. Sirer and B. N. Bershad, “Using production grammars in software
the 2nd conference on Domain-Speciﬁc

testing,” in Proceedings of
Languages (DSL), vol. 35, no. 1. ACM, 1999, pp. 1–13.

[59] V. Srivastava, M. D. Bond, K. S. McKinley, and V. Shmatikov, “A
security policy oracle: Detecting security holes using multiple api
implementations,” ACM SIGPLAN Notices, vol. 46, no. 6, pp. 343–354,
2011.

[60] E. Stepanov and K. Serebryany, “Memorysanitizer: fast detector of
uninitialized memory use in C++,” in Proceedings of the 13th Annual
IEEE/ACM International Symposium on Code Generation and Optimiza-
tion (CGO).

IEEE Computer Society, 2015, pp. 46–55.

[61] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
fuzzing through selective symbolic execution,” in Proceedings of the
Network and Distributed System Security Symposium (NDSS), 2016.

[62] Tool Interface Standard, “The .xz File Format,” http://tukaani.org/xz/x

z-file-format.txt, August 2009.

[63] Tool

Interface Standard (TIS),

and Linking For-
mat (ELF) speciﬁcation,” https://refspecs.linuxfoundation.org/elf/elf.pdf,
May 1995.

“Executable

[64] W. Xu, Y. Qi, and D. Evans, “Automatically evading classiﬁers a case
study on PDF malware classiﬁers,” in Proceedings of the 2016 Network
and Distributed Systems Symposium (NDSS), 2016.

[65] X. Yang, Y. Chen, E. Eide, and J. Regehr, “Finding and understanding
bugs in c compilers,” in Proceedings of
the 32nd ACM SIGPLAN
Conference on Programming Language Design and Implementation
(PLDI). ACM, 2011, pp. 283–294.

[66] M. Zalewski, “american fuzzy lop,” http://lcamtuf.coredump.cx/afl/.
[67] A. Zeller, “Yesterday, my program worked. Today, it does not. Why?”
in Proceedings of the Joint Meeting on Foundations of Software Engi-
neering (ESEC/FSE). Springer, 1999, pp. 253–267.

