

[1] S. Che, M. Boyer, J. Meng, D. Tarjan, J. W. Sheaffer, S. H.
Lee, and K. Skadron. Rodinia: A Benchmark Suite for Heterogeneous Computing. IISWC 2009.

[2] G. Duboscq, T. Wiirthinger, L. Stadler, C. Wimmer, D. Simon,
and H. Méssenbick. Graal IR: An Intermediate Representation for Speculative Optimizations in a Dynamic Compiler.
VMIL 2013.

[3] J. J. Fumero, T. Remmelg, M. Steuwer, and C. Dubach. Runtime Code Generation and Data Management for Heterogeneous Computing in Java. PPPJ 2015.

[4] J. J. Fumero, M. Steuwer, and C. Dubach. A Composable
Array Function Interface for Heterogeneous Computing in
Java. ARRAY, 2014.

[5] Y. Futamura. Partial Evaluation of Computation Process—
An Approach to a Compiler-Compiler. Higher-Order and
Symbolic Computation, 1999.

[6] A. Gal, C. W. Probst, and M. Franz. HotpathVM: An Effective
JIT Compiler for Resource-constrained Devices. VEE 2006.
[7] U. Holzle, C. Chambers, and D. Ungar. Debugging optimized
code with dynamic deoptimization. PLDI 1992.

[8] K. Ishizaki, A. Hayashi, G. Koblents, and V. Sarkar. Compiling and optimizing java 8 programs for gpu execution. In
PACT, 2015.

[9] T. Kalibera, P. Maj, F. Morandat, and J. Vitek. A Fast Abstract
Syntax Tree Interpreter for R. VEE 2014.

[10] M.-J. Kallen and H. Miihleisen. Latest developments around.
renjin. Talk at R Summit & Workshop, Copenhagen, 2015.

[11] M.N. Kedlaya, B. Robatmili, C. Cagcaval, and B. Hardekopf.
Deoptimization for Dynamic Language JITs on Typed, Stackbased Virtual Machines. VEE 2014.

[12] T. Kotzmann, C. Wimmer, H. Méssenbéck, T. Rodriguez,
K. Russell, and D. Cox. Design of the Java HotSpot&Trade;
Client Compiler for Java 6. ACM Trans. Archit. Code Optim.

[13] S. K. Lam, A. Pitrou, and S. Seibert. Numba: A LLVM-based
Python JIT Compiler. LLVM 2015.

[14] M. Paleczny, C. Vick, and C. Click. The java hotspottm server
compiler. JVM’ 2001.

[15] U. Pitambare, A. Chauhan, and S. Malviya. Just-in-time
Acceleration of JavaScript. In Technical Report, School of
Informatics and Computing, Indiana University, 2013.

[16] P. C. Pratt-Szeliga, J. W. Fawcett, and R. D. Welch. Rootbeer:
Seamlessly Using GPUs from Java. HPCC-ICESS, 2012.

[17] K. Rupp. GPU-Accelerated Non-negative Matrix Factorization for Text Mining. page 77, 2012.

[18] L. Stadler, A. Welc, C. Humer, and M. Jordan. Optimizing R
Language Execution via Aggressive Speculation. DLS 2016.

[19] L. Stadler, T. Wiirthinger, and H. Méssenbick. Partial escape
analysis and scalar replacement for Java. In CGO, 2014.

[20] J. Talbot, Z. DeVito, and P. Hanrahan. Riposte: A Trace-driven
Compiler and Parallel VM for Vector Code in R. PACT °12,
2012.

[21] H. Wang, D. Padua, and P. Wu. Vectorization of Apply to
Reduce Interpretation Overhead of R. OOPSLA 2015, .

[22] H. Wang, P. Wu, and D. Padua. Optimizing R VM: Allocation Removal and Path Length Reduction via Interpreter-level
Specialization. CGO 2014, .

[23] T. Wiirthinger, C. Wimmer, A. W68, L. Stadler, G. Duboscq,
C. Humer, G. Richards, D. Simon, and M. Wolczko. One VM
to Rule Them All. Onward! 2013.

[24] W. Zaremba, Y. Lin, and V. Grover. JaBEE: Framework for
Object-oriented Java Bytecode Compilation and Execution on
Graphics Processor Units. GPGPU-5, 2012.

