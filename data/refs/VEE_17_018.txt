[1] M. Abadi, T. Harris, and M. Mehrara. Transactional memory with

strong atomicity using off-the-shelf memory protection hard-

ware. In ACM Sigplan Notices, volume 44, pages 185-196.

ACM, 2009.



[2] AMD. Secure virtual machine architecture reference manual. Tech-

nical report, Advanced Micro Devices, May 2005.



[3] A. W. Appel and K. Li. Virtual memory primitives for user pro-

grams. Acm Sigplan Notices, 26(4):96-107, 1991.



[4] M. Arnold and B. G. Ryder. A framework for reducing the cost of

instrumented code. Acm Sigplan Notices, 36(5):168-179, 2001.



[5] A. Belay, A. Bittau, A. J. Mashtizadeh, D. Terei, D. Maziéres, and

C. Kozyrakis. Dune: Safe user-level access to privileged cpu

features. In OSDI, pages 335-348, 2012.



[6] T. Bergan, O. Anderson, J. Devietti, L. Ceze, and D. Grossman.

Coredet: a compiler and runtime system for deterministic multi-

threaded execution. In ACM SIGARCH Computer Architecture

News, volume 38, pages 53-64. ACM, 2010.



[7] E. D. Berger and B. G. Zorn. Diehard: probabilistic memory safety

for unsafe languages. In ACM SIGPLAN Notices, volume 41,

pages 158-168. ACM, 2006.



[8] E. D. Berger, K. S. McKinley, R. D. Blumofe, and P. R. Wilson.

Hoard: A scalable memory allocator for multithreaded applica-

tions. ACM Sigplan Notices, 35(11):117-128, 2000.



[9] H.-J. Boehm, A. J. Demers, and S. Shenker. Mostly parallel

garbage collection. ACM SIGPLAN Notices, 26(6):157-164,

1991.



[10] J. S. Chase, H. M. Levy, M. J. Feeley, and E. D. Lazowska. Shar-

ing and protection in a single-address-space operating system.

ACM Transactions on Computer Systems (TOCS), 12(4):271-

307, 1994.



[11] J. Devietti, B. Lucia, L. Ceze, and M. Oskin. Dmp: deterministic

shared memory multiprocessing. In ACM SIGARCH Computer

Architecture News, volume 37, pages 85-96. ACM, 2009.



[12] D. Dhurjati and V. Adve. Efficiently detecting all dangling pointer

uses in production servers. In Dependable Systems and Net-

works, 2006. DSN 2006. International Conference on, pages

269-280. IEEE, 2006.



[13] X. Dong, Y. Xie, N. Muralimanohar, and N. P. Jouppi. Hybrid

checkpointing using emerging nonvolatile memories for future

exascale systems. ACM Transactions on Architecture and Code

Optimization (TACO), 8(2):6, 2011.



[14] B. Fitzpatrick. Distributed caching with memcached. Linux jour-

nal, 2004(124):5, 2004.



[15] S. Ghemawat and P. Menage. Tcmalloc: Thread-caching malloc.

goog-perfiools. sourceforge. net/doc/tcmalloc. html, 2009.



[16] M. Hirabayashi. Tokyo cabinet: a modern implementation of dbm,

2010.



[17] Intel. Intel r 64 and ia-32 architectures software developers manual.

Volume 3b: System Programming Guide (Part 2), pages 14-19,

2013.



[18] Intel. Page modification logging for virtual machine monitor white

paper. http://www. intel.com/, Jan. 2015.



[19] S. Kannan, A. Gavrilovska, K. Schwan, and D. Milojicic. Opti-

mizing checkpoints using nvm as virtual memory. In Parallel &

Distributed Processing IPDPS), 2013 IEEE 27th International

Symposium on, pages 29-40. IEEE, 2013.



[20] A. Kivity, Y. Kamay, D. Laor, U. Lublin, and A. Liguori. kvm:

the linux virtual machine monitor. In Proceedings of the Linux

Symposium, volume 1, pages 225-230, 2007.



[21] C. Lattner and V. Adve. Llvm: A compilation framework for

lifelong program analysis & transformation. In Code Generation

and Optimization, 2004. CGO 2004. International Symposium

on, pages 75-86. IEEE, 2004.



[22] K. I. Li. Virtual Memory Primitives for User Programs. ACM,

2003.

T. Liu, C. Curtsinger, and E. D. Berger. Dthreads: efficient de-

terministic multithreading. In Proceedings of the Twenty-Third

ACM Symposium on Operating Systems Principles, pages 327-

336. ACM, 2011.



[23] K. Lu, X. Zhou, T. Bergan, and X. Wang. Efficient deterministic

multithreading without global barriers. In ACM SIGPLAN No-

tices, volume 49, pages 287-300. ACM, 2014.



[24] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,

S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: building cus-

tomized program analysis tools with dynamic instrumentation.

In ACM Sigplan Notices, volume 40, pages 190-200. ACM,

2005.



[25] V. B. Lvin, G. Novark, E. D. Berger, and B. G. Zorn. Archipelago:

trading address space for reliability and security. In ACM

SIGOPS Operating Systems Review, volume 42, pages 115-124.

ACM, 2008.



[26] C. C. Minh, J. Chung, C. Kozyrakis, and K. Olukotun. Stamp: Stan-

ford transactional applications for multi-processing. In Work-

load Characterization, 2008. IISWC 2008. IEEE International

Symposium on, pages 35-46. IEEE, 2008.



[27] N. Nethercote and J. Seward. Valgrind: a framework for heavy-

weight dynamic binary instrumentation. In ACM Sigplan no-

tices, volume 42, pages 89-100. ACM, 2007.



[28] G. Novark and E. D. Berger. Dieharder: securing the heap. In

Proceedings of the 17th ACM conference on Computer and

communications security, pages 573-584. ACM, 2010.



[29] M. Payer, E. Kravina, and T. R. Gross. Lightweight memory

tracing. In USENIX Annual Technical Conference, pages 115-

126, 2013.



[30] M. Probst. Dynamic binary translation. In UKUUG Linux Devel-

opers Conference, volume 2002. sn, 2002.



[31] S. Savage, M. Burrows, G. Nelson, P. Sobalvarro, and T. Ander-

son. Eraser: A dynamic data race detector for multithreaded

programs. ACM Transactions on Computer Systems (TOCS),

15(4):391-411, 1997.



[32] J. Shen, M. Hamal, and S. Ganzenmiiller. Dynamic memory allo-

cation on real-time linux. Architecture, 86:32.



[33] R. Uhlig, G. Neiger, D. Rodgers, A. L. Santoni, F. Martins, A. V.

Anderson, S. M. Bennett, A. Kagi, F. H. Leung, and L. Smith.

Intel virtualization technology. Computer, 38(5):48—56, 2005.
