[1] D. R. Chakrabarti, H.-J. Boehm, and K. Bhandari. Atlas: Leveraging
locks for non-volatile memory consistency. OOPSLA ’14, 2014.
[2] J. Coburn, T. Bunker, M. Schwarz, R. Gupta, and S. Swanson. From
aries to mars: Transaction support for next-generation, solid-state
drives. SOSP ’13, pages 197–212, New York, NY, USA, 2013. ACM.
[3] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp, R. K. Gupta, R. Jhala,
and S. Swanson. NV-heaps: Making persistent objects fast and safe
with next-generation, non-volatile memories. ASPLOS XVI, 2011.
[4] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee, D. Burger, and
D. Coetzee. Better i/o through byte-addressable, persistent memory.
SOSP ’09, pages 133–146, New York, NY, USA, 2009. ACM.
[5] S. R. Dulloor, S. Kumar, A. Keshavamurthy, P. Lantz, D. Reddy,
R. Sankaran, and J. Jackson. System software for persistent memory. EuroSys ’14, pages 15:1–15:15, New York, NY, USA, 2014.
[6] http://parsec.cs.princeton.edu/.
[7] J. Larus and C. Kozyrakis. Transactional memory. Commun. ACM,
51(7):80–88, July 2008.
[8] T. Liu, C. Curtsinger, and E. D. Berger. Dthreads: Efficient deterministic multithreading. SOSP ’11, New York, NY, USA, 2011.
[9] C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz. Aries:
A transaction recovery method supporting fine-granularity locking and
partial rollbacks using write-ahead logging. ACM Trans. Database
Syst., 17(1):94–162, Mar. 1992.
[10] C. Ranger, R. Raghuraman, A. Penmetsa, G. Bradski, and C. Kozyrakis.
Evaluating mapreduce for multi-core and multiprocessor systems. In
HPCA 2007, pages 13–24. Ieee, 2007.
[11] H. Volos, A. J. Tack, and M. M. Swift. Mnemosyne: Lightweight
persistent memory. ASPLOS XVI, pages 91–104, New York, NY,
USA, 2011. ACM.