[1] Advantest, “V6000 Memory Platform,” https://www.advantest.com/
products/ic-test-systems/v6000-memory.
[2] H. Akinaga and H. Shima, “Resistive Random Access Memory (ReRAM)
Based on Metal Oxides,” Proc. IEEE, 2010.
[3] P. Bernardi et al., “A Programmable BIST for DRAM Testing and Diagnosis,” in ITC, 2010.
[4] R. Bittner et al., “Direct GPU/FPGA Communication via PCI Express,”
Cluster Computing, 2014.
[5] M. N. Bojnordi and E. Ipek, “PARDIS: A Programmable Memory Controller for the DDRx Interfacing Standards,” in ISCA, 2012.
[6] S. Borkar and A. A. Chien, “The Future of Microprocessors,” in CACM,
2011.
[7] Y. Cai et al., “Vulnerabilities in MLC NAND Flash Memory Programming:
Experimental Analysis, Exploits, and Mitigation Techniques,” in HPCA,
2017.
[8] Y. Cai et al., “FPGA-Based Solid-State Drive Prototyping Platform,” in
FCCM, 2011.
[9] Y. Cai et al., “Error Patterns in MLC NAND Flash Memory: Measurement,
Characterization, and Analysis,” in DATE, 2012.
[10] Y. Cai et al., “Threshold Voltage Distribution in MLC NAND Flash
Memory: Characterization, Analysis, and Modeling,” in DATE, 2013.
[11] Y. Cai et al., “Read Disturb Errors in MLC NAND Flash Memory: Characterization, Mitigation, and Recovery,” in DSN, 2015.
[12] Y. Cai et al., “Data Retention in MLC NAND Flash Memory: Characterization, Optimization, and Recovery,” in HPCA, 2015.
[13] Y. Cai et al., “Program Interference in MLC NAND Flash Memory: Characterization, Modeling, and Mitigation,” in ICCD, 2013.
[14] Y. Cai et al., “Flash Correct-and-Refresh: Retention-Aware Error Management for Increased Flash Memory Lifetime,” in ICCD, 2012.
[15] Y. Cai et al., “Error Analysis and Retention-Aware Error Management
for NAND Flash Memory,” ITJ, 2013.
[16] Y. Cai et al., “Neighbor-Cell Assisted Error Correction for MLC NAND
Flash Memories,” in SIGMETRICS, 2014.
[17] K. Chandrasekar et al., “Exploiting Expendable Process-Margins in
DRAMs for Run-Time Performance Optimization,” in DATE, 2014.
[18] K. K. Chang et al., “Understanding Latency Variation in Modern DRAM
Chips: Experimental Characterization, Analysis, and Optimization,” in
SIGMETRICS, 2016.
[19] K. K.-w. Chang et al., “Improving DRAM Performance by Parallelizing
Refreshes with Accesses,” in HPCA, 2014.
[20] H. David et al., “Memory Power Management via Dynamic Voltage/Frequency Scaling,” in ICAC, 2011.
[21] Q. Deng et al., “MemScale: Active Low-Power Modes for Main Memory,”
in ASPLOS, 2011.
[22] E. Ebrahimi et al., “Parallel Application Memory Scheduling,” in MICRO,
2011.
[23] EverSpin, “ST-MRAM,” https://www.everspin.com/mram-replacesdram.
[24] FuturePlus, “FS2800 DDR Detective,” http://www.futureplus.com/DDRDetective-Standalone/summary-2800.html.
[25] D. Gruss et al., “Rowhammer.js: A Remote Software-Induced Fault
Attack in JavaScript,” in arXiv, 2015.
[26] T. Hamamoto et al., “On the Retention Time Distribution of Dynamic
Random Access Memory (DRAM),” Electron Devices, 1998.
[27] H. Hassan et al., “ChargeCache: Reducing DRAM Latency by Exploiting
Row Access Locality,” in HPCA, 2016.
[28] H. Hassan et al., “SoftMC: A Flexible and Practical Open-Source Infrastructure for Enabling Comprehensive Experimental Characterization
of Existing DRAM Chips,” Carnegie Mellon Univ., SAFARI Research
Group, Tech. Rep. 2017-001, 2017.
[29] P. Hazucha and C. Svensson, “Impact of CMOS Technology Scaling on
the Atmospheric Neutron Soft Error Rate,” TNS, 2000.
[30] H. Hidaka et al., “Twisted Bit-Line Architectures for Multi-Megabit
DRAMs,” JSSC, 1989.
[31] C. Hou et al., “An FPGA-Based Test Platform for Analyzing Data Retention Time Distribution of DRAMs,” in VLSI-DAT, 2013.
[32] J. Huang et al., “An FPGA-Based Re-Configurable Functional Tester for
Memory Chips,” in ATS, 2000.
[33] M. Jacobsen et al., “RIFFA 2.1: A Reusable Integration Framework for
FPGA Accelerators,” TRETS, 2015.
[34] JEDEC, “DDR3 SDRAM Standard,” JESD79-3, 2007.
[35] JEDEC, “Low Power Double Data Rate 3 (LPDDR4),” Standard No.
JESD209-4, 2014.
[36] T. S. Jung, “Memory Technology and Solutions Roadmap,” http://www.
sec.co.kr/images/corp/ir/irevent/techforum_01.pdf, 2005.
[37] E. Kadric et al., “An FPGA Implementation for a High-Speed Optical
Link with a PCIe Interface,” in SoC, 2012.
[38] U. Kang et al., “Co-Architecting Controllers and DRAM to Enhance
DRAM Process Scaling,” in The Memory Forum, 2014.
[39] T. Kawahara et al., “2 Mb SPRAM (SPin-Transfer Torque RAM) with bitby-bit bi-directional current write and parallelizing-direction current
read,” JSSC, 2008.
[40] B. Keeth, “DRAM Circuit Design: Fundamental and High-Speed Topics.”
John Wiley & Sons, 2008, pp. 26–31.
[41] D. Keezer et al., “An FPGA-Based ATE Extension Module for Low-Cost
Multi-GHz Memory Test,” in ETS, 2015.
[42] S. Khan et al., “The Efficacy of Error Mitigation Techniques for DRAM
Retention Failures: A Comparative Experimental Study,” in SIGMETRICS,
2014.
[43] S. Khan et al., “PARBOR: An Efficient System-Level Technique to Detect
Data-Dependent Failures in DRAM,” in DSN, 2016.
[44] S. Khan et al., “A Case for Memory Content-Based Detection and Mitigation of Data-Dependent Failures in DRAM,” CAL, 2016.
[45] K. Kim, “Technology for Sub-50nm DRAM and NAND Flash Manufacturing,” in IEDM, 2005.
[46] Y. Kim et al., “Flipping Bits in Memory without Accessing Them: An
Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.
[47] Y. Kim et al., “A Case for Exploiting Subarray-Level Parallelism (SALP)
in DRAM,” in ISCA, 2012.
[48] Y. Kim et al., “ATLAS: A Scalable and High-Performance Scheduling
Algorithm for Multiple Memory Controllers,” in HPCA, 2010.
[49] Y. Kim et al., “Thread Cluster Memory Scheduling: Exploiting Differences in Memory Access Behavior,” in MICRO, 2010.
[50] Y. Kim et al., “Ramulator: A Fast and Extensible DRAM Simulator,” in
CAL, 2015.
[51] M. J. Koop et al., “Performance Analysis and Evaluation of PCIe 2.0 and
Quad-Data Rate Infiniband,” in HOTI, 2008.
[52] E. Kultursay et al., “Evaluating STT-RAM as an Energy-Efficient Main
Memory Alternative,” in ISPASS, 2013.
[53] B. C. Lee et al., “Phase Change Technology and the Future of Main
Memory,” IEEE Micro, 2010.
[54] B. C. Lee et al., “Architecting Phase Change Memory as a Scalable
DRAM Alternative,” in ISCA, 2009.
[55] B. C. Lee et al., “Phase Change Memory Architecture and the Quest for
Scalability,” CACM, 2010.
[56] D. Lee et al., “Adaptive-Latency DRAM: Optimizing DRAM Timing for
the Common-Case,” in HPCA, 2015.
[57] D. Lee et al., “Tiered-Latency DRAM: A Low Latency and Low Cost
DRAM Architecture,” in HPCA, 2013.
[58] D. Lee et al., “Reducing DRAM Latency by Exploiting Design-Induced
Latency Variation in Modern DRAM Chips,” arXiv, 2016.
[59] M. Lee and K. W. Park, “A Mechanism for Dependence of Refresh Time
on Data Pattern in DRAM,” EDL, 2010.
[60] J. Liu et al., “RAIDR: Retention-Aware Intelligent DRAM Refresh,” in
ISCA, 2012.
[61] J. Liu et al., “An Experimental Study of Data Retention Behavior in
Modern DRAM Devices: Implications for Retention Time Profiling
Mechanisms,” in ISCA, 2013.
[62] Y. Luo et al., “WARM: Improving NAND Flash Memory Lifetime with
Write-Hotness Aware Retention Management,” in MSST, 2015.
[63] Y. Luo et al., “Enabling Accurate and Practical Online Flash Channel
Modeling for Modern MLC NAND Flash Memory,” JSAC, 2016.
[64] Y. Luo et al., “Characterizing Application Memory Error Vulnerability
to Optimize Datacenter Cost via Heterogeneous-Reliability Memory,”
in DSN, 2014.

[65] J. Mandelman et al., “Challenges and Future Directions for the Scaling
of Dynamic Random-Access Memory (DRAM),” IBM JRD, 2002.
[66] J. Meza et al., “Revisiting Memory Errors in Large-Scale Production
Data Centers: Analysis and Modeling of New Trends from the Field,” in
DSN, 2015.
[67] Micron, “3D XPoint Memory,” http://www.micron.com/about/
innovations/3d-xpoint-technology, 2016.
[68] W. Mueller et al., “Challenges for the DRAM Cell Scaling to 40nm,” in
IEDM, 2005.
[69] J. Mukundan et al., “Understanding and Mitigating Refresh Overheads
in High-Density DDR4 DRAM Systems,” in ISCA, 2013.
[70] S. P. Muralidhara et al., “Reducing Memory Interference in Multicore
Systems via Application-Aware Memory Channel Partitioning,” in MICRO, 2011.
[71] O. Mutlu, “Memory Scaling: A Systems Architecture Perspective,” IMW,
2013.
[72] O. Mutlu and T. Moscibroda, “Stall-Time Fair Memory Access Scheduling
for Chip Multiprocessors,” in MICRO, 2007.
[73] O. Mutlu and T. Moscibroda, “Parallelism-Aware Batch Scheduling:
Enhancing Both Performance and Fairness of Shared DRAM Systems,”
in ISCA, 2008.
[74] Y. Nakagome et al., “The Impact of Data-Line Interference Noise on
DRAM Scaling,” JSSC, 1988.
[75] S. Nassif, “Delay Variability: Sources, Impacts and Trends,” in ISSCC,
2000.
[76] Nickel Electronics, “DRAM Memory Testing,” https://www.
nickelelectronics.com/memory-testing/.
[77] B. Querbach et al., “A Reusable BIST with Software Assisted Repair
Technology for Improved Memory and IO Debug, Validation and Test
Time,” in ITC, 2014.
[78] B. Querbach et al., “Architecture of a Reusable BIST Engine for Detection
and Auto Correction of Memory Failures and for IO Debug, Validation,
Link Training, and Power Optimization on 14nm SOC,” IEEE D&T, 2016.
[79] M. Qureshi et al., “AVATAR: A Variable-Retention-Time (VRT) Aware
Refresh for DRAM Systems,” in DSN, 2015.
[80] Ramulator Source Code, https://github.com/CMU-SAFARI/ramulator.
[81] S. Raoux et al., “Phase-Change Random Access Memory: A Scalable
Technology,” IBM JRD, 2008.
[82] K. Razavi et al., “Flip Feng Shui: Hammering a Needle in the Software
Stack,” in USENIX Sec., 2016.
[83] M. Redeker et al., “An Investigation into Crosstalk Noise in DRAM
Structures,” in MTDT, 2002.
[84] B. Schroeder et al., “DRAM Errors in the Wild: A Large-Scale Field
Study,” in SIGMETRICS, 2009.
[85] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowhammer Bug to
Gain Kernel Privileges,” https://googleprojectzero.blogspot.com/2015/
03/exploiting-dram-rowhammer-bug-to-gain.html, 2015.
[86] M. Seaborn and T. Dullien, “Exploiting the DRAM Rowhammer Bug to
Gain Kernel Privileges,” in Black Hat, 2015.
[87] W. Shin et al., “NUAT: A Non-Uniform Access Time Memory Controller,”
in HPCA, 2014.
[88] SoftMC Source Code, https://github.com/CMU-SAFARI/SoftMC.
[89] Y. Son et al., “Reducing Memory Access Latency with Asymmetric
DRAM Bank Organizations,” ISCA, 2013.
[90] V. Sridharan et al., “Feng Shui of Supercomputer Memory: Positional
Effects in DRAM and SRAM Faults,” in SC, 2013.
[91] G. R. Srinivasan et al., “Accurate, Predictive Modeling of Soft Error Rate
due to Cosmic Rays and Chip Alpha Radiation,” in IRPS, 1994.
[92] L. Subramanian et al., “The Blacklisting Memory Scheduler: Achieving
High Performance and Fairness at Low Cost,” in ICCD, 2014.
[93] Teradyne, “Magnum Memory Test System,” http://www.teradyne.com/
products/semiconductor-test/magnum.
[94] S. Tomishima, Personal Communication, Dec. 2016.
[95] V. van der Veen et al., “Drammer: Deterministic Rowhammer Attacks
on Mobile Platforms,” in CCS, 2016.
[96] R. Venkatesan et al., “Retention-Aware Placement in DRAM (RAPID):
Software Methods for Quasi-Non-Volatile DRAM,” in HPCA, 2006.
[97] H.-S. P. Wong et al., “Metal-Oxide RRAM,” Proc. IEEE, 2012.
[98] Y. Xiao et al., “One Bit Flips, One Cloud Flops: Cross-VM Row Hammer
Attacks and Privilege Escalation,” in USENIX Sec., 2016.
[99] Xilinx, “Virtex-6 FPGA Integrated Block for PCI Express,” http://www.
xilinx.com/support/documentation/user_guides/v6_pcie_ug517.pdf.
[100] Xilinx, “Virtex-6 FPGA Memory Interface Solutions,” http:
//www.xilinx.com/support/documentation/ip_documentation/
mig/v3_92/ug406.pdf.
[101] Xilinx, ML605 Hardware User Guide, Oct. 2012.
[102] Xilinx, VC709 FPGA User Guide, Aug. 2016.
[103] D. Yaney et al., “A Meta-Stable Leakage Phenomenon in DRAM Charge
Storage - Variable Hold Time,” in IEDM, 1987.
[104] C. Yang et al., “A Hybrid Built-In Self-Test Scheme for DRAMs,” in
VLSI-DAT, 2015.
[105] H. Yang et al., “Random Pattern Generation for Post-Silicon Validation
of DDR3 SDRAM,” in VTS, 2015.
[106] Y. You and J. Hayes, “A Self-Testing Dynamic RAM Chip,” TED, 1985.
