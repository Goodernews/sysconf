[1] M. Al-Fares, A. Loukissas, and A. Vahdat. A Scalable, Commodity Data Center Network Architecture. In SIGCOMM, 2008.
[2] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin,
D. Kozen, C. Schlesinger, and D. Walker. NetKAT:
Semantic Foundations for Networks. In POPL,
2014.
[3] T. Ball, N. Bjørner, A. Gember, S. Itzhaky, A. Karbyshev, M. Sagiv, M. Schapira, and A. Valadarsky.
VeriCon: Towards Verifying Controller Programs
in Software-Defined Networks. In PLDI, 2014.
[4] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rexford, C. Schlesinger, D. Talayco,
A. Vahdat, G. Varghese, and D. Walker. P4:
Programming Protocol-Independent Packet Processors. SIGCOMM Comput. Commun. Rev., 44(3),
July 2014.
[5] M. Canini, D. Venzano, P. Perešı́ni, D. Kostić, and
J. Rexford. A NICE Way to Test OpenFlow Applications. In NSDI, 2012.
[6] Cocoon website.
https://github.com/
ryzhyk/cocoon.
[7] L. de Moura and N. Bjørner. Z3: An Efficient SMT
Solver. In TACAS/ETAPS, 2008.
[8] E. W. Dijkstra. A constructive approach to the problem of program correctness. BIT Numerical Mathematics, 8(3), Sept. 1968.
[9] Floodlight.
http://www.
projectfloodlight.org/.
[10] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, and D. Walker. Frenetic: A Network Programming Language. In
ICFP, 2011.
[11] N. Foster, D. Kozen, M. Milano, A. Silva, and
L. Thompson. A Coalgebraic Decision Procedure
for NetKAT. In POPL, 2015.
[12] Frenetic. http: //frenetic-lang.org/.

[13] A. Gupta, R. MacDavid, R. Birkner, M. Canini,
N. Feamster, J. Rexford, and L. Vanbever. An
Industrial-scale Software Defined Internet Exchange Point. In NSDJ, 2016.

[14] S. Jain, A. Kumar, S. Mandal, J. Ong, L. Poutievski,
A. Singh, S. Venkata, J. Wanderer, J. Zhou, M. Zhu,
J. Zolla, U. Holzle, S. Stuart, and A. Vahdat.
B4: Experience with a Globally-Deployed Software Defined WAN. In SIGCOMM, 2013.

[15] P. Kazemian, M. Chang, H. Zeng, G. Varghese,
N. McKeown, and 8. Whyte. Real Time Network
Policy Checking Using Header Space Analysis. In
NSDI, 2013.

[16] P. Kazemian, G. Varghese, and N. McKeown.
Header Space Analysis: Static Checking for Networks. In NSDI, 2012.

[17] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B.
Godfrey. VeriFlow: Verifying Network-Wide Invariants in Real Time. In NSDI, 2013.

[18] T. Koponen, K. Amidon, P. Balland, M. Casado,
A. Chanda, B. Fulton, I. Ganichev, J. Gross,
N. Gude, P. Ingram, E. Jackson, A. Lambeth,
R. Lenglet, S.-H. Li, A. Padmanabhan, J. Pettit,
B. Pfaff, R. Ramanathan, S. Shenker, A. Shieh,
J. Stribling, P. Thakkar, D. Wendlandt, A. Yip, and
R. Zhang. Network Virtualization in Multi-tenant
Datacenters. In NSDI, 2014.

[19] A. Lal, S. Qadeer, and S. K. Lahiri. A Solver for
Reachability Modulo Theories. In CAV, 2012.

[20] K. R. M. Leino. This is Boogie 2, June 2008.
Manuscript KRML 178 http://research.
microsoft.com/en-us/um/people/
leino/papers/krm1178.pdf

[21] N. Lopes, N. Bjgrner, N. McKeown, A. Rybalchenko, D. Talayco, and G. Varghese. Automatically verifying reachability and well-formedness in
P4 Networks. Technical Report MSR-TR-2016-65,
Microsoft Research, Sept. 2016.

[22] C. Monsanto, N. Foster, R. Harrison, and
D. Walker. A Compiler and Run-time System for
Network Programming Languages. In POPL, 2012.

[23] T. Nelson, A. D. Ferguson, M. J. G. Scheer, and
S. Krishnamurthi. Tierless Programming and Reasoning for Software-Defined Networks. In NSDIJ,
2014.

[24] OpenDaylight.
opendaylight.org/.

https://www.

[25] The OpenFlow protocol. https://www.
opennetworking.org/sdn-resources/
openflow.

[26] B. Pfaff, J. Pettit, T. Koponen, E. J. Jackson,
A. Zhou, J. Rajahalme, J. Gross, A. Wang,
J. Stringer, P. Shelar, K. Amidon, and M. Casado.
The Design and Implementation of Open vSwitch.
In NSDI, 2015.
[27] G. D. Plotkin, N. Bjgrner, N. P. Lopes, A. Rybalchenko, and G. Varghese. Scaling Network Verification Using Symmetry and Surgery. In POPL,
2016.

[28] Ryu. https://osrg.github.io/ryu/.

[29] C. Schlesinger, M. Greenberg, and D. Walker. Concurrent NetCore: From Policies to Pipelines. In
ICFP, 2014.

[30] A. U. Shankar and S. S. Lam. Construction of Network Protocols by Stepwise Refinement. In Stepwise Refinement of Distributed Systems: Models,
Formalisms, Correctness, 1990.

[31] R. Stoenescu, M. Popovici, L. Negreanu, and
C. Raiciu. SymNet: scalable symbolic execution
for modern networks. In SIGCOMM, 2016.

[32] Y.-W. E. Sung, S. G. Rao, G. G. Xie, and D. A.
Maltz. Towards Systematic Design of Enterprise
Networks. In CoNEXT, 2008.

[33] A. Voellmy, J. Wang, Y. R. Yang, B. Ford, and
P. Hudak. Maple: Simplifying SDN Programming
Using Algorithmic Policies. In SIGCOMM, 2013.

[34] N. Wirth. Program Development by Stepwise Refinement. Commun. ACM, 14(4), Apr. 1971.

[35] Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo.
Answering Why-Not Queries in Software-Defined
Networks with Negative Provenance. In HotNets,
2013.
