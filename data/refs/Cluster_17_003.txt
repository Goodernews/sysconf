[1] J. Kong, L. A. D. Cooper, F. Wang, J. Gao, G. Teodoro,
T. Mikkelsen, M. J. Schniederjan, C. S. Moreno, J. H. Saltz,
and D. J. Brat, “Machine-based morphologic analysis of
glioblastoma using whole-slide pathology images uncovers
clinically relevant molecular correlates,” PLoS ONE, 2013.

[2] M. D. Morris, “Factorial sampling plans for prelimin:
computational experiments,” Technometrics, vol. 33, no. 2,
pp. 161-174, 1991.

[3] V. G. Weirs, J. R. Kamm, L. P. Swiler, S. Tarantola, M. Ratto,
B. M. Adams, W. J. Rider, and M. S. Eldred, “Sensitivity
analysis techniques applied to a system of hyperbolic conservation laws,” Reliability Engineering & System Safety, vol.
107, pp. 157 — 170, 2012.

[4] F Campolongo, J. Cariboni, and A. Saltelli, “An effective
screening design for sensitivity analysis of large models,”
Environmental Modelling & Software, vol. 22, no. 10, pp.
1509 — 1518, 2007, modelling, computer-assisted simulations,
and mapping of dangerous phenomena for hazard assessment.

[5] B. Iooss and P. Lemaitre, “A review on global sensitivity
analysis methods,” in Uncertainty Management in SimulationPpteicalin of Complex Systems, ser. Operations Research/‘ ampules Science Interfaces Series, 2015, vol. 59, pp. 101—

[6] G. Teodoro, T. Kure, L. FR. Taveira, A. C. M. A. Melo,
Y. Gao, J. Kong, and J. Saltz, “Algorithm sensitivity analysis and parameter tuning for tissue image segmentation
pipelines,” Bioinformatics, 2017.

[7] G. Teodoro, T. Kurc, J. Kong, L. Cooper, and J. Saltz,
“Comparative Performance Analysis of Intel (R) Xeon Phi
(TM), GPU, and CPU: A Case Study from Microscopy
Image Analysis,” in 28th IEEE Int. Parallel and Distributed
Processing Symposium (IPDPS), 2014, pp. 1063-1072.

[8] T. Kure, X. Qi, D. Wang, EF. Wang, G. Teodoro, L. Cooper,
M. Nalisnik, L. Yang, J. Saltz, and D. J. Foran, “Scalable
analysis of Big pathology image data cohorts using efficient
methods and high-performance computing strategies,’ BMC
bioinformatics, vol. 16, no. 1, p. 399, 2015.

[9] G. Teodoro, T. Pan, T. Kurc, J. Kong, L. Cooper, S. Klasky,
and J. Saltz, “Region templates: Data representation and
management for high-throughput image analysis,” Parallel
Computing, vol. 40, no. 10, pp. 589 — 610, 2014.

[10] G. Bradski, “The OpenCV Library,” Dr. Dobb’s Journal of
Software Tools, 2000.

[11] A. Saltelli, S. Tarantola, F. Campalonse: and M. Ratto, Sensitivity Analysis in Practice: A Guide to Assessing Scientific
Models. Wiley, 2!

[12] W. J. C. M. D. McKay, R. J. Beckman, “A Comparison of
Three Methods for Selecting Values of Input Variables in the
Analysis of Output from a Regipute Code,” Technometrics,
vol. 21, no. 2, pp. 239-245, 1979.

[13] K. Wolstencroft and et. al., “The taverna workflow suite:
designing and executing workflows of web services on the
desktop, web or in the cloud,” Nucleic Acids Research, 2013.

[14] M. Stoer and F Wagner, “A Simple Min-cut Algorithm,” J.
ACM, vol. 44, no. 4, pp. 585-591, Jul. 1997.

[15] B. Jaykishan, K. Hemant Kumar Reddy, and D. S. Roy, A
Data-Aware Scheduling Framework for Parallel Applications
in a Cloud Environment. New Delhi: Springer India, 2014,
pp. 459-463.

[16] M. Becchi, S. Byna, S$. Cadambi, and S. Chakradhar, “Dataaware scheduling of legacy kernels on heterogeneous platforms with distributed memory,” in Proceedings of the
Twenty-second Annual ACM Symposium on Parallelism in
Algorithms and Architectures, ser. SPAA ’10. New York,
NY, USA: ACM, 2010, pp. 82-91.

[17] K. Wang, K. Qiao, I. Sadooghi, X. Zhou, T. Li, M. Lang,
and I. Raicu, “Load-balanced and locality-aware scheduling
for data-intensive workloads at extreme scales,” Concurren
and Computation: Practice and Experience, vol. 28, no. 1,
pp. 70-94, 2016, cPE-14-0369.R2.

[18] T. Kosar and M. Balman, “A new paradigm: Data-aware
scheduling in grid computing Future Generation Computer
Systems, vol. 25, no. 4, pp. 406 — 413, 2009.

[19] M. D. Ernst, J. Cockrell, W. G. Griswold, and D. Notkin,
“Dynamically Discovering Likely Program Invariants to Support Program Evolution,” in Proc. of the 21st International
Conference on Software Engineering (ICSE). ACM, 1999.

[20] Y. Wang, H. Li, and M. Hu, “Reusing Garbage Data for
Efficient Workflow Computation,” The Computer Journal,
vol. 58, no. 1, pp. 110-125, 2015.

[21] J. F. Lofstead, S. Klasky, K. Schwan, N. Podhorszki, and
C. Jin, “Flexible IO and integration for scientific codes
through the adaptable IO system (ADIOS),” in CLADE, 2008.

[22] G. Bosilca, A. Bouteiller, T. Herault, P. Lemarinier, N. Saengpatsa, S. Tomov, and J. Dongarra, “Performance Portability of
a GPU Enabled Factorization with the DAGuE Framework,”
in IEEE Int. Conf. on Cluster Computing (CLUSTER), 2011.

[23] J. Bueno, J. Planas, A. Duran, R. Badia, X. Martorell,
E. Ayguade, and J. Labarta, “Productive Programming of
GPU Clusters with OmpSs,” in JEEE 26th Int. Parallel
Distributed Processing Symposium (IPDPS), May 2012.

[24] G. Teodoro, T. Kurc, G. Andrade, J. Kong, R. Ferreira,
and J. Saltz, “Application performance analysis and efficient
execution on systems with multi-core CPUs, GPUs and MICs:
a case study with microscopy image analysis,” The Interna
tional Journal of High Performance Computing Applications,
vol. 31, no. 1, pp. 32-51, 2017.