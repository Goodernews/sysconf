[1] K. Angelopoulos, A. V. Papadopoulos, V. E. Silva Souza, and J. Mylopoulos. Model predictive control for software systems with cobra. In
SEAMS, pages 35–46. ACM, 2016.
[2] G. Blair, N. Bencomo, and R. B. France. Models@run.time. Computer,
42(10):22–27, 2009.
[3] S.-W. Cheng. Rainbow: Cost-Effective Software Architecture-Based SelfAdaptation. PhD thesis, Carnegie Mellon Univ., Pittsburgh, USA, 2008.
[4] S.-W. Cheng and D. Garlan. Stitch: A language for architecture-based
self-adaptation. J. Syst. Softw., 85(12), 2012.
[5] S.-W. Cheng, D. Garlan, and B. Schmerl. Architecture-based self-adaptation in the presence of multiple objectives. In SEAMS. ACM, 2006.
[6] N. Esfahani, A. Elkhodary, and S. Malek. A learning-based framework
for engineering feature-oriented self-adaptive software systems. IEEE
Transactions on Software Engineering, 39(11):1467–1493, 2013.
[7] T. Fischer, J. Niere, L. Torunski, and A. Zündorf. Story diagrams: A
new graph rewrite language based on the unified modeling language. In
TAGT, volume 1764 of LNCS, pages 296–309. Springer, 1998.
[8] F. Fleurey, V. Dehlen, N. Bencomo, B. Morin, and J.-M. Jézéquel.
Modeling and validating dynamic adaptation. In Models in Software
Engineering, volume 5421 of LNCS, pages 97–108. Springer, 2009.
[9] F. Fleurey and A. Solberg. A domain specific modeling language
supporting specification, simulation and execution of dynamic adaptive
systems. In MoDELS, LNCS 5795, pages 606–621. Springer, 2009.
[10] J. Floch, S. Hallsteinsen, E. Stav, F. Eliassen, K. Lund, and E. Gjorven.
Using architecture models for runtime adaptability. IEEE Software,
23(2):62–70, 2006.
[11] R. France and B. Rumpe. Model-driven development of complex
software: A research roadmap. In FOSE, pages 37–54. IEEE, 2007.
[12] J. Franco, F. Correia, R. Barbosa, M. Zenha-Rela, B. Schmerl, and
D. Garlan.
Improving self-adaptation planning through software
architecture-based stochastic modeling. J. Syst. Softw., 115:42–60, 2016.
[13] D. Garlan, B. Schmerl, and S.-W. Cheng. Software architecture-based
self-adaptation. In Autonomic Computing and Networking, pages 31–55.
Springer, 2009.
[14] S. Ghahremani, H. Giese, and T. Vogel. Towards linking adaptation
rules to the utility function for dynamic architectures. In SASO, pages
142–143. IEEE, 2016.
[15] C. Ghezzi. Evolution, adaptation, and the quest for incrementality. In
Large-Scale Complex IT Systems. Development, Operation and Management, volume 7539 of LNCS, pages 369–379. Springer, 2012.
[16] IBM.
IBM ILOG CPLEX Optimization Studio.
http://www03.ibm.com/software/products/en/ibmilogcpleoptistud.
[17] J. O. Kephart and D. Chess. The vision of autonomic computing.
Computer, 36(1):41–50, 2003.
[18] J. O. Kephart and R. Das. Achieving self-management via utility
functions. Internet Computing, IEEE, 11(1):40–48, 2007.
[19] J. O. Kephart and W. E. Walsh. An artificial intelligence perspective on
autonomic computing policies. In POLICY, pages 3–12. IEEE, 2004.
[20] D. Kim and S. Park. Reinforcement learning-based dynamic adaptation
planning method for architecture-based self-managed software. In
SEAMS, pages 76–85. IEEE, 2009.
[21] J. Kramer and J. Magee. Self-managed systems: an architectural
challenge. In FOSE, pages 259–268. IEEE, 2007.
[22] J. Magee and J. Kramer. Dynamic structure in software architectures.
In SIGSOFT FSE, pages 3–14. ACM, 1996.
[23] P. Oreizy, M. M. Gorlick, R. Taylor, D. Heimbigner, G. Johnson,
N. Medvidovic, A. Quilici, D. S. Rosenblum, and A. L. Wolf. An
architecture-based approach to self-adaptive software. IEEE Intelligent
Systems, 14(3):54–62, 1999.
[24] T. Patikirikorala, A. Colman, J. Han, and L. Wang. A systematic survey
on the design of self-adaptive software systems using control engineering
approaches. In SEAMS, pages 33–42. IEEE, 2012.
[25] V. Poladian, J. P. Sousa, D. Garlan, and M. Shaw. Dynamic configuration
of resource-aware services. In ICSE, pages 604–613. IEEE, 2004.
[26] R. Rouvoy, P. Barone, Y. Ding, F. Eliassen, S. Hallsteinsen, J. Lorenzo,
A. Mamelli, and U. Scholz. Music: Middleware support for selfadaptation in ubiquitous and service-oriented environments. In SEfSAS,
volume 5525 of LNCS, pages 164–182. Springer, 2009.
[27] D. E. Seborg, D. A. Mellichamp, T. F. Edgar, and F. J. Doyle. Process
Dynamics and Control. John Wiley & Sons, 3rd edition, 2011.
[28] P. Sestoft. Microbenchmarks in java and c#, 2013.
[29] M. Tichy and H. Giese. A self-optimizing run-time architecture for
configurable dependability of services. In Architecting Dependable
Systems II, volume 3069 of LNCS, pages 25–51. Springer, 2004.
[30] T. Vogel. Modular Rice University Bidding System (mRUBiS), 2013.
http://www.mdelab.de [Online; accessed 09-May-2016].
[31] T. Vogel and H. Giese. Adaptation and abstract runtime models. In
SEAMS, pages 39–48. ACM, 2010.
[32] T. Vogel, S. Neumann, S. Hildebrandt, H. Giese, and B. Becker. Modeldriven architectural monitoring and adaptation for autonomic systems.
In ICAC, pages 67–68. ACM, 2009.
[33] T. Vogel, S. Neumann, S. Hildebrandt, H. Giese, and B. Becker.
Incremental model synchronization for efficient run-time monitoring. In
Models in Software Engineering, volume 6002 of LNCS, pages 124–139.
Springer, 2010.
