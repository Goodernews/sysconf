[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-Flow

Integrity. In CCS.

[2] S. Andersen and V. Abella. Changes to Functionality in Microsoft Windows
XP Service Pack 2, Part 3: Memory Protection Technologies, Data Execution
Prevention. (2004). http://technet.microsoft.com/en-us/library/bb457155.aspx.
[3] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn-
berger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing
Disclosure Exploits in Executable Code. In CCS.

[4] Michael Backes and Stefan Nürnberger. 2014. Oxymoron: Making Fine-Grained
Memory Randomization Practical by Allowing Code Sharing. In USENIX SEC.

[5] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar. 2003. Address Obfuscation:
An Efficient Approach to Combat a Broad Range of Memory Error Exploits. In
USENIX SEC.

[6] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar. 2005. Efficient Techniques

for Comprehensive Protection from Memory Error Exploits. In USENIX SEC.

[7] David Bigelow, Thomas Hobson, Robert Rudd, William Streilein, and Hamed
Okhravi. 2015. Timely Rerandomization for Mitigating Memory Disclosures. In
CCS.

[8] Andrea Bittau, Adam Belay, Ali Mashtizadeh, David Mazières, and Dan Boneh.

2014. Hacking Blind. In S&P.

[9] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-

Oriented Programming: A New Class of Code-Reuse Attack. In ASIACCS.

[10] Erik Bosman and Herbert Bos. 2014. Framing Signals—A Return to Portable

Shellcode. In S&P.

[11] Erik Bosman, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2016. Dedup
Est Machina: Memory Deduplication as an Advanced Exploitation Vector. In
S&P.

[12] Kjell Braden, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher
Liebchen, and Ahmad-Reza Sadeghi. 2016. Leakage-Resilient Layout Random-
ization for Mobile Devices. In NDSS.

[13] Nicholas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R.
Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In-
tegrity. In USENIX SEC.

[14] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking

Modern Defenses. In USENIX SEC.

[15] Xi Chen, Herbert Bos, and Cristiano Giuffrida. 2017. CodeArmor: Virtualizing

the Code Space to Counter Disclosure Attacks. In EuroS&P.

[16] Yueqiang Cheng, Zongwei Zhou, Miao Yu, Xuhua Ding, and Robert H. Deng.
2014. ROPecker: A Generic and Practical Approach For Defending Against ROP
Attacks. In NDSS.

[17] Mauro Conti, Stephen Crane, Tommaso Frassetto, Andrei Homescu, Georg Kop-
pen, Per Larsen, Christopher Liebchen, Mike Perry, and Ahmad-Reza Sadeghi.

Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA16882016. Selfrando: Securing the Tor Browser against De-anonymization Exploits.
In PETS.

[18] Stephen Crane, Andrei Homescu, and Per Larsen. 2016. Code Randomization:

Haven’t We Solved This Problem Yet?. In SecDev.

[19] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen,
Ahmad-Reza Sadeghi, Stephan Brunthaler, and Michael Franz. 2015. Readactor:
Practical Code Randomization Resilient to Memory Disclosure. In S&P.

[20] Stephen Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen,
Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael
Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function-
Reuse Attacks. In CCS.

[21] Thurston H.Y. Dang, Petros Maniatis, and David Wagner. 2015. The Performance

Cost of Shadow Stacks and Stack Canaries. In ASIACCS.

[22] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and
Isomeron: Code Randomization Resilient to (Just-In-

Fabian Monrose. 2015.
Time) Return-Oriented Programming. In NDSS.

[23] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014.
Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow
Integrity Protection. In USENIX SEC.

[24] Lucas Davi, Ahmad-Reza Sadeghi, and Marcel Winandy. 2009. Dynamic
Integrity Measurement and Attestation: Towards Defense Against Return-
oriented Programming Attacks. In ACM STC.

[25] Solar Designer. Return-to-libc attack. BugTraq. (Aug. 1997).
[26] Isaac Evans, Sam Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany
Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed
Okhravi. 2015. Missing the Point(er): On the Effectiveness of Code Pointer In-
tegrity. In S&P.

[27] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howard Shrobe, Martin C. Ri-
nard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu:
On the Weaknesses of Fine-Grained Control Flow Integrity. In CCS.

[28] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. GRIFFIN: Guarding Control

Flows Using Intel Processor Trace. In ASPLOS.

[29] Jason Gionta, William Enck, and Per Larsen. 2016. Preventing Kernel Code-

Reuse Attacks Through Disclosure Resistant Code Diversification. In CNS.

[30] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Con-
tents of Userspace Memory in the Face of Disclosure Vulnerabilities. In CO-
DASPY.

[31] Cristiano Giuffrida, Anton Kuijsten, and Andrew S. Tanenbaum. 2012. Enhanced
Operating System Security Through Efficient and Fine-grained Address Space
Randomization. In USENIX SEC.

[32] Enes Goktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis.

2014. Out Of Control: Overcoming Control-Flow Integrity. In S&P.

[33] Enes Goktas, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-Chain Length
to Prevent Code-Reuse Attacks is Hard. In USENIX SEC.

[34] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI:
Transparent Backward-Edge Control Flow Violation Detection Using Intel Pro-
cessor Trace. In CODASPY.

[35] Jason Hiser, Anh Nguyen-Tuong, Michele Co, Matthew Hall, and Jack W. David-

son. 2012. ILR: Where’D My Gadgets Go?. In S&P.

[36] Andrei Homescu, Steven Neisius, Per Larsen, Stefan Brunthaler, and Michael

Franz. 2013. Profile-guided Automated Software Diversity. In CGO.

[37] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai
Liang. 2015. Automatic Generation of Data-Oriented Exploits. In USENIX SEC.
[38] Hong Hu, Shweta Shinde, Sendroiu Adrian, Zheng Leong Chua, Prateek Saxena,
and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness
of Non-Control Data Attacks. In S&P.

[39] Vasileios P. Kemerlis, Georgios Portokalidis, Kangkook Jee, and Angelos D.
libdft: Practical Dynamic Data Flow Tracking for Commod-

Keromytis. 2012.
ity Systems. In VEE.

[40] Chongkyung Kil, Jinsuk Jun, Christopher Bookholt, Jun Xu, and Peng Ning. 2006.
Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomiza-
tion of Commodity Software. In ACSAC.

[41] Koen Koning, Herbert Bos, and Cristiano Giuffrida. 2016.

Secure and Effi-
cient Multi-Variant Execution Using Hardware-assisted Process Virtualization.
In DSN.

[42] Hyungjoon Koo and Michalis Polychronakis. 2016. Juggling the Gadgets: Binary-

level Code Randomization Using Instruction Displacement. In ASIACCS.

[43] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar,

and Dawn Song. 2014. Code-Pointer Integrity. In OSDI.

[44] Yutao Liu, Peitao Shi, Xinran Wang, Haibo Chen, Binyu Zang, and Haibing Guan.
2017. Transparent and Efficient CFI Enforcement with Intel Processor Trace. In
HPCA.

[45] Kangjie Lu, Stefan Nürnberger, Michael Backes, and Wenke Lee. 2016. How to

make ASLR win the Clone Wars: Runtime Re-Randomization. In NDSS.

[46] Kangjie Lu, Chengyu Song, Byoungyoung Lee, Simon P. Chung, Taesoo Kim,
and Wenke Lee. 2015. ASLR-Guard: Stopping Address Space Leakage for Code

[47] Ali Jose Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. 2015.

Reuse Attacks. In CCS.
CCFI: Cryptographically Enforced Control Flow Integrity. In CCS.

[48] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.
2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for
C. In PLDI.

[49] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic.

2010. CETS: Compiler Enforced Temporal Safety for C. In ISMM.

[50] Ben Niu and Gang Tan. 2014. Modular Control-Flow Integrity. In PLDI.
[51] Ben Niu and Gang Tan. 2015. Per-Input Control-Flow Integrity. In CCS.
[52] Angelos Oikonomopoulos, Elias Athanasopoulos, Herbert Bos, and Cristiano

Giuffrida. 2016. Poking Holes in Information Hiding. In USENIX SEC.

[53] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2012. Smash-
ing the Gadgets: Hindering Return-Oriented Programming Using In-place Code
Randomization. In S&P.

[54] Vasilis Pappas, Michalis Polychronakis, and Angelos D. Keromytis. 2013. Trans-
parent ROP Exploit Mitigation Using Indirect Branch Tracing. In USENIX SEC.
[55] PaX Team. Address Space Layout Randomization (ASLR). (2003). pax.grsecurity.

net/docs/aslr.txt.

[56] Marios Pomonis, Theofilos Petsios, Angelos D. Keromytis, Michalis Polychron-
akis, and Vasileios P. Kemerlis. 2017. kRˆX: Comprehensive Kernel Protection
against Just-In-Time Code Reuse. In EuroSys.

[57] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. Return-
Oriented Programming: Systems, Languages, and Applications. TISSEC 15, 1
(2012).

[58] Robert Rudd, Richard Skowyra, David Bigelow, Veer Dedhia, Thomas Hobson,
Stephen Crane, Christopher Liebchen, Per Larsen, Lucas Davi, Michael Franz,
Ahmad-Reza Sadeghi, and Hamed Okhravi. 2017. Address Oblivious Code Reuse:
On the Effectiveness of Leakage Resilient Diversity. In NDSS.

[59] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-
Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-Oriented Program-
ming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications.
In S&P.

[60] Edward J. Schwartz, Thanassis Avgerinos, and David Brumley. 2011. Q: Exploit

Hardening Made Easy. In USENIX SEC.

[61] Jeff Seibert, Hamed Okhravi, and Eric Söderström. 2014. Information Leaks With-
out Memory Disclosures: Remote Side Channel Attacks on Diversified Code. In
CCS.

[62] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-

into-libc Without Function Calls (on the x86). In CCS.

[63] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher
Just-In-Time Code Reuse: On the

Liebchen, and Ahmad-Reza Sadeghi. 2013.
Effectiveness of Fine-Grained Address Space Layout Randomization. In S&P.

[64] Mingshen Sun, John C. S. Lui, and Yajin Zhou. 2016. Blender: Self-Randomizing

Address Space Layout for Android Apps. In RAID.

[65] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte:
Thwarting Memory Disclosure Attacks Using Destructive Code Reads. In CCS.
[66] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Er-
lingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control-
Flow Integrity in GCC & LLVM. In USENIX SEC.

[67] Victor van der Veen, Dennis Andriesse, Enes Goktas, Ben Gras, Lionel Sambuc,
Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context-
sensitive CFI. In CCS.

[68] Victor van der Veen, Enes Göktaş, Moritz Contag, Andre Pawloski, Xi Chen,
Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano
Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks At The
Binary Level. In S&P.

[69] Stijn Volckaert, Bart Coppens, and Bjorn de Sutter. 2015. Cloning Your Gadgets:

Complete ROP Attack Immunity with Multi-Variant Execution. In TDSC.

[70] Zhe Wang, Chenggang Wu, Jianjun Li, Yuanming Lai, Xiangyu Zhang, Wei-
Chung Hsu, and Yueqiang Cheng. 2017. ReRanz: A Light-Weight Virtual Ma-
chine to Mitigate Memory Disclosure Attacks. In VEE.

[71] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012.
Binary Stirring: Self-Randomizing Instruction Addresses of Legacy x86 Binary
Code. In CCS.

[72] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow,
Fabian Monrose, and Michalis Polychronakis. 2016. No-Execute-After-Read: Pre-
venting Code Disclosure in Commodity Software. In ASIACCS.

[73] David Williams-King, Graham Gobieski, Kent Williams-King, James P Blake,
Xinhao Yuan, Patrick Colp, Michelle Zheng, Vasileios P. Kemerlis, Junfeng Yang,
and William Aiello. 2016. Shuffler: Fast and Deployable Continuous Code Re-
Randomization. In OSDI.

[74] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen Mc-
Camant, Dawn Song, and Wei Zou. 2013. Practical Control Flow Integrity and
Randomization for Binary Executables. In S&P.

[75] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries.

In USENIX SEC.

