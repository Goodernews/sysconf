[1] E. Deelman, K. Vahi, G. Juve, M. Rynge, S. Callaghan, P. J. Maechling,
R. Mayani, W. Chen, R. Ferreira da Silva, M. Livny, and K. Wenger,
“Pegasus, a workflow management system for science automation,”
Future Generation Computer Systems, vol. 46, no. 0, pp. 17–35, 2015.
[2] T. Fahringer, R. Prodan, R. Duan, J. Hofer, F. Nadeem, F. Nerieri,
S. Podlipnig, J. Qin, M. Siddiqui, H.-L. Truong et al., “Askalon: A
development and grid computing environment for scientific workflows,”
in Workflows for e-Science. Springer, 2007, pp. 450–471.
[3] M. Wilde, M. Hategan, J. M. Wozniak, B. Clifford, D. S. Katz, and
I. Foster, “Swift: A language for distributed parallel scripting,” Parallel
Computing, vol. 37, no. 9, pp. 633–652, 2011.
[4] K. Wolstencroft, R. Haines, D. Fellows, A. Williams, D. Withers,
S. Owen, S. Soiland-Reyes, I. Dunlop, A. Nenadic, P. Fisher et al.,
“The taverna workflow suite: designing and executing workflows of web
services on the desktop, web or in the cloud,” Nucleic acids research,
p. gkt328, 2013.
[5] I. Altintas, C. Berkley, E. Jaeger, M. Jones, B. Ludascher, and S. Mock,
“Kepler: an extensible system for design and execution of scientific
workflows,” in Scientific and Statistical Database Management, 2004.
Proceedings. 16th International Conference on. IEEE, 2004, pp. 423–
424.
[6] M. Albrecht, P. Donnelly, P. Bui, and D. Thain, “Makeflow: A portable
abstraction for data intensive computing on clusters, clouds, and grids,”
in 1st ACM SIGMOD Workshop on Scalable Workflow Execution Engines and Technologies. ACM, 2012, p. 1.
[7] F. Zhang, C. Docan, M. Parashar, S. Klasky, N. Podhorszki, and
H. Abbasi, “Enabling In-situ Execution of Coupled Scientific Workflow
on Multi-core Platform,” in Proc. of the 26th IEEE International Parallel
and Distributed Processing Symposium, 2012, pp. 1352–1363.
[8] J. N. Hagstrom, “Computational complexity of PERT problems,” Networks, vol. 18, no. 2, pp. 139–147, 1988.
[9] M. L. Pinedo, Scheduling: Theory, Algorithms, and Systems, 5th ed.
Springer, 2016.
[10] L. G. Valiant, “The complexity of enumeration and reliability problems,”
SIAM J. Comput., vol. 8, no. 3, pp. 410–421, 1979.
[11] J. S. Provan and M. O. Ball, “The complexity of counting cuts and of
computing the probability that a graph is connected,” SIAM J. Comp.,
vol. 12, no. 4, pp. 777–788, 1983.
[12] H. L. Bodlaender and T. Wolle, “A note on the complexity of network
reliability problems,” IEEE Trans. Inf. Theory, vol. 47, pp. 1971–1988,
2004.
[13] J. Valdes, R. E. Tarjan, and E. L. Lawler, “The recognition of series
parallel digraphs,” in Proc. 11th ACM Symp. Theory of Computing, ser.
STOC ’79. ACM, 1979, pp. 1–12.
[14] H. L. Bodlaender and B. de Fluiter, Parallel algorithms for series
parallel graphs. Springer, 1996, pp. 277–289.
[15] S. Toueg and O. Babaoğlu, “On the optimum checkpoint selection
problem,” SIAM J. Comput., vol. 13, no. 3, 1984.
[16] Pegasus, “Pegasus workflow generator.” https://confluence.pegasus.isi.
edu/display/pegasus/WorkflowGenerator, 2014.
[17] R. H. Möhring, “Scheduling under uncertainty: Bounding the makespan
distribution,” in Computational Discrete Mathematics: Advanced Lectures, H. Alt, Ed. Springer, 2001, pp. 79–97.
[18] L. C. Canon and E. Jeannot, “Correlation-aware heuristics for evaluating
the distribution of the longest path length of a DAG with random
weights,” IEEE Trans. Parallel Distributed Systems, 2016, available at
http://doi.ieeecomputersociety.org/10.1109/TPDS.2016.2528983.
[19] T. Hérault and Y. Robert, Eds., Fault-Tolerance Techniques for HighPerformance Computing, ser. Computer Communications and Networks.
Springer Verlag, 2015.
[20] M. Mitzenmacher and E. Upfal, Probability and Computing: Randomized Algorithms and Probabilistic Analysis.
Cambridge University
Press, 2005.
[21] R. M. van Slyke, “Monte carlo methods and the pert problem,” Operations Research, vol. 11, no. 5, pp. 839–860, 1963.
[22] D. Sculli, “The completion time of PERT networks,” The Journal of the
Operational Research Society, vol. 34, no. 2, pp. 155–158, 1983.
[23] H. Casanova, J. Herrmann, and Y. Robert, “Computing the expected
makespan of task graphs in the presence of silent errors,” in P2S2’2016,