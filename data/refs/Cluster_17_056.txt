[1] The OpenACC Application Program Interface. Version 2.5. 2012.
http://www.openacc-standard.org/.
[2] ARM
Compiler
toolchain
Compiler
Reference
Compiler-speciﬁc
Features,
2015.
http://
infocenter.arm.com/help/topic/com.arm.doc.dui0491c/CHDFIJAE.html.
[3] M. Amini, C. Ancourt, F. Coelho, B. Creusillet, S. Guelton, F. Irigoin,
P. Jouvelot, R. Keryell, and P. Villalon. PIPS Is not (just) Polyhedral
Software Adding GPU Code Generation in PIPS. In First Int. Workshop
on Polyhedral Compilation Techniques (IMPACT 2011) in conjonction
with CGO 2011, Chamonix, France, Apr. 2011.
[4] C. Bastoul, A. Cohen, S. Girbal, S. Sharma, and O. Temam. Putting
Polyhedral Loop Transformations to Work, pages 209–225. 2004.
[5] U. Bondhugula, A. Hartono, J. Ramanujam, and P. Sadayappan. A
practical automatic polyhedral parallelizer and locality optimizer. In
Proceedings of the ACM SIGPLAN 2008 Conference on Programming
Language Design and Implementation (PLDI), pages 101–113, 2008.
[6] U. Bondhugula, J. Ramanujam, and P. Sadayappan. Pluto: A practical and
fully automatic polyhedral parallelizer and locality optimizer. Technical
Report OSU-CISRC-10/07-TR70, Oct. 2007.
[7] I. Corporation. Intel Fortran Language Reference. 2001. Document
Number: 253261-002.
[8] L. Dagum and R. Menon. Openmp: An industry-standard api for sharedmemory programming. IEEE Comput. Sci. Eng., 5(1):46–55, Jan. 1998.
[9] P. Feautrier. Some efﬁcient solutions to the afﬁne scheduling problem:
I. one-dimensional time. Int. J. Parallel Program. volume 21, pages
313–348, 1992.
[10] D. Feld, T. Soddemann, M. Jünger, and S. Mallach. Facilitate SIMD-CodeGeneration in the Polyhedral Model by Hardware-aware Automatic CodeTransformation. In A. Größliger and L.-N. Pouchet, editors, Proceedings
of the 3rd International Workshop on Polyhedral Compilation Techniques,
pages 45–54, Berlin, Germany, Jan 2013.
[11] D. Feld, T. Soddemann, M. Jünger, and S. Mallach. Hardware-aware
automatic code-transformation to support compilers in exploiting the
multi-level parallel potential of modern cpus. In Proceedings of the
2015 International Workshop on Code Optimisation for Multi and Many
Cores, COSMIC ’15, San Francisco Bay Area, CA, USA, February 8,
2015, pages 2:1–2:10, 2015.
[12] R. Gad, T. Süß, and A. Brinkmann. Compiler Driven Automatic Kernel
Context Migration for Heterogeneous Computing. In 34th International
Conference on Distributed Computing Systems (ICDCS), 2014.
[13] A. Gill and C. Runciman. Haskell program coverage. In Proceedings of
the ACM SIGPLAN Workshop on Haskell Workshop, Haskell ’07, pages
1–12, New York, NY, USA, 2007. ACM.
[14] S. Girbal, N. Vasilache, C. Bastoul, A. Cohen, D. Parello, M. Sigler,
and O. Temam. Semi-automatic composition of loop transformations
for deep parallelism and memory hierarchies. Int. J. Parallel Program.
volume 34, pages 261–317, 2006.
[15] M. Griebl. Automatic parallelization of loop programs for distributed
memory architectures, 2004.
[16] N. Heintze and O. Tardieu. Ultra-fast aliasing analysis using cla: A
million lines of c code in a second. In Proceedings of the ACM SIGPLAN
2001 Conference on Programming Language Design and Implementation,
PLDI ’01, pages 254–263, 2001.
[17] K. Kennedy, C. Koelbel, and H. Zima. The rise and fall of high
performance fortran. Commun. ACM, 54(11):74–82, Nov. 2011.
[18] J. Kraus, M. Förster, T. Brandes, and T. Soddemann. Using lama for
efﬁcient amg on hybrid clusters. Computer Science - R&D, 28(2-3):211–
220, 2013.
[19] C. E. Leiserson. The cilk++ concurrency platform. In Proceedings of the
46th Annual Design Automation Conference, DAC ’09, pages 522–527,
New York, NY, USA, 2009. ACM.
[20] S. Marlow, S. Peyton Jones, and S. Singh. Runtime support for multicore
haskell. SIGPLAN Not., 44(9):65–78, Aug. 2009.
[21] R. W. Numrich and J. Reid. Co-arrays in the next fortran standard.
SIGPLAN Fortran Forum, 24(2):4–17, Aug. 2005.
[22] L. Petersen, D. Orchard, and N. Glew. Automatic simd vectorization for
haskell. SIGPLAN Not., 48(9):25–36, Sept. 2013.
[23] M. Schordan and D. J. Quinlan. A source-to-source architecture for
user-deﬁned optimizations. In JMLC, pages 214–223, 2003.
[24] A. Shterenlikht, L. Margetts, L. Cebamanos, and D. Henty. Fortran 2008
coarrays. SIGPLAN Fortran Forum, 34(1):10–30, Apr. 2015.

[25] SILKAN.
HPC project. Par4All automatic parallelization.
http://www.par4all.org.
[26] R. M. Stallman and G. DeveloperCommunity. Using The Gnu Compiler
Collection: A Gnu Manual For Gcc Version 4.4.7. CreateSpace,
Paramount, CA, 2009.
[27] S. Verdoolaege, J. C. Juega, A. Cohen, J. I. Gómez, C. Tenllado, and
F. Catthoor. Polyhedral Parallel Code Generation for CUDA. ACM
Transactions on Architecture and Code Optimization, 9(4), 2013. Selected
for presentation at the HiPEAC 2013 Conf.
[28] Z. Xu, T. Kremenek, and J. Zhang. Leveraging Applications of Formal
Methods, Veriﬁcation, and Validation: 4th International Symposium on
Leveraging Applications, ISoLA 2010, Heraklion, Crete, Greece, October
18-21, 2010, Proceedings, Part I, chapter A Memory Model for Static
Analysis of C Programs, pages 535–548. 2010.