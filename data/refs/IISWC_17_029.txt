[1] D. Milroy, A. H. Baker, D. Hammerling, J. M. Dennis, S. A.
Mickelson, and E. R. Jessup, “Towards characterizing the variability of
statistically consistent community earth system model simulations,” in
International Conference on Computational Science 2016, ICCS 2016,
6-8 June 2016, San Diego, California, USA, ser. Procedia Computer
Science, M. Connolly, Ed., vol. 80. Elsevier, 2016, pp. 1589–1600.
[Online]. Available: http://dx.doi.org/10.1016/j.procs.2016.05.489
[2] Q. Meng, A. Humphrey, J. Schmidt, and M. Berzins, “Preliminary
experiences with the uintah framework on intel xeon phi and stampede,”
in Proceedings of the Conference on Extreme Science and Engineering
Discovery Environment: Gateway to Discovery (XSEDE), 2013, pp.
48:1–48:8.
[3] J.-M. Muller, N. Brisebarre, F. de Dinechin, C.-P. Jeannerod, V. Lefèvre,
G. Melquiond, N. Revol, D. Stehlé, and S. Torres, Handbook of FloatingPoint Arithmetic. Birkhäuser Boston, 2010, ACM G.1.0; G.1.2; G.4;
B.2.0; B.2.4; F.2.1., ISBN 978-0-8176-4704-9.
[4] D. Goldberg, “What every computer scientist should know about
floating-point arithmetic,” ACM Comput. Surv., vol. 23, no. 1, pp. 5–
48, Mar. 1991. [Online]. Available: http://doi.acm.org/10.1145/103162.
103163
[5] “Intel architecture instruction set extensions programming reference,”
2015. [Online]. Available: https://software.intel.com/sites/default/files/
managed/07/b7/319433-023.pdf
[6] S. Boldo, “Deductive formal verification: How to make your floatingpoint programs behave,” Thèse d’habilitation, Université Paris-Sud,
Oct. 2014. [Online]. Available: http://www.lri.fr/⇠sboldo/files/hdr.pdf
[7] “The gram-schmidt process,” 2006, http://mathworld.wolfram.com/
Gram-SchmidtOrthonormalization.html.
[8] E. Fleegal, “Microsoft visual c++ floating-point optimization,” Microsoft
Corp, 2004, https://msdn.microsoft.com/en-us/library/aa289157(v=vs.
71).aspx.
[9] J. R. Shewchuk, “Adaptive precision floating-point arithmetic and fast
robust geometric predicates,” Discrete & Computational Geometry,
vol. 18, no. 3, pp. 305–363, 1997.
[10] D. E. Knuth, The Art of Computer Programming: Seminumerical Algorithms. Addison-Wesley, 1998.
[11] T. J. Dekker, “A floating-point technique for extending the available
precision,” Journal of Numerical Mathematics, vol. 18, no. 3, pp. 224–
242, 1971.
[12] D. Yablonski, “Numerical accuracy differences in CPU and GPGPU
codes,” Master’s thesis, Northeastern University, 2011, http://www.coe.
neu.edu/Research/rcl/theses/yablonski ms2011.pdf.
[13] N. Whitehead and A. Fit-Florea, “Precision & performance: Floating
point and ieee 754 compliance for nvidia gpus,” 2012, presented at GTC
2012.
[14] M. Leeser and M. Taufer, “Panel on reproducibility at sc’16,” 2016,
http://sc16.supercomputing.org/presentation/?id=pan109&sess=sess177.
[15] M. Taufer, O. Padron, P. Saponaro, and S. Patel, “Improving numerical
reproducibility and stability in large-scale numerical simulations on
GPUs,” in IPDPS, Apr. 2010, pp. 1–9.
[16] M. Leeser, S. Mukherjee, J. Ramachandran, and T. Wahl, “Make it real:
Effective floating-point reasoning via exact arithmetic,” in DATE 2014,
2014, pp. 1–4.
[17] C. Seiler, 2008, http://christian-seiler.de/projekte/fpmath/.

[18] Y. Kim, J. M. Dennis, C. Kerr, R. R. P. Kumar, A. Simha, A. H.
Baker, and S. A. Mickelson, “KGEN: A python tool for automated
fortran kernel generation and verification,” in International Conference
on Computational Science 2016, ICCS 2016, 6-8 June 2016, San
Diego, California, USA, ser. Procedia Computer Science, M. Connolly,
Ed., vol. 80. Elsevier, 2016, pp. 1450–1460. [Online]. Available:
http://dx.doi.org/10.1016/j.procs.2016.05.466
[19] A. Baker, D. Hammerling, M. Levy, H. Xu, J. Dennis, B. Eaton, J. Edwards, C. Hannay, S. Mickelson, R. Neale, D. Nychka, J. Shollenberger,
J. Tribbia, M. Vertenstein, and D. Williamson, “A new ensemble-based
consistency test for the community earth system model,” no. 8, p.
28292840, 2015, doi:10.5194/gmd-8-2829-2015.
[20] M. J. Corden and D. Kreitzer, “Consistency of floating-point results
using the intel compiler or why doesnt my application always give the
same answer,” Technical report, Intel Corporation, Software Solutions
Group, Tech. Rep., 2009, https://software.intel.com/sites/default/files/
article/164389/fp-consistency-102511.pdf.
[21] W. Kahan, “How java’s floating-point hurts everyone everywhere,” 2004,
https://people.eecs.berkeley.edu/⇠wkahan/JAVAhurt.pdf.
[22] D. H. Bailey and J. M. Borwein, “High-precision arithmetic: Progress
and challenges,” 2013, www.davidhbailey.com.
[23] “The gnu mpfr library,” 2016, www.mpfr.org.
[24] M. Connolly, Ed., International Conference on Computational Science
2016, ICCS 2016, 6-8 June 2016, San Diego, California, USA,
ser. Procedia Computer Science, vol. 80. Elsevier, 2016. [Online].
Available: http://www.sciencedirect.com/science/journal/18770509/80
