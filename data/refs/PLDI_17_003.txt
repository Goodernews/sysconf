[1] A. Albarghouthi, I. Dillig, and A. Gurfinkel. Maximal Specifi- cation Synthesis. In Proceedings of the 43rd Annual Sympo- sium on Principles of Programming Languages, POPL, pages 789–801, Jan. 2016.
[2] R. Alur, R. Bodik, G. Juniwal, M. M. K. Martin, M. Raghothaman, S. A. Seshia, R. Singh, A. Solar-Lezama, E. Torlak, and A. Udupa. Syntax-Guided Synthesis. In Proceed- ings of the 13th International Conference on Formal Methods in Computer-Aided Design, FMCAD, pages 1–17, Oct. 2013.
[3]R.Alur,P.Cˇerný,P.Madhusudan,andW.Nam.Synthesisof Interface Specifications for Java Classes. In Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL, pages 98–109, Jan. 2005.
[4] G. Ammons, R. Bodík, and J. R. Larus. Mining Specifications. In Proceedings of the 29th ACM SIGPLAN-SIGACT Sympo- sium on Principles of Programming Languages, POPL, pages 4–16, 2002.
[5] S. Bansal and A. Aiken. Automatic Generation of Peephole Superoptimizers. In Proceedings of the 12th International Con- ference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, pages 394–403, Oct. 2006.
[6] M. Barnett and K. R. M. Leino. Weakest-precondition of Un- structured Programs. In Proceedings of the 6th ACM SIGPLAN- SIGSOFT Workshop on Program Analysis for Software Tools and Engineering, PASTE, pages 82–87, Sept. 2005.
[7] S. Buchwald. Optgen: A Generator for Local Optimizations. In
Proceedings of the 24th International Conference on Compiler Construction, CC, pages 171–189, 2015. ISBN 978-3-662- 46663-6.
[8] E. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith. Counterexample-Guided Abstraction Refinement. CAV, 2000.
[9] P. Cousot, R. Cousot, M. Fähndrich, and F. Logozzo. Auto- matic Inference of Necessary Preconditions. In Proceedings of the 14th International Conference on Verification, Model Checking, and Abstract Interpretation, VMCAI, pages 128– 148, Jan. 2013.
[10] L. de Moura and N. Bjørner. Z3: An Efficient SMT Solver. In Proceedings of the Theory and Practice of Software, 14th International Conference on Tools and Algorithms for the Construction and Analysis of Systems, TACAS, pages 337– 340, 2008.
[11] I. Dillig, T. Dillig, B. Li, and K. McMillan. Inductive Invariant Generation via Abductive Inference. In Proceedings of the 2013 ACM SIGPLAN International Conference on Object- Oriented Programming Systems, Languages, and Applications, OOPSLA, pages 443–456, Oct. 2013.
[12] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz, and C. Xiao. The Daikon system for dynamic detection of likely invariants. Science of Computer Program- ming, 69(1):35–45, Dec. 2007.
[13] P. Garg, C. Löding, P. Madhusudan, and D. Neider. ICE: A Robust Learning Framework for Synthesizing Invariants. In Proceedings of the 26th International Conference on Computer Aided Verification, CAV, pages 69–87, July 2014.
[14] P. Garg, D. Neider, P. Madhusudan, and D. Roth. Learning Invariants using Decision Trees and Implication Counterex- amples. In Proceedings of the 43rd Annual Symposium on Principles of Programming Languages, POPL, pages 499–512, Jan. 2016.
[15] T. Gehr, D. Dimitrov, and M. T. Vechev. Learning Commuta- tivity Specifications. In Proceedings of the 27th International Conference on Computer Aided Verification, CAV, pages 307– 323, July 2015.
[16] R. Giacobazzi. Abductive analysis of modular logic programs. In Proceedings of the 1994 International Symposium on Logic programming, ISPL, pages 377–391, Nov. 1994.
[17] S. Gulwani, S. Jha, A. Tiwari, and R. Venkatesan. Synthesis of Loop-free Programs. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, June 2011.
[18] Y. Jiang. [Patch]InstCombine pattern for ICMP.
http://lists.llvm.org/pipermail/llvm-commits/ Week-of-Mon-20140818/231300.html, 2014. Retrieved 2016-11-10.
[19] A. K. John and S. Chakraborty. Quantifier Elimination for Linear Modular Constraints. In Proceedings of the 4th Inter- national Congress on Mathematical Software, ICMS, pages 295–302, Aug. 2014.
[20] R. Joshi, G. Nelson, and Y. Zhou. Denali: A practical algorithm for generating optimal code. ACM Transactions on Program- ming Languages and Systems (TOPLAS), 28(6):967–989, Nov. 2006.
[21] J. Ketema, J. Regehr, J. Taneja, P. Collingbourne, and R. Sas- nauskas. A superoptimizer for LLVM IR. https://github. com/google/souper. Retrieved 2016-11-14.
[22] A. Komuravelli, A. Gurfinkel, and S. Chaki. SMT-Based Model Checking for Recursive Programs. In Proceedings of the 26th International Conference on Computer Aided Verification, CAV, pages 17–34, July 2014.
[23] S. Kundu, Z. Tatlock, and S. Lerner. Proving optimizations correct using parameterized program equivalence. In Proceed- ings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 327–337, 2009.
[24] C. Lattner. ComputeMaskedBits and friends should know that multiplying by a power of two leaves low bits clear. https: //bugs.llvm.org//show_bug.cgi?id=19711, 2016. Re- trieved 2017-03-14.
[25] V. Le, M. Afshari, and Z. Su. Compiler Validation via Equivalence Modulo Inputs. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 216–226, 2014.
[26] S. Lerner, T. Millstein, E. Rice, and C. Chambers. Automated Soundness Proofs for Dataflow Analyses and Transformations via Local Rules. In Proceedings of the 32nd ACM SIGPLAN- SIGACT Symposium on Principles of Programming Languages, POPL, pages 364–377, 2005.
[27] X. Leroy. A Formally Verified Compiler Back-end. In Journal of Automated Reasoning, 2009.
[28] C. Liam. [Patch]Implementing a proposed InstCom- bine optimization. http://lists.llvm.org/pipermail/ llvm-dev/2016-April/098104.html, 2016. Retrieved 2016-11-10.
[29] N. Lopes. RFC: Killing undef and spreading poi- son. http://lists.llvm.org/pipermail/llvm-dev/ 2016-October/106182.html, 2016. Retrieved 2016-11-10.
[30] N. Lopes, D. Menendez, S. Nagarakatte, and J. Regehr. Prov- ably Correct Peephole Optimizations with Alive. In Proceed- ings of the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 22–32, 2015.
[31] N. Lopes and J. Monteiro. Weakest Precondition Synthesis for Compiler Optimizations. In Proceedings of the 15th International Conference on Verification, Model Checking, and Abstract Interpretation, VMCAI, pages 203–221, 2014.
[32] H. Massalin. Superoptimizer: A Look at the Smallest Program. In Proceedings of the 2nd International Conference on Archi- tectural Support for Programming Languages and Operating Systems (ASPLOS), pages 122–126, 1987.
[33] D. Menendez and S. Nagarakatte. Alive-NJ. https:// github.com/rutgers-apl/alive-nj. Retrieved 2016-04- 16.
[34] D. Menendez and S. Nagarakatte. Termination-Checking for LLVM Peephole Optimizations. In Proceedings of the 38th International Conference of Software Engineering, ICSE, pages 191–202, May 2016.
[35] D. Menendez and S. Nagarakatte. Weaker (more gen- eral) precondition for bit-tests in InstructionSimplify. http://lists.llvm.org/pipermail/llvm-dev/ 2017-March/111000.html, 2017. Retrieved 2017-03- 14.
[36] D. Menendez, S. Nagarakatte, and A. Gupta. Alive-FP: Au- tomated Verification of Floating Point Based Peephole Opti- mizations in LLVM. In Proceedings of the 23rd Static Analysis Symposium, pages 317–337, 2016.
[37] E. Mullen, D. Zuniga, Z. Tatlock, and D. Grossman. Verified Peephole Optimizations for CompCert. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 448–461, June 2016.
[38] A. Nötzli and F. Brown. LifeJacket: Verifying precise floating- point optimizations in LLVM. http://arxiv.org/pdf/ 1603.09290v1.pdf, 2016. Retrieved 2016-04-04.
[39] S. Padhi, R. Sharma, and T. Millstein. Data-driven Precondition Inference with Learned Features. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’16, pages 42–56, 2016.
[40] P. M. Phothilimthana, A. Thakur, R. Bodik, and D. Dhurjati. Scaling Up Superoptimization. In Proceedings of the 21st International Conference on Architectural Support for Pro- gramming Languages and Operating Systems, ASPLOS, pages 297–310, Apr. 2016.
[41] J. Regehr. Early Superoptimizer Results. http://blog. regehr.org/archives/1146. Retrieved 2016-11-14.
[42] J. Regehr. Signed Division and InstCombine.
http://lists.llvm.org/pipermail/llvm-dev/ 2016-June/100375.html, 2016. Retrieved 2016-11- 10.
[43] S. Sankaranarayanan, S. Chaudhuri, F. Ivancˇic ́, and A. Gupta. Dynamic Inference of Likely Data Preconditions over Predi- cates by Tree Learning. In Proceedings of the 2008 Interna- tional Symposium on Software Testing and Analysis, ISSTA ’08, pages 295–306, 2008.
[44] E. R. Scherpelz, S. Lerner, and C. Chambers. Automatic Infer- ence of Optimizer Flow Functions from Semantic Meanings. In Proceedings of the 28th ACM SIGPLAN Conference on Pro- gramming Language Design and Implementation, PLDI, pages 135–145, June 2007.
[45] E. Schkufza, R. Sharma, and A. Aiken. Stochastic Superopti- mization. In Proceedings of the 18th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, pages 305–316, 2013.
[46] M. N. Seghir and D. Kroening. Counterexample-Guided Precondition Inference. In Proceedings of the 22nd European Conference on Programming Languages and Systems, ESOP, pages 451–471, Mar. 2013.
[47] R. Sharma, S. Gupta, B. Hariharan, A. Aiken, P. Liang, and A. V. Nori. A Data Driven Approach for Algebraic Loop Invariants. In Proceedings of the 22Nd European Conference on Programming Languages and Systems, ESOP’13, pages 574–592, 2013.
[48] A. Solar-Lezama, L. Tancau, R. Bodik, S. Seshia, and V. Saraswat. Combinatorial Sketching for Finite Programs. Proceedings of the 12th International Conference on Archi- tectural Support for Programming Languages and Operating Systems, pages 404–415, Oct. 2006.
[49] Z. Tatlock and S. Lerner. Bringing extensibility to verified compilers. In PLDI ’10: Proceedings of the ACM SIGPLAN 2010 Conference on Programming Language Design and Implementation, 2010.
[50] E. Torlak and R. Bodik. A Lightweight Symbolic Virtual Machine for Solver-aided Host Languages. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 530–541, June 2014.
[51] X. Yang, Y. Chen, E. Eide, and J. Regehr. Finding and Understanding Bugs in C Compilers. In Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI, pages 283–294. ACM, 2011.
[52] J. Zhao, S. Nagarakatte, M. M. K. Martin, and S. Zdancewic. Formalizing the LLVM Intermediate Representation for Ver- ified Program Transformations. In Proceedings of the 39th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL), pages 427–440, 2012.
[53] J. Zhao, S. Nagarakatte, M. M. K. Martin, and S. Zdancewic. Formal Verification of SSA-Based Optimizations for LLVM. In ACM SIGPLAN 2013 Conference on Programming Language Design and Implementation, 2013.
