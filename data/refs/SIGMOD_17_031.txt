
[1] C. R. Aberger, S. Tu, K. Olukotun, and C. Ré. EmptyHeaded:
A relational engine for graph processing. In SIGMOD, 2016.

[2] S. Abiteboul, R. Hull, and V. Vianu. Foundations of

databases, volume 8. Addison-Wesley Reading, 1995.
[3] R. Albert and A.-L. Barabási. Statistical mechanics of

complex networks. Reviews of modern physics, 74(1), 2002.

[4] R. Angles and C. Gutierrez. Survey of graph database

models. ACM Computing Surveys (CSUR), 40(1):1, 2008.

[5] A. Apostolico and G. Drovandi. Graph compression by BFS.

Algorithms, 2(3):1031–1044, 2009.

[6] Y. Asano, Y. Miyawaki, and T. Nishizeki. Efﬁcient

compression of web graphs. In International Computing and
Combinatorics Conference, pages 1–11, 2008.

[7] P. Atzeni, P. Cappellari, R. Torlone, P. A. Bernstein, and
G. Gianforme. Model-independent schema translation.
VLDB Journal, 17(6):1347–1370, 2008.

[8] P. Boldi and S. Vigna. The webgraph framework I:

compression techniques. In WWW, pages 595–602, 2004.

[9] N. R. Brisaboa, S. Ladra, and G. Navarro. K2-trees for

compact web graph representation. In Intl. Symposium on
String Processing and Information Retrieval, 2009.

[10] Y. Bu, V. Borkar, J. Jia, M. J. Carey, and T. Condie. Pregelix:
Big(ger) graph analytics on a dataﬂow engine. PVLDB, 2014.

[11] G. Buehrer and K. Chellapilla. A scalable pattern mining
approach to web graph compression with communities. In
WSDM, 2008.

[12] A. Buluç, J. T. Fineman, M. Frigo, J. R. Gilbert, C. E.

Leiserson. Parallel sparse matrix-vector and
matrix-transpose-vector multiplication using compressed
sparse blocks. In SPAA, 2009.

[13] P. Buneman, M. Grohe, and C. Koch. Path queries on

compressed XML. In VLDB, 2003.

[14] Y. Chodpathumwan, A. Aleyasen, A. Termehchy, and Y. Sun.

Universal-DB: towards representation independent graph
analytics. PVLDB, 8(12), 2015.

[15] R. De Virgilio, A. Maccioni, and R. Torlone. Converting

relational to graph databases. In GRADES, 2013.

[16] A. Deutsch, M. Fernandez, and D. Suciu. Storing semist-
ructured data with STORED. In SIGMOD Record, 1999.
[17] J. Fan, G. Raj, and J. Patel. The case against specialized

graph analytics engines. In CIDR, 2015.

[18] W. Fan, J. Li, X. Wang, and Y. Wu. Query preserving graph

compression. In SIGMOD, pages 157–168, 2012.
[19] T. Feder and R. Motwani. Clique partitions, graph

compression and speeding-up algorithms. JCSS, 1995.

[20] J. Gao, J. Zhou, C. Zhou, and J. X. Yu. GLog: a high level
graph analysis system using MapReduce. In ICDE, 2014.

[21] T. J. Green, M. Aref, and G. Karvounarakis. LogicBlox,

platform and language: A tutorial. Springer, 2012.
[22] A. Hogan, M. Arenas, A. Mallea, and A. Polleres.

Everything you always wanted to know about blank nodes.
Web Semantics: Science, Services and Agents on the World
Wide Web, 27:42–69, 2014.

[23] N. Jain, G. Liao, and T. Willke. GraphBuilder: A Scalable

Graph ETL Framework. In GRADES, 2013.

[24] A. Jindal, S. Madden, M. Castellanos, M. Hsu. Graph
analytics using the Vertica relational database. In IEEE
BigData, 2015.

[25] A. Jindal, P. Rawlani, E. Wu, S. Madden, A. Deshpande, and

M. Stonebraker. VERTEXICA: your relational friend for
graph analytics! PVLDB, 7(13):1669–1672, 2014.

[26] C. Karande, K. Chellapilla, and R. Andersen. Speeding up

algorithms on compressed web graphs. Internet
Mathematics, 2009.

[27] C. Koch. Processing queries on tree-structured data

efﬁciently. In PODS, 2006.

[28] S. Lee, B. H. Park, S.-H. Lim, and M. Shankar.

Table2Graph: A scalable graph construction from relational
tables using MapReduce. In IEEE BigDataService, 2015.

[29] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graph evolution:

Densiﬁcation and shrinking diameters. ACM TKDD, 2007.

[30] J. Leskovec and R. Sosiˇc. SNAP: A general purpose network

analysis and graph mining library in C++.
http://snap.stanford.edu/snap, June 2014.

[31] C. Lin, B. Mandel, Y. Papakonstantinou, M. Springer. Fast
in-memory SQL analytics on typed graphs. PVLDB, 2016.

[32] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and

J. Hellerstein. Distributed graphlab: A framework for
machine learning in the cloud. PVLDB, 5(8):716–727, 2012.
[33] H. Ma, B. Shao, Y. Xiao, L. J. Chen, and H. Wang. G-SQL:
fast query processing via graph exploration. PVLDB, 2016.

[34] S. Maneth and F. Peternek. A survey on methods and

systems for graph compression. arXiv preprint
arXiv:1504.00616, 2015.

[35] S. Maneth and F. Peternek. Compressing graphs by

grammars. In ICDE, 2016.

[36] H. Q. Ngo, E. Porat, C. Ré, and A. Rudra. Worst-case

optimal join algorithms:[extended abstract]. In PODS, 2012.

[37] D. Olteanu and J. Závodn`y. Size bounds for factorised
representations of query results. TODS, 40(1):2, 2015.

[38] Y. Perez, R. Sosiˇc, A. Banerjee, R. Puttagunta, M. Raison,

P. Shah, and J. Leskovec. Ringo: Interactive graph analytics
on big-memory machines. In SIGMOD, 2015.

[39] J. Seo, S. Guo, and M. S. Lam. SociaLite: Datalog exte-

nsions for efﬁcient social network analysis. In ICDE, 2013.

[40] J. Shanmugasundaram, K. Tufte, C. Zhang, G. He, D.

DeWitt, J. Naughton. Relational databases for querying XML
documents: Limitations and opportunities. In VLDB, 1999.

[41] J. Shun, L. Dhulipala, G. E. Blelloch. Smaller and faster:
Parallel processing of compressed graphs with Ligra+. In
2015 Data Compression Conference, pages 403–412, 2015.

[42] D. Simmen et al. Large-scale Graph Analytics in Aster 6:
Bringing Context to Big Data Discovery. PVLDB, 2014.

[43] W. Sun, A. Fokoue, K. Srinivas, A. Kementsietsidis, G. Hu,

and G. Xie. SQLGraph: an efﬁcient relational-based property
graph store. In SIGMOD, 2015.

[44] T. L. Veldhuizen. Triejoin: A simple, worst-case optimal join

algorithm. In ICDT, pages 96–106, 2014.

[45] K. Xirogiannopoulos and A. Deshpande. Efﬁcient graph
analytics on relational datasets (extended version). arXiv
preprint arXiv:1701.07388, 2016.

[46] K. Xirogiannopoulos, U. Khurana, and A. Deshpande.

GraphGen: exploring interesting graphs in relational data
(demo proposal). PVLDB, 8(12), 2015.

[47] D. Yan, Y. Bu, Y. Tian, A. Deshpande, and J. Cheng. Big

graph analytics systems (tutorial). In SIGMOD, 2016.

[48] F. Yang, J. Li, J. Cheng. Husky: Towards a more efﬁcient and
expressive distributed computing framework. PVLDB, 2016.
[49] M. Yannakakis. Algorithms for acyclic database schemes. In

VLDB, pages 82–94, 1981.

