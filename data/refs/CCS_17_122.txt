[1] Reynald Affeldt. 2013. On construction of a library of formally verified low-level arithmetic functions. Innovations in Systems and Software Engineering 9, 2 (2013), 59–77.
[2] Reynald Affeldt and Nicolas Marti. 2007. An Approach to Formal Verification of Arithmetic Functions in Assembly. In Advances in Computer Science (LNCS), Mitsu Okada and Ichiro Satoh (Eds.), Vol. 4435. Springer, 346–360.
[3] Reynald Affeldt, David Nowak, and Kiyoshi Yamada. 2012. Certifying assembly with formal security proofs: The case of BBS. Science of Computer Programming 77, 10–11 (2012), 1058–1074.
[4] B. Alpern, M. N. Wegman, and F. K. Zadeck. 1988. Detecting Equality of Variables in Programs. In POPL. ACM, New York, NY, USA, 1–11.
[5] Andrew W. Appel. 2015. Verification of a Cryptographic Primitive: SHA-256. ACM Transactions on Programming Languages and Systems 37, 2 (2015), 7:1–7:31. https://doi.org/10.1145/2701415
[6] Lennart Beringer, Adam Petcher, Katherine Q. Ye, and Andrew W. Appel. 2015. Verified Correctness and Security of OpenSSL HMAC. In USENIX Security Sym- posium 2015. USENIX Association, 207–221.
[7] Daniel J. Bernstein. 2005. Cache Timing Attacks on AES. (2005). https://cr.yp.to/ antiforgery/cachetiming- 20050414.pdf .
[8] Daniel J. Bernstein. 2006. Curve25519: new Diffie-Hellman speed records. In Public Key Cryptography (LNCS), Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin (Eds.), Vol. 3958. Springer, 207–228.
[9] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. 2011. High-Speed High-Security Signatures. In CHES (LNCS), Bart Preneel and Tsuyoshi Takagi (Eds.), Vol. 6917. Springer, 124–142.
[10] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. 2012. High-Speed High-Security Signatures. Journal of Cryptographic Engineering 2, 2 (2012), 77–89.
[11] Daniel J. Bernstein and Peter Schwabe. 2016. gfverif: Fast and Easy Verification of Finite-Field Arithmetic. (2016). http://gfverif.cryptojedi.org.
[12] Yves Bertot and Pierre Castéran. 2004. Interactive Theorem Proving and Program Development – Coq’Art: The Calculus of Inductive Constructions. Springer.
[13] B. Bond, C. Hawblitzel, M. Kapritsos, K. R. M. Leino, J. R. Lorch, B. Parno, A.
Rane, S. Setty, and L. Thompson. 2017. Vale: Verifying High-Performance Cryp- tographic Assembly Code. In USENIX Security Symposium 2017. USENIX Associ- ation, 917–934.
[14] Yu-Fang Chen, Chang-Hong Hsu, Hsin-Hung Lin, Peter Schwabe, Ming-Hsien Tsai, Bow-Yaw Wang, Bo-Yin Yang, and Shang-Yi Yang. 2014. Verifying Curve25519 Software. In CCS. ACM, 299–309. https://doi.org/10.1145/2660267. 2660370
[15] Henri Cohen. 1996. A Course in Computational Algebraic Number Theory (3rd ed.). GTM, Vol. 138. Springer.
[16] The Sage Developers. 2017. SageMath, the Sage Mathematics Software System. (2017). http://www.sagemath.org.
[17] Burak Ekici, Alain Mebsout, Cesare Tinelli, Chantal Keller, Guy Katz, Andrew Reynolds, and Clark Barrett. 2017. SMTCoq: A plug-in for integrating SMT solvers into Coq. In CAV (LNCS), Viktor Kuncak and Rupak Majumdar (Eds.). Springer.
[18] everest 2016. Project Everest. https://project-everest.github.io. (2016). Accessed: 2017-05-19.
[19] fiat 2015. Fiat-Crypto. https://github.com/mit- plv/fiat- crypto. (2015). Accessed: 2017-05-19.
[20] Michael R. Garey and David S. Johnson. 1979. Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman and company.
[21] Gert-Martin Greuel and Gerhard Pfister. 2008. A Singular Introduction to Com- mutative Algebra (2nd ed.). Springer.
[22] John Harrison. 2007. Automating Elementary Number-Theoretic Proofs Using Gröbner Bases. In CADE (LNCS), Frank Pfenning (Ed.), Vol. 4603. Springer, 51–66.
[23] C. A. R. Hoare. 1969. An axiomatic basis for computer programming. CACM 12, 10 (1969), 576–580.
[24] Nick Howgrave-Graham, Phong Q. Nguyen, David Pointcheval, John Proos, Joseph H. Silverman, Ari Singer, and William Whyte. 2003. The Impact of Decryption Failures on the Security of NTRU Encryption. In CRYPTO (LNCS), Dan Boneh (Ed.), Vol. 2729. Springer, 226–246.
[25] Peter L. Montgomery. 1987. Speeding the Pollard and Elliptic Curve Methods of Factorization. Math. Comp. 48, 177 (1987), 243–264.
[26] Magnus O. Myreen and Gregorio Curello. 2013. Proof Pearl: A Verified Bignum Implementation in x86-64 Machine Code. In Certified Programs and Proofs (LNCS), Vol. 8307. Springer, 66–81. https://doi.org/10.1007/978-3-319-03545-1_5
[27] Magnus O. Myreen and Michael J. C. Gordon. 2007. Hoare Logic for Realistically Modelled Machine Code. In TACAS (LNCS), Orna Grumberg and Michael Huth (Eds.), Vol. 4424. Springer, 568–582.
[28] Loïc Pottier. 2008. Connecting Gröbner Bases Programs with Coq to do Proofs in Algebra, Geometry and Arithmetics. In Knowledge Exchange: Automated Provers and Proof Assistants, G. Sutcliffe, P. Rudnicki, R. Schmidt, B. Konev, and S. Schulz (Eds.). 418.
[29] Loïc Pottier. 2010. Connecting Gröbner Bases Programs with Coq to do Proofs in Algebra, Geometry and Arithmetics. Technical Report abs/1007.3615. CoRR.
[30] Aaron Tomb. 2016. Automated Verification of Real-World Cryptographic Imple- mentations. IEEE Security & Privacy 14, 6 (2016), 26–33. https://doi.org/10.1109/ MSP.2016.125
[31] Wikipedia. 2017. Curve25519. https://en.wikipedia.org/wiki/Curve25519. (2017). Accessed: 2017-05-19.
