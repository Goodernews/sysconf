[1] Cylon.js. https://cylonjs.com.

[2] Chrome V8. https://developers.google.com/v8/.

[3] Node-RED. https://nodered.org/.

[4] Julia. http://julialang.org/.

[5] Luvit. https://luvit.io/.

[6] MoarVM : A 6model-based VM for NQP and Rakudo Perl 6.
https://github.com/MoarVM/MoarVM.

[7] Module Counts. http:/Awww.modulecounts.com.

[8] Node.js. https://nodejs.org/en/.

[9] S. Alimadadi, S. Sequeira, A. Mesbah, and K. Pattabiraman.
Understanding JavaScript Event-Based Interactions. In Proceedings of the 36th International Conference on Software
Engineering (ICSE), pages 367-377, 2014.

[10] A. Allan. Learning iPhone Programming. O'Reilly Media,
2010.

[11] P. Bielik, V. Raychev, and M. Vechev. Scalable Race Detection for Android Applications. In Proceedings of the ACM
SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA),
pages 332-348, 2015.

[12] M. Casciaro. Node.js Design Patterns. 1 edition, 2014. ISBN
9781783287314. doi: 10.1002/ejoc.201200111.

[13] G. Chadha, S. Mahlke, and S. Narayanasamy. Accelerating Asynchronous Programs Through Event Sneak Peek. In
Proceedings of the Forty-Second International Symposium on
Computer Architecture (ISCA), pages 642-654, 2015.

[14] P. M. Chen and B. D. Noble. When Virtual is Better Than
Real. Hot Topics in Operating Systems (HotOS), 3:116-121,
2001.

[15] L. Czerner. ext4: Make
Atomic With itrwlock semaphore https://patchwork.ozlabs.org/patch/91834/.

[16] J. Davis, G. Kildow, and D. Lee. The Case of the Poisoned
Event Handler: Weaknesses in the Node.js Event-Driven Architecture. In Proceedings of the Tenth European Workshop
on System Security (EuroSec), page 6, 2017.

[17] A. Desai, S. Qadeer, and S. Seshia. Systematic Testing of
Asynchronous Reactive Systems. In Proceedings of the ACM
SIGSOFT International Symposium on Foundations of Software Engineering (FSE), 2015.

[18] O. Edelstein, E. Farchi, Y. Nir, G. Ratsaby, and S. Ur. Multithreaded Java Program Test Generation. IBM Systems Journal, 41(1):111-125, 2002.

[19] M. Emmi, S. Qadeer, and Z. Rakamari¢é. Delay-Bounded
Scheduling. In Proceedings of the ACM SIGPLAN Symposium
on Principles of Programming Languages (PoPL), 2011.

[20] P. Fonseca, R. Rodrigues, and B. B. Brandenburg. SKI: Exposing Kernel Concurrency Bugs through Systematic Schedule Exploration. In Proceedings of the Eleventh USENIX
Symposium on Operating Systems Design and Implementation
(OSDI), 2014.

[21] J. Governor, D. Hinchcliffe, and D. Nickull. Web 2.0 Architectures. O’Reilly Media / Adobe Developer Library, 2009.

Reads/Writes
Patchwork.

[22] J. Harrell. Node.js at PayPal, 2013. https://www.paypalengineering.com/2013/1 1/22/node-js-at-paypal/.

[23] A. T. Holdener. Ajax: The Definitive Guide. O’Reilly Media,
Inc., 2008.

[24] S. Hong, Y. Park, and M. Kim. Detecting Concurrency Errors
in Client-side JavaScript Web Applications. In Proceedings
of the Seventh International Conference on Software Testing,
Verification and Validation (ICST), 2014.

[25] C.-H. Hsiao, Y. Jie, S. Narayanasamy, Z. Kong, C. L. Pereira,
G. A. Pokam, P. M. Chen, and J. Flinn. Race Detection for
Event-Driven Mobile Applications. In Proceedings of The
Thirty-Fifth Annual ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI), 2014.

[26] Y. Hu, T. Azim, and I. Neamtiu. Versatile yet Lightweight
Record-and-Replay for Android. In Proceedings of the ACM
SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA),
pages 349-366, 2015.

[27] C. S. Jensen, A. Meller, V. Raychev, D. Dimitrov, and
M. Vechev. Stateless Model Checking of Event-Driven Applications. In Proceedings of the ACM SIGPLAN International
Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA), 2015.

[28] V. IL Levenshtein. Binary Codes Capable of Correcting Deletions, Insertions, and Reversals. In Soviet Physics Doklady,
volume 10, pages 707-710, 1966.

[29] S. Lu, S. Park, E. Seo, and Y. Zhou. Learning From Mistakes
— A Comprehensive Study on Real World Concurrency Bug
Characteristics. In ACM Sigplan Notices, volume 43, pages
329-339. ACM, 2008.

[30] M. Madsen, F. Tip, and O. Lhotaék. Static Analysis of EventDriven Node.js JavaScript Applications. In Proceedings of the
ACM SIGPLAN International Conference on Object-Oriented
Programming, Systems, Languages, and Applications (OOPSLA), pages 505-519, 2015.

[31] P. Maiya, A. Kanada, and R. Majumdar. Race Detection
for Android Applications. In Proceedings of The ThirtyFifth Annual ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2014.

[32] S. McConnell. Code Complete. Pearson Education, 2004.

[33] Z. Mednieks, L. Dornin, G. B. Meike, and M. Nakamura.
Programming Android. O’Reilly Media, 2012.

[34] M. Musuvathi, S. Qadeer, and T. Ball. CHESS: A Systematic
Testing Tool for Concurrent Software. Technical report, Technical Report MSR-TR-2007-149, Microsoft Research, 2007.

[35] F. Ocariza, K. Bajaj, K. Pattabiraman, and A. Mesbah. An
Empirical Study of Client-Side JavaScript Bugs. In Proceedings of the Seventh International Symposium on Empirical
Software Engineering and Measurement (ESEM), pages 5564, 2013.

[36] ES. Ocariza, K. Pattabiraman, and B. Zor. JavaScript Errors
in the Wild: An Empirical Study. In Proceedings of the Fifth
International Symposium on Software Reliability Engineering
(ESEM), pages 100-109, 2011.
[37] J. O'Dell. Exclusive: How LinkedIn used Nodejs
and HTMLS to build a better, faster app, 2011.
http://venturebeat.com/2011/08/16/linkedin-node/.

[38] A. Ojamaa and K. Duuna. Assessing the Security of Node.js
platform. In Proceedings of the Seventh International Conference for Internet Technology and Secured Transactions (ICITST), pages 348-355, 2012.

[39] B. K. Ozkan, M. Emmi, and S. Tasiran. Systematic Asynchrony Bug Exploration for Android Apps. In Proceedings of
the International Conference on Computer Aided Verification
(CAV), pages 455-461, 2015.

[40] S. Padmanabhan. How We Built eBay’s First Node.js Application, 2013. http://www.ebaytechblog.com/2013/05/17/howwe-built-ebays-first-node-js-application/.

[41] V.S. Pai, P. Druschel, and W. Zwaenepoel. Flash: An Efficient
and Portable Web Server. In Proceedings of the USENIX
Annual Technical Conference (ATC), 1999.

[42] D. Pariag, T. Brecht, A. Harji, P. Buhr, and A. Shukla. Comparing the Performance of Web Server Architectures. In Proceedings of the Second European Conference on Computer
Systems, volume 41, pages 231-243. ACM, 2007.

[43] B. Petrov, M. Vechev, M. Sridharan, and J. Dolby. Race Detection for Web Applications. In Proceedings of The ThirtyThird Annual ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI), 2012.

[44] V. Raychev, M. Vechev, and M. Sridharan. Effective Race
Detection for Event-Driven Programs. In Proceedings of the
2013 ACM SIGPLAN International Conference on ObjectOriented Programming, Systems, Languages, and Applica
tions (OOPSLA), 2013.

[45] B. Rieken and L. Weiman. Adventures in UNIX Network
Applications Programming. John Wiley & Sons, Inc., 1992.

[46] S. Robinson. Avoiding Callback Hell in Node.js.
http://stackabuse.com/avoiding-callback-hell-in-node-js/.

[47] K. Sen. Race Directed Random Testing of Concurrent Programs. In Proceedings of The Twenty-Eighth Annual ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI), 2008.

[48] A. Silberschatz, P. B. Galvin, and G. Gagne. Operating System
Concepts. Wiley Publishing, 9th edition, 2012.

[49] S. D. Stoller. Testing Concurrent Java Programs Using Randomized Scheduling. In Electronic Notes in Theoretical Computer Science, 2002.

[50] R. E. Sweet. The Mesa Programming Environment. ACM
SIGPLAN Notices, 20(7):216-229, 1985.

[51] P. Thomson, A. F. Donaldson, and A. Betts. Concurrency
Testing Using Schedule Bounding: An Empirical Study. In
Proceedings of the Nineteenth ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming (PPoPP),
2014.

[52] S. Tilkov and S. V. Verivue. Node.js: Using JavaScript to
Build High-Performance Network Programs. [EEE Internet
Computing, 14(6):80-83, 2010.

[53] R. von Behren, J. Condit, F Zhou, G. C. Necula, and
E. Brewer. Capriccio: Scalable Threads for Internet Services.
Proceedings of the ACM Symposium on Operating Systems
Principles (SOSP), 2003.