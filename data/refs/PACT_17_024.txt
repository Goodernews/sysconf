[1] J. Lin, “New ways to find (and stream) app content in google
search,” 2015. [Online]. Available: https://search.googleblog.
com/2015/11/new-ways-to-find-and-stream-app-content.html
[2] J. Steele and N. To, The Android developer’s cookbook: building applications with the Android SDK. Pearson Education,
2010.
[3] S. Ratabouil, Android NDK: Beginner’s Guide. Packt Publishing Ltd, 2015.
[4] G. Portokalidis, P. Homburg, K. Anagnostakis, and H. Bos,
“Paranoid android: versatile protection for smartphones,” in
Proceedings of the Annual Computer Security Applications
Conference (ACSAC). ACM, 2010, pp. 347–356.
[5] R. Mahmood, N. Esfahani, T. Kacem, N. Mirzaei, S. Malek,
and A. Stavrou, “A whitebox approach for automated security
testing of android applications on the cloud,” in Proceedings
of the International Workshop on Automation of Software Test
(AST). IEEE Computer Society, 2012, pp. 22–28.
[6] S. J. Pennycook, C. J. Hughes, M. Smelyanskiy, and S. A.
Jarvis, “Exploring SIMD for molecular dynamics, using Intel
Xeon processors and Intel Xeon Phi coprocessors,” in Proceedings of the International Symposium on Parallel and Distributed Processing (IPDPS). IEEE Computer Society, 2013,
pp. 1085–1097.
[7] K. Diefendorff, P. K. Dubey, R. Hochsprung, and H. Scales,
“Altivec extension to powerpc accelerates media processing,”
IEEE Micro, vol. 20, no. 2, pp. 85–95, 2000.
[8] J. Zhou and K. A. Ross, “Implementing database operations
using SIMD instructions,” in Proceedings of the ACM International Conference on Management of Data (SIGMOD).
ACM, 2002, pp. 145–156.
[9] Intel Corporation, Intel 64 and IA-32 Architectures Software
Developer’s Manual, 2016.
[10] ARM Ltd., ARM Cortex-A Series Programmer’s Guide for
ARMv8-A, 2015.
[11] S. Fu, D. Hong, J. Wu, P. Liu, and W. Hsu, “SIMD code
translation in an enhanced HQEMU,” in Proceedings of the
International Conference on Parallel and Distributed Systems
(ICPADS). IEEE Computer Society, 2015, pp. 507–514.
[12] J. Li, Q. Zhang, S. Xu, and B. Huang, “Optimizing dynamic
binary translation for SIMD instructions,” in Proceedings of
the International Symposium on Code Generation and Optimization (CGO). IEEE Computer Society, 2006, pp. 269–
280.
[13] L. Michel, N. Fournel, and F. Petrot, “Speeding-up SIMD in- ´
structions dynamic binary translation in embedded processor
simulation,” in Proceedings of the Design, Automation and
Test in Europe (DATE). IEEE Computer Society, 2011, pp.
277–280.
[14] N. Hallou, E. Rohou, and P. Clauss, “Runtime vectorization
transformations of binary code,” International Journal of Parallel Programming, pp. 1–30, 2016.
[15] N. Hallou, E. Rohou, P. Clauss, and A. Ketterlin, “Dynamic
re-vectorization of binary code,” in Proceedings of the International Conference on Embedded Computer Systems: Architectures, Modeling, and Simulation (SAMOS). IEEE Computer Society, 2015, pp. 228–237.
[16] D. Hong, S. Fu, Y. Liu, J. Wu, and W. Hsu, “Exploiting longer
SIMD lanes in dynamic binary translation,” in Proceedings
of the International Conference on Parallel and Distributed
Systems (ICPADS). IEEE Computer Society, 2016, pp. 853–
860.
[17] F. Bellard, “Qemu, a fast and portable dynamic translator,”
in Proceedings of the USENIX Annual Technical Conference
(USENIX). USENIX, 2005, pp. 41–46.
[18] L. Baraz, T. Devor, O. Etzion, S. Goldenberg, A. Skaletsky, Y. Wang, and Y. Zemach, “IA-32 execution layer: a
two-phase dynamic translator designed to support IA-32 applications on itanium-based systems,” in Proceedings of the
Annual International Symposium on Microarchitecture (MICRO). ACM/IEEE Computer Society, 2003, pp. 191–204.
[19] B. Dolan-Gavitt, J. Hodosh, P. Hulin, T. Leek, and R. Whelan, “Repeatable reverse engineering with PANDA,” in Proceedings of the Program Protection and Reverse Engineering
Workshop (PPREW@ACSAC). ACM, 2015, pp. 4:1–4:11.
[20] J. W. Davidson and S. Jinturkar, “Improving instruction-level
parallelism by loop unrolling and dynamic memory disambiguation,” in Proceedings of the Annual International Symposium on Microarchitecture (MICRO). ACM/IEEE, 1995,
pp. 125–132.
[21] ——, “An aggressive approach to loop unrolling,” Department
of Computer Science, University of Virginia, Charlottesville,
Tech. Rep., 1995.
[22] Y. Ma, “Register pressure guided loop optimization,” Ph.D.
dissertation, Michigan Technological University, Houghton,
MI, USA, 2007.
[23] R. Ira, N. Dorit, and Z. Ayal, “Loop-aware SLP in GCC,”
in Proceedings of the GCC Developers Summit, 2007, pp.
131–142.
[24] C. Lattner and V. S. Adve, “LLVM: A compilation framework
for lifelong program analysis & transformation,” in Proceedings of the International Symposium on Code Generation and
Optimization (CGO). IEEE Computer Society, 2004, pp. 75–
88.
[25] A. W. Appel and M. Ginsburg, Modern Compiler Implementation in C. New York, NY, USA: Cambridge University
Press, 2004.
[26] F. McMahon, “The livermore fortran kernels: A computer test
of the numerical performance range,” Lawrence Livermore
National Lab, Tech. Rep., 1986.
[27] D. H. Bailey, E. Barszcz, J. T. Barton, D. S. Browning, R. L.
Carter, L. Dagum, R. A. Fatoohi, P. O. Frederickson, T. A.
Lasinski, R. Schreiber, H. D. Simon, V. Venkatakrishnan, and
S. Weeratunga, “The NAS parallel benchmarks,” International
Journal of High Performance Computing Applications (IJHPCA), vol. 5, no. 3, pp. 63–73, 1991.
[28] R. Pozo and B. Miller, “SciMark 2.0 benchmark,” 2004.
[Online]. Available: http://math.nist.gov/scimark2
[29] S. Maleki, Y. Gao, M. J. Garzaran, T. Wong, and D. A. Padua, ´
“An evaluation of vectorizing compilers,” in Proceedings of
the International Conference on Parallel Architectures and
Compilation Techniques (PACT). IEEE Computer Society,
2011, pp. 372–382.
[30] J. J. Dongarra, C. B. Moler, J. R. Bunch, and G. W. Stewart,
LINPACK users’ guide. SIAM, 1979.
[31] Independent JPEG Group, “IJG JPEG library,” 2016.
[Online]. Available: http://www.ijg.org
[32] Itseez, “Open source computer vision library,” 2017. [Online].
Available: http://opencv.org
[33] Intel Corporation, Intel 64 and IA-32 Architectures Optimization Reference Manual, 2016.
[34] C. Luk, R. S. Cohn, R. Muth, H. Patil, A. Klauser, P. G.
Lowney, S. Wallace, V. J. Reddi, and K. M. Hazelwood,
“Pin: building customized program analysis tools with dynamic instrumentation,” in Proceedings of the Conference on
Programming Language Design and Implementation (PLDI).
ACM, 2005, pp. 190–200.
[35] J. Jeffers, J. Reinders, and A. Sodani, Intel Xeon Phi Processor High Performance Programming: Knights Landing Edition. Elsevier Science, 2016.
[36] N. Sreraman and R. Govindarajan, “A vectorizing compiler
for multimedia extensions,” International Journal of Parallel
Programming, vol. 28, no. 4, pp. 363–400, 2000.
[37] A. J. C. Bik, M. Girkar, P. M. Grey, and X. Tian, “Automatic
intra-register vectorization for the Intel architecture,” International Journal of Parallel Programming, vol. 30, no. 2, pp.
65–98, 2002.
[38] D. Naishlos, “Autovectorization in GCC,” in Proceedings of
the GCC Developers Summit, 2004, pp. 105–118.
[39] S. Larsen and S. P. Amarasinghe, “Exploiting superword level
parallelism with multimedia instruction sets,” in Proceedings
of the Conference on Programming Language Design and
Implementation (PLDI). ACM, 2000, pp. 145–156.
[40] R. Leupers and S. Bashford, “Graph-based code selection
techniques for embedded processors,” ACM Transactions on
Design Automation of Electronic Systems (TODAES), vol. 5,
no. 4, pp. 794–814, 2000.
[41] S. Kral, F. Franchetti, J. Lorenz, and C. W. Ueberhuber,
“SIMD vectorization of straight line FFT code,” in Proceedings of the International European Conference on Parallel
and Distributed Computing (Euro-Par). Springer, 2003, pp.
251–260.
[42] J. Shin, M. W. Hall, and J. Chame, “Superword-level parallelism in the presence of control flow,” in Proceedings of the
International Symposium on Code Generation and Optimization (CGO). IEEE Computer Society, 2005, pp. 165–175.
[43] V. Porpodas, A. Magni, and T. M. Jones, “PSLP: padded SLP
automatic vectorization,” in Proceedings of the International
Symposium on Code Generation and Optimization (CGO).
IEEE Computer Society, 2015, pp. 190–201.
[44] H. Zhou and J. Xue, “A compiler approach for exploiting
partial SIMD parallelism,” ACM Transactions on Architecture
and Code Optimization (TACO), vol. 13, no. 1, pp. 11:1–
11:26, 2016.
[45] V. Bala, E. Duesterwald, and S. Banerjia, “Dynamo: a transparent dynamic optimization system,” in Proceedings of the
Conference on Programming Language Design and Implementation (PLDI). ACM, 2000, pp. 1–12.
[46] J. Lu, H. Chen, P. Yew, and W. Hsu, “Design and implementation of a lightweight dynamic optimization system,” Journal
of Instruction-Level Parallelism, vol. 6, 2004.
[47] C. Wang, S. Hu, H. Kim, S. R. Nair, M. B. Jr., Z. Ying, and
Y. Wu, “Stardbt: An efficient multi-platform dynamic binary
translation system,” in Proceedings of the Asia-Pacific Computer Systems Architecture Conference, ser. Lecture Notes in
Computer Science. Springer, 2007, pp. 4–15.
[48] N. Nethercote and J. Seward, “Valgrind: a framework for
heavyweight dynamic binary instrumentation,” in Proceedings of the Conference on Programming Language Design
and Implementation (PLDI). ACM, 2007, pp. 89–100.
[49] A. Chernoff, M. A. Herdeg, R. J. Hookway, C. Reeve, N. Rubin, T. Tye, S. B. Yadavalli, and J. Yates, “FX!32 a profiledirected binary translator,” IEEE Micro, vol. 18, no. 2, pp.
56–64, 1998.
[50] J. C. Dehnert, B. Grant, J. P. Banning, R. Johnson, T. Kistler,
A. Klaiber, and J. Mattson, “The transmeta code morphing -
software: Using speculation, recovery, and adaptive retranslation to address real-life challenges,” in Proceedings of the
International Symposium on Code Generation and Optimization (CGO). IEEE Computer Society, 2003, pp. 15–24.
[51] A. Pajuelo, A. Gonzalez, and M. Valero, “Speculative dy- ´
namic vectorization,” in Proceedings of the International
Symposium on Computer Architecture (ISCA). IEEE Computer Society, 2002, pp. 271–280.
[52] N. Clark, A. Hormati, S. Yehia, S. A. Mahlke, and
K. Flautner, “Liquid SIMD: abstracting SIMD hardware using
lightweight dynamic mapping,” in Proceedings of the International Conference on High-Performance Computer Architecture (HPCA). IEEE Computer Society, 2007, pp. 216–227.
[53] D. Nuzman, S. Dyshel, E. Rohou, I. Rosen, K. Williams,
D. Yuste, A. Cohen, and A. Zaks, “Vapor SIMD: autovectorize once, run everywhere,” in Proceedings of the International Symposium on Code Generation and Optimization
(CGO). IEEE Computer Society, 2011, pp. 151–160.

