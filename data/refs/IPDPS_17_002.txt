[1] A. Apostolico, C. Iliopoulos, G. M. Landau, B. Schieber, and U. Vishkin.
Parallel construction of a sufﬁx tree with applications. Algorithmica,
3(1-4):347–365, 1988.

[2] O. Berkman, B. Schieber, and U. Vishkin. Optimal doubly logarithmic
parallel algorithms based on ﬁnding all nearest smaller values. Journal
of Algorithms, 14(3):344–370, 1993.

[3] M. Comin and M. Farreras. Efﬁcient parallel construction of sufﬁx
trees for genomes larger than main memory. In Proceedings of the 20th
European MPI Users’ Group Meeting, pages 211–216. ACM, 2013.

[4] P. Flick and S. Aluru. Parallel distributed memory construction of sufﬁx
and longest common preﬁx arrays. In Proceedings of the International
Conference for High Performance Computing, Networking, Storage and
Analysis, page 16. ACM, 2015.

[5] A. Ghoting and K. Makarychev. Serial and parallel methods for i/o
efﬁcient sufﬁx tree construction.
In Proceedings of the 2009 ACM
SIGMOD International Conference on Management of data, pages 827–
840. ACM, 2009.

[6] T. Hagerup and C. R¨ub. Optimal merging and sorting on the erew pram.

Information Processing Letters, 33(4):181–185, 1989.

[7] R. Hariharan. Optimal parallel sufﬁx tree construction. In Proceedings
of the twenty-sixth annual ACM symposium on Theory of computing,
pages 290–299. ACM, 1994.

[8] X. He and C.-H. Huang. Communication efﬁcient bsp algorithm for
all nearest smaller values problem. Journal of Parallel and Distributed
Computing, 61(10):1425–1438, 2001.

[9] C. Iliopoulos and W. Rytter. On parallel transformations of sufﬁx arrays
In 15th Australasian Workshop on Combinatorial

into sufﬁx trees.
Algorithms (AWOCA). Citeseer, 2004.

[10] J. JaJa and K. W. Ryu. Optimal algorithms on the pipelined hypercube
and related networks. Parallel and Distributed Systems, IEEE Transac-
tions on, 4(5):582–591, 1993.

[11] J. K¨arkk¨ainen and P. Sanders. Simple linear work sufﬁx array con-
struction. In Automata, Languages and Programming, pages 943–955.
Springer, 2003.

[12] P. Ko and S. Aluru. Space efﬁcient linear time construction of sufﬁx
arrays. In Combinatorial Pattern Matching, pages 200–210. Springer,
2003.

[13] D. Kravets and C. G. Plaxton. All nearest smaller values on the
hypercube. Parallel and Distributed Systems, IEEE Transactions on,
7(5):456–462, 1996.

[14] U. Manber and G. Myers. Sufﬁx arrays: a new method for on-line string

searches. siam Journal on Computing, 22(5):935–948, 1993.

[15] E. Mansour, A. Allam, S. Skiadopoulos, and P. Kalnis. Era: efﬁcient
serial and parallel sufﬁx tree construction for very long strings. Pro-
ceedings of the VLDB Endowment, 5(1):49–60, 2011.

[16] B. Nystedt, N. R. Street, A. Wetterbom, A. Zuccolo, Y.-C. Lin, D. G.
Scoﬁeld, F. Vezzi, N. Delhomme, S. Giacomello, A. Alexeyenko, et al.
The norway spruce genome sequence and conifer genome evolution.
Nature, 497(7451):579–584, 2013.

[17] S. J. Puglisi, W. F. Smyth, and A. H. Turpin. A taxonomy of sufﬁx array
construction algorithms. ACM Computing Surveys (CSUR), 39(2):4,
2007.

[18] J. Shun and G. E. Blelloch. A simple parallel cartesian tree algorithm
and its application to parallel sufﬁx tree construction. ACM Transactions
on Parallel Computing, 1(1):8, 2014.

[19] E. Ukkonen. On-line construction of sufﬁx trees.

Algorithmica,

14(3):249–260, 1995.

