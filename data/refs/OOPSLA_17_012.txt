[1] Ole Agesen. 1994. Constraint-based type inference and parametric polymorphism. Springer Berlin Heidelberg, Berlin,

Heidelberg, 78-100. https://doi.org/10.1007/3-540-58485-4 34



[2] Stephen M. Blackburn, Robin Garner, Chris Hoffmann, Asjad M. Khang, Kathryn S. McKinley, Rotem Bentzur, Amer Diwan,

Daniel Feinberg, Daniel Frampton, Samuel Z. Guyer, Martin Hirzel, Antony Hosking, Maria Jump, Han Lee, J. Eliot B.

Moss, Aashish Phansalkar, Darko Stefanovi¢, Thomas VanDrunen, Daniel von Dincklage, and Ben Wiedermann. 2006. The

DaCapo Benchmarks: Java Benchmarking Development and Analysis. In Proceedings of the 21st Annual ACM SIGPLAN

Conference on Object-oriented Programming Systems, Languages, and Applications (OOPSLA ’06). ACM, New York, NY,

USA, 169-190. https://doi.org/10.1145/1167473.1167488



[3] Martin Bravenboer and Yannis Smaragdakis. 2009. Strictly Declarative Specification of Sophisticated Points-to Analyses. In

Proceedings of the 24th ACM SIGPLAN Conference on Object Oriented Programming Systems Languages and Applications

(OOPSLA ’09), ACM, New York, NY, USA, 243-262. https://doi.org/10.1145/1640089.1640108



[4] Sooyoung Cha, Sehun Jeong, and Hakjoo Oh. 2016. Learning a Strategy for Choosing Widening Thresholds from a Large

Codebase. Springer International Publishing, Cham, 25-41. https://doi.org/10.1007/978-3-319-47958-3_2



[5] Kwonsoo Chae, Hakjoo Oh, Kihong Heo, and Hongseok Yang. 2017. Automatically Generating Features for Learning

Program Analysis Heuristics. Proceedings of the ACM on Programming Languages 1, OOPSLA (2017).



[6] Ramkrishna Chatterjee, Barbara G. Ryder, and William A. Landi. 1999. Relevant Context Inference. In Proceedings of the

26th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’99). ACM, New York, NY, USA,

133-146. https://doi.org/10.1145/292540.292554



[7] David Grove, Greg DeFouw, Jeffrey Dean, and Craig Chambers. 1997. Call Graph Construction in Object-oriented Languages.

In Proceedings of the 12th ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and Applications

(OOPSLA 97), ACM, New York, NY, USA, 108-124. https://doi.org/10.1145/263698.264352



[8] Samuel Z. Guyer and Calvin Lin. 2003. Client-driven Pointer Analysis. In Proceedings of the 10th International Conference on

Static Analysis (SAS’03). Springer-Verlag, Berlin, Heidelberg, 214-236. http://dl.acm.org/citation.cfm?id=1760267.1760284



[9] Nevin Heintze and Olivier Tardieu. 2001. Demand-driven Pointer Analysis. In Proceedings of the ACM SIGPLAN 2001

Conference on Programming Language Design and Implementation (PLDI ’01). ACM, New York, NY, USA, 24-34. https:

//doi.org/10.1145/378795.378802



[10] Kihong Heo, Hakjoo Oh, and Hongseok Yang. 2016. Learning a Variable-Clustering Strategy for Octagon from Labeled

Data Generated by a Static Analysis. Springer Berlin Heidelberg, Berlin, Heidelberg, 237-256. https://doi.org/10.1007/

978-3-662-53413-7_12



[11] Kihong Heo, Hakjoo Oh, and Kwangkeun Yi. 2017. Machine-Learning-Guided Selectively Unsound Static Analysis. In

Proceedings of the 39th International Conference on Software Engineering. ACM.



[12] Michael Hind. 2001. Pointer Analysis: Haven’t We Solved This Problem Yet?. In Proceedings of the 2001 ACM SIGPLANSIGSOFT Workshop on Program Analysis for Software Tools and Engineering (PASTE ’01). ACM, New York, NY, USA, 54-61.

https://doi.org/10.1145/379605.379665



[13] George Kastrinis and Yannis Smaragdakis. 2013a. Efficient and Effective Handling of Exceptions in Java Points-to Analysis.

In Proceedings of the 22Nd International Conference on Compiler Construction (CC’ 13). Springer-Verlag, Berlin, Heidelberg,

41-60. https://doi.org/10.1007/978-3-642-37051-9_3



[14] George Kastrinis and Yannis Smaragdakis. 2013b. Hybrid Context-sensitivity for Points-to Analysis. In Proceedings of the

34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’13). ACM, New York, NY,

USA, 423-434, https://doi.org/10.1145/2491956.2462191



[15] George Kastrinis and Yannis Smaragdakis. 2013c. Hybrid Context-sensitivity for Points-to Analysis. In Proceedings of the

34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’13). ACM, New York, NY,

USA, 423-434, https://doi.org/10.1145/2491956.2462191



[16] Ondyej Lhotak and Laurie Hendren. 2006. Context-Sensitive Points-to Analysis: Is It Worth It?. In Proceedings of the

15th International Conference on Compiler Construction (CC’06). Springer-Verlag, Berlin, Heidelberg, 47-64. https:

//doi.org/10.1007/11688839_5



[17] Ond¥ej Lhotak and Laurie Hendren. 2008. Evaluating the Benefits of Context-sensitive Points-to Analysis Using a BDD-based

Implementation. ACM Trans. Softw. Eng. Methodol. 18, 1, Article 3 (Oct. 2008), 53 pages. https://doi.org/10.1145/1391984.



[18] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 100. Publication date: October 2017.

100:28 Sehun Jeong, Minseok Jeon, Sungdeok Cha, and Hakjoo Oh 1391987



[19] Donglin Liang and Mary Jean Harrold. 1999. Efficient Points-to Analysis for Whole-program Analysis. In Proceedings of

the 7th European Software Engineering Conference Held Jointly with the 7th ACM SIGSOFT International Symposium on

Foundations of Software Engineering (ESEC/FSE-7). Springer-Verlag, London, UK, UK, 199-215. http://dl.acm.org/citation.

cfm?id=318773.318943



[20] Donglin Liang, Maikel Pennings, and Mary Jean Harrold. 2005. Evaluating the Impact of Context-sensitivity on Andersen’s

Algorithm for Java Programs. In Proceedings of the 6th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software

Tools and Engineering (PASTE ’05). ACM, New York, NY, USA, 6-12. https://doi.org/10.1145/1108792.1108797



[21] Percy Liang, Omer Tripp, and Mayur Naik. 2011. Learning Minimal Abstractions. In Proceedings of the 38th Annual ACM

SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’11). ACM, New York, NY, USA, 31-42.

https://doi.org/10.1145/1926385,.1926391



[22] Ana Milanova, Atanas Rountev, and Barbara G. Ryder. 2005. Parameterized Object Sensitivity for Points-to Analysis for

Java. ACM Trans. Softw. Eng. Methodol. 14, 1 (Jan. 2005), 1-41. https://doi-org/10.1145/1044834.1044835



[23] Hakjoo Oh, Wonchan Lee, Kihong Heo, Hongseok Yang, and Kwangkeun Yi. 2014. Selective Context-sensitivity Guided

by Impact Pre-analysis. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’14). ACM, New York, NY, USA, 475-484. https://doi.org/10.1145/2594291.2594318



[24] Hakjoo Oh, Hongseok Yang, and Kwangkeun Yi. 2015. Learning a Strategy for Adapting a Program Analysis via Bayesian

Optimisation. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems,

Languages, and Applications (OOPSLA 2015). ACM, New York, NY, USA, 572-588. https://doi.org/10.1145/2814270.2814309



[25] Erik Ruf. 1995. Context-insensitive Alias Analysis Reconsidered. In Proceedings of the ACM SIGPLAN 1995 Conference on

Programming Language Design and Implementation (PLDI ’95). ACM, New York, NY, USA, 13-22. https://doi-org/10.1145/

207110.207112



[26] Erik Ruf. 2000. Effective Synchronization Removal for Java. In Proceedings of the ACM SIGPLAN 2000 Conference on

Programming Language Design and Implementation (PLDI ’00). ACM, New York, NY, USA, 208-218. https://doi.org/10.

1145/349299,349327



[27] Micha Sharir and Amir Pnueli. 1981. Two approaches to interprocedural data flow analysis. Prentice-Hall, Englewood Cliffs,

NJ, Chapter 7, 189-234,



[28] Yannis Smaragdakis and George Balatsouras. 2015. Pointer Analysis. Found. Trends Program. Lang. 2, 1 (April 2015), 1-69.

https://doi.org/10.1561/2500000014



[29] Yannis Smaragdakis, Martin Bravenboer, and Ondrej Lhotak. 2011. Pick Your Contexts Well: Understanding Object-sensitivity.

In Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ”11).

ACM, New York, NY, USA, 17-30. https://doi.org/10.1145/1926385,.1926390



[30] Yannis Smaragdakis, George Kastrinis, and George Balatsouras. 2014. Introspective Analysis: Context-sensitivity, Across

the Board. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation

(PLDI ’14), ACM, New York, NY, USA, 485-495. https://doi.org/10.1145/2594291,2594320



[31] Manu Sridharan and Rastislav Bodik. 2006. Refinement-based Context-sensitive Points-to Analysis for Java. In Proceedings

of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’06). ACM, New York,

NY, USA, 387-400. https://doi.org/10.1145/1133981.1134027



[32] Manu Sridharan, Denis Gopan, Lexin Shan, and Rastislav Bodik. 2005. Demand-driven Points-to Analysis for Java. In

Proceedings of the 20th Annual ACM SIGPLAN Conference on Object-oriented Programming, Systems, Languages, and

Applications (OOPSLA ’05). ACM, New York, NY, USA, 59-76. https://doi.org/10.1145/1094811.1094817



[33] Tian Tan, Yue Li, and Jingling Xue. 2016. Making k-Object-Sensitive Pointer Analysis More Precise with Still k-Limiting.

In Static Analysis - 23rd International Symposium, SAS 2016, Edinburgh, UK, September 8-10, 2016, Proceedings. 489-510.

https://doi.org/10.1007/978-3-662-53413-7_24



[34] Omer Tripp, Marco Pistoia, Stephen J. Fink, Manu Sridharan, and Omri Weisman. 2009. TAJ: Effective Taint Analysis of Web

Applications. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language Design and Implementation

(PLDI ’09). ACM, New York, NY, USA, 87-97. https://doi.org/10.1145/1542476.1542486



[35] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and Vijay Sundaresan. 1999. Soot - a Java Bytecode

Optimization Framework. In Proceedings of the 1999 Conference of the Centre for Advanced Studies on Collaborative Research

(CASCON ’99). IBM Press, 13-. http://dl.acm.org/citation.cfm?id=781995.782008



[36] Robert P. Wilson and Monica S. Lam. 1995. Efficient Context-sensitive Pointer Analysis for C Programs. In Proceedings of

the ACM SIGPLAN 1995 Conference on Programming Language Design and Implementation (PLDI ’95). ACM, New York,

NY, USA, 1-12. https://doi-org/10.1145/207110.207111



[37] Xin Zhang, Ravi Mangal, Radu Grigore, Mayur Naik, and Hongseok Yang. 2014. On Abstraction Refinement for Program Analyses in Datalog. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’14). ACM, New York, NY, USA, 239-248. https://doi.org/10.1145/2594291.2594327



[38] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 100. Publication date: October 2017.
