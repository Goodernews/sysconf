[1] ACHEMLAL , M., G HAROUT, S., AND G ABER , C.
Trusted Platform Module as an Enabler for Security in Cloud Computing. In Network and Information Systems Security (SAR-SSI), 2011 Conference
on (May 2011), pp. 1–6.
[2] A PACHE
I NFRASTRUCTURE
T EAM.
apache.org incident report for 8/28/2009.
https://blogs.apache.org/infra/entry/
apache org downtime report, 2009.
[3] A PACHE
I NFRASTRUCTURE
T EAM.
apache.org incident report for 04/09/2010.
https://blogs.apache.org/infra/entry/
apache org 04 09 2010, 2010.
[4] ARKIN, B. Adobe to Revoke Code Signing Certificate. https://blogs.adobe.com/
conversations/2012/09/adobe-to-revokecode-signing-certificate.html, 2012.
[5] BELLISSIMO, A., BURGESS, J., AND FU, K. Secure Software Updates: Disappointments and New
Challenges. In Proceedings of the 1st USENIX
Workshop on Hot Topics in Security (Berkeley, CA,
USA, 2006), HOTSEC’06, USENIX Association,
pp. 7–7.
[6] BINDEL, D., CHEW, M., AND WELLS, C.
Extended Cryptographic File System, 1999.
Unpublished. http://citeseerx.ist.psu.edu/
viewdoc/summary?doi=10.1.1.22.4339.
[7] BLAZE, M. A Cryptographic File System for
UNIX. In Proceedings of the 1st ACM Conference
on Computer and Communications Security (New
York, NY, USA, 1993), CCS ’93, ACM, pp. 9–16.
[8] CACHIN, C., AND GEISLER, M. Applied Cryptography and Network Security: 7th International
Conference, ACNS 2009, Paris-Rocquencourt,
France, June 2-5, 2009. Proceedings. Springer
Berlin Heidelberg, Berlin, Heidelberg, 2009, ch. Integrity Protection for Revision Control, pp. 382–
399.
[9] CACHIN, C., KEIDAR, I., AND SHRAER, A. Fork
sequential consistency is blocking. Information
Processing Letters 109, 7 (2009), 360–364.
[10] CACHIN, C., KEIDAR, I., AND SHRAER, A. FailAware Untrusted Storage. SIAM Journal on Computing 40, 2 (2011), 493–533.
[11] CACHIN, C., AND OHRIMENKO, O. Principles
of Distributed Systems: 18th International Conference, OPODIS 2014, Cortina d’Ampezzo, Italy,
December 16-19, 2014. Proceedings. Springer International Publishing, Cham, 2014, ch. Verifying
the Consistency of Remote Untrusted Services with
Commutative Operations, pp. 1–16.
[12] CACHIN, C., SHELAT, A., AND SHRAER, A. Efficient Fork-linearizable Access to Untrusted Shared
Memory. In Proceedings of the Twenty-sixth Annual ACM Symposium on Principles of Distributed
Computing (New York, NY, USA, 2007), PODC
’07, ACM, pp. 129–138.
[13] CAPPOS, J. Avoiding Theoretical Optimality to
Efficiently and Privately Retrieve Security Updates. In Financial Cryptography and Data Security: 17th International Conference, FC 2013,
Okinawa, Japan, April 1-5, 2013, Revised Selected
Papers (Berlin, Heidelberg, 2013), A.-R. Sadeghi,
Ed., Springer Berlin Heidelberg, pp. 386–394.
[14] CAPPOS, J., BAKER, S., PLICHTA, J., NYUGEN,
D., HARDIES, J., BORGARD, M., JOHNSTON, J.,
AND HARTMAN, J. H. Stork: package management for distributed VM environments. In The 21st
Large Installation System Administration Conference, LISA’07 (2007).
[15] CAPPOS, J., SAMUEL, J., BAKER, S., AND
HARTMAN, J. H. A look in the mirror: Attacks on
package managers. In Proceedings of the 15th ACM
conference on Computer and communications security (2008), ACM, pp. 565–574.
[16] CAPPOS, J., SAMUEL, J., BAKER, S., AND
HARTMAN, J. H. Package management security.
Tech. Rep. TR-08-02, University of Arizona, 2008.
[17] CAPPPOS, J. Stork: Secure Package Management
for VM Environments. Dissertation, University of
Arizona, 2008.
[18] CASTRO, M., AND LISKOV, B. Practical Byzantine Fault Tolerance. In Proceedings of the Third
Symposium on Operating Systems Design and Implementation (Berkeley, CA, USA, 1999), OSDI
’99, USENIX Association, pp. 173–186.
[19] CATTANEO, G., CATUOGNO, L., SORBO, A. D.,
AND PERSIANO, P. The Design and Implementation of a Transparent Cryptographic File System for UNIX. In Proceedings of the FREENIX
Track: 2001 USENIX Annual Technical Conference
(Berkeley, CA, USA, 2001), USENIX Association,
pp. 199–212.
[20] CHUN, B.-G., MANIATIS, P., SHENKER, S., AND
KUBIATOWICZ, J. Attested Append-only Memory:
Making Adversaries Stick to Their Word. In Proceedings of Twenty-first ACM SIGOPS Symposium
on Operating Systems Principles (New York, NY,
USA, 2007), SOSP ’07, ACM, pp. 189–204.
[21] CORBET, J. An attempt to backdoor the kernel.
http://lwn.net/Articles/57135/, 2003.
[22] CORBET, J. The cracking of kernel.org. http:
//www.linuxfoundation.org/news-media/
blogs/browse/2011/08/cracking-kernelorg,
2011.
[23] DEBIAN. Debian Investigation Report after Server
Compromises. https://www.debian.org/News/
2003/20031202, 2003.
[24] DEBIAN. Security breach on the Debian wiki 2012-
07-25. https://wiki.debian.org/DebianWiki/
SecurityIncident2012, 2012.
[25] DOCKER INC. Docker Hub. https://
hub.docker.com/.
[26] DOUCEUR, J. R., AND WATTENHOFER, R. P. Optimizing file availability in a secure serverless distributed file system. In Proceedings of the 20th
IEEE Symposium on Reliable Distributed Systems
(2001), pp. 4–13.
[27] DUCHAMP, D. A Toolkit Approach to Partially
Connected Operation. In Proceedings of the Annual
Conference on USENIX Annual Technical Conference (Berkeley, CA, USA, 1997), USENIX Association, pp. 23–23.
[28] FRIELDS, P. W. Infrastructure report, 2008-
08-22 UTC 1200. https://www.redhat.com/
archives/fedora-announce-list/2008-
August/msg00012.html, 2008.
[29] FU, K., KAASHOEK, M. F., AND MAZIERES ` , D.
Fast and Secure Distributed Read-only File System. In Proceedings of the 4th Conference on
Symposium on Operating System Design & Implementation - Volume 4 (Berkeley, CA, USA, 2000),
OSDI’00, USENIX Association.
[30] FU, K. E. Group sharing and random access in
cryptographic storage file systems. Master’s thesis,
Massachusetts Institute of Technology, 1999.
[31] GENTOO LINUX. rsync.gentoo.org: rotation server
compromised. https://security.gentoo.org/
glsa/200312-01, 2003.
[32] GESBERT, L., AND MEHNERT, H. Signing
the OPAM repository. https://opam.ocaml.org/
blog/Signing-the-opam-repository/, 2015.
[33] GITHUB, INC. Public Key Security Vulnerability
and Mitigation. https://github.com/blog/
1068-public-key-security-vulnerabilityand-mitigation, 2012.
[34] GNU SAVANNAH. Compromise2010.
https://savannah.gnu.org/maintenance/
Compromise2010/, 2010.
[35] GOH, E.-J., SHACHAM, H., MODADUGU, N.,
AND BONEH, D. SiRiUS: Securing Remote Untrusted Storage. In The 10th Annual Network
and Distributed System Security Symposium (San
Diego, CA, Feb. 2003), The Internet Society,
pp. 131–145.
[36] GOODIN, D. Attackers sign malware using
crypto certificate stolen from Opera Software.
http://arstechnica.com/security/2013/
06/attackers-sign-malware-using-cryptocertificate-stolen-from-opera-software/,
2013.
[37] HAEBERLEN, A., KOUZNETSOV, P., AND DRUSCHEL, P. PeerReview: Practical Accountability for Distributed Systems. In Proceedings of
Twenty-first ACM SIGOPS Symposium on Operating Systems Principles (New York, NY, USA,
2007), SOSP ’07, ACM, pp. 175–188.
[38] HO, C., VAN RENESSE, R., BICKFORD, M., AND
DOLEV, D. Nysiad: Practical Protocol Transformation to Tolerate Byzantine Failures. In Proceedings of the 5th USENIX Symposium on Networked
Systems Design and Implementation (Berkeley,
CA, USA, 2008), NSDI’08, USENIX Association,
pp. 175–188.
[39] KALLAHALLA, M., RIEDEL, E., SWAMINATHAN,
R., WANG, Q., AND FU, K. Plutus: Scalable Secure File Sharing on Untrusted Storage. In Proceedings of the 2Nd USENIX Conference on File
and Storage Technologies (Berkeley, CA, USA,
2003), FAST ’03, USENIX Association, pp. 29–42.
[40] KEYBASE. Introducing the Keybase filesystem,
2016. https://keybase.io/docs/kbfs.
[41] KORN, D., MACDONALD, J., MOGUL, J., AND
VO, K. The VCDIFF Generic Differencing and
Compression Data Format. RFC 3284 (Proposed Standard). https://tools.ietf.org/html/
rfc3284, June 2002.
[42] KORN, D. G., AND VO, K.-P. A Generic Differencing and Compression Data Format. Tech.
Rep. HA1630000-021899-02TM, AT&T Labs -
Research, February, 1999.
[43] KOTLA, R., ALVISI, L., DAHLIN, M., CLEMENT,
A., AND WONG, E. Zyzzyva: Speculative Byzantine Fault Tolerance. In Proceedings of Twenty-first
ACM SIGOPS Symposium on Operating Systems
Principles (New York, NY, USA, 2007), SOSP ’07,
ACM, pp. 45–58.
[44] KUHN, B. M. News: IMPORTANT: Information Regarding Savannah Restoration for
All Users. https://savannah.gnu.org/forum/
forum.php?forum id=2752, 2003.
[45] KUPPUSAMY, T. K., DIAZ, V., STUFFT, D., AND
CAPPOS, J. PEP 458 – Securing the Link from
PyPI to the End User. https://www.python.org/
dev/peps/pep-0458/, 2013.
[46] KUPPUSAMY, T. K., DIAZ, V., STUFFT, D., AND
CAPPOS, J. PEP 480 – Surviving a Compromise of
PyPI. https://www.python.org/dev/peps/pep0480/, 2014.
[47] KUPPUSAMY, T. K., TORRES-ARIAS, S., DIAZ,
V., AND CAPPOS, J. Diplomat: Using Delegations to Protect Community Repositories. In 13th
USENIX Symposium on Networked Systems Design
and Implementation (NSDI 16) (Santa Clara, CA,
Mar. 2016), USENIX Association, pp. 567–581.
[48] LAMPORT, L., SHOSTAK, R., AND PEASE, M.
The Byzantine Generals Problem. ACM Trans. Program. Lang. Syst. 4, 3 (July 1982), 382–401.
[49] LEAP ENCRYPTION ACCESS PROJECT. New releases for a new year - LEAP. https://leap.se/
en/2014/darkest-night, 2014.
[50] LEVIN, D., DOUCEUR, J. R., LORCH, J. R., AND
MOSCIBRODA, T. TrInc: Small Trusted Hardware
for Large Distributed Systems. In Proceedings of
the 6th USENIX Symposium on Networked Systems
Design and Implementation (Berkeley, CA, USA,
2009), NSDI’09, USENIX Association, pp. 1–14.
[51] LI, J., KROHN, M., MAZIERES ` , D., AND
SHASHA, D. Secure untrusted data repository
(SUNDR). In Proceedings of the 6th conference on
Symposium on Operating Systems Design & Implementation - Volume 6 (Berkeley, CA, USA, 2004),
OSDI’04, USENIX Association, pp. 9–9.
[52] LI, J., AND MAZIERES ´ , D. Beyond One-third
Faulty Replicas in Byzantine Fault Tolerant Systems. In Proceedings of the 4th USENIX Conference on Networked Systems Design and Implementation (Berkeley, CA, USA, 2007), NSDI’07,
USENIX Association.
[53] LI, J., REIHER, P., AND POPEK, G. J. Resilient
self-organizing overlay networks for security update delivery. Selected Areas in Communications,
IEEE Journal on 22, 1 (2004), 189–202.
[54] MAGNUSSON, H. The PHP project and Code
Review. http://bjori.blogspot.com/2010/12/
php-project-and-code-review.html, 2010.
[55] MAHAJAN, P., SETTY, S., LEE, S., CLEMENT,
A., ALVISI, L., DAHLIN, M., AND WALFISH,
M. Depot: Cloud Storage with Minimal Trust.
ACM Trans. Comput. Syst. 29, 4 (Dec. 2011), 12:1–
12:38.
[56] MAHESHWARI, U., VINGRALEK, R., AND
SHAPIRO, W. How to Build a Trusted Database
System on Untrusted Storage. In Proceedings of the
4th Conference on Symposium on Operating System Design & Implementation - Volume 4 (Berkeley, CA, USA, 2000), OSDI’00, USENIX Association.
[57] MAZIERES ` , D., AND SHASHA, D. Building Secure File Systems out of Byzantine Storage. In
Proceedings of the Twenty-first Annual Symposium
on Principles of Distributed Computing (New York,
NY, USA, 2002), PODC ’02, ACM, pp. 108–117.
[58] MERKLE, R. A Digital Signature Based on a Conventional Encryption Function. In Advances in
Cryptology — CRYPTO ’87, C. Pomerance, Ed.,
vol. 293 of Lecture Notes in Computer Science.
Springer Berlin Heidelberg, 1988, pp. 369–378.
[59] MICROSOFT, INC. Flame malware collision
attack explained. http://blogs.technet.com/b/
srd/archive/2012/06/06/more-informationabout-the-digital-certificates-used-tosign-the-flame-malware.aspx, 2012.
[60] MILLER, E., LONG, D., FREEMAN, W., AND
REED, B. Strong security for distributed file systems. In Performance, Computing, and Communications, 2001. IEEE International Conference on.
(2001), IEEE, pp. 34–40.
[61] MOGUL, J., KRISHNAMURTHY, B., DOUGLIS,
F., FELDMANN, A., GOLAND, Y., VAN HOFF,
A., AND HELLERSTEIN, D. Delta encoding in
HTTP. RFC 3229 (Proposed Standard). https:
//tools.ietf.org/html/rfc3229, Jan. 2002.
[62] MOGUL, J. C., DOUGLIS, F., FELDMANN, A.,
AND KRISHNAMURTHY, B. Potential Benefits of
Delta Encoding and Data Compression for HTTP.
In Proceedings of the ACM SIGCOMM ’97 Conference on Applications, Technologies, Architectures,
and Protocols for Computer Communication (New
York, NY, USA, 1997), SIGCOMM ’97, ACM,
[63] MULLENWEG, M. Passwords Reset.
https://wordpress.org/news/2011/06/
passwords-reset/, 2011.
[64] MONICA ´ , D., AND DOCKER, INC. Introducing Docker Content Trust. https:
//blog.docker.com/2015/08/content-trustdocker-1-8/, 2015.
[65] OPREA, A., AND REITER, M. K. Integrity Checking in Cryptographic File Systems with Constant
Trusted Storage. In Proceedings of 16th USENIX
Security Symposium on USENIX Security Symposium (Berkeley, CA, USA, 2007), SS’07, USENIX
Association, pp. 13:1–13:16.
[66] PHILIPS, B. Evaluate The Update Framework. https://github.com/appc/spec/issues/
211, 2015.
[67] POPA, R. A., LORCH, J. R., MOLNAR, D.,
WANG, H. J., AND ZHUANG, L. Enabling Security in Cloud Storage SLAs with CloudProof. In
Proceedings of the 2011 USENIX Conference on
USENIX Annual Technical Conference (Berkeley,
CA, USA, 2011), USENIXATC’11, USENIX Association.
[68] PRIME DIRECTIVE, INC. Development - Flynn.
https://flynn.io/docs/development, 2015.
[69] PYTHON SOFTWARE FOUNDATION. PyPI - the
Python Package Index: Python Package Index.
https://pypi.python.org/pypi.
[70] RED HAT, INC. Infrastructure report, 2008-08-
22 UTC 1200. https://rhn.redhat.com/errata/
RHSA-2008-0855.html, 2008.
[71] RUBYGEMS.ORG. RubyGems.org — your community gem host. https://rubygems.org/.
[72] RUBYGEMS.ORG. Data Verification.
http://blog.rubygems.org/2013/01/31/
data-verification.html, 2013.
[73] SAMUEL, J., MATHEWSON, N., CAPPOS, J., AND
DINGLEDINE, R. Survivable key compromise in
software update systems. In Proceedings of the
17th ACM conference on Computer and communications security (2010), ACM, pp. 61–72.
[74] SCHNEIDER, F. B. Implementing Fault-tolerant
Services Using the State Machine Approach: A Tutorial. ACM Comput. Surv. 22, 4 (Dec. 1990), 299–
319.
[75] SHAY, X., AND SQUARE, INC. Securing
RubyGems with TUF, Part 1. https://goo.gl/
XO4AHu, 2013.
[76] SHAY, X., AND SQUARE, INC. Securing
RubyGems with TUF, Part 2. https://goo.gl/
yymo8z, 2013.
[77] SHAY, X., AND SQUARE, INC. Securing
RubyGems with TUF, Part 3. https://goo.gl/
pPKcgB, 2013.
[78] SHRAER, A., CACHIN, C., CIDON, A., KEIDAR, I., MICHALEVSKY, Y., AND SHAKET, D.
Venus: Verification for Untrusted Cloud Storage.
In Proceedings of the 2010 ACM Workshop on
Cloud Computing Security Workshop (New York,
NY, USA, 2010), CCSW ’10, ACM, pp. 19–30.
[79] SINGH, A., FONSECA, P., KUZNETSOV, P., RODRIGUES, R., AND MANIATIS, P. Zeno: Eventually Consistent Byzantine-fault Tolerance. In
Proceedings of the 6th USENIX Symposium on
Networked Systems Design and Implementation
(Berkeley, CA, USA, 2009), NSDI’09, USENIX
Association, pp. 169–184.
[80] SLASHDOT MEDIA. About. http:
//sourceforge.net/about.
[81] SLASHDOT MEDIA. phpMyAdmin corrupted copy on Korean mirror server.
https://sourceforge.net/blog/phpmyadminback-door/, 2012.
[82] SMITH, J. K. Security incident on Fedora infrastructure on 23 Jan 2011. https:
//lists.fedoraproject.org/pipermail/
announce/2011-January/002911.html, 2011.
[83] STEFANOV, E., VAN DIJK, M., JUELS, A., AND
OPREA, A. Iris: A Scalable Cloud File System
with Efficient Integrity Checks. In Proceedings of
the 28th Annual Computer Security Applications
Conference (New York, NY, USA, 2012), ACSAC
’12, ACM, pp. 229–238.
[84] STEIN, C. A., HOWARD, J. H., AND SELTZER,
M. I. Unifying File System Protection. In Proceedings of the General Track: 2001 USENIX Annual
Technical Conference (Berkeley, CA, USA, 2001),
USENIX Association, pp. 79–90.
[85] TECTONIC/COREOS, INC. Tectonic with Distributed Trusted Computing, 2016. https://
tectonic.com/trusted-computing/
[86] THE FREEBSD PROJECT. FreeBSD.org intrusion announced November 17th 2012. http://
www.freebsd.org/news/2012-compromise.html,
2012.
[87] THE PHP GROUP. php.net security notice. http://www.php.net/archive/
2011.php#id2011-03-19-1, 2011.
[88] THE PHP GROUP. A further update on php.net.
http://php.net/archive/2013.php#id2013-
10-24-2, 2013.
[89] THE UPDATE FRAMEWORK. Developer Tools.
https://github.com/theupdateframework/
tuf/blob/develop/tuf/README-developertools.md, 2014.
[90] THE UPDATE FRAMEWORK. Repository Management. https://github.com/
theupdateframework/tuf/blob/develop/tuf/
README.md, 2014.
[91] TRUSTED COMPUTING GROUP. Trusted
Platform Module (TPM), 2016. https:
//www.trustedcomputinggroup.org/workgroups/trusted-platform-module/.
[92] VAN DIJK, M., SARMENTA, L. F., O’DONNELL,
C. W., AND DEVADAS, S. Proof of freshness:
How to efficiently use an online single secure clock
to secure shared untrusted memory. Tech. Rep.
CSG Memo 496, Massachusetts Institute of Technology, 2006.
[93] VOSS, L. Newly Paranoid Maintainers.
http://blog.npmjs.org/post/80277229932/
newly-paranoid-maintainers, 2014.
[94] WELL-TYPED LLP. Improving Hackage security. http://www.well-typed.com/blog/2015/
04/improving-hackage-security/, 2015.
[95] YUMEREFENDI, A. R., AND CHASE, J. S. Strong
Accountability for Network Storage. Trans. Storage 3, 3 (Oct. 2007).

