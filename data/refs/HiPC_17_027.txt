[1] P. Feautrier, “Some efﬁcient solutions to the afﬁne scheduling problem:
one dimensional time,” Intl. Journal of Parallel Programming, vol. 21,
no. 5, pp. 313–348, october 1992.
[2] U. Bondhugula, A. Hartono, J. Ramanujam, and P. Sadayappan, “A
practical automatic polyhedral parallelizer and locality optimizer,” in
PLDI’08 ACM, Tucson, USA, Jun. 2008.
[3] L.-N. Pouchet, C. Bastoul, A. Cohen, and J. Cavazos, “Iterative optimization in the polyhedral model: Part II, multidimensional time,” in
PLDI’08. Tucson, Arizona: ACM Press, June 2008, pp. 90–100.
[4] M. Kong, R. Veras, K. Stock, F. Franchetti, L.-N. Pouchet, and
P. Sadayappan, “When polyhedral transformations meet SIMD code
generation,” in PLDI’13, Seattle, USA, Jun. 2013, pp. 127–138.
[5] S. Campanoni, G. Holloway, G.-Y. Wei, and D. M. Brooks, “HELIX-UP:
Relaxing program semantics to unleash parallelization,” in IEEE/ACM
CGO, San Francisco, USA, Feb. 2015, pp. 235–245.
[6] W. Baek and T. M. Chilimbi, “Green: A framework for supporting energy-conscious programming using controlled approximation,” in
PLDI’10, Toronto, Canada, Jun. 2010, pp. 198–209.
[7] S. Sidiroglou-Douskos, S. Misailovic, H. Hoffmann, and M. Rinard,
“Managing performance vs. accuracy trade-offs with loop perforation,”
in European Conference on Foundations of Software Engineering,
Szeged, Hungary, Sep. 2011, pp. 124–134.
[8] M. Samadi, J. Lee, D. A. Jamshidi, A. Hormati, and S. Mahlke,
“Sage: Self-tuning approximation for graphics engines,” in MICRO’13
IEEE/ACM Intl. Symp. on Microarchitecture, Davis, California, Dec.
2013, pp. 13–24.
[9] M. J. Berger and P. Colella, “Local adaptive mesh reﬁnement for shock
hydrodynamics,” J. Comput. Phys., vol. 82, no. 1, pp. 64–84, May 1989.
[10] K. Trifunovic, A. Cohen, D. Edelsohn, F. Li, T. Grosser, H. Jagasia,
R. Ladelsky, S. Pop, J. Sjödin, and R. Upadrasta, “Graphite two years
after: First lessons learned from real-world polyhedral compilation,” in
GCC Research Opportunities Workshop (GROW’10), Pisa, Italy, 2010.
[11] T. Grosser, H. Zheng, R. Aloor, A. Simbürger, A. Grösslinger, and L.N. Pouchet, “Polly-polyhedral optimization in llvm,” in International
Workshop on Polyhedral Compilation Techniques, France, 2011.
[12] L.-N. Pouchet, “Polybench: The polyhedral benchmark suite,” URL:
http://www. cs. ucla. edu/pouchet/software/polybench, 2012.
[13] M.-W. Benabderrahmane, L.-N. Pouchet, A. Cohen, and C. Bastoul,
“The polyhedral model is more widely applicable than you think,” in
ETAPS CC’10, ser. LNCS, Paphos, Cyprus, Mar. 2010, pp. 283–303.
[14] A. Venkat, M. Shantharam, M. Hall, and M. Mills Strout, “Non-afﬁne
extensions to polyhedral code generation,” in IEEE/ACM CGO’14,
Orlando, FL, USA, February 2014, pp. 185–194.
[15] S. Verdoolaege, “isl: An integer set library for the polyhedral model,”
in Mathematical Software - ICMS 2010, Third International Congress
on Mathematical Software, Kobe, Japan, Sep. 2010, pp. 299–302.
[16] C. Bastoul, “Code generation in the polyhedral model is easier than
you think,” in PACT’13 IEEE International Conference on Parallel
Architecture and Compilation Techniques, Juan-les-Pins, France, Sep.
2004, pp. 7–16.
[17] D. K. Wilde, “A library for doing polyhedral operations,” Parallel
Algorithms and Application, vol. 15, no. 3-4, pp. 137–166, 2000.
[18] J. Stam, “Real-time ﬂuid dynamics for games,” in Proceedings of the
Game Developer Conference, 2003, p. 25.
[19] A. J. Chorin, “Numerical solution of the Navier-Stokes equations,”
Mathematics of computation, vol. 22, no. 104, pp. 745–762, 1968.
[20] M. Schmitt, “ACR compiler and runtime.” [Online]. Available:
http://gauvain.u-strasbg.fr/%7Eschmitt/acr
[21] M. Gardner, “Mathematical games: The fantastic combinations of John
Conway’s new solitaire game ”life”,” Scientiﬁc American, vol. 223,
no. 4, pp. 120–123, 1970.
[22] J. A. Hartigan and M. A. Wong, “Algorithm as 136: A k-means
clustering algorithm,” Journal of the Royal Statistical Society. Series
C (Applied Statistics), vol. 28, no. 1, pp. 100–108, 1979.
[23] J. Meng, S. Chakradhar, and A. Raghunathan, “Best-effort parallel
execution framework for recognition and mining applications,” in
IPDPS’09. IEEE, 2009, pp. 1–12.
[24] A. F. Oskooi, D. Roundy, M. Ibanescu, P. Bermel, J. D. Joannopoulos, and S. G. Johnson, “Meep: A ﬂexible free-software package for
electromagnetic simulations by the FDTD method,” Computer Physics
Communications, vol. 181, no. 3, pp. 687–702, 2010.
[25] H. Hoffmann, S. Misailovic, S. Sidiroglou, A. Agarwal, and M. Rinard, “Using code perforation to improve performance, reduce energy
consumption, and respond to failures,” MIT, Tech. Rep. MIT-CSAILTR-2009-042, Sep. 2009.
[26] A. Sampson, W. Dietl, E. Fortuna, D. Gnanapragasam, L. Ceze, and
D. Grossman, “Enerj: Approximate data types for safe and general lowpower computation,” in PLDI, San Jose, California, USA, Jun. 2011,
pp. 164–174.
[27] S. Misailovic, M. Carbin, S. Achour, Z. Qi, and M. C. Rinard, “Chisel:
Reliability-and accuracy-aware optimization of approximate computational kernels,” in ACM SIGPLAN Notices, vol. 49, no. 10, 2014, pp.
309–328.
[28] S. Müller and Y. Stiriba, “Fully adaptive multiscale schemes for conservation laws employing locally varying time stepping,” J. of Scientiﬁc
Computing, vol. 30, no. 3, 2007.
[29] K. Brix, M. Silvia Sorana, S. Müller, and S. Gero, “Parallelisation
of multiscale-based grid adaptation using space-ﬁlling curves,” ESAIM,
vol. 29, pp. 108–129, Dec. 2009.