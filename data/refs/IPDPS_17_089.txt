[1] ARNAUTOV, S., TRACH, B., GREGOR, F., KNAUTH, T., MARTIN, A.,
PRIEBE, C., LIND, J., MUTHUKUMARAN, D., O’KEEFFE, D., STILL-
WELL, M. L., GOLTZSCHE, D., EYERS, D., KAPITZA, R., PIETZUCH,
P., AND FETZER, C. SCONE: Secure linux containers with Intel
SGX. In 12th USENIX Symposium on Operating Systems Design and
Implementation (OSDI’16) (2016).

[2] COSTAN, V., AND DEVADAS, S. Intel sgx explained. Cryptology ePrint

Archive, Report 2016/086, 2016. http://eprint.iacr.org/2016/086.

[3] DAVID, M. A single-enqueuer wait-free queue implementation. In Pro-
ceedings of the 18th International Conference on Distributed Computing
(Berlin, Heidelberg, 2004), pp. 132–143.

[4] FATOUROU, P., AND KALLIMANIS, N. D. A highly-efﬁcient wait-free
universal construction. In Proceedings of the Twenty-third Annual ACM
Symposium on Parallelism in Algorithms and Architectures (New York,
NY, USA, 2011), SPAA’11, pp. 325–334.

[5] FATOUROU, P., AND KALLIMANIS, N. D. Revisiting the combining
synchronization technique. In Proceedings of the 17th ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming (New
York, NY, USA, 2012), PPoPP’12, pp. 257–266.

[6] FSF. GCC 6.1 Manual. https://gcc.gnu.org/onlinedocs/gcc-6.1.0/gcc/.
[7] GIACOMONI, J. Fastforward for efﬁcient pipeline parallelism: A cache-
optimized concurrent lock-free queue. In In PPoPP08: Proceedings of
the The 13th ACM SIGPLAN Symposium on Principles and Practice of
Parallel Programming (2008).

[8] HERLIHY, M. Wait-free synchronization. ACM Transactions on
Programming Languages and Systems (TOPLAS) 13, 1 (Jan. 1991),
124–149.

[9] HERLIHY, M. The art of multiprocessor programming. In Proceedings
of the Twenty-ﬁfth Annual ACM Symposium on Principles of Distributed
Computing (New York, NY, USA, 2006), PODC’06, pp. 1–2.

[10] INTEL, C. Intel 64 and IA-32 Architectures Software Developers Manual;
Chapter 16: Programming with Intel Transacactional Synchronization
Extensions.

[11] LAMPORT, L. Specifying concurrent program modules. ACM Trans.

Program. Lang. Syst. 5, 2 (Apr. 1983), 190–222.

[12] LE, H. Q., GUTHRIE, G. L., WILLIAMS, D. E., MICHAEL, M. M.,
FREY, B. G., STARKE, W. J., MAY, C., ODAIRA, R., AND NAKAIKE,
T. Transactional memory support in the ibm power8 processor. IBM
Journal of Research and Development 59, 1 (Jan 2015), 8:1–8:14.

[13] LEE, P. P. C., BU, T., AND CHANDRANMENON, G. A lock-free, cache-
efﬁcient multi-core synchronization mechanism for line-rate network
trafﬁc monitoring. In 2010 IEEE International Symposium on Parallel
Distributed Processing (IPDPS) (April 2010), pp. 1–12.

[14] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A., ROZAS, C. V.,
SHAFI, H., SHANBHOGUE, V., AND SAVAGAONKAR, U. R. Innovative
instructions and software model for isolated execution. In Proceedings of
the 2nd International Workshop on Hardware and Architectural Support
for Security and Privacy (New York, NY, USA, 2013), HASP’13, pp. 10:1–
10:1.

[15] MICHAEL, M. M., AND SCOTT, M. L. Simple, fast, and practical non-
blocking and blocking concurrent queue algorithms.
In Proceedings
of the Fifteenth Annual ACM Symposium on Principles of Distributed
Computing (New York, NY, USA, 1996), PODC’96, pp. 267–275.

[16] MITROPOULOU, K., PORPODAS, V., ZHANG, X., AND JONES, T. M.
Lynx: Using os and hardware support for fast ﬁne-grained inter-core
communication. In Proceedings of the 2016 International Conference on
Supercomputing (New York, NY, USA, 2016), ICS’16, pp. 18:1–18:12.
[17] MORRISON, A., AND AFEK, Y. Fast concurrent queues for x86 processors.
In Proceedings of the 18th ACM SIGPLAN Symposium on Principles
and Practice of Parallel Programming (New York, NY, USA, 2013),
PPoPP’13, pp. 103–112.

[18] POP, A., AND COHEN, A. A stream-computing extension to openmp. In
Proceedings of the 6th International Conference on High Performance
and Embedded Architectures and Compilers (New York, NY, USA, 2011),
HiPEAC’11, pp. 5–14.

[19] PREUD’HOMME, T., SOPENA, J., THOMAS, G., AND FOLLIOT, B.
An improvement of openmp pipeline parallelism with the batchqueue
algorithm. In 2012 IEEE 18th International Conference on Parallel and
Distributed Systems (ICPADS) (Dec 2012), pp. 348–355.

[20] WANG, J., ZHANG, K., TANG, X., AND HUA, B. B-queue: Efﬁcient and
International

practical queuing for fast core-to-core communication.
Journal of Parallel Programming 41, 1 (2013), 137–159.

[21] YANG, C., AND MELLOR-CRUMMEY, J. A wait-free queue as fast as
fetch-and-add. In Proceedings of the 21st ACM SIGPLAN Symposium
on Principles and Practice of Parallel Programming (New York, NY,
USA, 2016), PPoPP’16, pp. 16:1–16:13.
