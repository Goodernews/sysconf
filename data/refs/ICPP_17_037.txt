[1] W. W. Hwu, GPU Computing Gems Emerald Edition.
Morgan
Kaufmann, 2011.
[2] Y. Takeuchi, D. Takafuji, Y. Ito, and K. Nakano, “ASCII art generation
using the local exhaustive search on the GPU,” in Proc. of International
Symposium on Computing and Networking, Dec. 2013, pp. 194–200.
[3] H. Kouge, Y. Ito, and K. Nakano, “A GPU implementation of clippingfree halftoning using the direct binary search,” in Proc. of International
Conference on Algorithms and Architectures for Parallel Processing
(LNCS 8630), Aug. 2014, pp. 57–70.
[4] NVIDIA Corporation, “NVIDIA CUDA C best practice guide version
3.1,” 2010.
[5] ——, “NVIDIA CUDA C programming guide version 7.0,” Mar 2015.
[6] D. Man, K. Uda, H. Ueyama, Y. Ito, and K. Nakano, “Implementations
of a parallel algorithm for computing Euclidean distance map in multicore processors and GPUs,” International Journal of Networking and
Computing, vol. 1, no. 2, pp. 260–276, July 2011.
[7] H. Breu, J. Gil, D. Kirkpatrick, and M. Werman, “Linear time Euclidean
distance transform algorithms,” IEEE Trans. Pattern Analysis and Machine Intelligence, vol. 17, no. 5, pp. 529–533, May 1995.
[8] L. Chen, “Optimal algorithm for complete Euclidean distance transform,” Chinese J. Computers, vol. 18, no. 8, pp. 611–616, 1995.
[9] L. Chen and H. Chuang, “A fast algorithm for Euclidean distance maps
of a 2-d binary image,” Information Processing Letters, vol. 51, pp.
25–29, 1994.
[10] T. Hirata, “A unified linear-time algorithm for computing distance maps,”
Information Processing Letters, vol. 58, pp. 129–133, 1996.
[11] A. Fujiwara, T. Masuzawa, and H. Fujiwara, “An optimal parallel
algorithm for the Euclidean distance maps of 2-d binary images,”
Information Processing Letters, vol. 54, pp. 295–300, 1995.
[12] T. Hayashi, K. Nakano, and S. Olariu, “Optimal parallel algorithm
for finding proximate points, with applications,” IEEE Transactions
on Parallel and Distributed Systems, vol. 9, no. 12, pp. 1153–1166,
December 1998.
[13] S. Pavel and S. Akl, “Efficient algorithms for the Euclidean distance
transform,” Parallel Processing Letters, vol. 5, no. 2, pp. 205–212, 1995.
[14] L. K and Z. S. Q, Parallel Computing Using Optical Interconnections.
Boston, USA: Kluwer Academic Publishers, 1998.
[15] L. Chen, P. Yi, C. Yixin, and X. Xiaohua, “Efficient parallel algorithms
for Euclidean distance transform,” The Computer Journal, vol. 47, no. 6,
pp. 694–700, 2004.
[16] Y.-H. Lee, S.-J. Horng, T.-W. Kao, F.-S. Jaung, Y.-J. Chen, and H.R. Tsai, “Parallel computation of exact Euclidean distance transform,”
Parallel Computing, vol. 22, no. 2, pp. 311–325, 1996.
[17] G. Rong and T.-S. Tan, “Jump flooding in GPU with applications to
Voronoi diagram and distance transform,” in Proc. of Symposium on
Interactive 3D graphics and games, March 2006, pp. 109 – 116.
[18] J. Schneider, M. Kraus, and R. Westermann, “GPU-based euclidean distance transforms and their application to volume rendering,” Computer
Vision, Imaging and Computer Graphics. Theory and Applications, pp.
215–228, 2010.
[19] D. Man, K. Uda, Y. Ito, and K. Nakano, “A GPU implementation of
computing Euclidean distance map with efficient memory access,” in
Proc. of International Conference on Networking and Computing, Dec.
2011, pp. 68–76.
[20] ——, “Accelerating computation of Euclidean distance map using the
GPU with efficient memory access,” Journal of Parallel, Emergent and
Distributed Systems, vol. 28, no. 5, pp. 383–406, 2013.
[21] T.-T. Cao, K. Tang, A. Mohamed, and T.-S. Tan, “Parallel banding
algorithm to compute exact distance transform with the GPU,” in The
Proc. of ACM SIGGRAPH Symposium on Interactive 3D Graphics and
Games, Feb. 2010, pp. 83–90.
[22] K. Nakano, “Simple memory machine models for GPUs,” International
Journal of Parallel, Emergent and Distributed Systems, vol. 29, no. 1,
pp. 17–37, 2014.