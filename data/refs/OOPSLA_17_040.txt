[1] Peter Aczel. 1977. An Introduction to Inductive Definitions. In Handbook of Mathematical logic, Jon Barwise (Ed.). North

Holland, 739-782.



[2] Mads Sig Ager. 2004. From Natural Semantics to Abstract Machines. In Logic Based Program Synthesis and Transformation LOPSTR 2004, Revised Selected Papers (Lecture Notes in Computer Science), Sandro Etalle (Ed.), Vol. 3573. Springer, 245-261.

DOI: http://dx.doi.org/10.1007/11506676_16



[3] Nada Amin and Tiark Rompf. 2017. Type Soundness Proofs with Definitional Interpreters. In ACM Symp. on Principles

of Programming Languages 2017, Giuseppe Castagna and Andrew D. Gordon (Eds.). ACM Press, 666-679. DOI: http:

//dx.doi.org/10.1145/3009837



[4] Davide Ancona. 2011. Coinductive Big-Step Operational Semantics for Type Soundness of Java-like Languages. In FIfJP’11

- Formal Techniques for Java-like Programs, Stephen N. Freund (Ed.). ACM Press, 5:1—5:6. DOI : http://dx.doi.org/10.1145/

2076674.2076679



[5] Davide Ancona. 2012. Soundness of Object-Oriented Languages with Coinductive Big-Step Semantics. In ECOOP’12 Object-Oriented Programming (Lecture Notes in Computer Science), James Noble (Ed.), Vol. 7313. Springer, 459-483. DOL:

http://dx.doi.org/10.1007/978-3-642-31057-7_21



[6] Davide Ancona. 2014. How to Prove Type Soundness of Java-like Languages without Forgoing Big-Step Semantics. In

FTf¥P’14 - Formal Techniques for Java-like Programs, David J. Pearce (Ed.). ACM Press, 1:1—1:6. DOI : http://dx.doi.org/10.

1145/263563 1.2635846



[7] Davide Ancona and Andrea Corradi. 2014. Sound and Complete Subtyping between Coinductive Types for Object-Oriented

Languages. In ECOOP’14 - Object-Oriented Programming (Lecture Notes in Computer Science), Richard Jones (Ed.), Vol. 8586.

Springer, 282-307. DOI :http://dx.doi.org/10.1007/978-3-662-44202-9_12



[8] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 81. Publication date: October 2017.

81:26 Davide Ancona, Francesco Dagnino, and Elena Zucca



[9] Davide Ancona, Francesco Dagnino, and Elena Zucca. 2017. Generalizing Inference Systems by Coaxioms. In ESOP 2017 European Symposium on Programming (Lecture Notes in Computer Science), Hongseok Yang (Ed.), Vol. 10201. Springer,

29-55. DOL: http://dx.doi.org/10.1007/978-3-662-54434-1_ 2



[10] Arthur Charguéraud. 2013. Pretty-Big-Step Semantics. In ESOP 2013 - European Symposium on Programming (Lecture

Notes in Computer Science), Matthias Felleisen and Philippa Gardner (Eds.), Vol. 7792. Springer, 41-60. DOI: http:

//dx.doi.org/10.1007/978-3-642-37036-6_3



[11] Patrick Cousot and Radhia Cousot. 1992. Inductive Definitions, Semantics and Abstract Interpretations. In ACM Symp. on

Principles of Programming Languages 1992, Ravi Sethi (Ed.). ACM Press, 83-94. DOL: http://dx.doi.org/10.1145/143165.

143184



[12] Patrick Cousot and Radhia Cousot. 2009. Bi-inductive structural semantics. Information and Computation 207, 2 (2009),

258-283. DOI: http://dx.doi.org/10.1016/j.ic.2008.03.025



[13] Nils Anders Danielsson. 2012. Operational semantics using the partiality monad. In Intl. Conf: on Functional Programming 2012,

Peter Thiemann and Robby Bruce Findler (Eds.). ACM Press, 127-138. DOI : http://dx.doi.org/10.1145/2364527.2364546



[14] Sophia Drossopoulou, Susan Eisenbach, and Sarfraz Khurshid. 1999. Is the Java Type System Sound? Theory and Practice of

Object Systems 5, 1 (1999), 3-24.



[15] Erik Ernst, Klaus Ostermann, and William R. Cook. 2006. A virtual class calculus. In ACM Symp. on Principles of Programming

Languages 2006, J. Gregory Morrisett and Simon L. Peyton Jones (Eds.). ACM Press, 270-282. DOL: http://dx.doi.org/10.

1145/1111037.1111062



[16] Atsushi Igarashi, Benjamin C. Pierce, and Philip Wadler. 2001. Featherweight Java: a minimal core calculus for Java and GJ.

ACM Transactions on Programming Languages and Systems 23, 3 (2001), 396-450. DOI: http://dx.doi-org/10.1145/503502.

503505



[17] Jaroslaw D. M. Kusmierek and Viviana Bono. 2010. Big-step Operational Semantics Revisited. Fundamenta Informaticae 103,

1-4 (2010), 137-172, DOT: http://dx.doi.org/10.3233/FI- 2010-323



[18] Xavier Leroy and Hervé Grall. 2009. Coinductive big-step operational semantics. Information and Computation 207, 2 (2009),

284-304, DOI: http://dx.doi.org/10.1016/j.ic.2007.12.004



[19] Robin Milner. 1978. A Theory of Type Polymorphism in Programming. }. Comput. Syst. Sci. 17, 3 (1978), 348-375. DOI:

http://dx.doi.org/10.1016/0022-0000(78)90014-4



[20] Robin Milner and Mads Tofte. 1991. Co-Induction in Relational Semantics. Theoretical Computer Science 87, 1 (1991), 209-220.

DOL: http://dx.doi.org/10.1016/0304-3975(91)90033-X



[21] Keiko Nakata and Tarmo Uustalu. 2009. Trace-Based Coinductive Operational Semantics for While. In Theorem Proving

in Higher Order Logics - TPHOLs 2009 (Lecture Notes in Computer Science), Stefan Berghofer, Tobias Nipkow, Christian

Urban, and Makarius Wenzel (Eds.), Vol. 5674. Springer, 375-390. DOI : http://dx.doi.org/10.1007/978-3-642-03359-9_26



[22] Keiko Nakata and Tarmo Uustalu. 2010a. A Hoare Logic for the Coinductive Trace-Based Big-Step Semantics of While. In

ESOP 2010 - European Symposium on Programming (Lecture Notes in Computer Science), Andrew D. Gordon (Ed.), Vol. 6012.

Springer, 488-506. DOI: http://dx.doi.org/10.1007/978-3-642-11957-6_26



[23] Keiko Nakata and Tarmo Uustalu. 2010b. Resumptions, Weak Bisimilarity and Big-Step Semantics for While with Interactive

I/O: An Exercise in Mixed Induction-Coinduction. In SOS’10 - Structural Operational Semantics (Electronic Proceedings in

Theoretical Computer Science), Luca Aceto and Pawel Sobocinski (Eds.), Vol. 32. 57-75. DOL: http://dx.doi.org/10.4204/

EPTCS.32.5



[24] Johan Ostlund and Tobias Wrigstad. 2010. Welterweight Java. In Objects, Models, Components, Patterns, TOOLS 2010 (Lecture

Notes in Computer Science), Jan Vitek (Ed.), Vol. 6141. Springer, 97-116. DOI: http://dx.doi.org/10.1007/978-3-642-13953-6_

6



[25] Scott Owens, Magnus O. Myreen, Ramana Kumar, and Yong Kiam Tan. 2016. Functional Big-Step Semantics. In ESOP 2016 European Symposium on Programming (Lecture Notes in Computer Science), Peter Thiemann (Ed.), Vol. 9632. Springer,

589-615. DOI: http://dx.doi.org/10.1007/978-3-662- 49498-1_23



[26] Andrei Stefanescu, Daejun Park, Shijiao Yuwen, Yilong Li, and Grigore Rosu. 2016. Semantics-based program verifiers for all

languages. In ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages and Applications (OOPSLA

2016), Eelco Visser and Yannis Smaragdakis (Eds.). ACM Press, 74-91. DOI : http://dx.doi.org/10.1145/2983990.2984027



[27] Allen Stoughton. 1997. An Operational Semantics Framework Supporting the Incremental Construction of Derivation Trees.

Electronic Notes in Theoretical Computer Science 10 (1997), 122-133. DOI :http://dx.doi.org/10.1016/S1571-0661(05)80693-0



[28] Andrew K. Wright and Matthias Felleisen. 1994. A Syntactic Approach to Type Soundness. Information and Computation

115, 1 (1994), 38-94, DOT :http://dx.doi.org/10.1006/inco.1994.1093



[29] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 81. Publication date: October 2017.
