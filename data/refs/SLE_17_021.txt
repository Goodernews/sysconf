[1] Alfred V. Aho, Stephen C. Johnson, and Jeffrey D. Ullman. 1973. De-
terministic Parsing of Ambiguous Grammars. In Conference Record
of the First Symposium on Principles of Programming Languages,
Patrick C. Fischer and Jeffrey D. Ullman (Eds.). ACM Press, 1–21.
https://doi.org/10.1145/512927.512928

[2] Miltiadis Allamanis and Charles A. Sutton. 2014. Mining Idioms from
Source Code. In Proceedings of the 22nd Symposium on the Foundations
of Software Engineering (FSE). ACM, 472–483. https://doi.org/10.1145/
2635868.2635901

[3] Diogo Almeida, José Creissac Campos, João Saraiva, and João Carlos
Silva. 2015. Towards a Catalog of Usability Smells. In Proceedings of
the 30th Annual ACM Symposium on Applied Computing (SAC). ACM,
175–181. https://doi.org/10.1145/2695664.2695670

[4] Tiago Laureano Alves and Joost Visser. 2008. A Case Study in Gram-
mar Engineering. In Revised Selected Papers of the First International
Conference on Software Language Engineering (SLE) (LNCS), Dragan
Gašević, Ralf Lämmel, and Eric Van Wyk (Eds.), Vol. 5452. Springer,
285–304. https://doi.org/10.1007/978-3-642-00434-6_18

[5] John W. Backus. 1960. The Syntax and Semantics of the Proposed
International Algebraic Language of the Zurich ACM-GAMM Con-
ference. In Proceedings of the International Conference on Information
Processing, S. de Picciotto (Ed.). Unesco, Paris, 125–131.

[6] Bas Basten, Jeroen van den Bos, Mark Hills, Paul Klint, Arnold
Lankamp, Bert Lisser, Atze van der Ploeg, Tijs van der Storm, and
Jurgen J. Vinju. 2015. Modular Language Implementation in Rascal —
Experience Report. Science of Computer Programming 114 (2015), 7–19.
https://doi.org/10.1016/j.scico.2015.11.003

[7] Bas Basten and Jurgen J. Vinju. 2011. Parse Forest Diagnostics with
Dr. Ambiguity. In Revised Selected Papers of the Fourth International
Conference on Software Language Engineering (LNCS), Anthony M.
Sloane and Uwe Aßmann (Eds.), Vol. 6940. Springer, 283–302. https:
//doi.org/10.1007/978-3-642-28830-2_16

[8] Feras Batarseh. 2010. Java Nano Patterns: a Set of Reusable Objects. In
Proceedings of the 48th Annual Southeast Regional Conference (SE’10).
ACM, Article 60, 4 pages.

[9] Gal Beniamini, Sarah Gingichashvili, Alon Klein Orbach, and Dror G.
Feitelson. 2017. Meaningful Identifier Names: The Case of Single-
letter Variables. In Proceedings of the 25th International Conference on
Program Comprehension (ICPC’17). IEEE Press, 45–54. https://doi.org/
10.1109/ICPC.2017.18

[10] Sergey Bratus and Meredith L. Patterson. 2012. Shotgun Parsers in the

Cross-hairs. In Brucon. http://langsec.org.

[11] James R. Cordy. 2006. The TXL Source Transformation Language.
Science of Computer Programming 61, 3 (2006), 190–210. https://doi.
org/10.1016/j.scico.2006.04.002

[12] Merijn de Jonge and Ramin Monajemi. 2001. Cost-Effective Main-
tenance Tools for Proprietary Languages. In Proceedings of the 17th
International Conference on Software Maintenance (ICSM). IEEE Com-
puter Society, 240–249.

[13] Merijn de Jonge and Joost Visser. 2000. Grammars as Contracts. In
Revised Papers of the Second International Symposium on Generative and
Component-Based Software Engineering (LNCS), Vol. 2177. Springer-
Verlag, 85–99. https://doi.org/10.1007/3-540-44815-2_7

[14] Thomas Roy Dean, James R. Cordy, Andrew J. Malton, and Kevin A.
Schneider. 2002. Grammar Programming in TXL. In Proceedings of the
Second International Workshop on Source Code Analysis and Manipula-
tion (SCAM). IEEE Computer Society, 93–102. https://doi.org/10.1109/
SCAM.2002.1134109

[15] Sebastian Erdweg, Tijs van der Storm, Markus Völter, Meinte Boersma,
Remi Bosman, William R. Cook, Albert Gerritsen, Angelo Hulshout,
Steven Kelly, Alex Loh, Gabriël D. P. Konat, Pedro J. Molina, Martin
Palatnik, Risto Pohjonen, Eugen Schindler, Klemens Schindler, Ric-
cardo Solmi, Vlad A. Vergu, Eelco Visser, Kevin van der Vlist, Guido

Wachsmuth, and Jimi van der Woning. 2013. The State of the Art
in Language Workbenches — Conclusions from the Language Work-
bench Challenge. In Proceedings of the Sixth International Conference
on Software Language Engineering (SLE’13) (LNCS), Martin Erwig,
Richard F. Paige, and Eric Van Wyk (Eds.), Vol. 8225. Springer, 197–217.
https://doi.org/10.1007/978-3-319-02654-1_11

[16] Jean-Marie Favre. 1996. Preprocessors from an Abstract Point of
View. In Proceedings of the 12th International Conference on Software
Maintenance. IEEE Computer Society, 329–None.

[17] Martin Fowler, Kent Beck, John Brant, William Opdyke, and Don
Roberts. 1999. Refactoring: Improving the Design of Existing Code.
Addison-Wesley.

[18] Joshua Garcia, Daniel Popescu, George Edwards, and Nenad Med-
vidović. 2009. Toward a Catalogue of Architectural Bad Smells.
In Proceedings of the Fifth International Conference on Quality
of Software Architectures: Architectures for Adaptive Software Sys-
tems (LNCS), Vol. 5581. Springer, 146–162. https://doi.org/10.1007/
978-3-642-02351-4_10

[19] Joseph Yossi Gil and Itay Maman. 2005. Micro Patterns in Java Code.
In Proceedings of the 20th Annual Conference on Object-Oriented Pro-
gramming, Systems, Languages, and Applications, Ralph E. Johnson
and Richard P. Gabriel (Eds.). ACM, 97–116. https://doi.org/10.1145/
1094811.1094819

[20] Dick Grune and Ceriel J. H. Jacobs. 2008. Parsing Techniques — A
Practical Guide (second ed.). Addison-Wesley. https://dickgrune.com/
Books/PTAPG_2nd_Edition/

[21] Felienne Hermans, Martin Pinzger, and Arie van Deursen. 2012. De-
tecting Code Smells in Spreadsheet Formulas. In Proceedings of the
28th International Conference on Software Maintenance. IEEE Computer
Society, 409–418. https://doi.org/10.1109/ICSM.2012.6405300

[22] Paul Klint, Ralf Lämmel, and Chris Verhoef. 2005. Toward an Engi-
neering Discipline for Grammarware. ACM Transactions on Software
Engineering Methodology (ToSEM) 14, 3 (2005), 331–380.

[23] Paul Klint, Davy Landman, Mark Hills, Jurgen Vinju, Anastasia Iz-
maylova, Tijs van der Storm, Atze van der Ploeg, Bert Lisser, Ali
Afroozeh, Anya Helene Bagge, Vadim Zaytsev, and Ashim Shahi. 2013.
Rascal 0.6.x. http://www.rascal-mpl.org. (2013).

[24] Paul Klint, Tijs van der Storm, and Jurgen J. Vinju. 2009. EASY Meta-
programming with Rascal. In Revised Papers of the Third International
Summer School on Generative and Transformational Techniques in Soft-
ware Engineering (GTTSE’09) (LNCS), João M. Fernandes, Ralf Lämmel,
Joost Visser, and João Saraiva (Eds.), Vol. 6491. Springer, 222–289.
https://doi.org/10.1007/978-3-642-18023-1_6

[25] Paul Klint, Tijs van der Storm, and Jurgen J. Vinju. 2009. RASCAL: A
Domain Specific Language for Source Code Analysis and Manipulation.
In Proceedings of the Ninth International Working Conference on Source
Code Analysis and Manipulation (SCAM’09). IEEE Computer Society,
168–177. https://doi.org/10.1109/SCAM.2009.28

[26] Jan Kort, Ralf Lämmel, and Chris Verhoef. 2002. The Grammar De-
ployment Kit — System Demonstration. Electronic Notes in Theoret-
ical Computer Science 65, 3 (2002), 117–123. https://doi.org/10.1016/
S1571-0661(04)80430-4

[27] Ivan Kurtev, Jean Bézivin, and Mehmet Akşit. 2002. Technological
Spaces: an Initial Appraisal. In Proceedings of CoopIS, DOA’2002,
Industrial
https://research.utwente.nl/en/publications/
technological-spaces-an-initial-appraisal

[28] Ralf Lämmel and Chris Verhoef. 2001. Cracking the 500-Language
Problem. IEEE Software 18 (2001), 78–88. Issue 6. https://doi.org/10.
1109/52.965809

[29] Ralf Lämmel and Chris Verhoef. 2001. Semi-automatic Grammar Recov-
ery. Software — Practice & Experience 31 (December 2001), 1395–1438.
Issue 15. https://doi.org/10.1002/spe.423

[30] Ralf Lämmel and Vadim Zaytsev. 2009. An Introduction to Grammar
Convergence. In Proceedings of the Seventh International Conference on

track.

Towards a Taxonomy of Grammar Smells

SLE’17, October 23–24, 2017, Vancouver, Canada

Integrated Formal Methods (iFM 2009) (LNCS), Michael Leuschel and
Heike Wehrheim (Eds.), Vol. 5423. Springer-Verlag, Berlin, Heidelberg,
246–260. https://doi.org/10.1007/978-3-642-00255-7_17

[31] Ralf Lämmel and Vadim Zaytsev. 2011. Recovering Grammar Relation-
ships for the Java Language Specification. Software Quality Journal
(SQJ); Section on Source Code Analysis and Manipulation 19, 2 (March
2011), 333–378. https://doi.org/10.1007/s11219-010-9116-5

[32] Ralf Lämmel. 2001. Grammar Adaptation. In Proceedings of the Inter-
national Symposium of Formal Methods Europe: Formal Methods for
Increasing Software Productivity (FME) (LNCS), Vol. 2021. Springer,
550–570. https://doi.org/10.1007/3-540-45251-6_32

[33] Ralf Lämmel. 2005. The Amsterdam Toolkit for Language Archaeology.
Electronic Notes in Theoretical Computer Science 137, 3 (2005), 43–55.
https://doi.org/10.1016/j.entcs.2005.07.004

[34] Ralf Lämmel and Guido Wachsmuth. 2001. Transformation of SDF
syntax definitions in the ASF+SDF Meta-Environment. Electronic Notes
in Theoretical Computer Science 44, 2 (2001), 9–33. https://doi.org/10.
1016/S1571-0661(04)80918-6

[35] Douglas Martin and James R. Cordy. 2011. Analyzing Web Ser-
vice Similarity Using Contextual Clones. In Proceedings of the Fifth
International Workshop on Software Clones (IWSC’11). ACM, 41–46.
https://doi.org/10.1145/1985404.1985412

[36] Michael C. McCord. 1985. Modular Logic Grammars. In Proceedings of
the 23rd Annual Meeting on Association for Computational Linguistics
(ACL). Association for Computational Linguistics, 104–117. https:
//doi.org/10.3115/981210.981223

[37] Tung Thanh Nguyen, Hoan Anh Nguyen, Nam H. Pham, Jafar M.
Al-Kofahi, and Tien N. Nguyen. 2009. Graph-based mining of multi-
ple object usage patterns. In Proceedings of the Seventh joint meet-
ing of the 12th European Software Engineering Conference and the
17th International Symposium on Foundations of Software Engineer-
ing, Hans van Vliet and Valérie Issarny (Eds.). ACM, 383–392. https:
//doi.org/10.1145/1595696.1595767

[38] Alexander Okhotin. 2013. Conjunctive and Boolean Grammars: The
True General Case of the Context-Free Grammars. Computer Science
Review 9 (2013), 27–59. https://doi.org/10.1016/j.cosrev.2013.06.001

[39] Aniket Potdar and Emad Shihab. 2014. An Exploratory Study on
Self-Admitted Technical Debt. In Proceedings of the 30th International
Conference on Software Maintenance and Evolution (ICSME). IEEE, 91–
100. https://doi.org/10.1109/ICSME.2014.31

[40] James F. Power and Brian A. Malloy. 2000. Metric-Based Analysis
of Context-Free Grammars. In Proceedings of the Eighth International
Workshop on Program Comprehension. IEEE Computer Society, 171–
178. https://doi.org/10.1109/WPC.2000.852491

[41] James F. Power and Brian A. Malloy. 2004. A Metrics Suite for
Grammar-based Software. Journal of Software Maintenance and Evolu-
tion 16 (Nov 2004), 405–426. Issue 6. https://doi.org/10.1002/smr.v16:6
[42] Juergen Rilling and Tuomas Klemola. 2003. Identifying Comprehen-
sion Bottlenecks Using Program Slicing and Cognitive Complexity
Metric. In Proceedings of the 11th International Workshop on Program
Comprehension. IEEE Computer Society, 115–124. https://doi.org/10.
1109/WPC.2003.1199195

[43] Chanchal Kumar Roy, James R. Cordy, and Rainer Koschke. 2009.
Comparison and Evaluation of Code Clone Detection Techniques
and Tools: A Qualitative Approach.
SCP 74, 7 (2009), 470–495.
https://doi.org/10.1016/j.scico.2009.02.007

[44] Len Sassaman, Meredith L. Patterson, and Sergey Bratus. 2012. A
Patch for Postel’s Robustness Principle. IEEE Security and Privacy 10,
2 (March 2012), 87–91. https://doi.org/10.1109/MSP.2012.31

[45] M. P. A. Sellink and Chris Verhoef. 2000. Development, Assess-
ment, and Reengineering of Language Descriptions. In Proceedings
of the Fourth Conference on Software Maintenance and Reengineering.
IEEE Computer Society, 151–160. https://doi.org/10.1109/CSMR.2000.
827323

[46] Tushar Sharma. 2017. A Taxonomy of Software Smells. http://

tusharma.in/smells/. (2017).

[47] Mats Stijlaart. 2017. Towards a Catalogue of Grammar Smells. Master’s

thesis. Universiteit van Amsterdam, Amsterdam, The Netherlands.

[48] Girish Suryanarayana, Ganesh Samarthyam, and Tushar Sharma. 2014.
Refactoring for Software Design Smells: Managing Technical Debt. Mor-
gan Kaufmann.

[49] Laurence Tratt. 2007. Evolving a DSL Implementation. In Revised
Papers of the Second International Summer School on Generative and
Transformational Techniques in Software Engineering (LNCS), Ralf Läm-
mel, Joost Visser, and João Saraiva (Eds.), Vol. 5235. Springer, 425–441.
https://doi.org/10.1007/978-3-540-88643-3_11

[50] Mark van den Brand, M. P. A. Sellink, and Chris Verhoef. 1997. Obtain-
ing a COBOL Grammar from Legacy Code for Reengineering Purposes.
In Proceedings of Second International Workshop on the Theory and Prac-
tice of Algebraic Specifications (Electronic Workshops in Computing),
M. P. A. Sellink (Ed.). Springer.

[51] Mark van den Brand, M. P. A. Sellink, and Chris Verhoef. 1998. Current
Parsing Techniques in Software Renovation Considered Harmful. In
Proceedings of the Sixth International Workshop on Program Comprehen-
sion. IEEE Computer Society, 108–117. https://doi.org/10.1109/WPC.
1998.693325

[52] Jurgen J. Vinju and Michael W. Godfrey. 2012. What Does Control
Flow Really Look Like? Eyeballing the Cyclomatic Complexity Metric.
In Proceedings of the 12th International Working Conference on Source
Code Analysis and Manipulation. IEEE Computer Society, 154–163.
https://doi.org/10.1109/SCAM.2012.17

[53] Eelco Visser. 2007. WebDSL: A Case Study in Domain-Specific Lan-
guage Engineering. In Revised Papers of the Second International Sum-
mer School on Generative and Transformational Techniques in Software
Engineering (Lecture Notes in Computer Science), Ralf Lämmel, Joost
Visser, and João Saraiva (Eds.), Vol. 5235. Springer International Pub-
lishing, 291–373. https://doi.org/10.1007/978-3-540-88643-3_7

[54] Niklaus Wirth. 1977. What Can We Do about the Unnecessary Diver-
sity of Notation for Syntactic Definitions? Communications of the ACM
20 (Nov. 1977), 822–823. Issue 11. https://doi.org/10.1145/359863.359883
[55] Vadim Zaytsev. 2005. Correct C♯ Grammar too Sharp for ISO. In Par-
ticipants Workshop, Part II of the Pre-proceedings of the International
Summer School on Generative and Transformational Techniques in Soft-
ware Engineering (GTTSE 2005). Technical Report, TR-CCTC/DI-36,
Universidade do Minho, Braga, Portugal, 154–155. Extended abstract.
[56] Vadim Zaytsev. 2011. MediaWiki Grammar Recovery. Computing
Research Repository (CoRR) 1107.4661 (July 2011), 1–47. http://arxiv.
org/abs/1107.4661

[57] Vadim Zaytsev. 2012. BNF WAS HERE: What Have We Done About
the Unnecessary Diversity of Notation for Syntactic Definitions. In
Programming Languages Track, Volume II of the Proceedings of the 27th
ACM Symposium on Applied Computing (SAC 2012), Sascha Ossowski
and Paola Lecca (Eds.). ACM, Riva del Garda, Trento, Italy, 1910–1915.
https://doi.org/10.1145/2245276.2232090

[58] Vadim Zaytsev. 2012. Notation-Parametric Grammar Recovery. In
Post-proceedings of the 12th International Workshop on Language De-
scriptions, Tools, and Applications (LDTA 2012), Anthony Sloane and
Suzana Andova (Eds.). ACM Digital Library. https://doi.org/10.1145/
2427048.2427057

[59] Vadim Zaytsev. 2012. The Grammar Hammer of 2012. Computing
Research Repository (CoRR) 1212.4446 (Dec. 2012), 1–32. http://arxiv.
org/abs/1212.4446

[60] Vadim Zaytsev. 2013. Micropatterns in Grammars. In Proceedings of
the Sixth International Conference on Software Language Engineering
(SLE 2013) (LNCS), Martin Erwig, Richard F. Paige, and Eric Van Wyk
(Eds.), Vol. 8225. Springer, Switzerland, 117–136. https://doi.org/10.
1007/978-3-319-02654-1_7

SLE’17, October 23–24, 2017, Vancouver, Canada

Mats Stijlaart and Vadim Zaytsev

[61] Vadim Zaytsev. 2014. Formal Foundations for Semi-parsing. In Pro-
ceedings of the Software Evolution Week (IEEE Conference on Software
Maintenance, Reengineering and Reverse Engineering), Early Research
Achievements Track (CSMR-WCRE 2014 ERA), Serge Demeyer, Dave
Binkley, and Filippo Ricca (Eds.). IEEE, 313–317. https://doi.org/10.
1109/CSMR-WCRE.2014.6747184

[62] Vadim Zaytsev. 2014. Software Language Engineering by Intentional
Rewriting. Electronic Communications of the EASST; Software Qual-
ity and Maintainability 65 (March 2014). https://doi.org/10.14279/tuj.
eceasst.0.903

[63] Vadim Zaytsev. 2015. Grammar Maturity Model. In Post-proceedings
of the Ninth Workshop on Models and Evolution (ME’14) (CEUR Work-
shop Proceedings), Alfonso Pierantonio, Bernhard Schätz, and Dalila
Tamzalit (Eds.), Vol. 1331. CEUR-WS.org, 42–51. http://ceur-ws.org/
Vol-1331/p5.pdf

[64] Vadim Zaytsev. 2015. Grammar Zoo: A Corpus of Experimental Gram-
marware. Fifth Special issue on Experimental Software and Toolkits of
Science of Computer Programming (SCP EST5) 98 (Feb. 2015), 28–51.
https://doi.org/10.1016/j.scico.2014.07.010

[65] Vadim Zaytsev. 2015. Guided Grammar Convergence. In Poster pro-
ceedings of the Sixth International Conference on Software Language

Engineering (SLE 2013). https://arxiv.org/abs/1503.08476

[66] Vadim Zaytsev. 2015. Taxonomy of Flexible Linguistic Commit-
ments. In Workshop on Flexible Model-Driven Engineering (FlexMDE)
(CEUR Workshop Proceedings), Davide Di Ruscio, Juan De Lara, and
Alfonso Pierantonio (Eds.), Vol. 1470. CEUR-WS.org. http://ceur-ws.
org/Vol-1470/FlexMDE15_paper_7.pdf

[67] V. Zaytsev et al. 2013. GrammarLab. Software. http://grammarware.

github.io/lab. (2013).

[68] Vadim Zaytsev and Anya Helene Bagge. 2014. Parsing in a Broad
Sense. In Proceedings of the 17th International Conference on Model
Driven Engineering Languages and Systems (MoDELS 2014) (LNCS),
Jürgen Dingel, Wolfram Schulte, Isidro Ramos, Silvia Abrahão, and
Emilio Insfran (Eds.), Vol. 8767. Springer, 50–67. https://doi.org/10.
1007/978-3-319-11653-2_4

[69] Hao Zhong, Tao Xie, Lu Zhang, Jian Pei, and Hong Mei. 2009. MAPO:
Mining and Recommending API Usage Patterns. In Proceedings of the
23rd European Conference on Object-Oriented Programming (ECOOP)
(LNCS), Sophia Drossopoulou (Ed.), Vol. 5653. Springer, 318–343. https:
//doi.org/10.1007/978-3-642-03013-0_15

