[1] Paulo Sérgio Almeida, Carlos Baquero, and Victor Fonte. 2008. Interval Tree Clocks. In OPODIS (LNCS), Vol. 5401. Springer,

Article 18, 16 pages. https://doi.org/10.1007/978-3-540-92221-6_18



[2] Utpal Banerjee, Brian Bliss, Zhiqiang Ma, and Paul Petersen. 2006. A theory of data race detection. In PADTAD. ACM, 69-78.

https://doi.org/10.1145/1147403.1147416



[3] Carlos Baquero and Nuno Preguica. 2016. Why Logical Clocks Are Easy. Commun. ACM 59, 4 (2016), 43-47. https:

//doi.org/10.1145/2890782



[4] Kenneth P. Birman and Thomas A. Joseph. 1987. Reliable Communication in the Presence of Failures. Theoretical Computer

Science 5, 1 (1987), 47-76. https://doi.org/10.1145/7351.7478



[5] Robert D. Blumofe and Charles E. Leiserson. 1998. Space-Efficient Scheduling of Multithreaded Computations. Computing

27, 1 (1998), 202-229, https://doi.org/10.1137/S0097539793259471



[6] Gérard Boudol. 2009. A Deadlock-Free Semantics for Shared Memory Concurrency. In ICTAC (LNCS), Vol. 5684. Springer,

140-154, https://doi.org/10.1007/978-3-642-03466-4_9



[7] Chandrasekhar Boyapati, Robert Lee, and Martin Rinard. 2002a. Ownership Types for Safe Programming: Preventing Data

Races and Deadlocks. In OOPSLA. ACM, 211-230. htips://doi.org/10.1145/582419.582440



[8] Chandrasekhar Boyapati, Robert Lee, and Martin Rinard. 2002b. Ownership types for safe programming: preventing data

races and deadlocks. In OOPSLA. ACM, 211-230. https://doi.org/10.1145/582419.582440



[9] Vincent Cavé, Jisheng Zhao, Jun Shirako, and Vivek Sarkar. 2011. Habanero-Java: The New Adventures of Old X10. In PPP}.

ACM, 51-61. https://doi.org/10.1145/2093157.2093165



[10] Philippe Charles, Christian Grothoff, Vijay Saraswat, Christopher Donawa, Allan Kielstra, Kemal Ebcioglu, Christoph von

Praun, and Vivek Sarkar. 2005. X10: an object-oriented approach to non-uniform cluster computing. In OOPSLA. ACM,



[11] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 103. Publication date: October 2017.

Deadlock Avoidance in Parallel Programs with Futures 103:25



[12] 519-538. https://doi.org/10.1145/1094811.1094852



[13] Tiago Cogumbreiro, Raymond Hu, Francisco Martins, and Nobuko Yoshida. 2015. Dynamic Deadlock Verification for

General Barrier Synchronisation. In PPoPP. ACM, 150-160. https://doi.org/10.1145/2688500.2688519



[14] Don Coppersmith and Shmuel Winograd. 1990. Matrix Multiplication via Arithmetic Progressions. Symbolic Computation 9,

3 (1990), 251-280, https://doi.org/10.1016/S0747-7171(08)80013-2



[15] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. 2009. Introduction to Algorithms rd ed.).

MIT.



[16] Camil Demetrescu and Giuseppe F. Italiano. 2005. Trade-offs for Fully Dynamic Transitive Closure on DAGs: Breaking

Through the O(n?) Barrier. JACM 52, 2 (2005), 147-156. https://doi.org/10.1145/1059513.1059514



[17] Edsger W. Dijkstra. 1965. Cooperating Sequential Processes. Technical Report. Technical University of Eindhoven. EWD-123.



[18] Anne Dinning and Edith Schonberg. 1991. Detecting Access Anomalies in Programs with Critical Sections. In PADD. ACM,

85-96. hitps://doi.org/10.1145/122759.122767



[19] Dawson Engler and Ken Ashcraft. 2003. RacerX: effective, static detection of race conditions and deadlocks. In SOSP. ACM,

237-252. https://doi-org/10.1145/945445,945468



[20] Mingdong Feng and Charles E. Leiserson. 1997. Efficient detection of determinacy races in Cilk programs. In SPAA. ACM,

1-11. https://doi.org/10.1145/258492,258493



[21] Colin J. Fidge. 1988. Timestamps in Message-Passing Systems that Preserve the Partial Ordering. In ACSC, Vol. 10. University

of Queensland, 55-66.



[22] Cormac Flanagan and Stephen N. Freund. 2009. FastTrack: efficient and precise dynamic race detection. In PLDI. ACM,

121-133. https://doi.org/10.1145/1542476,1542490



[23] Andy Georges, Dries Buytaert, and Lieven Eeckhout. 2007. Statistically Rigorous Java Performance Evaluation. In OOPSLA.

ACM, 57-76. https://doi.org/10.1145/1297027.1297033



[24] Prodromos Gerakios, Nikolaos Papaspyrou, Konstantinos Sagonas, and Panagiotis Vekris. 2011. Dynamic Deadlock Avoidance

in Systems Code Using Statically Inferred Effects. In PLOS. ACM, Article 5, 5 pages. https://doi.org/10.1145/2039239.

2039247



[25] Ok-Kyoon Ha and Yong-Kee Jun. 2015. An Efficient Algorithm for On-the-fly Data Race Detection Using an Epoch-based

Technique. Scientific Programming 2015 (2015), 14. https://doi-org/10.1155/2015/205827



[26] Robert H. Halstead, Jr. 1985. MULTILISP: A Language for Concurrent Symbolic Computation. Transactions on Programming

Languages and Systems 7, 4 (1985), 501-538. https://doi.org/10.1145/4472.4478



[27] Tobias Hilbrich, Bronis R. de Supinski, Martin Schulz, and Matthias S. Miiller. 2009. A graph based approach for MPI

deadlock detection. In ICS. ACM, 296-305. https://doi.org/10.1145/1542275.1542319



[28] Tobias Hilbrich, Joachim Protze, Martin Schulz, Bronis R. de Supinski, and Matthias S. Miiller. 2012. MPI runtime error

detection with MUST: advances in deadlock detection. In SC. IEEE, Article 30, 11 pages.



[29] Shams Imam and Vivek Sarkar. 2014. Habanero-Java Library: A Java 8 Framework for Multicore Programming. In PPP.

ACM, 75-86. https://doi.org/10.1145/2647508.2647514



[30] Shams Imam, Jisheng Zhao, and Vivek Sarkar. 2015. A Composable Deadlock-Free Approach to Object-Based Isolation. In

Euro-Par (LNCS), Vol. 9233. Springer, 426-437. https://doi.org/10.1007/978-3-662-48096-0_33



[31] Sreekaanth S. Isloor and T. Anthony Marsland. 1980. The Deadlock Problem: An Overview. Computer 13, 9 (1980), 58-78.

https://doi.org/10.1109/MC.1980.1653786



[32] Edgar Knapp. 1987. Deadlock detection in distributed databases. Computing Survey 19, 4 (1987), 303-328. https://doi.org/10.

1145/45075.46163



[33] Bettina Krammer, Tobias Hilbrich, Valentin Himmler, Blastus Czink, Kiril Dichev, and Matthias S. Miller. 2008. MPI

Correctness Checking with Marmot. In PTW. Springer, 61-78. https://doi.org/10.1007/978-3-540-68564-7_5



[34] Leslie Lamport. 1978. Time, Clocks, and the Ordering of Events in a Distributed System. Commun. ACM 21, 7 (1978), 558-565.

https://doi.org/10.1145/359545,359563



[35] Peng Li, Kunal Agrawal, Jeremy Buhler, and Roger D. Chamberlain. 2010. Deadlock Avoidance for Streaming Computations

with Filtering. In SPAA. ACM, 243-252. https://doi.org/10.1145/1810479.1810526



[36] Glenn R. Luecke, Hua Chen, James Coyle, Jim Hoekstra, Marina Kraeva, and Yan Zou. 2003. MPI-CHECK: a tool for checking

Fortran 90 MPI programs. CCPE 15, 2 (2003), 93-100. https://doi.org/10.1002/cpe.705



[37] Jeremy Manson, William Pugh, and Sarita V. Adve. 2005. The Java Memory Model. In POPL. ACM, 378-391. https:

//doi.org/10.1145/1040305.1040336



[38] Friedemann Mattern. 1989. Virtual time and global states in distributed systems. In WDAG. North-Holland/Elsevier, 215-226.



[39] John Mellor-Crummey. 1991. On-the-fly detection of data races for programs with nested fork-join parallelism. In SC. ACM,

24-33, https://doi.org/10.1145/125826.125861



[40] Toshimi Minoura. 1982. Deadlock Avoidance Revisited. JACM 29, 4 (1982), 1023-1048. https://doi.org/10.1145/322344.322351



[41] Andrey Mokhov and Victor Khomenko. 2014. Algebra of Parameterised Graphs. Transactions on Embedded Computing

Systems 13, 4s, Article 143 (2014), 22 pages. https://doi.org/10.1145/2627351



[42] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 103. Publication date: October 2017.

103:26 T. Cogumbreiro, R. Surendran, F. Martins, V. Sarkar, V. Vasconcelos, and M. Grossman



[43] Ian Munro. 1971. Efficient Determination of the Transitive Closure of a Directed Graph. Inform. Process. Lett. 1, 2 (1971),

56-58. https://doi.org/10.1016/0020-0190(71)90006-8



[44] V. Krishna Nandivada, Jun Shirako, Jisheng Zhao, and Vivek Sarkar. 2013. A Transformation Framework for Optimizing

Task-Parallel Programs. Transactions on Programming Languages and Systems 35, 1, Article 3 (2013), 48 pages. https:

//doi.org/10.1145/2450136.2450138



[45] Armand Navabi, Xiangyu Zhang, and Suresh Jagannathan. 2008. Quasi-static Scheduling for Safe Futures. In PPoPP. ACM,

23-32, https://doi.org/10.1145/1345206,.1345212



[46] Raghavan Raman, Jisheng Zhao, Vivek Sarkar, Martin Vechev, and Eran Yahav. 2012. Efficient data race detection for

async-finish parallelism. Formal Methods in System Design 41, 3 (2012), 321-347. https://doi.org/10.1007/s10703-012-0143-7



[47] Veselin Raychev, Martin Vechev, and Manu Sridharan. 2013. Effective Race Detection for Event-driven Programs. In OOPSLA.

ACM, 151-166. https://doi.org/10.1145/2509136.2509538



[48] Spiridon A. Reveliotis, Mark A. Lawley, and Placid M. Ferreira. 1997a. Polynomial-complexity deadlock avoidance policies

for sequential resource allocation systems. Transactions on Automatic Control 42, 10 (1997), 1344-1357. https://doi.org/10.

1109/9.633824



[49] Spiridon A. Reveliotis, Mark A. Lawley, and Placid M. Ferreira. 1997b. Polynomial-complexity deadlock avoidance policies

for sequential resource allocation systems. Transactions on Automatic Control 42, 10 (1997), 1344-1357. https://doi.org/10.

1109/9.633824



[50] Stefan Savage, Michael Burrows, Greg Nelson, Patrick Sobalvarro, and Thomas Anderson. 1997. Eraser: A Dynamic

Data Race Detector for Multithreaded Programs. Transactions on Computer Systems 15, 4 (1997), 391-411. https:

//doi.org/10.1145/265924,265927



[51] Reinhard Schwarz and Friedemann Mattern. 1994, Detecting Causal Relationships in Distributed Computations: In Search

of the Holy Grail. Distributed Computing 7, 3 (1994), 149-174. https://doi.org/10.1007/BF02277859



[52] Jun Shirako, David M. Peixotto, Vivek Sarkar, and William N. Scherer. 2008. Phasers: a unified deadlock-free construct for

collective and point-to-point synchronization. In ICS. ACM, 277-288. https://doi.org/10.1145/1375527.1375568



[53] Lorna A. Smith, J. Mark Bull, and Jan Obdrzalek. 2001. A Parallel Java Grande Benchmark Suite. In SC. ACM, 10. https:

//doi.org/10.1145/582034,582042



[54] Rishi Surendran and Vivek Sarkar. 2016. Dynamic Determinacy Race Detection for Task Parallelism with Futures. In RV

(LNCS), Vol. 10012. Springer, 368-385. https://doi.org/10.1007/978-3-319-46982-9_ 23



[55] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren, Patrick Lam, and Vijay Sundaresan. 1999. Soot - a Java

Bytecode Optimization Framework. In CASCON. IBM, Article 13, 160-170 pages.



[56] Philippe Virouleau, Pierrick Brunet, Francois Broquedis, Nathalie Furmento, Samuel Thibault, Olivier Aumage, and Thierry

Gautier. 2014. Evaluation of OpenMP Dependent Tasks with the KASTORS Benchmark Suite. In IWOMP (LNCS), Vol. 8766.

Springer, 16-29. https://doi.org/10.1007/978-3-319-11454-5 2



[57] Anh Vo. 2011. Scalable Formal Dynamic Verification of MPI Programs Through Distributed Causality Tracking. Ph.D.

Dissertation. University of Utah. Advisor(s) Gopalakrishnan, Ganesh. AAI3454168.



[58] Adam Welc, Suresh Jagannathan, and Antony Hosking. 2005. Safe Futures for Java. In OOPSLA. ACM, 439-453. https:

//doi.org/10.1145/1094811.1094845



[59] Amy Williams, William Thies, and Michael D. Ernst. 2005. Static Deadlock Detection for Java Libraries. In ECOOP (LNCS),

Vol. 3586. Springer, 602-629. hitps://doi.org/10.1007/11531142_26



[60] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 103. Publication date: October 2017.
