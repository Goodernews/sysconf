[1] L. Lamport, “The parallel execution of do loops,” Commun. ACM,
vol. 17, no. 2, pp. 83–93, Feb. 1974.
[2] R. Cytron, “Doacross: Beyond vectorization for multiprocessors,” in
ICPP, 1986.
[3] G. Ottoni, R. Rangan, A. Stoler, and D. I. August, “Automatic thread
extraction with decoupled software pipelining,” in MICRO ’38, 2005.
[4] J. R. Allen, “Dependence analysis for subscripted variables and its application to program transformations,” Ph.D. dissertation, Rice University,
1983.
[5] M. S. Lam and M. E. Wolf, “A data locality optimizing algorithm,”
SIGPLAN Not., vol. 39, no. 4, pp. 442–459, Apr. 2004.
[6] M. E. Wolf and M. S. Lam, “A loop transformation theory and an
algorithm to maximize parallelism,” IEEE Transactions on Parallel and
Distributed Systems, vol. 2, no. 4, pp. 452–471, Oct 1991.
[7] J. Dean and S. Ghemawat, “MapReduce: Simplied Data Processing on
Large Clusters,” in Proceedings of 6th Symposium on Operating Systems
Design and Implementation, 2004, pp. 137–149.
[8] W. Gropp, E. Lusk, N. Doss, and A. Skjellum, “A high-performance,
portable implementation of the mpi message passing interface standard,”
Parallel computing, vol. 22, no. 6, pp. 789–828, 1996.
[9] L. Dagum and R. Menon, “OpenMP: an industry standard API for
shared-memory programming,” IEEE Computational Science and Engineering, vol. 5, no. 1, pp. 46–55, 1998.
[10] OpenMP, “OpenMP Application Program Interface,” Tech. Rep., 2013.
[11] M. Armbrust, A. Fox, R. Grifﬁth, A. D. Joseph, R. Katz, A. Konwinski,
G. Lee, D. Patterson, A. Rabkin, I. Stoica, and M. Zaharia, “Above the
clouds: A Berkeley view of cloud computing,” University of California,
Berkeley, Tech. Rep., 2009.
[12] I. Hashem, I. Yaqoob, N. B. Anuar, S. Mokhtar, A. Gani, and S. Ullah
Khan, “The rise of ”big data” on cloud computing: Review and open
research issues,” Information Systems, vol. 47, pp. 98–115, 2015.
[13] K. Shvachko, H. Kuang, S. Radia, and R. Chansler, “The Hadoop
Distributed File System,” in Mass Storage Systems and Technologies
(MSST), 2010 IEEE 26th Symposium on, 2010, pp. 1–10.
[14] C. Chu, S. K. Kim, Y.-A. Lin, Y. Yu, G. Bradski, A. Y. Ng, and
K. Olukotun, “Map-reduce for machine learning on multicore,” Advances in neural information processing systems, vol. 19, p. 281, 2007.
[15] A. McKenna, M. Hanna, E. Banks, A. Sivachenko, K. Cibulskis,
A. Kernytsky, K. Garimella, D. Altshuler, S. Gabriel, M. Daly et al.,
“The genome analysis toolkit: a mapreduce framework for analyzing
next-generation dna sequencing data,” Genome research, vol. 20, no. 9,
pp. 1297–1303, 2010.
[16] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker, and I. Stoica, “Spark : Cluster Computing with Working Sets,” in HotCloud’10
Proceedings of the 2nd USENIX conference on Hot topics in cloud
computing, 2010, p. 10.
[17] T. Hunter, T. Moldovan, M. Zaharia, S. Merzgui, J. Ma, M. J. Franklin,
P. Abbeel, and A. M. Bayen, “Scaling the mobile millennium system
in the cloud,” Proceedings of the 2nd ACM Symposium on Cloud
Computing - SOCC ’11, pp. 1–8, 2011.
[18] H. Zhang, J. Yan, and Y. Kou, Efﬁcient Online Surveillance Video
Processing Based on Spark Framework. Cham: Springer International
Publishing, 2016, pp. 309–318.
[19] D. Teijeiro, X. C. Pardo, P. González, J. R. Banga, and R. Doallo,
Implementing Parallel Differential Evolution on Spark.
Springer
International Publishing, 2016, pp. 75–90.
[20] M. S. Wiewiorka, A. Messina, A. Pacholewska, S. Mafﬁoletti,
P. Gawrysiak, and M. J. Okoniewski, “SparkSeq: Fast, scalable and
cloud-ready tool for the interactive genomic data analysis with nucleotide precision,” Bioinformatics, vol. 30, no. 18, pp. 2652–2653,
2014.
[21] OpenACC, “The OpenACC Application Programming Interface,” Tech.
Rep., 2013.

[22] A. C. Jacob, R. Nair, A. E. Eichenberger, S. F. Antao, C. Bertolli,
T. Chen, Z. Sura, K. O’Brien, and M. Wong, “Exploiting ﬁne- and
coarse-grained parallelism using a directive based approach,” in Lecture
Notes in Computer Science, vol. 9342, 2015, pp. 30–41.
[23] C. Lattner and V. Adve, “LLVM: A compilation framework for lifelong
program analysis & transformation,” in International Symposium on
Code Generation and Optimization (CGO), no. c, 2004, pp. 75–86.
[24] W. Gropp, E. Lusk, N. Doss, and A. Skjellum, “A high-performance,
portable implementation of the MPI message passing interface standard,”
Parallel Computing, vol. 22, no. 6, pp. 789–828, 1996.
[25] J. P. Hoeﬂinger, “Extending OpenMP to Clusters,” Intel Corporation
white paper, 2006.
[26] Y. C. Hu, H. H. Lu, A. L. Cox, and W. .Zwaenepoel, “{OpenMP} for
networks of {SMP}s,” Journal of Parallel and Distributed Computing,
vol. 60, no. 12, pp. 1512–1530, 2000.
[27] L.-N. Pouchet, “Polybench: The polyhedral benchmark suite,”
http://web.cse.ohio-state.edu/~pouchet/software/polybench/, May 2015.
[28] F. Magno Quintao Pereira, D. do Couto Teixeira, K. Andrade, and G. Souza, “Mgbench: Openacc benchmark suite,”
https://github.com/lashgar/ipmacc/tree/master/test-case/mgBench.
[29] K. Kumar, J. Liu, Y. H. Lu, and B. Bhargava, “A survey of computation
ofﬂoading for mobile systems,” Mobile Networks and Applications,
vol. 18, no. 1, pp. 129–140, 2013.
[30] E. Cuervo, A. Balasubramanian, D.-k. Cho, A. Wolman, S. Saroiu,
R. Chandra, and P. Bahl, “MAUI: Making Smartphones Last Longer
with Code Ofﬂoad,” in Proceedings of the 8th International Conference
on Mobile Systems, Applications, and Services, 2010, pp. 49–62.
[31] S. Kosta, A. Aucinas, P. Hui, R. Mortier, and X. Zhang, “ThinkAir:
Dynamic resource allocation and parallel execution in the cloud for
mobile code ofﬂoading,” Proceedings - IEEE INFOCOM, pp. 945–953,
2012.
[32] M. Gordon, D. Jamshidi, and S. Mahlke, “COMET: code ofﬂoad by
migrating execution transparently,” in Proceedings of the 10th USENIX
Conference on Operating Systems Design and Implementation, 2012,
pp. 93–106.
[33] M. V. Barbera, S. Kosta, A. Mei, and J. Stefa, “To ofﬂoad or not to
ofﬂoad? the bandwidth and energy costs of mobile cloud computing,”
in Proceedings - IEEE INFOCOM, 2013, pp. 1285–1293.
[34] K. Nadiminti, Y. Chiu, N. Teoh, A. Luther, S. Venugopal, and R. Buyya,
“ExcelGrid: A .NET plug-in for outsourcing Excel spreadsheet workload
to enterprise and global grids,” in Proceedings of the 12th International
Conference on Advanced Computing and Communication, 2004.
[35] D. Abramson, J. Dongarra, E. Meek, P. Roe, and Z. Shi, “Simpliﬁed
grid computing through spreadsheets and NetSolve,” in Proceedings Seventh International Conference on High Performance Computing and
Grid in Asia Paciﬁc Region, HPCAsia 2004, no. August, 2004, pp. 19–
24.
[36] M. Nikolić, M. Hajduković, D. D. Milašinović, D. Goleš, P. Marić, and
Ž. Živanov, “Hybrid MPI/OpenMP cloud parallelization of harmonic
coupled ﬁnite strip method applied on reinforced concrete prismatic shell
structure,” Advances in Engineering Software, vol. 84, pp. 55–67, 2015.
[37] M. Hajduković, D. D. Milašinović, D. Goleš, M. Nikolić, P. Marić,
Ž. Živanov, and P. S. Rakić, “Cloud Computing based MPI/OpenMP
Parallelization of the Harmonic Coupled Finite Strip Method applied to
Large Displacement Stability Analysis of Prismatic Shell Structures,”
Proceedings of the Third International Conference on Parallel, Distributed, Grid and Cloud Computing for Engineering, pp. 1–21, 2013.
[38] V. Nikl and J. Jaros, “Parallelisation of the 3D Fast Fourier Transform
Using the Hybrid OpenMP/MPI Decomposition,” in Mathematical and
Engineering Methods in Computer Science, 2014, vol. 8934, pp. 100–
112.
[39] R. D. Haynes and B. W. Ong, “MPI-OpenMP Algorithms for the
Parallel Space-Time Solution of Time Dependent PDEs,” in Domain
Decomposition Methods in Science and Engineering XXI, 2014, pp. 179–
187.
[40] M. Nakao, H. Murai, T. Shimosaka, A. Tabuchi, T. Hanawa, Y. Kodama,
T. Boku, and M. Sato, “XcalableACC: Extension of XcalableMP PGAS
language using OpenACC for accelerator clusters,” Proceedings of
WACCPD 2014: 1st Workshop on Accelerator Programming Using
Directives, pp. 27–36, 2015.
[41] R. Wottrich, R. Azevedo, and G. Araujo, “Cloud-based OpenMP Parallelization Using a MapReduce Runtime,” in Computer Architecture and
High Performance Computing (SBAC-PAD), 2014 IEEE 26th International Symposium on, 2014, pp. 334–341.
