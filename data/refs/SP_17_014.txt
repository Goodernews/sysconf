[1] J. Agat. Transforming out timing leaks.

In Proceedings of
the 27th ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages, POPL ’00, pages 40–53, New York,
NY, USA, 2000. ACM.

[2] A. Askarov and A. Sabelfeld. Gradual release: Unifying
declassiﬁcation, encryption and key release policies. In Proc.
IEEE Symp. on Security and Privacy, pages 207–221, May 2007.
[3] A. Askarov, S. Hunt, A. Sabelfeld, and D. Sands. Termination-
insensitive noninterference leaks more than just a bit.
In
Proceedings of the 13th European Symposium on Research in
Computer Security, pages 333–348, 2008.

[4] A. Askarov, D. Zhang, and A. C. Myers. Predictive black-box
mitigation of timing channels. In ACM Conference on Computer
and Communications Security, pages 297–307, 2010.

[5] M. Assaf and D. A. Naumann. Calculational design of
information ﬂow monitors. In 2016 IEEE 29th Computer Security
Foundations Symposium (CSF), pages 210–224, June 2016.

[6] A. Banerjee and D. A. Naumann. Secure information ﬂow and
pointer conﬁnement in a Java-like language. In Proceedings of
the 15th IEEE Computer Security Foundations Workshop, June
2002.

[7] G. Bollella and J. Gosling. The real-time speciﬁcation for java.

Computer, 33(6):47–54, 2000.

[8] P. Buiras and A. Russo. Lazy Programs Leak Secrets, pages
116–122. Springer Berlin Heidelberg, Berlin, Heidelberg, 2013.

[9] Z. Deng and G. Smith. Lenient array operations for practical
secure information ﬂow. Proceedings. 17th IEEE Computer
Security Foundations Workshop, 2004., pages 115–124.

[10] D. E. Denning and P. J. Denning. Certiﬁcation of programs for
secure information ﬂow. Comm. of the ACM, 20(7):504–513,
July 1977.

[11] D. Devriese and F. Piessens. Noninterference through secure
In Security and Privacy (SP), 2010 IEEE

multi-execution.
Symposium on, pages 109 –124, may 2010.

[12] C. Dima, C. Enea, and R. Gramatovici. Nondeterministic
nointerference and deducible information ﬂow. Technical Report
2006-01, University of Paris 12, LACL, 2006.

[13] D. Frampton, D. F. Bacon, P. Cheng, and D. Grove. Generational
Real-Time Garbage Collection, pages 101–125. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2007.

[14] P. Gammie, A. L. Hosking, and K. Engelhardt. Relaxing safely:
veriﬁed on-the-ﬂy garbage collection for x86-TSO. In PLDI
2015: Proceedings of the 36th ACM SIGPLAN Conference on
Programming Language Design and Implementation, pages 99–
109. NICTA, ACM, June 2015.

[15] J. A. Goguen and J. Meseguer. Security policies and security
In 1982 IEEE Symposium on Security and Privacy,

models.
Oakland, CA, USA, April 26-28, 1982, pages 11–20, 1982.

[16] D. Hedin, A. Birgisson, L. Bello, and A. Sabelfeld. JSFlow:
tracking information ﬂow in JavaScript and its APIs. In SAC ’14:
Proceedings of the 29th Annual ACM Symposium on Applied
Computing. Chalmers University of Technology, ACM, Mar.
2014.

[17] J. A. Joao, O. Mutlu, and Y. N. Patt. Flexible reference-
counting-based hardware acceleration for garbage collection.
In Proceedings of the 36th Annual International Symposium on
Computer Architecture, ISCA ’09, pages 418–428, New York,
NY, USA, 2009. ACM. ISBN 978-1-60558-526-0.

[18] R. Jones, A. Hosking, and E. Moss. The Garbage Collection
Handbook: The Art of Automatic Memory Management. Chap-
man & Hall/CRC, 1st edition, 2011.

[19] A. McCreight, T. Chevalier, A. Tolmach, A. McCreight, T. Cheva-
lier, and A. Tolmach. A certiﬁed framework for compiling and
executing garbage-collected languages, volume 45. ACM, Sept.
2010.

[20] D. McCullough. Noninterference and the composability of
security properties. In Proc. IEEE Symp. on Security and Privacy,
pages 177–186, May 1988.

[21] S. Moore, A. Askarov, and S. Chong. Precise enforcement of
progress-sensitive security. In Proceedings of the 19th ACM
Conference on Computer and Communications Security, pages
881–893, Oct. 2012.

[22] G. Morrisett, M. Felleisen, and R. Harper.

Abstract
the
models of memory management.
Seventh International Conference on Functional Program-
ming Languages and Computer Architecture, FPCA ’95,
pages 66–77, New York, NY, USA, 1995. ACM. URL
http://doi.acm.org/10.1145/224164.224182.

In Proceedings of

[23] S. Muller and S. Chong. Towards a practical secure concurrent
language. In Proceedings of the 25th Annual ACM SIGPLAN
Conference on Object-Oriented Programming Languages, Sys-
tems, Languages, and Applications, pages 57–74, New York,
NY, USA, Oct. 2012. ACM Press.

[24] A. C. Myers. Mostly-Static Decentralized Information Flow
Control. PhD thesis, Massachusetts Institute of Technology, Jan.
1999.

[25] A.

JFlow:

C. Myers.

information ﬂow control.
26th
Languages (POPL), pages 228–241, Jan. 1999.
http://www.cs.cornell.edu/andru/papers/popl99/popl99.pdf.

Practical mostly-static
the
Programming
URL

In Proceedings

ACM Symp.

Principles

on

of

of

[26] A. C. Myers, L. Zheng, S. Zdancewic, S. Chong, and N. Nys-

2011.

[45] D. Zhang, A. Askarov, and A. C. Myers. Language-based control
and mitigation of timing channels. In Proceedings of the 33rd
ACM SIGPLAN Conference on Programming Language Design
and Implementation, PLDI ’12, pages 99–110, New York, NY,
USA, 2012. ACM.

trom.
http://www.cs.cornell.edu/jif, July 2006.

Jif 3.0: Java information ﬂow.

Software release,

[27] A. Nanevski, A. Banerjee, and D. Garg. Veriﬁcation of
information ﬂow and access control policies with dependent
types. In Proceedings of the 2011 IEEE Symposium on Security
and Privacy, SP ’11, pages 165–179, Washington, DC, USA,
2011. IEEE Computer Society. ISBN 978-0-7695-4402-1.

[28] D. Osvik, A. Shamir, and E. Tromer. Cache attacks and coun-
termeasures: The case of aes. In D. Pointcheval, editor, Topics
in Cryptology – CT-RSA 2006, volume 3860 of Lecture Notes
in Computer Science, pages 1–20. Springer Berlin Heidelberg,
2006.

[29] C. S. Pasareanu, Q. S. Phan, and P. Malacaria. Multi-run side-
channel analysis using symbolic execution and max-smt.
In
2016 IEEE 29th Computer Security Foundations Symposium
(CSF), pages 387–400, June 2016.

[30] F. Pizlo, L. Ziarek, P. Maj, A. L. Hosking, E. Blanton, and
J. Vitek. Schism: fragmentation-tolerant real-time garbage
collection. In ACM Sigplan Notices, volume 45, pages 146–
159. ACM, 2010.

[31] F. Pottier and V. Simonet.

Information ﬂow inference for
In Proceedings of the 29th ACM Symp. on Principles

ML.
of Programming Languages (POPL), pages 319–330, 2002.

[32] A. Russo and A. Sabelfeld. Dynamic vs. static ﬂow-sensitive
security analysis. In Proceedings of the IEEE Computer Security
Foundations Symposium, 2010.

[33] A. Sabelfeld and A. C. Myers. Language-based information-ﬂow
security. IEEE J. Selected Areas in Communications, 21(1):5–19,
Jan. 2003.

[34] V. Simonet. The Flow Caml System: documentation and user’s
manual. Technical Report 0282, Institut National de Recherche
en Informatique et en Automatique (INRIA), July 2003.

[35] D. Stefan, A. Russo, J. C. Mitchell, and D. Mazières. Flexible
dynamic information ﬂow control in haskell. In Proceedings of
the 4th ACM Symposium on Haskell, Haskell ’11, pages 95–106,
New York, NY, USA, 2011. ACM.

[36] G. Tene, B. Iyengar, and M. Wolf. C4: The continuously concur-
rent compacting collector. In Proceedings of the International
Symposium on Memory Management, ISMM ’11, pages 79–88,
New York, NY, USA, 2011. ACM.

[37] D. Ungar. Generation scavenging: A non-disruptive high
In Proceedings
performance storage reclamation algorithm.
of the First ACM SIGSOFT/SIGPLAN Software Engineering
Symposium on Practical Software Development Environments,
SDE 1, pages 157–167, New York, NY, USA, 1984. ACM.

[38] M. Vaninwegen, C. Gunter, and P. Buneman. The machine-
assisted proof of programming language properties abstract the
machine-assisted proof of programming language properties.
1996.

[39] D. Volpano, C. Irvine, and G. Smith. A sound type system for
secure ﬂow analysis. J. Comput. Secur., 4(2-3):167–187, Jan.
1996.

[40] P. L. Wadler. Analysis of an algorithm for real time garbage

collection. Commun. ACM, 19(9):491–500, Sept. 1976.

[41] G. Winskel. The Formal Semantics of Programming Languages:

An Introduction. MIT Press, Cambridge, MA, 1993.

[42] A. Wright and M. Felleisen.

type soundness.
ISSN 0890-5401.
http://dx.doi.org/10.1006/inco.1994.1093.

A syntactic approach to
Inf. Comput., 115(1):38–94, Nov. 1994.
URL

doi: 10.1006/inco.1994.1093.

[43] S. Zdancewic and A. C. Myers. Observational determinism for
concurrent program security. In Proceedings of the 16th IEEE
Computer Security Foundations Workshop, pages 29–43, June
2003.

[44] D. Zhang, A. Askarov, and A. C. Myers. Predictive mitigation
of timing channels in interactive systems. In ACM Conference
on Computer and Communications Security, pages 563–574, 2011.
[45] D. Zhang, A. Askarov, and A. C. Myers. Language-based control
and mitigation of timing channels. In Proceedings of the 33rd
ACM SIGPLAN Conference on Programming Language Design
and Implementation, PLDI ’12, pages 99–110, New York, NY,
USA, 2012. ACM.
