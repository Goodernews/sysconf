[1] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An
In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries,” in
25th USENIX Security Symposium (USENIX Security ’16). Austin,
TX: USENIX Association, 2016, pp. 583–600.

[2] G. Balakrishnan and T. Reps, “Analyzing Memory Accesses in x86
Executables,” in International Conference on Compiler Construction,
2004, pp. 5–23.

[3] A. R. Bernat and B. P. Miller, “Anywhere, Any-Time Binary Instrumen-
tation,” in Proceedings of the 10th ACM SIGPLAN-SIGSOFT Workshop
on Program Analysis for Software Tools (PASTE ’11), 2011, pp. 9–16.
[4] D. L. Bruening, “Efﬁcient, Transparent, and Comprehensive Runtime
Code Manipulation,” Ph.D. dissertation, Massachusetts Institute of
Technology, 2004.

[5] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A Binary
Analysis Platform,” in International Conference on Computer Aided
Veriﬁcation, vol. 6806 LNCS. Springer, 2011, pp. 463–469.

[6] Cryptic Apps, “Hopper,” https://www.hopperapp.com/.
[7] B. De Sutter, B. De Bus, K. De Bosschere, P. Keyngnaert, and
B. Demoen, “On the Static Analysis of Indirect Control Flow Transfers
in Binaries,” in Proceedings of the International Conference on Parallel
and Distributed Processing Techniques and Application, 2000, pp.
1013–1019.

[8] M. Egele, M. Woo, and D. Brumley, “Blanket Execution: Dynamic
Similarity Testing for Program Binaries and Components,” in 23rd
USENIX Security Symposium (USENIX Security ’14). San Diego, CA:
USENIX Association, 2014, pp. 303–317.

[9] GCC, “GCC 5 Release Notes,” https://gcc.gnu.org/gcc-5/changes.html.
[10] L. C. Harris and B. P. Miller, “Practical Analysis of Stripped Binary
Code,” ACM SIGARCH Computer Architecture News, vol. 33, no. 5,
pp. 63–68, 2005.

[11] R. N. Horspool and N. Marovac, “An Approach to the Problem of
Detranslation of Computer Programs,” Computer Journal, vol. 23, no. 3,
pp. 223–229, 1980.
[12] J. Kinder, “Static Analysis of x86 Executables,” Ph.D. dissertation,
2010.

[13] N. Nethercote and J. Seward, “Valgrind: A Framework for Heavyweight
Dynamic Binary Instrumentation,” in Proceedings of the 2007 ACM
SIGPLAN Conference on Programming Language Design and Imple-
mentation (PLDI ’07), 2007, p. 89.

[14] P. O’Sullivan, K. Anand, A. Kotha, M. Smithson, R. Barua, and
A. D. Keromytis, “Retroﬁtting Security in COTS Software with Bi-
nary Rewriting,” IFIP Advances in Information and Communication
Technology, vol. 354, pp. 154–172, 2011.

[15] R. Paleari, L. Martignoni, G. Fresi Roglia, and D. Bruschi, “N-
version Disassembly: Differential Testing of x86 Disassemblers,” in
Proceedings of the 19th International Symposium on Software Testing
and Analysis (ISSTA ’10), 2010, p. 265.
[16] pancake, “radare,” http://www.radare.org/r/.

[17] N. A. Quynh. (2016) The Ultimate Disassembly Framework Capstone.

[Online]. Available: http://capstone-engine.org

[18] T. Reps and G. Balakrishnan, “Improved Memory-Access Analysis for
x86 Executables,” International Conference on Compiler Construction,
vol. 4959 LNCS, no. i, pp. 16–35, 2008.
s3team. (2015) s3team/uroboros: Infrastructure for Reassembleable
[19] Disassembling and Transformation (v 0.1).
[Online]. Available:
https://github.com/s3team/uroboros



[20] Shellphish, “DARPA CGC,” http://shellphish.net/cgc/.
[21] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna,
“(State of) The Art of War: Offensive Techniques in Binary Analysis,”
in Proceedings of the IEEE Security and Privacy, 2016, pp. 138–157.
[22] M. Smithson, K. Elwazeer, K. Anand, A. Kotha, and R. Barua,
“Static Binary Rewriting without Supplemental Information: Overcom-
ing the Tradeoff between Coverage and Correctness,” in Proceedings
- 20th Working Conference on Reverse Engineering (WCRE 2013),
R. L¨ammel, R. Oliveto, and R. Robbes, Eds.
Koblenz, Germany:
IEEE, 2013, pp. 52–61.

[23] Vector 35, “binary.ninja : a reversing engineering platform,” https://

binary.ninja/.

[24] M. Wang, H. Yin, A. V. Bhaskar, P. Su, and D. Feng, “Binary Code
Continent: Finer-Grained Control Flow Integrity for Stripped Binaries,”
in Proceedings of 2015 Annual Computer Security Applications Con-
ference (ACSAC ’15), 2015, pp. 331–340.

[25] S. Wang, P. Wang, and D. Wu, “Reassembleable Disassembling,” in
24th USENIX Security Symposium (USENIX Security ’15). USENIX
Association, 2015, pp. 627–642.

[26] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Securing Untrusted
Code via Compiler-Agnostic Binary Rewriting,” in Proceedings of the
28th Annual Computer Security Applications Conference (ACSAC ’12),
2012, p. 299.

[27] R. Wartell, V. Mohan, K. W. Hamlen, Z. Lin, and W. C. Rd, “Binary
Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary
Code,” in Proceedings of the 2012 ACM Conference on Computer and
Communications Security (CCS ’12), 2012, pp. 157–168.
[28] J. Zeng, Y. Fu, K. a. Miller, Z. Lin, X. Zhang, and D. Xu, “Obfuscation
Resilient Binary Code Reuse through Trace-oriented Programming,” in
Proceedings of the 2013 ACM SIGSAC Conference on Computer &
Communications Security (CCS ’13), 2013, pp. 487–498.

[28]

[29] M. Zhang and R. Sekar, “Control Flow Integrity for COTS Binaries,”
in Proceedings of the 22nd USENIX Conference on Security (USENIX
Security ’13), 2013, pp. 337–352.
