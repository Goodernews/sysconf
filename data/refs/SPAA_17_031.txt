[1] Martín Abadi, Tim Harris, and Mojtaba Mehrara. 2009. Transactional Memory
with Strong Atomicity Using Off-the-Shelf Memory Protection Hardware. In
Proceedings of the 14th ACM Symposium on Principles and Practice of Parallel
Programming. Raleigh, NC.

[2] Alexandro Baldassin, Edson Borin, and Guido Araujo. 2015. Performance Im-
plications of Dynamic Memory Allocators on Transactional Memory Systems.
In Proceedings of the 20th ACM Symposium on Principles and Practice of Parallel
Programming. San Francisco, CA.

[3] Oana Balmau, Rachid Guerraoui, Maurice Herlihy, and Igor Zablotchi. 2016. Fast
and Robust Memory Reclamation for Concurrent Data Structures. In Proceed-
ings of the 28th ACM Symposium on Parallelism in Algorithms and Architectures.
Asilomar State Beach, CA.

[4] Emery Berger, Kathryn McKinley, Robert Blumofe, and Paul Wilson. 2000. Hoard:
A Scalable Memory Allocator for Multithreaded Applications. In Proceedings
of the 9th International Conference on Architectural Support for Programming
Languages and Operating Systems. Cambridge, MA.

[5] Colin Blundell, E Christopher Lewis, and Milo M. K. Martin. 2006. Subtleties of
Transactional Memory Atomicity Semantics. Computer Architecture Letters 5, 2
(Nov. 2006).

[6] Anastasia Braginsky, Alex Kogan, and Erez Petrank. 2013. Drop the Anchor:
Lightweight Memory Management for Non-Blocking Data Structures. In Proceed-
ings of the 25th ACM Symposium on Parallelism in Algorithms and Architectures.
Montreal, Quebec, Canada.

[7] Trevor Brown. 2015. Reclaiming Memory for Lock-Free Data Structures: There
has to be a Better Way. In Proceedings of the 34th ACM Symposium on Principles
of Distributed Computing. Portland, OR.

[8] Nachshon Cohen and Erez Petrank. 2015. Efficient Memory Management for
Lock-Free Data Structures with Optimistic Access. In Proceedings of the 27th ACM
Symposium on Parallelism in Algorithms and Architectures. Portland, OR.

[9] Mathieu Desnoyers, Paul McKenney, Alan Stern, Michel Dagenais, and Jonathan
Walpole. 2012. User-Level Implementations of Read-Copy Update. IEEE Transac-
tions on Parallel and Distributed Systems 23, 2 (2012), 375–382.

[10] Dave Dice, Ori Shalev, and Nir Shavit. 2006. Transactional Locking II. In Proceed-
ings of the 20th International Symposium on Distributed Computing. Stockholm,
Sweden.

[11] Aleksandar Dragojevic, Maurice Herlihy, Yossi Lev, and Mark Moir. 2011. On The
Power of Hardware Transactional Memory to Simplify Memory Management. In
Proceedings of the 30th ACM Symposium on Principles of Distributed Computing.
San Jose, CA.

[12] Jason Evans. 2017. jemalloc memory allocator. (2017). http://http://jemalloc.net/.
[13] Pascal Felber, Vincent Gramoli, and Rachid Guerraoui. 2017. Elastic Transactions.

J. Parallel and Distrib. Comput. 100 (Feb. 2017), 103–127.

[14] Vincent Gramoli. 2015. More Than You Ever Wanted to Know about Synchro-
nization. In Proceedings of the 20th ACM Symposium on Principles and Practice of
Parallel Programming. San Francisco, CA.

[15] Rachid Guerraoui and Michal Kapalka. 2008. On the Correctness of Transactional
Memory. In Proceedings of the 13th ACM Symposium on Principles and Practice of
Parallel Programming. Salt Lake City, UT.

[16] Tim Harris. 2001. A Pragmatic Implementation of Non-Blocking Linked Lists.
In Proceedings of the 15th International Symposium on Distributed Computing.
Lisbon, Portugal.

[17] Maurice P. Herlihy, Victor Luchangco, Mark Moir, and William N. Scherer III.
2003. Software Transactional Memory for Dynamic-sized Data Structures. In
Proceedings of the 22nd ACM Symposium on Principles of Distributed Computing.
Boston, MA.

[18] Maurice P. Herlihy and J. Eliot B. Moss. 1993. Transactional Memory: Architec-
tural Support for Lock-Free Data Structures. In Proceedings of the 20th Interna-
tional Symposium on Computer Architecture. San Diego, CA.

[19] Intel Corporation. 2012. Intel Architecture Instruction Set Extensions Program-

ming (Chapter 8: Transactional Synchronization Extensions). (Feb. 2012).

[20] Yujie Liu, Tingzhe Zhou, and Michael Spear. 2015. Transactional Acceleration
of Concurrent Data Structures. In Proceedings of the 27th ACM Symposium on
Parallelism in Algorithms and Architectures. Portland, OR.

[21] Vijay Menon, Steven Balensiefer, Tatiana Shpeisman, Ali-Reza Adl-Tabatabai,
Richard Hudson, Bratin Saha, and Adam Welc. 2008. Practical Weak-Atomicity
Semantics for Java STM. In Proceedings of the 20th ACM Symposium on Parallelism
in Algorithms and Architectures. Munich, Germany.

[22] Maged Michael. 2002. High Performance Dynamic Lock-Free Hash Tables and
List-Based Sets. In Proceedings of the 14th ACM Symposium on Parallel Algorithms
and Architectures. Winnipeg, Manitoba, Canada.

[23] Maged Michael. 2004. Hazard Pointers: Safe Memory Reclamation for Lock-Free
Objects. IEEE Transactions on Parallel and Distributed Systems 15, 6 (June 2004),
491–504.

[24] Takuya Nakaike, Rei Odaira, Matthew Gaudet, Maged M. Michael, and Hisanobu
Tomari. 2015. Quantitative Comparison of Hardware Transactional Memory for
Blue Gene/Q, zEnterprise EC12, Intel Core, and POWER8. In Proceedings of the
42nd Annual International Symposium on Computer Architecture. Portland, OR.
[25] Aravind Natarajan and Neeraj Mittal. 2014. Fast concurrent lock-free binary
search. In Proceedings of the 19th ACM SIGPLAN symposium on Principles and
practice of parallel programming. Orlando, FL.

[26] Nir Shavit and Dan Touitou. 1995. Software Transactional Memory. In Proceedings
of the 14th ACM Symposium on Principles of Distributed Computing. Ottawa, ON,
Canada.

[27] Tatiana Shpeisman, Vijay Menon, Ali-Reza Adl-Tabatabai, Steven Balensiefer,
Dan Grossman, Richard L. Hudson, Kate Moore, and Bratin Saha. 2007. Enforcing
Isolation and Ordering in STM. In Proceedings of the 2007 ACM Conference on
Programming Language Design and Implementation. San Diego, CA.
