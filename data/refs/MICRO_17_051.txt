[1] J. R. Allen, Ken Kennedy, Carrie Porterfield, and Joe Warren. 1983. Conversion
of Control Dependence to Data Dependence. In Proceedings of the 10th ACM
SIGACT-SIGPLAN Symposium on Principles of Programming Languages (POPL °83).
ACM, New York, NY, USA, 177-189. https://doi.org/10.1145/567067.567085
[2] Andrew Anderson, Avinash Malik, and David Gregg. 2015. Automatic Vectorization of Interleaved Data Revisited. ACM Trans, Archit. Code Optim. 12, 4 (Dec.
2015), 50:1-50:25. https://doi.org/10.1145/2838735
[3] Sara S. Baghsorkhi, Nalini Vasudevan, and Youfeng Wu. 2016. FlexVec: Autovectorization for Irregular Loops. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’16). ACM,
New York, NY, USA, 697-710. https://doi.org/10.1145/2908080.2908111
[4] R. Barik, J. Zhao, and V. Sarkar. 2010. Efficient Selection of Vector Instructions
Using Dynamic Programming. In 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture (MICRO ’10). IEEE, New York, NY, USA, 201-212.
https://doi.org/10.1109/MICRO.2010.38
[5] John Bruno and Ravi Sethi. 1976. Code Generation for a One-Register Machine.
 ACM 23, 3 (July 1976), 502-510. https://doLorg/10.1145/321958.321971
[6] Ian Cutress. 2016. ARM Announces ARM v8-A with Scalable Vector Extensions:
Aiming for HPC and Data Center. (Aug. 2016). http://www.anandtech.com/show/
10586
[7] Liza Fireman, Erez Petrank, and Ayal Zaks. 2007. New Algorithms for SIMD
Alignment. In Proceedings of the 16th International Conference on Compiler Construction (CC’07). Springer-Verlag, Berlin, Heidelberg, 1-15. http://dl.acm.org/
citation.cfim?id=1759937.1759939
[8] John L. Henning. 2006. SPEC CPU2006 Benchmark Descriptions. SIGARCH
Comput. Archit. News 34, 4 (Sept. 2006), 1-17. https://doiorg/10.1145/1186736.
1186737
[9] Seonggun Kim and Hwansoo Han. 2012. Efficient SIMD Code Generation for
Irregular Kernels. In Proceedings of the 17th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming (PPoPP ’12). ACM, New York, NY, USA,
55-64. https://doi.org/10.1145/2145816.2145824
[10] Samuel Larsen and Saman Amarasinghe. 2000. Exploiting Superword Level
Parallelism with Multimedia Instruction Sets. In Proceedings of the ACM SIGPLAN
2000 Conference on Programming Language Design and Implementation (PLDI *00).
ACM, New York, NY, USA, 145-156. https://doi.org/10.1145/349299.349320
[11] Chris Lattner and Vikram Adve. 2004. LLVM: A Compilation Framework for
Lifelong Program Analysis & Transformation. In Proceedings of the International
Symposium on Code Generation and Optimization: Feedback-directed and Runtime
Optimization (CGO ’04), IEEE Computer Society, Washington, DC, USA, 75-.
http://dLacm.org/citation.cfim?id=977395.977673
[12] D. M. Lavery and W. W. Hwu. 1996. Modulo scheduling of loops in controlintensive non-numeric programs. In Proceedings of the 29th Annual IEEE/ACM
International Symposium on Microarchitecture. MICRO 29 (MICRO ’96). IEEE, New
York, NY, USA, 126-137. https://doi.org/10.1109/MICRO.1996.566456
[13] Jun Liu, Yuanrui Zhang, Ohyoung Jang, Wei Ding, and Mahmut Kandemir. 2012. A
Compiler Framework for Extracting Superword Level Parallelism. In Proceedings
of the 33rd ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI ’12). ACM, New York, NY, USA, 347-358. https://doLorg/
10,1145/2254064.2254106
[14] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil, Artur Klauser, Geoff
Lowney, Steven Wallace, Vijay Janapa Reddi, and Kim Hazelwood. 2005. Pin:
Building Customized Program Analysis Tools with Dynamic Instrumentation.
In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI ’05). ACM, New York, NY, USA, 190-200. https:
//doi.org/10.1145/1065010.1065034
[15] S. Maleki, Y. Gao, M. J. GarzarAtn, T. Wong, and D. A. Padua. 2011. An Evaluation
of Vectorizing Compilers. In 2011 International Conference on Parallel Architectures
and Compilation Techniques. IEEE, New York, NY, USA, 372-382. https://doi.org/
10.1109/PACT.2011.68
[16] Dorit Nuzman, Ira Rosen, and Ayal Zaks. 2006. Auto-vectorization of Interleaved
Data for SIMD. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI *06). ACM, New York, NY, USA,
132-143. https://doi.org/10.1145/1133981.1133997
[17] David A. Padua and Michael J. Wolfe. 1986. Advanced Compiler Optimizations
for Supercomputers. Commun. ACM 29, 12 (Dec. 1986), 1184-1201. https://doi.
org/10.1145/7902.7904
[18] V. Porpodas and T. M. Jones. 2015. Throttling Automatic Vectorization: When Less
is More. In 2015 International Conference on Parallel Architecture and Compilation
(PACT) (PACT ’15). IEEE, New York, NY, USA, 432-444. https://doi.org/10.1109/
PACT.2015.32

[19] Vasileios Porpodas, Alberto Magni, and Timothy M. Jones. 2015. PSLP: Padded
SLP Automatic Vectorization. In Proceedings of the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization (CGO ’15). IEEE
Computer Society, Washington, DC, USA, 190-201. http://dlacm.org/citation.
cfim?id=2738600.2738625

[20] James Reinders. 2013. AVX-512 instructions. Intel Corporation. (July 2013).

[21] Gang Ren, Peng Wu, and David Padua. 2006. Optimizing Data Permutations for
SIMD Devices. In Proceedings of the 27th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’06). ACM, New York, NY, USA,
118-131. https://doLorg/10.1145/1133981.1133996

[22] Thomas Schaub, Simon Moll, Ralf Karrenberg, and Sebastian Hack. 2015. The
Impact of the SIMD Width on Control-Flow and Memory Divergence. ACM Trans.
Archit. Code Optim. 11, 4 (Jan. 2015), 54:1-54:25. https://doi.org/10.1145/2687355

[23] S. Seo, G. Jo, and J. Lee. 2011. Performance characterization of the NAS Parallel
Benchmarks in OpenCL. In 2011 IEEE International Symposium on Workload
Characterization (SWC) (SWC *11). IEEE, New York, NY, USA, 137-148. https:
//doi.org/10.1109/TISWC.2011.6114174

[24] Jaewook Shin, Mary Hall, and Jacqueline Chame. 2005. Superword-Level Parallelism in the Presence of Control Flow. In Proceedings of the International
Symposium on Code Generation and Optimization (CGO ’05), IEEE Computer
Society, Washington, DC, USA, 165-175. https://doi.org/10.1109/CGO.2005.33

[25] Peng Wu, Alexandre E. Eichenberger, and Amy Wang. 2005. Efficient SIMD Code
Generation for Runtime Alignment and Length Conversion. In Proceedings of the
International Symposium on Code Generation and Optimization (CGO ’05). IEEE
Computer Society, Washington, DC, USA, 153-164. https://doi.org/10.1109/CGO.
2005.18

[26] Hao Zhou and Jingling Xue. 2016. A Compiler Approach for Exploiting Partial
SIMD Parallelism. ACM Trans. Archit. Code Optim. 13, 1 (March 2016), 11:1-11:26.
https://doi.org/10.1145/2886101

[27] Hao Zhou and Jingling Xue. 2016. Exploiting Mixed SIMD Parallelism by Reducing
Data Reorganization Overhead. In Proceedings of the 2016 International Symposium
on Code Generation and Optimization (CGO ’16). ACM, New York, NY, USA, 56-69.
https://doLorg/10.1109/CGO.2005.18
