[1] J.S.VetterandS.Mittal,“Opportunitiesfornonvolatilemem- ory systems in extreme-scale high performance computing,” Computing in Science and Engineering, vol. 17, no. 2, pp. 73–82, 2015.
[2] H. Zhang, G. Chen, B. C. Ooi, K.-L. Tan, and M. Zhang, “In-memory big data management and processing: A survey,” IEEE Transactions on Knowledge and Data Engineering, vol. 27, no. 7, pp. 1920–1948, 2015.
[3] M. H. Kryder and K. C. Soo, “After hard drives: What comes next?” IEEE Transactions on Magnetics, vol. 45, no. 10, pp. 3406–3413, 2009.
[4] S. Mittal and J. S. Vetter, “A survey of software techniques for using non-volatile memories for storage and main memory systems,” IEEE Transactions on Parallel and Distributed Systems, vol. 27, no. 5, pp. 1537–1550, 2016.
[5] K. Suzuki and S. Swanson, “A survey of trends in non- volatile memory technologies: 2000-2014,” in 2015 IEEE International Memory Workshop (IMW), 2015, pp. 1–4.
[6] J. Coburn, A. M. Caulfield et al., “NV-heaps: making persis- tent objects fast and safe with next-generation, non-volatile memories,” in Proceedings of the sixteenth international con- ference on Architectural support for programming languages and operating systems. Newport Beach, California, USA: ACM, 2011, pp. 105–118.
[7] W. Chao, S. S. Vazhkudai, M. Xiaosong, M. Fei, K. Youngjae, and C. Engelmann, “NVMalloc: Exposing an aggregate SSD store as a memory partition in extreme-scale machines,” in Parallel & Distributed Processing Symposium (IPDPS), 2012 IEEE 26th International, 2012, pp. 957–968.
[8] “NVM Library,” [Online]. Available: http://pmem.io/nvml/, (Accessed Feb. 22, 2017).
[9] E. Carson, J. Demmel et al., “Write-avoiding algorithms,” in 2016 IEEE International Parallel and Distributed Processing Symposium (IPDPS), 2016, pp. 648–658.
[10] J. E. Denny, S. Lee, and J. S. Vetter, “NVL-C: Static analysis techniques for efficient, correct programming of non-volatile main memory systems,” in Proceedings of the 25th ACM International Symposium on High-Performance Parallel and Distributed Computing. Kyoto, Japan: ACM, 2016, pp. 125– 136.
[11] “LLVM Releases,” [Online]. Available: http://llvm.org/ releases/, (Accessed Feb. 22, 2017).
[12] B. Lee, P. Zhou et al., “Phase-change technology and the future of main memory,” IEEE Micro, vol. 30, no. 1, p. 143, 2010.
[13] J. Zhao, O. Mutlu, and Y. Xie, “FIRM: Fair and high- performance memory control for persistent memory systems,” in Microarchitecture (MICRO), 2014 47th Annual IEEE/ACM International Symposium on, 2014, pp. 153–165.
[14] X. Dong, N. Muralimanohar, N. Jouppi, R. Kaufmann, and Y. Xie, “Leveraging 3D PCRAM technologies to reduce checkpoint overhead for future exascale systems,” Proceed- ings of the Conference on High Performance Computing Networking, Storage and Analysis - SC ’09, pp. 1–1, 2009.
[15] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne: Lightweight persistent memory,” ACM SIGPLAN Notices, vol. 46, no. 3, pp. 91–104, 2011.
[16] T. Haerder and A. Reuter, “Principles of transaction-oriented database recovery,” ACM Computing Surveys (CSUR), vol. 15, no. 4, pp. 287–317, 1983.
[17] S. Lee and J. Vetter, “OpenARC: Extensible OpenACC Compiler Framework for Directive-Based Accelerator Pro- gramming Study,” in WACCPD: Workshop on Accelerator Programming Using Directives in Conjunction with SC’14, november 2014.
[18] I. Karlin, A. Bhatele et al., “LULESH programming model and performance ports overview,” Lawrence Livermore Na- tional Laboratory (LLNL), Livermore, CA, Tech. Rep. LLNL- TR-608824, 2012.
[19] T. Davis, “University of Florida Sparse Matrix Collection,” [Online]. Available: http://www.cise.ufl.edu/research/sparse/ matrices/, 2012, (Accessed Feb. 22, 2017).
[20] S. Venkataraman, N. Tolia, P. Ranganathan, and R. H. Camp- bell, “Consistent and durable data structures for non-volatile byte-addressable memory,” Proceedings of the 9th USENIX Conference on File and Storage Technologies - FAST, 2011.
[21] J. Zhao, S. Li, D. Yoon, Y. Xie, and N. Jouppi, “Kiln: closing the performance gap between systems with and without per- sistence support,” Proceedings of the 46th Annual IEEE/ACM International Symposium on Microarchitecture, pp. 421–432, 2013.
[22] D. Narayanan and O. Hodson, “Whole-system persistence,” in Proceedings of the seventeenth international conference on Architectural Support for Programming Languages and Operating Systems. London, England, UK: ACM, 2012, pp. 401–410.
[23] J. Condit, E. B. Nightingale et al., “Better I/O through byte- addressable, persistent memory,” Proc. ACM SIGOPS 22nd symposium on Operating systems principles, pp. 133–146, 2009.
[24] P. Wu, D. Li, Z. Chen, J. S. Vetter, and S. Mittal, “Algorithm- directed data placement in explicitly managed non-volatile memory,” in Proceedings of the 25th ACM International Symposium on High-Performance Parallel and Distributed Computing. Kyoto, Japan: ACM, 2016, pp. 141–152.
[25] S. Park, T. Kelly, and K. Shen, “Failure-atomic Msync(): A Simple and Efficient Mechanism for Preserving the Integrity of Durable Data,” in Proc 8th ACM European Conf Computer Systems, ser. EuroSys ’13. New York, NY, USA: ACM, 2013, pp. 225–238. [Online]. Available: http://doi.acm.org/10.1145/2465351.2465374
[26] C. Wang, V. Ying, and Y. Wu, “Supporting Legacy Binary Code in a Software Transaction Compiler with Dynamic Binary Translation and Optimization,” in Proceedings of the Joint European Conferences on Theory and Practice of Software 17th International Conference on Compiler Con- struction, ser. CC’08/ETAPS’08. Berlin, Heidelberg: Springer-Verlag, 2008, pp. 291–306. [Online]. Available: http://dl.acm.org/citation.cfm?id=1788374.1788400
[27] A.-R. Adl-Tabatabai, B. T. Lewis, V. Menon, B. R. Murphy, B. Saha, and T. Shpeisman, “Compiler and runtime support for efficient software transactional memory,” ACM SIGPLAN Notices, vol. 41, no. 6, pp. 26–37, 2006.
[28] T. Harris, M. Plesko, A. Shinnar, and D. Tarditi, “Optimizing memory transactions,” in ACM SIGPLAN Notices, vol. 41. ACM, 2006, pp. 14–25.
[29] Y. Afek, G. Korland, and A. Zilberstein, “Lowering STM Overhead with Static Analysis,” in Proceedings of the 23rd International Conference on Languages and Compilers for Parallel Computing, ser. LCPC’10. Berlin, Heidelberg: Springer-Verlag, 2011, pp. 31–45. [Online]. Available: http://dl.acm.org/citation.cfm?id=1964536.1964539
