[1] Intel and Micron, “Intel and micron produce breakthrough
memory technology,” 2015.
[2] R. Rajachandrasekar, S$. Potluri, A. Venkatesh, K. Hamidouche, M. W. ur Rahman, and D. K. D. Panda, “MICCheck: A Distributed Checkpointing Framework for the Intel
Many Integrated Cores Architecture,” in Proceedings of the
International Symposium on High-performance Parallel and
Distributed Computing (HPDC), 2014.
[3] B. C. Lee, “Phase Change Technology and The Future of
Main Memory,” JEEE Micro, 2010.
[4] T. Kawahara, R. Takemura, K. Miura, J. Hayakawa, S. Ikeda,
Y. Lee, R. Sasaki, Y. Goto, K. Ito, T. Meguro, F. Matsukura, H. Takahashi, H. Matsuoka, and H. Ohno, “2Mb
Spin-Transfer Torque RAM (SPRAM) with Bit-by-Bit Bidirectional Current Write and Parallelizing-Direction Current
Read,” in Proceedings of the International Solid-State Circuits
Conference (ISSCC), 2007.
[5] E. Kultursay, M. Kandemir, A. Sivasubramaniam, and
O. Mutlu, “Evaluating STT-RAM as an Energy-effcient Main
Memory Alternative,” in Proceedings of the International
Symposium on Performance Analysis of Systems and Software
(ISPASS), 2013.
[6] H. Akinaga and H. Shima, “Resistive Random Access Memory (ReRAM) Based on Metal Oxides,” JEEE Journal, 2010.
[7] A. Awad, Y. Wang, D. Shands, and Y. Solihin, “ObfusMem:
A Low-Overhead Access Obfuscation for Trusted Memories,”
in Proceedings of the International Symposium on Computer
Architecture (ISCA), 2017.
[8] A. Awad, B. Kettering, and Y. Solihin, “Non-volatile Memory
Host Controller Interface Performance Analysis in Highperformance I/O Systems,” in Proceedings of International
Symposium on Performance Analysis of Systems and Software
(ISPASS), 2015.
[9] A. Awad, P. Manadhata, S. Haber, Y. Solihin, and W. Horne,
“Silent Shredder: Zero-Cost Shredding for Secure NonVolatile Main Memory Controllers,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2016.
[10] A. Awad, S. Blagodurov, and Y. Solihin, “Write-Aware Management of NVM-based Memory Extensions,” in Proceedings
of the International Conference on Supercomputing (ICS),
2016.
[11] G. Bronevetsky, D. Marques, K. Pingali, P. K. Szwed,
and M. Schulz, “Application-level Checkpointing for Shared
Memory Programs,” in Proceedings of the International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2004.
[12] S. Kannan, A. Gavrilovska, K. Schwan, and D. Milojicic,
“Optimizing Checkpoints Using NVM as Virtual Memory,”
in Proceedings of the International Parallel and Distributed
Processing Symposium (IPDPS), 2013.
[13] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee,
D. Burger, and D. Coetzee, “Better I/O through byteaddressable, persistent memory,” in Proceedings of the Symposium on Operating Systems Principles (SOSP), 2009.
[14] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp, R. K.
Gupta, R. Jhala, and S. Swanson, “NV-heaps: making persistent objects fast and safe with next-generation non-volatile
memories,” in Proceedings of International Conference on
Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.
[15] “Persistent memory programming,” 2016, http://pmem.io.
[16] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne:
Lightweight Persistent Memory,” in Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2011.
[17] S. Pelley, P. M. Chen, and T. F. Wenisch, “Memory Persistency,” in Proceedings of International Symposium on
Computer Architecture (ISCA), 2014.
[18] A. Joshi, V. Nagarajan, M. Cintra, and S. Viglas, “Efficient
Persist Barriers for Multicores,” in Proceedings of International Symposium on Microarchitecture (Micro), 2015.
[19] A. Kolli, S. Pelley, A. Saidi, P. M. Chen, and T. F. Wenisch,
“High-performance Transactions for Persistent Memories,”
in Proceedings of International Conference on Architectural
Support for Programming Languages and Operating Systems
(ASPLOS), 2016.
[20] B. Schroeder and G. A. Gibson, “Understanding Failures in
Petascale Computers,” Journal of Physics, 2007.
[21] D. Ibtesham, K. B. Ferreira, and D. Arnold, “A Checkpoint
Compression Study for High-performance Computing Systems,” International Journal of High Performance Computer
Applications, 2015.
[22] X. Dong, N. Muralimanohar, N. Jouppi, R. Kaufmann, and
Y. Xie, “Leveraging 3D PCRAM Technologies to Reduce
Checkpoint Overhead for Future Exascale Systems,” in Proceedings of the International Conference on High Performance Computing Networking, Storage and Analysis (SC),
2009.
[23] A. Moody, G. Bronevetsky, K. Mohror, and B. R. d. Supinski,
“Design, Modeling, and Evaluation of a Scalable Multi-level
Checkpointing System,” in Proceedings of the International
Conference on High Performance Computing, Networking,
Storage and Analysis (SC), 2010.
[24] K. Huang and J. A. Abraham, “Algorithm-Based Fault Tolerance for Matrix Operations,” IEEE Transactions on Computers, 1984.
[25] W. Bland, P. Du, A. Bouteiller, T. Herault, G. Bosilca,
and J. Dongarra, “A Checkpoint-on-Failure Protocol for
Algorithm-Based Recovery in Standard MPI,” in Proceedings
of the International European Conference on Parallel and
Distributed Computing (Europar), 2012.
[26] M. Fasi, Y. Robert, and B. Ucra, “Combining Algorithmbased Fault Tolerance and Checkpointing for Iterative
Solvers,” Research Report, 2015.
[27] Y. Lu, J. Shu, L. Sun, and O. Mutlu, “Loose-Ordering
Consistency for Persistent Memory,” in Proceedings of the
International Conference on Computer Design (ICCD), 2014.
[28] I. Corp., “Intel 64 and IA-32 Architectures Developer’s Manual: Vol. 3A,” 2016.
[29] C. Mohan, D. Haderle, B. Lindsay, and et al, “ARIES: A
Transaction Recovery Method Supporting Fine-Granularity
Locking and Partial Rollbacks Using Write-Ahead Logging,”
ACM Transactions on Database Systems (TODS), 1992.
[30] N. Binkert and et al., “The GEM5 simulator,” ACM SIGARCH
Computer Architecture News (CAN), 2011.
[31] “Ruby memory system,” 2016, http://gem5.org/Ruby.
[32] F. Bedeschi and et al, “An 8Mb Demonstrator for Highdensity 1.8V Phase-Change Memories,” in Proceedings of the
International Symposium on VLSI Circuits, 2004.
[33] S. C. Woo, J. P. Singh, and J. L. Hennessy, “The Performance
Advantages of Integrating Block Data Transfer in CacheCoherent Multiprocessors,” in Proceedings of the International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 1994.
[34] S. H. Ahn, “Convolution,” 2005,
http://www.songho.ca/dsp/convolution/convolution.html.
[35] M. E. Wolf and M. S. Lam, “A Data Locality Optimizing Algorithm,” in Proceedings of the International Conference on
Programming Language Design and Implementation (PLDI),
1990.
[36] S. C. Woo, M. Ohara, E. Torrie, J. P. Singh, and A. Gupta,
“The SPLASH-2 Programs: Characterization and Methodological Considerations,” in Proceedings of International
Symposium on Computer Architecture (ISCA), 1995.
