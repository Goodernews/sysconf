[1] OpenMP: Application program interface. 2013.
[2] Taskified LU with constant block size. https://pm.bsc.es/ projects/bar/attachment/wiki/SparseLU/, Feb. 2017.
[3] C. Alvarez, J. Corbal, and M. Valero. Fuzzy memoization for floating-point multimedia applications. IEEE Trans. Comput., 54:922–927, 2005.
[4] L. Alvarez, M. Moreto ́, M. Casas, E. Castillo, X. Martorell, J. Labarta, E. Ayguade ́, and M. Valero. Runtime-guided man- agement of scratchpad memories in multicore architectures. In PACT, pages 379–391, 2015.
[5] S. Arora, D. Karger, and M. Karpinski. Polynomial time approximation schemes for dense instances of np-hard prob- lems. In STOC, pages 284–293, 1995.
[6] S. Campanoni, G. Holloway, G.-Y. Wei, and D. Brooks. Helix-up: Relaxing program semantics to unleash paralleliza- tion. In CGO, pages 235–245, 2015.
[7] M. Casas, M. Moreto ́, L. Alvarez, E. Castillo, D. Chasapis, T. Hayes, L. Jaulmes, O. Palomar, O. Unsal, et al. Runtime- aware architectures. In EuroPAR, pages 16–27, 2015.
[8] D. Chasapis, M. Casas, M. Moreto ́, R. Vidal, E. Ayguade ́, J. Labarta, and M. Valero. PARSECSs: Evaluating the impact of task parallelism in the PARSEC benchmark suite. ACM Trans. Archit. Code Optim., pages 41:1–41:22, 2016.
[9] D. Conners and W.-M. W. Hwu. Compiler-directed dynamic computation reuse:rationale and initial results. In MICRO, pages 158–169, 1999.
[10] A. Duran, E. Ayguade ́, R. M. Badia, J. Labarta, L. Martinell, X. Martorell, and J. Planas. OmpSs: a proposal for pro- gramming heterogeneous multi-core architectures. Parallel Processing Letters, pages 173–193, 2011.
[11] H. Esmaeilzadeh, A. Sampson, L. Ceze, and D. Burger. Neu- ral acceleration for general-purpose approximate programs. In MICRO, pages 449–460, 2012.
[12] B. Jenkins. A hash function for hash table lookup. http: //www.burtleburtle.net/bob/hash/doobs.html, Sept. 2016.
[13] M. H. Lipasti, C. B. Wilkerson, and J. P. Shen. Value locality and load value prediction. In ASPLOS, pages 138–147, 1996.
[14] D. Liu, T. Chen, S. Liu, J. Zhou, S. Zhou, O. Teman, X. Feng, X. Zhou, and Y. Chen. Pudiannao: A polyvalent machine learning accelerator. In ASPLOS, pages 369–381, 2015.
[15] J. S. Miguel, M. Badr, and N. E. Jerger. Load value approximation. In MICRO, pages 127–139, 2014.
[16] W. Qadeer, R. Hameed, O. Shacham, P. Venkatesan, C. Kozyrakis, and M. A. Horowitz. Convolution engine: balancing efficiency and flexibility in specialized computing. In ISCA, pages 24–35, 2013.
[17] S. Sastry, R. Bodik, and J. Smith. Characterizing coarse- grained reuse of computation. In FDDO, page 274, 2000.
[18] Y. Sazeides and J. E. Smith. The predictability of data values. In MICRO, pages 248–258, 1997.
[19] S. Sidiroglou-Douskos, S. Misailovic, H. Hoffmann, and M. Rinard. Managing performance vs. accuracy trade-offs with loop perforation. In SIGSOFT, pages 124–134, 2011.
[20] A. Sodani and G. S. Sohi. Dynamic instruction reuse. In ISCA, 1997.
[21] A. Sodani and G. S. Sohi. Understanding the differences between value prediction and instruction reuse. In MICRO, pages 205–215, 1998.
[22] M. Valero, M. Moreto ́, M. Casas, E. Ayguade ́, and J. Labarta. Runtime-aware architectures: A first approach. Int. J. Super- computing Frontiers and Innovations, (1):29–44, 2014.
[23] S. Wen, X. Liu, and M. Chabbi. Runtime value numbering: A profiling technique to pinpoint redundant computations. In PACT, pages 254–265, 2015.
