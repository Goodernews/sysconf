[1] Anna Antola, R Negrini, MG Sami, and Nello Scarabottolo. 1992. Fault tolerance
in FFT arrays: time redundancy approaches. Journal of VLSI signal processing
systems for signal, image and video technology 4, 4 (1992), 295–316.
[2] Rizwan A Ashraf, Roberto Gioiosa, Gokcen Kestor, Ronald F DeMara, ChenYong Cher, and Pradip Bose. 2015. Understanding the propagation of transient
errors in HPC applications. In Proceedings of the International Conference for High
Performance Computing, Networking, Storage and Analysis. ACM, 72.
[3] Prithviraj Banerjee, Joe T Rahmeh, Craig Stunkel, VS Nair, Kaushik Roy, Vijay
Balasubramanian, Jacob Abraham, and others. 1990. Algorithm-based fault
tolerance on a hypercube multiprocessor. Computers, IEEE Transactions on 39, 9
(1990), 1132–1145.
[4] Patrick G Bridges, Kurt B Ferreira, Michael A Heroux, and Mark Hoemmen. 2012.
Fault-tolerant linear solvers via selective reliability. arXiv preprint arXiv:1206.1390
(2012).
[5] Greg Bronevetsky and Bronis de Supinski. 2008. Soft error vulnerability of
iterative linear algebra methods. In Proceedings of the 22nd annual international
conference on Supercomputing. ACM, 155–164.
[6] Franck Cappello, Al Geist, Bill Gropp, Laxmikant Kale, Bill Kramer, and Mark
Snir. 2009. Toward exascale resilience. International Journal of High Performance
Computing Applications (2009).
[7] Marc Casas, Bronis R de Supinski, Greg Bronevetsky, and Martin Schulz. 2012.
Fault resilience of the algebraic multi-grid solver. In Proceedings of the 26th ACM
international conference on Supercomputing. ACM, 91–100.
[8] Jieyang Chen, Xin Liang, and Zizhong Chen. 2016. Online Algorithm-Based
Fault Tolerance for Cholesky Decomposition on Heterogeneous Systems with
GPUs. In Parallel and Distributed Processing Symposium, 2016 IEEE International.
IEEE, 993–1002.
[9] A Chien, P Balaji, P Beckman, N Dun, A Fang, H Fujita, K Iskra, Z Rubenstein, Z
Zheng, R Schreiber, and others. 2015. Versioned Distributed Arrays for Resilience
in Scientific Applications: Global View Resilience. Journal of Computational
Science (2015).
[10] Yoon-Hwa Choi and Miroslaw Malek. 1988. A fault-tolerant FFT processor.
Computers, IEEE Transactions on 37, 5 (1988), 617–621.
[11] Thomas H Cormen and David M Nicol. 1998. Performing out-of-core FFTs on
parallel disk systems. Parallel Comput. 24, 1 (1998), 5–20.
[12] Teresa Davies and Zizhong Chen. 2013. Correcting soft errors online in LU factorization. In Proceedings of the 22nd international symposium on High-performance
parallel and distributed computing. ACM, 167–178.
[13] Sheng Di and Franck Cappello. 2016. Adaptive impact-driven detection of
silent data corruption for HPC applications. IEEE Transactions on Parallel and
Distributed Systems 27, 10 (2016), 2809–2823.
[14] James Elliott, Mark Hoemmen, and Frank Mueller. 2014. Evaluating the Impact
of SDC on the GMRES Iterative Solver. In IPDPS. 1193–1202.
[15] Matteo Frigo and Steven G Johnson. 1998. FFTW: An adaptive software architecture for the FFT. In Acoustics, Speech and Signal Processing, 1998. Proceedings of
the 1998 IEEE International Conference on, Vol. 3. IEEE, 1381–1384.
[16] Matteo Frigo and Steven G Johnson. 2005. The design and implementation of
FFTW3. Proc. IEEE 93, 2 (2005), 216–231.
[17] Hongyi Fu and Xuejun Yang. 2009. Fault tolerant parallel FFT using parallel
failure recovery. In Computational Science and Its Applications, 2009. ICCSA’09.
International Conference on. IEEE, 257–261.
[18] A Geist. 2016. How to kill a supercomputer: Dirty power, cosmic rays, and bad
solder. IEEE Spectrum (2016).
[19] W Morven Gentleman and Gordon Sande. 1966. Fast Fourier Transforms: for
fun and profit. In Proceedings of the November 7-10, 1966, fall joint computer
conference. ACM, 563–578.
[20] Kuang-Hua Huang and Jacob A. Abraham. 1984. Algorithm-Based Fault Tolerance for Matrix Operations. Computers, IEEE Transactions on 33, 6 (1984),
518–528.
[21] Luc Jaulmes, Marc Casas, Miquel Moretó, Eduard Ayguadé, Jesús Labarta, and
Mateo Valero. 2015. Exploiting asynchrony from exact forward recovery for
due in iterative solvers. In Proceedings of the International Conference for High
Performance Computing, Networking, Storage and Analysis. ACM, 53.
[22] Jing-Yang Jou, Jacob Abraham, and others. 1988. Fault-tolerant FFT networks.
Computers, IEEE Transactions on 37, 5 (1988), 548–561.
[23] Toyohisa Kaneko and Bede Liu. 1970. Accumulation of round-off error in fast
Fourier transforms. Journal of the ACM (JACM) 17, 4 (1970), 637–654.
[24] Dong Li, Zizhong Chen, Panruo Wu, and Jeffrey S Vetter. 2013. Rethinking
algorithm-based fault tolerance with a cooperative software-hardware approach.
In Proceedings of the International Conference on High Performance Computing,
Networking, Storage and Analysis. ACM, 44.
[25] Choong Gun Oh and Hee Yong Youn. 1993. On concurrent error detection,
location, and correction of FFT networks. In Fault-Tolerant Computing, 1993.
FTCS-23. Digest of Papers., The Twenty-Third International Symposium on. IEEE,
596–605.
[26] Choong Gun Oh, Hee Yong Youn, and Vijay K Raj. 1995. An efficient algorithmbased concurrent error detection for FFT networks. Computers, IEEE Transactions
on 44, 9 (1995), 1157–1162.
[27] Laercio L Pilla, P Rech, F Silvestri, Christopher Frost, Philippe Olivier Alexandre
Navaux, M Sonza Reorda, and Luigi Carro. 2014. Software-based hardening
strategies for neutron sensitive FFT algorithms on GPUs. Nuclear Science, IEEE
Transactions on 61, 4 (2014), 1874–1880.
[28] Piyush Sao and Richard W. Vuduc. 2013. Self-stabilizing iterative solvers. In
ScalA. 4:1–4:8.
[29] Manu Shantharam, Sowmyalatha Srinivasmurthy, and Padma Raghavan. 2011.
Characterizing the impact of soft errors on iterative methods in scientific computing. In ICS. 152–161.
[30] Manu Shantharam, Sowmyalatha Srinivasmurthy, and Padma Raghavan. 2012.
Fault tolerant preconditioned conjugate gradient for sparse linear system solution.
In ICS. 69–78.
[31] Joseph Sloan, Rakesh Kumar, and Greg Bronevetsky. 2012. Algorithmic approaches to low overhead fault detection for sparse linear algebra. In DSN. 1–12.
[32] Miroslav Stoyanov and Clayton Webster. 2015. Numerical analysis of fixed
point algorithms in the presence of hardware faults. SIAM Journal on Scientific
Computing 37, 5 (2015), C532–C553.
[33] DL Tao and Carlos R. P. Hartmann. 1993. A novel concurrent error detection
scheme for FFT networks. Parallel and Distributed Systems, IEEE Transactions on
4, 2 (1993), 198–221.
[34] Dingwen Tao, Shuaiwen Leon Song, Sriram Krishnamoorthy, Panruo Wu, Xin
Liang, Eddy Z Zhang, Darren Kerbyson, and Zizhong Chen. 2016. New-sum:
A novel online abft scheme for general iterative methods. In Proceedings of the
25th ACM International Symposium on High-Performance Parallel and Distributed
Computing. ACM, 43–55.
[35] Sying-Jyan Wang and Niraj K Jha. 1994. Algorithm-based fault tolerance for FFT
networks. Computers, IEEE Transactions on 43, 7 (1994), 849–854.
[36] C Weinstein. 1969. Roundoff noise in floating point fast Fourier transform
computation. IEEE Transactions on Audio and Electroacoustics 17, 3 (1969), 209–
215.
[37] Panruo Wu and Zizhong Chen. 2014. FT-ScaLAPACK: Correcting soft errors online for ScaLAPACK Cholesky, QR, and LU factorization routines. In Proceedings
of the 23rd international symposium on High-performance parallel and distributed
computing. ACM, 49–60.
[38] Panruo Wu, Nathan DeBardeleben, Qiang Guan, Sean Blanchard, Jieyang Chen,
Dingwen Tao, Xin Liang, Kaiming Ouyang, and Zizhong Chen. 2017. Silent Data
Corruption Resilient Two-sided Matrix Factorizations. In Proceedings of the 22nd
ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming.
ACM, 415–427.
[39] Panruo Wu, Chong Ding, Longxiang Chen, Feng Gao, Teresa Davies, Christer
Karlsson, and Zizhong Chen. 2011. Fault tolerant matrix-matrix multiplication:
correcting soft errors on-line. In Proceedings of the second workshop on Scalable
algorithms for large-scale systems. ACM, 25–28.
[40] Panruo Wu, Qiang Guan, Nathan DeBardeleben, Sean Blanchard, Dingwen Tao,
Xin Liang, Jieyang Chen, and Zizhong Chen. 2016. Towards Practical Algorithm
Based Fault Tolerance in Dense Linear Algebra. In Proceedings of the 25th ACM
International Symposium on High-Performance Parallel and Distributed Computing.
