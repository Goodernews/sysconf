
[1] M.-C. Albutiu, A. Kemper, and T. Neumann.

Massively parallel sort-merge joins in main memory
multi-core database systems. PVLDB, 2012.

[2] S. Ashkiani, A. A. Davidson, U. Meyer, and J. D.

Owens. GPU Multisplit. CoRR, abs/1701.01189,
January 2017.

[3] C. Balkesen, G. Alonso, J. Teubner, and M. T. ¨Ozsu.

Multi-core, main-memory joins: Sort vs. hash
revisited. PVLDB, 2013.
[4] S. Baxter. Modern GPU.

https://github.com/moderngpu/moderngpu, 2016.

[5] B. Chandramouli and J. Goldstein. Patience is a

virtue: Revisiting merge and sort on modern
processors. SIGMOD, 2014.

[6] J. Chhugani, A. D. Nguyen, V. W. Lee, W. Macy,
M. Hagog, Y.-K. Chen, A. Baransi, S. Kumar, and
P. Dubey. Eﬃcient implementation of sorting on
multi-core simd cpu architecture. PVLDB, 2008.

[7] A. Ching, S. Edunov, M. Kabiljo, D. Logothetis, and

S. Muthukrishnan. One trillion edges: Graph
processing at facebook-scale. PVLDB, 2015.

[8] M. Cho, D. Brand, R. Bordawekar, U. Finkler,

V. Kulandaisamy, and R. Puri. Paradis: An eﬃcient
parallel algorithm for in-place radix sort. PVLDB,
2015.

[9] Cisco visual networking index: Global mobile data

traﬃc forecast update, 2015-2020 white paper.
Technical report, Cisco, 2016.

[10] A. Davidson, D. Tarjan, M. Garland, and J. D.

Owens. Eﬃcient parallel merge sort for ﬁxed and
variable length keys. InPar 2012, 2012.

[11] F. Dehne and H. Zaboli. Deterministic sample sort for

GPUs. Parallel Processing Letters, 2012.

[12] N. Govindaraju, J. Gray, R. Kumar, and D. Manocha.
Gputerasort: High performance graphics co-processor
sorting for large database management. SIGMOD,
2006.

[13] G. Graefe. Implementing sorting in database systems.

ACM Computing Surveys (CSUR), 2006.

[14] J. Gray, P. Sundaresan, S. Englert, K. Baclawski, and

P. J. Weinberger. Quickly generating billion-record
synthetic databases. In ACM SIGMOD Record, 1994.

[15] O. Green, R. McColl, and D. A. Bader. Gpu merge

path: a gpu merging algorithm. ICS 2012, 2012.
[16] L. Ha, J. Kr¨uger, and C. T. Silva. Fast four-way

parallel radix sorting on gpus. Computer Graphics
Forum, 2009.

[17] M. Harris, S. Sengupta, and J. D. Owens. Gpu gems 3.

Parallel Preﬁx Sum (Scan) with CUDA, 2007.

[18] B. He, N. K. Govindaraju, Q. Luo, and B. Smith.
Eﬃcient gather and scatter operations on graphics
processors. SC ’07, 2007.

[19] M. Herf. Radix tricks.

http://stereopsis.com/radix.html, 2001.

[20] J. Hoberock and N. Bell. Thrust: A parallel template

library. https://thrust.github.io, 2016.

[21] H. Inoue, T. Moriyama, H. Komatsu, and T. Nakatani.

Aa-sort: A new parallel sorting algorithm for
multi-core simd processors. PACT ’07, 2007.

[22] H. Inoue and K. Taura. Simd- and cache-friendly

algorithm for sorting an array of structures. PVLDB,
2015.

[23] C. Kim, T. Kaldewey, V. W. Lee, E. Sedlar, A. D.

Nguyen, N. Satish, J. Chhugani, A. Di Blas, and
P. Dubey. Sort vs. hash revisited: Fast join
implementation on modern multi-core cpus. PVLDB,
2009.

[24] C. Kim, J. Park, N. Satish, H. Lee, P. Dubey, and

J. Chhugani. Cloudramsort: Fast and eﬃcient
large-scale distributed ram sort on shared-nothing
cluster. SIGMOD, 2012.

[25] P. Kipfer and R. Westermann. Improved gpu sorting.

GPU gems, 2:733–746, 2005.

[26] J. Krueger, M. Grund, I. Jaeckel, A. Zeier, and
H. Plattner. Applicability of gpu computing for
eﬃcient merge in in-memory databases. In ADMS@
VLDB, 2011.

[27] N. Leischner, V. Osipov, and P. Sanders. Gpu sample

sort. IPDPS, 2010.

[28] D. Merrill and A. Grimshaw. High performance and
scalable radix sorting: A case study of implementing
dynamic parallelism for gpu computing. Parallel
Processing Letters, 2011.

[29] D. Merrill and NVIDIA Corporation. CUB.

https://github.com/NVlabs/cub, 2016.

[30] M. Najaﬁ, M. Sadoghi, and H. A. Jacobsen.

Conﬁgurable hardware-based streaming architecture
using online programmable-blocks. ICDE, 2015.

[31] NVIDIA GeForce GTX 980. Whitepaper. Technical

report, NVIDIA, 2014.

[32] NVIDIA Tesla P100. Whitepaper. Technical report,

NVIDIA, 2016.

[33] O. Polychroniou and K. A. Ross. A comprehensive

study of main-memory partitioning and its application
to large-scale comparison- and radix-sort. SIGMOD,
2014.

[34] N. Satish, M. Harris, and M. Garland. Designing

eﬃcient sorting algorithms for manycore gpus. IPDPS,
2009.

[35] N. Satish, C. Kim, J. Chhugani, A. D. Nguyen, V. W.

Lee, D. Kim, and P. Dubey. Fast sort on cpus and
gpus: A case for bandwidth oblivious simd sort.
SIGMOD, 2010.

[36] A. Shahvarani and H.-A. Jacobsen. A hybrid b+-tree

as solution for in-memory indexing on cpu-gpu
heterogeneous computing platforms. SIGMOD, 2016.

[37] E. Sintorn and U. Assarsson. Fast parallel gpu-sorting

using a hybrid algorithm. Journal of Parallel and
Distributed Computing, 2008.

[38] I. Tanasic, L. Vilanova, M. Jord`a, J. Cabezas,

I. Gelado, N. Navarro, and W.-m. Hwu. Comparison
based sorting for systems with multiple gpus.
GPGPU, 2013.

[39] K. Thearling and S. Smith. An improved

supercomputer sorting benchmark. SC ’92, 1992.

[40] J. Wassenberg and P. Sanders. Engineering a

Multi-core Radix Sort. Euro-Par 2011. 2011.

[41] X. Ye, D. Fan, W. Lin, N. Yuan, and P. Ienne. High
performance comparison-based sorting algorithm on
many-core gpus. IPDPS, 2010.

