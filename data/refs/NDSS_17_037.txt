
[1] J. Ansel, P. Marchenko, U. Erlingsson, E. Taylor, B. Chen, D. L. Schuff,
D. Sehr, C. L. Biffle, and B. Yee, “Language-independent sandboxing
of just-in-time compilation and self-modifying code,” ACM SIGPLAN
Notices, vol. 46, no. 6, pp. 355-366, 2011.

[2] M. Athanasakis, E. Athanasopoulos, M. Polychronakis, G. Portokalidis,
and S. Ioannidis, “The Devil is in the Constants: Bypassing Defenses in
Browser JIT Engines,” in Proceedings of the Network and Distributed
System Security (NDSS) Symposium, February 2015.

[3] M. Backes, T. Holz, B. Kollenda, P. Koppe, S$. Niimberger, and
J. Pewny, “You Can Run but You Can’T Read: Preventing Disclosure
Exploits in Executable Code,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security, set.
CCS ’14. New York, NY, USA: ACM, 2014, pp. 1342-1353.
[Online]. Available: http://doi.acm.org/10.1145/2660267.2660378

[4] “Baracuda networks.” [Online]. Available: https://campus.barracuda.
com/product/websecurity gateway/article/B WF/UsingSSLInspection/

[5] A. Bittau, A. Belay, A. Mashtizadeh, D. Maziéres, and D. Boneh,
“Hacking Blind,” in Proceedings of the 2014 IEEE Symposium on
Security and Privacy, set. SP ’14, Washington, DC, USA, 2014, pp.
227-242.

[6] D. Blazakis, “Interpreter Exploitation,” in Proceedings of the 4th
USENIX Conference on Offensive Technologies, set. WOOT’ 10, 2010.

[7] “Blue coat.” [Online]. Available: https://www. bluecoat.com/
products-and-solutions/ssl-visibility-appliance

[8] K. Braden, 8. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi, “Leakage-resilient layout randomization for mobile
devices,” in 23rd Annual Network & Distributed System Security
Symposium (NDSS), Feb. 2016.

[9] 8. Checkoway, L. Davi, A. Dmitrienko, A.-R. Sadeghi, H. Shacham,
and M. Winandy, “Return-oriented Programming Without Returns,”
in Proceedings of the 17th ACM Conference on Computer and
Communications Security, ser. CCS °10. New York, NY, USA: ACM,
2010, pp. 559-572. [Online]. Available: http://doi.acm.org/10.1145/
1866307.1866370

[10] P. Chen, Y. Fang, B. Mao, and L. Xie, “JITDefender: A Defense
against JIT Spraying Attacks,” in Future Challenges in Security and
Privacy for Academia and Industry, set. IFIP Advances in Information
and Communication Technology, J. Camenisch, S. Fischer-Hbner,
Y. Murayama, A. Portmann, and C. Rieder, Eds. Springer Berlin
Heidelberg, 2011, vol. 354, pp. 142-153. [Online]. Available:
http://dx.doi.org/10.1007/978-3-642-21424-0\_12

[11] P. Chen, R. Wu, and B. Mao, “JITSafe: a Framework against
Just-in-time Spraying Attacks,” IET Information Security, vol. 7, no. 4,
pp. 283-292, 2013. [Online]. Available: http://dx.doi.org/10.1049/
iet-ifs.2012.0142

[12] 8. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical Code Randomization
Resilient to Memory Disclosure,” in 36th IEEE Symposium on Security
and Privacy (Oakland), May 2015.

[13] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi, A.R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz, “It’s a TRAP: Table
Randomization and Protection against Function Reuse Attacks,” in Proceedings of 22nd ACM Conference on Computer and Communications
Security (CCS), 2015.

[14] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz, R. Hund,
S. Niimberger, and A.-R. Sadeghi, “Mocfi: A framework to mitigate
control-flow attacks on smartphones.” in NDSS, 2012.

[15] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the
gadgets: On the ineffectiveness of coarse-grained control-flow integrity
protection,” in 23rd USENIX Security Symposium, 2014.

[16] A. Doupé, W. Cui, M. H. Jakubowski, M. Peinado, C. Kruegel, and
G. Vigna, “dedacota: toward preventing server-side xss via automatic
code and data separation,” in Proceedings of the 2013 ACM SIGSAC
conference on Computer & communications security. ACM, 2013, pp.
1205-1216.

[17] T. Durden, “Bypassing PaX ASLR protection.” [Online]. Available:
http://phrack. org/issues/59/9.html

[18] “Escodegen: Ecmascript code generator from mozilla’s parser api ast.”
[Online]. Available: https://github.com/estools/escodegen

[19] “Esprima: Ecmascript parsing infrastructure for multipurpose analysis.”
[Online]. Available: http://esprima.org/

[20] “Estraverse: Ecmascript traversal functions from esmangle project.”
[Online]. Available: https://github.com/estools/estraverse

[21] “Forcepoint.” [Online]. Available: https://www.websense.com/content/
support/library/web/v8 1/weg\_help/ssl\_enable.aspx

[22] “Forefront threat management gateway.” [Online]. Available: https:
/hechnet.microsoft.com/en-us/library/dd441073.aspx

[23] “Fortigate.” [Online]. Available: http://cookbook..fortinet. com/
why-you-should-use-ssl-inspection/

[24] J. Gionta, W. Enck, and P. Ning, “Hidem: Protecting the contents
of userspace memory in the face of disclosure vulnerabilities,” in
Proceedings of the 5th ACM Conference on Data and Application
Security and Privacy, ser. CODASPY ’15. New York, NY, USA:
ACM, 2015, pp. 325-336. [Online]. Available: http://doi.acm.org/10.
1145/2699026.2699107

[25] E. Goktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-flow integrity,” in Security and Privacy
(SP), 2014 IEEE Symposium on. TYEEE, 2014, pp. 575-589.

[26] C. Grier, L. Ballard, J. Caballero, N. Chachra, C. J. Dietrich,
K. Levchenko, P. Mavrommatis, D. McCoy, A. Nappa, A. Pitsillidis,
N. Provos, M. Z. Rafique, M. A. Rajab, C. Rossow, K. Thomas,
V. Paxson, S. Savage, and G. M. Voelker, “Manufacturing compromise:
The emergence of exploit-as-a-service,” in Proceedings of the 2012
ACM Conference on Computer and Communications Security, ser.
CCS 712. New York, NY, USA: ACM, 2012, pp. 821-832. [Online].
Available: http://doi.acm.org/10.1145/2382196.2382283

[27] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson,
“ILR: Where’D My Gadgets Go?” in Proceedings of the 2012 IEEE
Symposium on Security and Privacy, set. SP ’12, Washington, DC,
USA, 2012, pp. 571-585. [Online]. Available: http://dx.doi.org/10.
1109/SP.2012.39

[28] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments,” in
Proceedings of the 21st USENIX Conference on Security Symposium,
Berkeley, CA, USA, 2012.

[29] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz, “Librando: Transparent Code Randomization for Just-in-time Compilers,” in Proceedings
of the 2013 ACM SIGSAC conference on Computer & communications
security, ser. CCS 713, 2013.

[30] “Http mitm proxy.” [Online]. Available: https://github.com/joeferner/
node-http-mitm-proxy

[31] a. huku, “Exploiting VLC. A Case Study on Jemalloc Heap Overflows.”
[Online]. Available: http://Awww.phrack.org/issues/68/13.html

[32] “Javascript obfuscation.” [Online]. Available: http://patriciopalladino.
com/blog/2012/08/09/non-alphanumeric-javascript.html

[33] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address Space
Layout Permutation (ASLP): Towards Fine-Grained Randomization of
Commodity Software,” in Proceedings of the 22Nd Annual Computer
Security Applications Conference, ser. ACSAC ’°06, Washington, DC,
2006. [Online]. Available: http://dx.doi.org/10.1109/ACSAC.2006.9

[34] P. Larsen, A. Homescu, §. Brunthaler, and M. Franz, “SoK: Automated
Software Diversity,” in Proceedings of the 2014 IEEE Symposium on
Security and Privacy, set. SP ’14, Washington, DC, USA, 2014, pp.
276-291. [Online]. Available: http://dx.doi.org/10.1109/SP.2014.25

[35] K. Lu, S. Nmberger, M. Backes, and W. Lee, “How to make aslr win
the clone wars: Runtime re-randomization,” in Network and Distributed
System Security Symposium. Symposium on Network and Distributed
System Security (NDSS), K. Lu, 8. Nmberger, M. Backes, and W. Lee,
Eds. Internet Society, 2015.

[36] G. Maisuradze, M. Backes, and C. Rossow, “What cannot be read,
cannot be leveraged? revisiting assumptions of jit-rop defenses,” in
25th USENIX Security Symposium (USENIX Security 16). Austin, TX:
USENIX Association, Aug. 2016, pp. 139-156. [Online]. Available:
https://www.usenix.org/conference/usenixsecurity 1 6/technical-sessions/
presentation/maisuradze

[37] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz,
“Opaque control-flow integrity.” in NDSS, 2015.

[38] Nergal. The Advanced Return-into-lib(c) Exploits. [Online]. Available:
http://phrack. org/issues/58/4.html

[39] “Node.js: A javascript runtime built on chrome’s v8 javascript engine.”
[Online]. Available: https://nodejs.org/

[40] “Octane: The javascript benchmark suite for the modern web.”
[Online]. Available: https://developers.google.com/octane/

[41] K. Onarlioglu, L. Bilge, A. Lanzi, D. Balzarotti, and E. Kirda,
“G-Free: Defeating Return-oriented Programming Through Gadgetless Binaries,” in Proceedings of the 26th Annual Computer
Security Applications Conference, set. ACSAC ’10. New York,
NY, USA: ACM, 2010, pp. 49-58. [Online]. Available: http:
/fdoi.acm.org/10.1145/1920261.1920269

[42] “Palo alto networks.” [Online]. Available: —https://www.
paloaltonetworks.com/documentation/60/pan- os/pan- os/decryption

[43] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing
the Gadgets: Hindering Return-Oriented Programming Using In-place
Code Randomization,” in Proceedings of the 2012 IEEE Symposium
on Security and Privacy, set. SP ’12, Washington, DC, USA, 2012.
[Online]. Available: http://dx.doi.org/10.1109/SP.2012.41

[44] C. Reis, J. Dunagan, H. J. Wang, O. Dubrovsky, and S. Esmeir,
“Browsershield: Vulnerability-driven filtering of dynamic html,” ACM
Transactions on the Web (TWEB), vol. 1, no. 3, p. 11, 2007.

[45] J. Ruderman, “Introducing jsfunfuzz.” [Online]. Available: http:
/Awww.squarefree.com/2007/08/02/introducing-jsfunfuzz/

[46] E. J. Schwartz, T. Avgerinos, and D. Brumley, “Q: Exploit Hardening
Made Easy,” in Proceedings of the 20th USENIX Conference on
Security, ser. SEC’11. Berkeley, CA, USA: USENIX Association,
2011, pp. 25-25. [Online]. Available: http://dl.acm.org/citation.cfm?
id=2028067.2028092

[47] H. Shacham, “The Geometry of Innocent Flesh on the Bone: Returninto-libe Without Function Calls (on the x86),” in Proceedings of the
14th ACM Conference on Computer and Communications Security,
ser. CCS °07. New York, NY, USA: ACM, 2007, pp. 552-561.
[Online]. Available: http://doi.acm.org/10.1145/1315245.1315313

[48] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh,
“On the Effectiveness of Address-space Randomization,” in Proceedings
of the Ilth ACM Conference on Computer and Communications
Security, ser. CCS ’04. New York, NY, USA: ACM, 2004, pp. 298307. [Online]. Available: http://doi.acm.org/10.1145/1030083. 1030124

[49] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A.-R. Sadeghi, “Just-In-Time Code Reuse: On the Effectiveness of
Fine-Grained Address Space Layout Randomization,” in Proceedings
of the 2013 IEEE Symposium on Security and Privacy, set. SP
’13, Washington, DC, USA, 2013, pp. 574-588. [Online]. Available:
http://dx.doi.org/10.1109/SP.2013.45

[50] P. Team, “Address Space Layout Randomization (ASLR).” [Online].
Available: http://pax.grsecurity.net/docs/aslr.txt

[51] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary
Stirring: Self-randomizing Instruction Addresses of Legacy x86
Binary Code,” in Proceedings of the 2012 ACM Conference on
Computer and Communications Security, set. CCS ’12. New
York, NY, USA: ACM, 2012, pp. 157-168. [Online]. Available:
http://doi.acm.org/10. 1145/2382 196.2382216

[52] T. Wei, T. Wang, L. Duan, and J. Luo, “INSeRT: Protect Dynamic Code
Generation against Spraying,” in Information Science and Technology
(ICIST), 2011 International Conference on, Match 2011, pp. 323-328.

[53] R. Wu, P. Chen, B. Mao, and L. Xie, “RIM: A Method to Defend
from JIT Spraying Attack,” in Proceedings of the 2012 Seventh
International Conference on Availability, Reliability and Security, sev.
ARES 712, Washington, DC, USA, 2012, pp. 143-148. [Online].
Available: http://dx.doi.org/10.1109/ARES.2012.11

[54] D. Yu, A. Chander, N. Islam, and I. Serikov, “Javascript instrumentation
for browser security,” in ACM SIGPLAN Notices, vol. 42, no. 1. ACM,
2007, pp. 237-249.

[55] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, §. McCamant,
D. Song, and W. Zou, “Practical control flow integrity and randomization for binary executables,” in Security and Privacy (SP), 2013 IEEE
Symposium on. YEEE, 2013, pp. 559-573.

[56] M. Zhang and R. Sekar, “Control flow integrity for cots binaries.” in
Usenix Security, vol. 13, 2013.
[57]“Zscaler.” [Online]. Available:
ssl-inspection

https://www.zscaler.com/products/