[1] T. Harris, S. Marlow, S. L. P. Jones, and M. Herlihy, “Composable memory transactions.” PPOPP, pp. 48-60, 2005.

[2] A. Skyrme and N. Rodriguez, “From Locks to Transactional
Memory: Lessons Learned from Porting a Real-world Application,” in The 8th ACM SIGPLAN Workshop on Transactional Computing, Mar. 2013, pp. 1-9.

[3] M. Herlihy and N. Shavit, The Art of Multiprocessor Programming. San Francisco, CA, USA: Morgan Kaufmann
Publishers Inc., 2008.

[4] W.-L. Hung and V. K. Garg, “AutoSynch: an automatic-signal
monitor based on predicate tagging,” in PLDI ’13: Proceedings of the 2013 ACM SIGPLAN conference on Programming
language design and implementation, 2013, pp. 253-262.

[5] N. Shavit and D. Touitou, “Software transactional memory,”
in PODC ’95: Proceedings of the fourteenth annual ACM
symposium on Principles of distributed computing. ACM
Request Permissions, Aug. 1995.

[6] T. Harris, J. R. Larus, and R. Rajwar, Transactional Memory.
Morgan & Claypool, 2010.

[7] B. Saha, B. Saha, A.-R. Adl-Tabatabai, A.-R. Adl-Tabatabai,
R. L. Hudson, R. L. Hudson, C. C. Minh, C. C. Minh,
B. Hertzberg, and B. Hertzberg, “McRT-STM: a high performance software transactional memory system for a multi-core
runtime,” in PPoPP ’06: Proceedings of the eleventh ACM
SIGPLAN symposium on Principles and practice of parallel
programming. ACM Request Permissions, Mar. 2006.

[8] C. A. R. Hoare, “Monitors: An Operating System Structuring
Concept,” Communications of the ACM, vol. 17, no. 10, pp.
549-557, 1974.

[9] P. B. Hansen, “The Programming Language Concurrent Pascal,” IEEE Trans. Softw. Eng., vol. 1, no. 1, pp. 199-207,
1975.

[10] V. Luchangco and M. Wong. (2014, Feb.) Transactional
Memory Support for C++. [Online]. Available: http://www.
open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3919.pdf

[11] PB. Dudnik and M. M. Swift, “Condition Variables and Transactional Memory: Problem or Opportunity?” in The 4th ACM
SIGPLAN Workshop on Transactional Computing, Feb. 2009,
pp. 1-10.

[12] C. Wang, Y. Liu, and M. F Spear, “Transaction-friendly
condition variables.” SPAA, pp. 198-207, 2014.

[13] C. Wang and M. Spear, “Practical Condition Synchronization
for Transactional Memory,” in Proceedings of the Eleventh
European Conference on Computer Systems. New York,
NY, USA: ACM, 2016, pp. 32:1-32:16.

[14] B. Goetz, T. Peierls, J. Bloch, J. Bowbeer, D. Holmes, and
D. Lea, Java concurrency in practice. | Addison-Wesley
Professional, 2006.

[15] C. S. Committee. (2011) Working draft, standard for programming language C++ . [Online]. Available: http://www.openstd.org/jtc1/sc22/wg21/docs/papers/2011/n3242.pdf

[16] Y. Afek, G. Korland, and A. Zilberstein, “Lowering STM
Overhead with Static Analysis.” LCPC, pp. 31-45, 2010.

[17] G. Korland, N. Shavit, and P. Felber, “Noninvasive concurrency with Java STM,” in MultiProg 2010: Third Workshop
on Programmability Issues for Multi-Core Computers, 2010.
