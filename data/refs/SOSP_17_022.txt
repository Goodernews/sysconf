
[1] https://bitbucket.org/uw-madison-networking-research/arc.

[2] Cisco IOS configuration fundamentals command reference.
http://www.cisco.com/c/en/us/td/docs/ios/fundamentals/command/
reference/cf_book.pdf.

[3] The z3 theorem prover. https://github.com/Z3Prover/z3.

[4] R. Aharoni and E. Berger. Menger’s theorem for infinite graphs. Inventiones mathematicae, 2008.

[5] M. Al-Fares, A. Loukissas, and A. Vahdat. A scalable, commodity data
center network architecture. In SIGCOMM, 2008.

[6] A. Arcuri. On the automation of fixing software bugs. In International
Conference on Software Engineering (ICSE), 2008.

[7] R. Beckett, A. Gupta, R. Mahajan, and D. Walker. A general approach
to network configuration verification. In SIGCOMM, 2017.

[8] R. Beckett, R. Mahajan, T. Millstein, J. Padhye, and D. Walker. Don’t
mind the gap: Bridging network-wide objectives and device-level
configurations. In SIGCOMM, 2016.

[9] T. Benson, A. Akella, and D. Maltz. Unraveling the complexity of
network management. In Symposium on Networked Systems Design
and Implementation (NSDI), 2009.

[10] D. Burton and P. L. Toint. On an instance of the inverse shortest paths
problem. Math. Program., 53:45-61, 1992.

[11] D. Caldwell, S. Lee, and Y. Mandelbaum. Adaptive parsing of router
configuration languages. In IEEE Internet Network Management Workshop (INM), 2008.

[12] L. D’ Antoni, R. Samanta, and R. Singh. Qlose: Program repair with
quantiative objectives. In International Conference on Computer Aided
Verification (CAV), 2016.

[13] V. Debroy and W. E. Wong. Using mutation to automatically suggest
fixes for faulty programs. In International Conference on Software
Testing, Verification and Validation (ICST), 2010.

[14] EF Demarco, J. Xuan, D. L. Berre, and M. Monperrus. Automatic
repair of buggy if conditions and missing preconditions with SMT. In
International Workshop on Constraints in Software Testing, Verification,
and Analysis (CSTVA), 2014.
[15] A. El-Hassany, P. Tsankov, L. Vanbever, and M. Vechev. Network-wide
configuration synthesis. Technical Report 1611.02537, arXiv, 2016.
[16] S. K. Fayaz, T. Sharma, A. Fogel, R. Mahajan, T. D. Millstein, V. Sekar,
and G. Varghese. Efficient network reachability analysis using a succinct control plane representation. In Symposium on Operating Systems
Design and Implementation (OSDI), 2016.
[17] N. Feamster and H. Balakrishnan. Detecting BGP configuration faults
with static analysis. In Symposium on Networked Systems Design and
Implementation (NSDI), 2005.
[18] A. Fogel, S. Fung, L. Pedrosa, M. Walraed-Sullivan, R. Govindan,
R. Mahajan, and T. Millstein. A general approach to network configuration analysis. In Symposium on Networked Systems Design and
Implementation (NSDI), 2015.
[19] E. W. Fulp. Optimization of network firewall policies using directed
acyclic graphs. In IEEE Internet Mgmt Conf, 2005.
[20] A. Gember-Jacobson, R. Viswanathan, A. Akella, and R. Mahajan. Fast
control plane analysis using an abstract representation. In SIGCOMM,
2016.
[21] A. Gember-Jacobson, R. Viswanathan, A. Akella, and R. Mahajan.
Fast control plane analysis using an abstract representation. Technical
Report TR1838, University of Wisconsin-Madison, 2016.
[22] A. Gember-Jacobson, W. Wu, X. Li, A. Akella, and R. Mahajan. Management plane analytics. In Internet Measurement Conference (IMC),
2015.
[23] D. Gopinath, M. Z. Malik, and S. Khurshid. Specification-based program repair using SAT. In International Conference on Tools and
Algorithms for the Construction and Analysis of Systems (TACAS),
2011.
[24] A. Griesmayer, R. Bloem, and B. Cook. Repair of boolean programs
with an application to C. In International Conference on Computer
Aided Verification (CAV), 2006.
[25] H. Hojjat, P. Rümmer, J. McClurg, P. Cerný, and N. Foster. Optimizing
horn solvers for network repair. In Formal Methods in Computer-Aided
Design (FMCAD), 2016.
[26] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and
S. Whyte. Real time network policy checking using header space analysis. In Symposium on Networked Systems Design and Implementation
(NSDI), 2013.
[27] P. Kazemian, G. Varghese, and N. McKeown. Header space analysis:
Static checking for networks. In Symposium on Networked Systems
Design and Implementation (NSDI), 2012.
[28] A. Khurshid, X. Zou, W. Zhou, M. Caesar, and P. B. Godfrey. VeriFlow: Verifying network-wide invariants in real time. In Symposium
on Networked Systems Design and Implementation (NSDI), 2013.
[29] E. Kneuss, M. Koukoutos, and V. Kuncak. Deductive program repair.
In Computer Aided Verification (CAV), 2015.
[30] R. Könighofer and R. Bloem. Automated error localization and correction for imperative programs. In International Conference on Formal
Methods in Computer-Aided Design (FMCAD), 2011.
[31] F. Le, G. G. Xie, D. Pei, J. Wang, and H. Zhang. Shedding light on the
glue logic of the internet routing architecture. In SIGCOMM, 2008.
[32] C. Le Goues, M. Dewey-Vogt, S. Forrest, and W. Weimer. A systematic
study of automated program repair: Fixing 55 out of 105 bugs for $8
each. In International Conference on Software Engineering (ICSE),
2012.
[33] F. Logozzo and T. Ball. Modular and verified automatic program repair. In ACM SIGPLAN Conference on Object-Oriented Programming,
Systems, Languages, and Applications (OOPSLA), 2012.
[34] R. Mahajan, D. Wetherall, and T. E. Anderson. Understanding BGP
misconfiguration. In SIGCOMM, 2002.
[35] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. B. Godfrey, and S. T.
King. Debugging the data plane with Anteater. In SIGCOMM, 2011.

[36] G. S. Malkin. Rip version 2. STD 56, RFC Editor, November 1998.
http://www.rfc-editor.org/rfc/rfc2453.txt.

[37] S. Mechtaev, J. Yi, and A. Roychoudhury. Directfix: Looking for
simple program repairs. In International Conference on Software Engineering (ICSE), 2015.

[38] J. Moy. Ospf version 2. STD 54, RFC Editor, April 1998. http://www.
rfc-editor.org/rfc/rfc2328 txt.

[39] S. Narain, G. Levin, S. Malik, and V. Kaul. Declarative infrastructure configuration synthesis and debugging. Journal of Network and
Systems Management, 16(3):235-258, Sept. 2008.

[40] H. D. T. Nguyen, D. Qi, A. Roychoudhury, and S. Chandra. Semfix:
program repair via semantic analysis. In International Conference on
Software Engineering (ICSE), 2013.

[41] Y. Rekhter, T. Li, and S. Hares. A border gateway protocol 4 (bgp-4).
RFC 4271, RFC Editor, January 2006. http://www.rfc- editor.org/rfc/
rfc4271.txt.

[42] R. Samanta, J. V. Deshmukh, and E. A. Emerson. Automatic generation
of local repairs for boolean programs. In Formal Methods in ComputerAided Design (FMCAD), 2008.

[43] R. Stoenescu, M. Popovici, L. Negreanu, and C. Raiciu. Symnet: Scalable symbolic execution for modern networks. In SIGCOMM, 2016.

[44] Y.-W. E. Sung, X. Tie, S. H. Wong, and H. Zeng. Robotron: Top-down
network management at facebook scale. In SIGCOMM, 2016.

[45] C. von Essen and B. Jobstmann. Program repair without regret. In
International Conference on Computer Aided Verification (CAV), 2013.

[46] W. Weimer, T. Nguyen, C. Le Goues, and S. Forrest. Automatically
finding patches using genetic programming. In International Conference on Software Engineering (ICSE), 2009.

[47] Y. Wu, A. Chen, A. Haeberlen, W. Zhou, and B. T. Loo. Automated bug
removal for software-defined networks. In Symposium on Networked
Systems Design and Implementation (NSDI), 2017.

[48] Y. Yuan, R. Alur, and B. T. Loo. NetEgg: Programming network policies by examples. In Workshop on Hot Topics in Networks (HotNets),
2014.

[49] P. Zave, R. A. Ferreira, X. K. Zou, M. Morimoto, and J. Rexford.
Dynamic service chaining with dysco. In SIGCOMM, 2017.

[50] H. Zeng, P. Kazemian, G. Varghese, and N. McKeown. A survey
on network troubleshooting. Technical Report TR12-HPNG-061012,
Stanford University, June 2012.
