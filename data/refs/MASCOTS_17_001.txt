[1] X. He, D. Agarwal, and S. K. Prasad, “Design and Implementation of
a Parallel Priority Queue on Many-Core Architectures,” in International
Conference on High Performance Computing. IEEE, 2012, pp. 1–10.
[2] NVIDIA Corporation, NVIDIA CUDA C Programming Guide. Version
8.0, NVIDIA Corporation, 2017.
[3] T. Aila and S. Laine, “Understanding the Efﬁciency of Ray Traversal
on GPUs,” in Proceedings of the Conference on High Performance
Graphics. ACM, 2009, pp. 145–149.
[4] S. Solomon and P. Thulasiraman, “Performance Study of Mapping
Irregular Computations on GPUs,” in IEEE International Symposium
on Parallel & Distributed Processing, Workshops and PhD Forum
(IPDPSW). IEEE, 2010, pp. 1–8.
[5] S. Tzeng, B. Lloyd, and J. D. Owens, “A GPU Task-Parallel Model with
Dependency Resolution,” Computer, vol. 45, no. 8, pp. 34–41, 2012.
[6] S. Tzeng, A. Patney, and J. D. Owens, “Task Management for IrregularParallel Workloads on the GPU,” in Proceedings of the Conference on
High Performance Graphics. Eurographics Association, 2010, pp. 29–
37.
[7] R. Nasre, M. Burtscher, and K. Pingali, “Atomic-Free Irregular Computations on GPUs,” in Proceedings of the 6th Workshop on General
Purpose Processor Using Graphics Processing Units. ACM, 2013, pp.
96–107.
[8] C.-C. Kao and W.-C. Hsu, “An Adaptive Heterogeneous Runtime
Framework for Irregular Applications,” Journal of Signal Processing
Systems, vol. 80, no. 3, pp. 245–259, 2015.
[9] J. Y. Kim and C. Batten, “Accelerating Irregular Algorithms on GPGPUs
using Fine-Grain Hardware Worklists,” in 2014 47th Annual IEEE/ACM
International Symposium on Microarchitecture. IEEE, 2014, pp. 75–87.
[10] J. Wang, N. Rubin, A. Sidelnik, and S. Yalamanchili, “ Dynamic Thread
Block Launch: a Lightweight Execution Mechanism to Support Irregular
Applications on GPUs,” in ACM SIGARCH Computer Architecture
News, vol. 43, no. 3. ACM, 2015, pp. 528–540.
[11] R. J. Barrientos, J. I. Gómez, C. Tenllado, M. P. Matias, and M. Marin,
“kNN Query Processing in Metric Spaces Using GPUs,” in European
Conference on Parallel Processing. Springer, 2011, pp. 380–392.
[12] D. Merrill, M. Garland, and A. Grimshaw, “Scalable GPU Graph
Traversal,” in ACM SIGPLAN Notices, vol. 47, no. 8. ACM, 2012,
pp. 117–128.
[13] Z. Fu, M. Personick, and B. Thompson, “MapGraph: A High Level API
for Fast Development of High Performance Graph Analytics on GPUs,”
in Proceedings of Workshop on GRAph Data Management Experiences
and Systems, ser. GRADES’14. New York, NY, USA: ACM, 2014, pp.
2:1–2:6.
[14] J. Zhong and B. He, “Medusa: Simpliﬁed Graph Processing on GPUs,”
IEEE Transactions on Parallel and Distributed Systems, vol. 25, no. 6,
pp. 1543–1552, June 2014.
[15] P. Zhang, M. Zalewski, A. Lumsdaine, S. Misurda, and S. McMillan,
“GBTL-CUDA: Graph Algorithms and Primitives for GPUs,” in 2016
IEEE International Parallel and Distributed Processing Symposium
Workshops (IPDPSW). IEEE, 2016, pp. 912–920.
[16] R. M. Fujimoto, “Parallel Simulation: Parallel and Distributed Simulation Systems,” in Proceedings of the 33nd Winter Simulation Conference.
IEEE Computer Society, 2001, pp. 147–157.
[17] ——, “Performance Measurements of Distributed Simulation Strategies,” DTIC Document, Tech. Rep., 1987.
[18] P. E. Hart, N. J. Nilsson, and B. Raphael, “A Formal Basis for the
Heuristic Determination of Minimum Cost Paths,” IEEE Transactions
on Systems Science and Cybernetics, vol. 4, no. 2, pp. 100–107, 1968.
[19] W. M. McCormack and R. G. Sargent, “Analysis of Future Event
Set Algorithms for Discrete Event Simulation,” Communications of the
ACM, vol. 24, no. 12, pp. 801–812, 1981.
[20] D. W. Jones, “An Empirical Comparison of Priority-Queue and EventSet Implementations,” Communications of the ACM, vol. 29, no. 4, pp.
300–311, 1986.
[21] R. Rönngren and R. Ayani, “A Comparative Study of Parallel and
Sequential Priority Queue Algorithms,” ACM Transactions on Modeling
and Computer Simulation, vol. 7, no. 2, pp. 157–209, 1997.
[22] C. L. L. Hendriks, “Revisiting Priority Queues for Image Analysis,”
Pattern Recognition, vol. 43, no. 9, pp. 3003–3012, 2010.
[23] D. D. Sleator and R. E. Tarjan, “Self-Adjusting Binary Search Trees,”
Journal of the ACM (JACM), vol. 32, no. 3, pp. 652–686, 1985.
[24] R. Brown, “Calendar Queues: a fast O(1) Priority Queue Implementation
for the Simulation Event Set Problem,” Communications of the ACM,
vol. 31, no. 10, pp. 1220–1227, 1988.
[25] W. T. Tang, R. S. M. Goh, and I. L.-J. Thng, “Ladder queue: An O(1)
Priority Queue Structure for Large-Scale Discrete Event Simulation,”
ACM Transactions on Modeling and Computer Simulation (TOMACS),
vol. 15, no. 3, pp. 175–204, 2005.
[26] P. Sanders, “Fast Priority Queues for Cached Memory,” Journal of
Experimental Algorithmics (JEA), vol. 5, p. 7, 2000.
[27] S. Gupta and P. A. Wilsey, “Lock-Free Pending Event Set Management
in Time Warp,” in Proceedings of the 2nd ACM SIGSIM Conference on
Principles of Advanced Discrete Simulation. ACM, 2014, pp. 15–26.
[28] T. Bingmann, T. Keh, and P. Sanders, A Bulk-Parallel Priority Queue
in External Memory with STXXL.
Cham: Springer International
Publishing, 2015, pp. 28–40.
[29] T. Dickman, S. Gupta, and P. A. Wilsey, “Event Pool Structures
for PDES on Many-Core Beowulf Clusters,” in Proceedings of the
Conference on Principles of Advanced Discrete Simulation. ACM,
2013, pp. 103–114.
[30] H. Rihani, P. Sanders, and R. Dementiev, “Brief Announcement: Multiqueues: Simple Relaxed Concurrent Priority Queues,” in Proceedings
of the 27th ACM Symposium on Parallelism in Algorithms and Architectures. ACM, 2015, pp. 80–82.
[31] J. Sang, C.-R. Lee, V. Rego, and C.-T. King, “A Fast Implementation
of Parallel Discrete-Event Simulation on GPGPU,” in Proceedings of
the International Conference on Parallel and Distributed Processing
Techniques and Applications, 2013, p. 501.

[32] B. P. Swenson, “Techniques to Improve the Performance of LargeScale Discrete-Event Simulation,” Dissertation, Georgia Institute of
Technology, 2015.
[33] T. Wenjie, Y. Yiping, and Z. Feng, “An Expansion-Aided Synchronous
Conservative Time Management Algorithm on GPU,” in Proceedings of
the Conference on Principles of Advanced Discrete Simulation. ACM,
2013, pp. 367–372.
[34] L. Zhen, Q. Gang, G. Gang, and C. Bin, “A GPU-Based Simulation
Kernel within Heterogeneous Collaborative Computation on Large-Scale
Artiﬁcial Society,” International Journal of Modeling and Optimization,
vol. 4, no. 3, p. 205, 2014.
[35] P. Andelﬁnger and H. Hartenstein, “Exploiting the Parallelism of LargeScale Application-Layer Networks by Adaptive GPU-Based Simulation,” in Proc. of the Winter Simul. Conf. IEEE, 2014, pp. 3471–3482.
[36] H. Ortega-Arranz, Y. Torres, D. R. Llanos, and A. Gonzalez-Escribano,
“A New GPU-Based Approach to the Shortest Path Problem,” in Int’l
Conf. on High Perf. Computing and Simul. IEEE, 2013, pp. 505–511.
[37] A. Davidson, S. Baxter, M. Garland, and J. D. Owens, “Work-Efﬁcient
Parallel GPU Methods for Single-Source Shortest Paths,” in Int’l Parallel
and Distributed Processing Symposium. IEEE, 2014, pp. 349–359.
[38] P. Zhang, E. Holk, J. Matty, S. Misurda, M. Zalewski, J. Chu, S. McMillan, and A. Lumsdaine, “Dynamic Parallelism for Simple and Efﬁcient
GPU Graph Algorithms,” in Proceedings of the Workshop on Irregular
Applications: Architectures and Algorithms. ACM, 2015, p. 11.
[39] J. T. Kider, M. Henderson, M. Likhachev, and A. Safonova, “HighDimensional Planning on the GPU,” in International Conference on
Robotics and Automation (ICRA). IEEE, 2010, pp. 2515–2522.
[40] C. McMillan, E. Hart, and K. Chalmers, “Collaborative Diffusion on the
GPU for Path-Finding in Games,” in European Conf. on the Applications
of Evolutionary Computation. Springer, 2015, pp. 418–429.
[41] Y. Zhou and J. Zeng, “Massively Parallel A* Search on a GPU,”
in Proceedings of the Twenty-Ninth AAAI Conference on Artiﬁcial
Intelligence, ser. AAAI’15. AAAI Press, 2015, pp. 1248–1254.
[42] A. Bleiweiss, “GPU Accelerated Pathﬁnding,” in Proceedings of the 23rd
ACM SIGGRAPH/EUROGRAPHICS Symposium on Graphics Hardware. Eurographics Association, 2008, pp. 65–74.
[43] A. Demeulemeester, C.-F. Hollemeersch, P. Mees, B. Pieters, P. Lambert,
and R. Van de Walle, “Hybrid Path Planning for Massive Crowd
Simulation on the GPU,” in International Conference on Motion in
Games. Springer, 2011, pp. 304–315.
[44] A. Silva, F. Rocha, A. Santos, G. Ramalho, and V. Teichrieb, “GPU
Pathﬁnding Optimization,” in 2011 Brazilian Symposium on Games and
Digital Entertainment (SBGAMES). IEEE, 2011, pp. 158–163.
[45] D. E. Knuth, The Art of Computer Programming, Volume 1 (3rd Ed.):
Fundamental Algorithms. Redwood City, CA, USA: Addison Wesley
Longman Publishing Co., Inc., 1997.
[46] D. M. Nicol, “The Cost of Conservative Synchronization in Parallel
Discrete Event Simulations,” Journal of the ACM, vol. 40, no. 2, pp.
304–333, 1993.
[47] G. Kunz, D. Schemmel, J. Gross, and K. Wehrle, “Multi-Level Parallelism for Time- and Cost-Efﬁcient Parallel Discrete Event Simulation
on GPUs,” in Proceedings of the Workshop on Principles of Advanced
and Distributed Simulation. IEEE Computer Society, 2012, pp. 23–32.
[48] X. Liu and P. Andelﬁnger, “Time Warp on the GPU: Design and
Assessment,” in Proceedings of the 2017 ACM SIGSIM Conference on
Principles of Advanced Discrete Simulation. ACM, 2017, pp. 109–120.
[49] M. Tillmann, T. Karcher, C. Dachsbacher, and W. F. Tichy, “ApplicationIndependent Autotuning for GPUs,” in International Conference on
Parallel Computing, 2013, pp. 626–635.