[1] C.D. Lu, “Scalable diskless checkpointing for large parallel systems,”

PhD thesis, University of Illinois at Urbana-Champaign, 2005.

[2] R. Koo, S. Toueg, “Checkpointing and rollback-recovery for distributed
systems,” IEEE Transactions on Software Engineering, no.1, pp.23-31,
1987.

[3] B. Schroeder, G. A. Gibson “A large-scale study of failures in highperformance computing systems,” IEEE Transactions on Dependable and
Secure Computing, vol.7, no.4, pp.337-350, 2010.

[4] B. Schroeder, G. A. Gibson, “Understanding failures in petascale
computers,” in Journal of Physics: Conference Series, IOP Publishing,
vol. 78, pp.12-22, 2007.

[5] J. S. Plank, K. Li, M. A. Puening, “Diskless checkpointing,” TEEE
Transactions on Parallel and Distributed Systems, vol.9, no.10, pp.972986, 1998.

[6] P. Lemarinier, A. Bouteiller, G. Krawezik, F. Cappello, “Coordinated
checkpoint versus message log for fault tolerant mpi,” International
Journal of High Performance Computing and Networking, vol.2, no. 2,
pp.146-155, 2004.

[7] L. A. Gomez, N. Maruyama, F. Cappello, S. Matsuoka, “Distributed
diskless checkpoint for large scalesystems,” in Proc. Of 10th IEEE/ACM
Int. Conf. on Cluster, Cloud and Grid Computing, IEEE, 2010, pp. 63-72.

[8] N. A. Kofahi, S. Al-Bokhitan, A. Al-Nazer, “On disk-based and diskless
checkpointing for parallel and distributed systems: An empirical
analysis,” Information Technology Journal, vol.4, no.4, pp.367-376,
2005.

[9] J. Bent, G. Gibson, G. Grider, B. McClellandmet al, “PLFS: a checkpoint
filesystem for parallel applications,” in Proc. of the Conf. on High
Perform. Comput. Networking, Storage and Analysis, ACM, 2009, pp.2130.

[10] J. S. Plank,, S. Simmerman, C.D. Schuman, “Jerasure: A library in ¢/e++
facilitating erasure coding for storage applications-version 1.2,”
University of Tennessee, Tech Rep. CS-08-627 23, 2008.

[11] Z. Chen, J. Dongarra, “Algorithm-based checkpoint-free fault tolerance
for parallel matrix computations on volatile resources,” in Parallel and
Distributed Processing Symposium (IPDPS), IEEE, 2006, pp.10-19.

[12] J. S. Plank, “A tutorial on reed-solomon coding for fault-tolerance in
taid-like systems,” Softw., Pract. Exper. vol. 27, no.9, pp.995—1012,1997.
[13] Z. Chen, J. Dongarra, “Highly scalable self-healing algorithms for high
performance scientific computing,” IEEE Transactions on Computers,
vol.58, no.11, pp.1512-1524 , 2009.

[14] N.H. Vaidya, “A case for multi-level distributed recovery schemes,”
TEEE Transactions on computers, vol.47, no.6, pp. 656 - 666, 1998.

[15] A. Moody, G. Bronevetsky, K. Mohror, B.R. Supinski, “Design,
modeling, and evaluation of a scalable multi-level checkpointing
system,” in Int. Conf. for High Perform. Comput, Networking, Storage
and Analysis, IEEE, 2010, pp.1-11

[16] D. Hakkarinen, Z. Chen, “Multilevel diskless checkpointing,” TEEE
Transactions on Computers, vol.62, no.4, pp.772-783 , 2013.

[17] J. S. Plank, J. Luo, C. D. Schuman, L. Xu, Z. Wilcox-O’Hearn, “A
performance evaluation and examination of open-source erasure coding
libraries for storage,” in Proc. Of the conf. FAST, vol 9, pp.253—265,
2009.

[18] L. B. Gomez, B. Nicolae, N. Maruyama, F. Cappello, S. Matsuoka,
“Scalable reed-solomon-based reliable local storage for hpe applications
on iaas clouds,” in Euro-Par 2012 Parallel Processing, Springer, 2012,
pp.313-324

[19] B. Nicolae, F. Cappello, “Blober: efficient checkpoint-restart for hpc
applications on iaas clouds using virtual disk image snapshots,” in Int.
Conf. for High Perform. Comput., Networking, Storage and Analysis,
IEEE, 2011, pp.34-43.

[20] S. Di, Y. Robert, F. Cappello, “Toward an optimal online checkpoint
solution under a two-level HPC checkpoint model,” IEEE Transactions
on parallel and distributed systems, vol.28, no.1, pp. 244-259, 2017.

[21] MPICH | high-performance portable MPI. https://Awww.mpich.org/, 2014.

[22] NAS parallel benchmarks. NASA Ames
http://science.nas. nasa.gov/ Software/NPB/, 2012.
[23] J. Yang, D. Zhang and X. Yang,”"WINDAR: a multithreaded rollbackrecovery toolkit on Windows,” In 10th Pacific Rim dependable Comput.
Int. Symp., IEEE, pp. 91-100, 2004.

Research Center.