
[1] Hiroyuki Akinaga and Hisashi Shima. 2010. Resistive random access memory
(ReRAM) based on metal oxides. In IEEE, Vol. 98, Issue: 12.
[2] Sandeep Bhatkar, Daniel C. DuVarney, and R. Sekar. 2003. Address Obfuscation:
An E�cient Approach to Combat a Board Range of Memory Error Exploits.
In Proceedings of the 12th Conference on USENIX Security Symposium - Volume
12 (SSYM’03). USENIX Association, Berkeley, CA, USA, 8–8. http://dl.acm.org/
citation.cfm?id=1251353.1251361
[3] Trevor E. Carlson, Wim Heirman, Stijn Eyerman, Ibrahim Hur, and Lieven Eeckhout. 2014. An Evaluation of High-Level Mechanistic Core Models. ACM Transactions on Architecture and Code Optimization (TACO), Article 5 (2014), 23 pages.
https://doi.org/10.1145/2629677
[4] Dhruva R Chakrabarti, Hans-J Boehm, and Kumud Bhandari. 2014. Atlas: Leveraging locks for non-volatile memory consistency. ACM SIGPLAN Notices 49, 10
(2014), 433–452.
[5] Andreas Chatzistergiou, Marcelo Cintra, and Stratis D Viglas. 2015. Rewind:
Recovery write-ahead system for in-memory non-volatile data-structures. Proceedings of the VLDB Endowment 8, 5 (2015), 497–508.
[6] Guoyang Chen, Lei Zhang, Richa Budhiraja, Xipeng Shen, and Youfeng Wu. 2017.
E�cient Support of Position Independence on Non-Volatile Memory. In Proceedings of the 50th Annual IEEE/ACM International Symposium on Microarchitecture.
ACM.
[7] Joel Coburn, Adrian M. Caul�eld, Ameen Akel, Laura M. Grupp, Rajesh K. Gupta,
Ranjit Jhala, and Steven Swanson. 2011. NV-heaps: making persistent objects fast
and safe with next-generation, non-volatile memories. In International conference
on Architectural support for programming languages and operating systems.
[8] Jeremy Condit, Edmund B. Nightingale, Christopher Frost, Engin Ipek, Benjamin
Lee, Doug Burger, and Derrick Coetzee. 2009. Better I/O through byte-addressable,
persistent memory. In ACM Symposium on Operating Systems Principles.
[9] Subramanya R Dulloor, Sanjay Kumar, Anil Keshavamurthy, Philip Lantz, Dheeraj
Reddy, Rajesh Sankaran, and Je� Jackson. 2014. System software for persistent
memory. In Proceedings of the Ninth European Conference on Computer Systems.
ACM, 15.
[10] Ellis Giles, Kshitij Doshi, and Peter Varman. 2013. Bridging the programming
gap between persistent and volatile memory using WrAP. In Proceedings of the
ACM International Conference on Computing Frontiers. ACM, 30.
[11] InstLatX64. 2017. x86, x64 Instruction Latency, Memory Latency and CPUID
dumps. (March 2017). http://users.atw.hu/instlatx64/
[12] Intel. 2016. Intel 64 and IA-32 Architectures Developer’s Manual: Vol. 3A. Intel. https://www.intel.com/content/www/us/en/architecture-and-technology/
64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html
[13] Intel and Micron. 2015. Intel and Micron Produce Breakthrough Memory Technology. (Jul. 2015).
[14] Arpit Joshi, Vijay Nagarajan, Marcelo Cintra, and Stratis Viglas. 2015. E�cient
persist barriers for multicores. In International Symposium on Microarchitecture.
[15] T. Kawahara, R. Takemura, K. Miura, J. Hayakawa, S. Ikeda, Y. Lee, R. Sasaki, Y.
Goto, K. Ito, T. Meguro, F. Matsukura, H. Takahashi, H. Matsuoka, and H. Ohno.
2007. 2Mb Spin-Transfer Torque RAM (SPRAM) with Bit-by-Bit Bidirectional
Current Write and Parallelizing-Direction Current Read. In IEEE International
Solid-State Circuits Conference. Digest of Technical Papers.
[16] Aasheesh Kolli, Steven Pelley, Ali Saidi, Peter M. Chen, and Thomas F. Wenisch.
2016. High-Performance Transactions for Persistent Memories. In International
conference on Architectural support for programming languages and operating
systems.
[17] Emre Kultursay, Mahmut Kandemir, Anand Sivasubramaniam, and Onur Mutlu.
2013. Evaluating STT-RAM as an energy-e�cient main memory alternative. In
IEEE International Symposium on Performance Analysis of Systems and Software.
[18] Benjamin C. Lee. 2010. Phase change technology and the future of main memory.
In IEEE Micro, Vol. 30, Issue: 1.
[19] Henry M. Levy. 1984. Capability-Based Computer Systems. ButterworthHeinemann, Newton, MA, USA.
[20] Youyou Lu, Jiwu Shu, Long Sun, and Onur Mutlu. 2014. Loose-Ordering Consistency for persistent memory. In Computer Design, 2014 32nd IEEE International
Conference on (ICCD’14).
[21] Virendra J. Marathe, Margo Seltzer, Steve Byan, and Tim Harris. 2017. Persistent
Memcached: Bringing Legacy Code to Byte-Addressable Persistent Memory.
In 9th USENIX Workshop on Hot Topics in Storage and File Systems (HotStorage
17). USENIX Association, Santa Clara, CA. https://www.usenix.org/conference/
hotstorage17/program/presentation/marathe
[22] Justin Meza, Yixin Luo, Samira Khan, Jishen Zhao, Yuan Xie, and Onur Mutlu.
2013. A case for e�cient hardware/software cooperative management of storage
and memory. (2013).
[23] Steven Pelley, Peter M. Chen, and Thomas F. Wenisch. 2014. Memory persistency.
In International symposium on Computer architecuture.
[24] Raghunath Rajachandrasekar, Sreeram Potluri, Akshay Venkatesh, Khaled Hamidouche, Md. Wasi ur Rahman, and Dhabaleswar K. (DK) Panda. 2014. MIC-Check:
A distributed check pointing framework for the Intel many integrated cores architecture. In International symposium on High-performance parallel and distributed
computing.
[25] NVM Library Team at Intel. 2016. Persistent Memory Programming. (August
2016). http://pmem.io.
[26] Transaction Processing Performance Council (TPC). 2010. TPC Benchmark C.
(February 2010). http://www.tpc.org/tpc_documents_current_versions/pdf/
tpc-c_v5.11.0.pdf
[27] Haris Volos, Andres Jaan Tack, and Michael M. Swift. 2011. Mnemosyne: Lightweight Persistent Memory. In Proceedings of the Sixteenth International Conference
on Architectural Support for Programming Languages and Operating Systems (ASPLOS XVI). ACM, New York, NY, USA, 91–104. https://doi.org/10.1145/1950365.
1950379
[28] Jishen Zhao, Sheng Li, Doe Hyun Yoon, Yuan Xie, and Norman P Jouppi. 2013.
Kiln: Closing the performance gap between systems with and without persistence
support. In Proceedings of the 46th Annual IEEE/ACM International Symposium on
Microarchitecture. ACM, 421–432.
