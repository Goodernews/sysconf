[1] The Netflix Simian Army. http://techblog.netflix.com/2011/07/netflixsimian-army.html, 2011.

[2] Nemesis: Disruptive Testing. https://www.scribd.com/
document/318375955/Yahoo-Nemesis, 2015.
[3] Jaeger.
https://godoc.org/github.com/uber/
jaeger-client-go, 2016.
[4] The OpenTracing Project. http://opentracing.io/, 2016.
[5] A LSBERG , P. A., AND DAY, J. D. A Principle for Resilient
Sharing of Distributed Resources. ICSE ’76.
[6] A LVARO , P., A NDRUS , K., S ANDEN , C., ROSENTHAL , C.,
BASIRI , A., AND H OCHSTEIN , L. Automating failure testing
research at internet scale. In SoCC (2016), ACM, pp. 17–28.
[7] A LVARO , P., C ONWAY, N., H ELLERSTEIN , J. M., AND M AR CZAK , W. R. Consistency Analysis in Bloom: a CALM and
Collected Approach. CIDR’12.
[8] A LVARO , P., H UTCHINSON , A., C ONWAY, N., M ARCZAK ,
W. R., AND H ELLERSTEIN , J. M. BloomUnit: Declarative Testing for Distributed Programs. DBTest ’12.
[9] A LVARO , P., H UTCHINSON , A., C ONWAY, N., M ARCZAK ,
W. R., AND H ELLERSTEIN , J. M. Bloomunit: Declarative testing for distributed programs. In Proceedings of the Fifth International Workshop on Testing Database Systems (2012), ACM,
p. 1.
[10] A LVARO , P., M ARCZAK , W. R., C ONWAY, N., H ELLERSTEIN ,
J. M., M AIER , D., AND S EARS , R. Dedalus: Datalog in Time
and Space. Datalog’10.
[11] A LVARO , P., ROSEN , J., AND H ELLERSTEIN , J. M. Lineagedriven fault injection. SIGMOD, ACM.
[12] A MELOOT, T. J., N EVEN , F., AND VAN DEN B USSCHE , J. Relational Transducers for Declarative Networking. PODS’12.
[13] A NISZCZYK ,
C.
Distributed Systems Tracing
with Zipkin.
https://blog.twitter.com/2012/
distributed-systems-tracing-with-zipkin,
June
2012.
[14] BALL , T., L EVIN , V., AND R AJAMANI , S. K. A Decade of
Software Model Checking with SLAM. Commun. ACM (2011).
[15] B UNEMAN , P., K HANNA , S., AND TAN , W.- C . Why and Where:
A Characterization of Data Provenance. ICDT’01.
[16] C ADAR , C., D UNBAR , D., AND E NGLER , D. KLEE: Unassisted
and Automatic Generation of High-coverage Tests for Complex
Systems Programs. OSDI’08.

[17] C HENEY, J., C HITICARIU , L., AND TAN , W.-C. Provenance
in Databases: Why, How, and Where. Found. Trends databases
(April 2009).
[18] C HOW, M., M EISNER , D., F LINN , J., P EEK , D., AND
W ENISCH , T. F. The Mystery Machine: End-to-end Performance
Analysis of Large-scale Internet Services. In 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI
14) (Oct. 2014).

[19] C LAESSEN , K., AND H UGHES , J. QuickCheck: A Lightweight
Tool for Random Testing of Haskell Programs. ICFP ’00.

[20] C LARKE , E., B IERE , A., R AIMI , R., AND Z HU , Y. Bounded
Model Checking Using Satisfiability Solving. Form. Methods
Syst. Des. (July 2001).

[21] C UI , Y., W IDOM , J., AND W IENER , J. L. Tracing the lineage of
view data in a warehousing environment. ACM Trans. Database
Syst. (June 2000).
[22] DAWSON , S., JAHANIAN , F., AND M ITTON , T. ORCHESTRA:
A Fault Injection Environment for Distributed Systems. Tech.
rep., FTCS, 1996.
[23] F ISCHER , M. J., LYNCH , N. A., AND PATERSON , M. S. Impossibility of Distributed Consensus with One Faulty Process. J.
ACM (April 1985).
[24] F ISMAN , D., K UPFERMAN , O., AND L USTIG , Y. On verifying
fault tolerance of distributed protocols. In Tools and Algorithms
for the Construction and Analysis of Systems, vol. 4963 of LNCS.
Springer Berlin Heidelberg, 2008.

[25] FIT : Failure Injection Testing. http://techblog.netflix.
com/2014/10/fit-failure-injection-testing.html,
2014.

[26] G ARCIA -M OLINA , H. Elections in a distributed computing system. IEEE Trans. Comput. (January 1982).

[27] G ORMLEY, C., AND T ONG , Z. Elasticsearch:A definitive guide.
[28] G REEN , T. J., K ARVOUNARAKIS , G., AND TANNEN , V. Provenance semirings. PODS ’07.
[29] G UNAWI , H. S., D O , T., H ELLERSTEIN , J. M., S TOICA , I.,
B ORTHAKUR , D., AND ROBBINS , J. Failure as a service (FaaS):
A cloud service for large-scale, online failure drills. Tech. rep.,
EECS Department, University of California, Berkeley, 2011.

[30] G UNAWI , H. S., D O , T., J OSHI , P., A LVARO , P., H ELLER STEIN , J. M., A RPACI -D USSEAU , A. C., A RPACI -D USSEAU ,
R. H., S EN , K., AND B ORTHAKUR , D. FATE and DESTINI: A
Framework for Cloud Recovery Testing. NSDI’11.
[31] H AWBLITZEL , C., H OWELL , J., K APRITSOS , M., L ORCH , J.,
PARNO , B., ROBERTS , M. L., S ETTY, S., AND Z ILL , B. Ironfleet: Proving practical distributed systems correct. In Proceedings of the ACM Symposium on Operating Systems Principles
(SOSP) (October 2015), ACM.
[32] H ELLERSTEIN , J. M. The Declarative Imperative: Experiences
and conjectures in distributed logic. SIGMOD Record (2010).

[33] H OLZMANN , G. The SPIN Model Checker: Primer and Reference Manual. Addison-Wesley Professional, 2003.
[34] H UNT, P., KONAR , M., J UNQUEIRA , F. P., AND R EED , B.
ZooKeeper: Wait-free Coordination for Internet-scale Systems.
USENIX ATC’10.
[35] JACKSON , D. Software Abstractions: Logic, Language, and
Analysis. The MIT Press, 2006.
[36] K ARVOUNARAKIS , G., I VES , Z. G., AND TANNEN , V. Querying data provenance. SIGMOD ’10.



[37] K ILLIAN , C. E., A NDERSON , J. W., J HALA , R., AND VAHDAT,
A. Life, Death, and the Critical Transition: Finding Liveness
Bugs in Systems Code. NSDI’07.

[38] L AMPORT, L. The Part-time Parliament. ACM Transactions on
Computer Systems (May 1998).
[39] L EESATAPORNWONGSA , T., H AO , M., J OSHI , P., L UKMAN ,
J. F., AND G UNAWI , H. S. SAMC: semantic-aware model
checking for fast discovery of deep bugs in cloud systems. In 11th
USENIX Symposium on Operating Systems Design and Implementation, OSDI ’14, Broomfield, CO, USA, October 6-8, 2014.
[40] L IN , W., YANG , M., Z HANG , L., AND Z HOU , L. PacificA:
Replication in Log-Based Distributed Storage Systems. Tech.
rep., 2008.
[41] M ILLER , B. P., F REDRIKSEN , L., AND S O , B. An empirical
study of the reliability of unix utilities. Commun. ACM 33 (1990).
[42] M ULLENDER , S., Ed. Distributed Systems, second ed. AddisonWesley, 1993.
[43] M UNISWAMY-R EDDY, K.-K., H OLLAND , D. A., B RAUN , U.,
AND S ELTZER , M. Provenance-aware storage systems. ATEC
’06.
[44] M USUVATHI , M., PARK , D. Y. W., C HOU , A., E NGLER , D. R.,
AND D ILL , D. L. CMC: A Pragmatic Approach to Model Checking Real Code. SIGOPS Oper. Syst. Rev. (2002).
[45] M USUVATHI , M., Q ADEER , S., BALL , T., BASLER , G.,
NAINAR , P. A., AND N EAMTIU , I. Finding and Reproducing
Heisenbugs in Concurrent Programs. OSDI’08.
[46] O NGARO , D. Runway: A New Tool for Distributed Systems
Design. USENIX ;login (Fall 2016).
[47] O NGARO , D., AND O USTERHOUT, J. In Search of an Understandable Consensus Algorithm. USENIX ATC’14.
[48] PASQUIER , T. F. J., S INGH , J., E YERS , D. M., AND BACON ,
J. CamFlow: Managed Data-sharing for Cloud Services. CoRR
(2015).

[49] R AMASUBRAMNAIAN , K., AND L ESKES , B. Using molly to
model and test data replication in elasticseach, 2 2017.
[50] S EN , K., AND AGHA , G. Automated Systematic Testing of Open
Distributed Programs. In Fundamental Approaches to Software
Engineering, L. Baresi and R. Heckel, Eds., vol. 3922 of LNCS.
2006.
[51] S IGELMAN , B. H., BARROSO , L. A., B URROWS , M.,
S TEPHENSON , P., P LAKAL , M., B EAVER , D., JASPAN , S.,
AND S HANBHAG , C. Dapper, a Large-Scale Distributed Systems
Tracing Infrastructure. Tech. rep., Google, Inc., 2010.

[52] A Deep Dive into Simoorg: Our Open Source Failure Induction
Framework, 2016.

[53] S ONG , Y. J., J UNQUEIRA , F., AND R EED , B. BFT for the
Skeptics. http://www.sigops.org/sosp/sosp09/slides/song-slidessosp09wip.pdf, 2009. SOSP’09 WIP Talk.

[54] S TOICA , I., M ORRIS , R., K ARGER , D., K AASHOEK , M. F.,
AND BALAKRISHNAN , H. Chord: A Scalable Peer-to-peer
Lookup Service for Internet Applications. In Proceedings of
the 2001 Conference on Applications, Technologies, Architectures, and Protocols for Computer Communications (2001), SIGCOMM ’01.

[55] S TONEBRAKER , M. Concurrency control and consistency of
multiple copies of data in distributed ingres. IEEE Trans. Softw.
Eng. (May 1979).

[56] VAN R ENESSE , R., AND S CHNEIDER , F. B. Chain Replication
for Supporting High Throughput and Availability. OSDI’04.

[57] YABANDEH , M., K NEZEVIC , N., KOSTIC , D., AND K UNCAK ,
V. CrystalBall: Predicting and Preventing Inconsistencies in Deployed Distributed Systems. NSDI’09.

[58] YANG , J., C HEN , T., W U , M., X U , Z., L IU , X., L IN , H.,
YANG , M., L ONG , F., Z HANG , L., AND Z HOU , L. MODIST:
Transparent Model Checking of Unmodified Distributed Systems. NSDI’09.
[59] Y U , Y., M ANOLIOS , P., AND L AMPORT, L. Model checking
tla+ specifications. CHARME ’99.
[60] Z AMFIR , C., AND C ANDEA , G. Execution Synthesis: A Technique for Automated Software Debugging. EuroSys ’10.
[61] Z AVE , P. Using lightweight modeling to understand chord. SIGCOMM Comput. Commun. Rev. 42.
[62] Z HOU , W., S HERR , M., TAO , T., L I , X., L OO , B. T., AND
M AO , Y. Efficient querying and maintenance of network provenance at internet-scale. SIGMOD ’10.
