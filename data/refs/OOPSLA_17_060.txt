[1] Theodoros Amanatidis and Alexander Chatzigeorgiou. 2016. Studying the evolution of PHP web applications. Information

and Software Technology 72 (2016), 48 — 67. DOI : http://dx.doi.org/10.1016/j.infsof.2015.11.009



[2] A. Ampaitzoglou, A. Chatzigeorgiou, S. Charalampidou, and P. Avgeriou. 2015. The Effect of GoF Design Patterns on Stability:

A Case Study. IEEE Transactions on Software Engineering 41, 8 (Aug 2015), 781-802. DOI: http://dx.doi.org/10.1109/TSE.

2015.2414917



[3] Baeldung. 2016. Lambda Expressions and Functional Interfaces: Tips and Best Practices. (November 2016). http://www.

baeldung.com/java-8-lambda-expressions-tips



[4] Edd Barrett, Carl Friedrich Bolz-Tereick, Rebecca Killick, Sarah Mount, and Laurence Tratt. 2017. Virtual Machine Warmup

Blows Hot and Cold. Proc. ACM Program. Lang. 1, OOPSLA (Oct. 2017).



[5] James M. Bieman, Greg Straw, Huxia Wang, P. Willard Munger, and Roger T. Alexander. 2003. Design Patterns and Change

Proneness: An Examination of Five Evolving Systems. In Proceedings of the 9th International Symposium on Software

Metrics (METRICS ’03). 40-49. http://dl.acm.org/citation.cfm?id=942804.943777



[6] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 85. Publication date: October 2017.

Understanding the Use of Lambda Expressions in Java 85:29



[7] Joshua Bloch. 2008. Effective Java: A Programming Language Guide. Addison-Wesley Professional.



[8] Viviana Bono, Enrico Mensa, and Marco Naddeo. 2014. Trait-oriented programming in Java 8. In 2014 International Conference

on Principles and Practices of Programming on the Java Platform Virtual Machines, Languages and Tools, PPP} *14, Cracow,

Poland, September 23-26, 2014, 181-186. DOI : http://dx.doi.org/10.1145/2647508.2647520



[9] Virginia Braun and Victoria Clarke. 2006. Using thematic analysis in psychology. Qualitative Research in Psychology 3, 2

(2006), 77-101. DOL: http://dx.doi.org/10.1191/1478088706qp0630a



[10] Tan Bull. 2014. Eclipse Support for Java 8. (March 2014). http://eclipsesource.com/blogs/2014/03/25/

eclipse-support-for-java-8/



[11] John L. Campbell, Charles Quincy, Jordan Osserman, and Ove K. Pedersen. 2013. Coding In-depth Semistructured Interviews.

Sociological Methods & Research 42, 3 (2013), 294-320. DOL : http://dx.doi.org/10.1177/0049124113500475



[12] Alonzo Church. 1932. A Set of Postulates for the Foundation of Logic. Annals of Mathematics 33, 2 (1932), 346-366.

http://www.jstor.org/stable/1968337



[13] Michael Coblenz, Joshua Sunshine, Jonathan Aldrich, Brad Myers, Sam Weber, and Forrest Shull. 2016. Exploring Language

Support for Immutability. In Proceedings of the 38th International Conference on Software Engineering (ICSE ’16). 736-747.

DOI: http://dx.doi.org/10,.1145/2884781.2884798



[14] Diego Costa, Artur Andrzejak, Janos Seboek, and David Lo. 2017. Empirical Study of Usage and Performance of Java

Collections. In Proceedings of the 8th ACM/SPEC on International Conference on Performance Engineering (ICPE ’17).

389-400. DOI : http://dx.doi.org/10.1145/3030207.3030221



[15] Daniela S. Cruzes and Tore Dyba. 2011. Research synthesis in software engineering: A tertiary study. Information and

Software Technology 53, 5 (May 2011), 440-455. DOI: http://dx.doi.org/10.1016/j.infsof.2011.01.004



[16] Anthony H. Dekker. 2006. Lazy Functional Programming in Java. SIGPLAN Notices 41, 3 (March 2006), 30-39. DOI:

http://dx.doi.org/10.1145/1140543,1140549



[17] Eclipse Java development tools. 2017. JOT Components. (2017). http://www.eclipse.org/jdt/



[18] Robert Dyer, Hridesh Rajan, Hoan Anh Nguyen, and Tien N. Nguyen. 2014. Mining Billions of AST Nodes to Study Actual

and Potential Usage of Java Language Features. In Proceedings of the 36th International Conference on Software Engineering

(ICSE 2014). 779-790. DOI :http://dx.doi.org/10.1145/2568225.2568295



[19] Steve Easterbrook, Janice Singer, Margaret-Anne Storey, and Daniela Damian. 2008. Selecting Empirical Methods for Software

Engineering Research. Springer London, 285-311. DOI: hitp://dx.doi.org/10.1007/978-1-84800-044-5_11



[20] Lukas Eder. 2014. jOOA - The Missing Parts in Java 8. (2014). https://github.com/jOOQ/jOOL



[21] Lyle Franklin, Alex Gyori, Jan Lahoda, and Danny Dig. 2013. LAMBDAFICATOR: From Imperative to Functional Programming Through Automated Refactoring. In Proceedings of the 2013 International Conference on Software Engineering (ICSE

13), 1287-1290.



[22] Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides. 1994. Design Patterns: Elements of Reusable Object-Oriented

Software. Addison-Wesley Professional.



[23] Trisha Gee. 2015. Debugger Improvements. (November 2015). https://www.youtube.com/watch?v=rimzOolGguo



[24] Brian Goetz. 2012. Translation of Lambda Expressions. (April 2012). http://cr.openjdk.java.net/~briangoetz/lambda/

lambda-translation.html



[25] Alex Gyori, Lyle Franklin, Danny Dig, and Jan Lahoda. 2013. Crossing the gap from imperative to functional programming

through refactoring. In ACM SIGSOFT Symposium on the Foundations of Software Engineering (ESEC/FSE). 543-553.



[26] Jerry L. Hintze and Ray D. Nelson. 1998. Violin Plots: A Box Plot-Density Trace Synergism. The American Statistician 52, 2

(1998), 181-184.



[27] IntelliJ. 2017. Migrating to Java 8. (April 2017). https://www.jetbrains.com/help/idea/2017.1/migrating-to-java-8.html



[28] JavaParser. 2017. Java 9 Parser and Abstract Syntax Tree for Java. (2017). http://javaparser.org/



[29] Foutse Khomh and Yann-Gaél Guéhéneuc. 2008. Do Design Patterns Impact Software Quality Positively?. In 12th European

Conference on Software Maintenance and Reengineering. 274-278. DOI: http://dx.doi.org/10.1109/CSMR.2008.4493325

Sergey Kuksenko. 2013. JDK 8: Lambda Performance study. (2013). http://www.oracle.com/technetwork/java/



[30] jvmls2013kuksen-2014088.pdf



[31] Henry B. Mann. 1945. Nonparametric Tests Against Trend. Econometrica 13, 3 (1945), 245-259.



[32] Radu Marinescu. 2004. Detection Strategies: Metrics-Based Rules for Detecting Design Flaws. In Proceedings of the 20th IEEE

International Conference on Software Maintenance (ICSM ’04). 350-359.



[33] Davood Mazinanian, Ameya Ketkar, Nikolaos Tsantalis, and Danny Dig. 2017. Supplemental material. (2017). http:

//dmazinanian.me/conference-papers/oopsla/2017/07/04/oopsla17.html



[34] Bartiomiej Mazur. 2017. Performance of Java, part 2. (2017). https://blog.gotofinal.com/java/benchmark/performance/2017/

07/09/performance- of-java-1.html



[35] Erik Meijer and Sigbjorn Finne. 2001. Lambada, Haskell as a better Java. Electronic Notes in Theoretical Computer Science 41,

1 (2001), 91 — 119, DOT: http://dx.doi.org/10.1016/S1571-0661(05)80549-3



[36] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 85. Publication date: October 2017.

85:30 Davood Mazinanian, Ameya Ketkar, Nikolaos Tsantalis, and Danny Dig



[37] Emerson Murphy-Hill, Chris Parnin, and Andrew P. Black. 2009. How We Refactor, and How We Know It. In Proceedings of

the 31st International Conference on Software Engineering (ICSE ’09). 287-297. DOL : http://dx.doi.org/10.1109/ICSE.2009.

5070529



[38] Emerson Murphy-Hill, Thomas Zimmermann, Christian Bird, and Nachiappan Nagappan. 2015. The Design Space of

Bug Fixes and How Developers Navigate It. IEEE Transactions on Software Engineering 41, 1 (Jan 2015), 65-81. DOL:

http://dx.doi.org/10.1109/TSE.2014.2357438



[39] T. H. Ng, S. C. Cheung, W. K. Chan, and Y. T. Yu. 2007. Do Maintainers Utilize Deployed Design Patterns Effectively?. In

Proceedings of the 29th International Conference on Software Engineering (ICSE ’07). 168-177. DOL : http://dx.doi.org/10.

1109/ICSE.2007.33



[40] Adel Noureddine and Ajitha Rajan. 2015. Optimising Energy Consumption of Design Patterns. In Proceedings of the 37th

International Conference on Software Engineering (ICSE ’15). 623-626. http://dl.acm.org/citation.cfm?id=2819009.2819120



[41] Scott Oaks. 2014. Java Performance: The Definitive Guide: Getting the Most Out of Your Code. O’Reilly Media.



[42] Oracle. 2013. Java SE 8: Lambda Quick Start. (December 2013). http://www.oracle.com/webfolder/technetwork/tutorials/

obe/java/Lambda- QuickStart/index.html



[43] Oracle. 2014. Optional (Java 8 Documentation). (2014). https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html



[44] Oracle. 2015a. Lambda Expressions. (2015). https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html



[45] Oracle. 2015b. Type Inference. (2015). https://docs.oracle.com/javase/tutorial/java/generics/genTypelnference.html



[46] V. Pankratius, F. Schmidt, and G. GarretAgn. 2012. Combining functional and imperative programming for multicore

software: An empirical study evaluating Scala and Java. In 2012 34th International Conference on Software Engineering

(ICSE’12), 123-133. DOT :http://dx.doi.org/10.1109/ICSE,2012.6227200



[47] Chris Parnin, Christian Bird, and Emerson Murphy-Hill. 2011. Java Generics Adoption: How New Features Are Introduced,

Championed, or Ignored. In Proceedings of the 8th Working Conference on Mining Software Repositories (MSR ’11). 3-12.

DOI: http://dx.doi.org/10.1145/1985441.1985446



[48] L. Prechelt, B. Unger, W. F. Tichy, P. Bréssler, and L. G. Votta. 2001. A Controlled Experiment in Maintenance Comparing

Design Patterns to Simpler Solutions. IEEE Transactions on Software Engineering 27, 12 (Dec. 2001), 1134-1144. DOI:

http://dx.doi.org/10.1109/32.988711



[49] Eric S. Raymond. 2001. The Cathedral and the Bazaar: Musings on Linux and Open Source by an Accidental Revolutionary.

O'Reilly & Associates, Inc., Sebastopol, CA, USA.



[50] Romain Robbes, David Rothlisberger, and Eric Tanter. 2015. Object-oriented software extensions in practice. Empirical

Software Engineering 20, 3 (2015), 745-782. DOI : http://dx.doi.org/10.1007/s10664-013-9298-0



[51] Nathanael Scharli, Stéphane Ducasse, Oscar Nierstrasz, and Andrew P. Black. 2003. Traits: Composable Units of Behaviour.

In Proceedings of the 17th European Conference on Object-Oriented Programming (ECOOP’03). 248-274. DOI: http://dx.doi.

org/10.1007/978-3-540-45070-2_12



[52] Pranab Kumar Sen. 1968. Estimates of the Regression Coefficient Based on Kendall’s Tau. 3. Amer. Statist. Assoc. 63, 324

(1968), 1379-1389.



[53] Anton Setzer. 2003. Java as a Functional Programming Language. In : International Workshop of Types for Proofs and Programs

(TYPES 2002), 279-298, DOL : http://dx.doi.org/10.1007/3-540-39185-1_16



[54] Danilo Silva, Nikolaos Tsantalis, and Marco Tulio Valente. 2016. Why We Refactor? Confessions of GitHub Contributors. In

Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2016).

858-870. DOI : http://dx.doi.org/10.1145/2950290.2950305



[55] Janice Singer, Susan E. Sim, and Timothy C. Lethbridge. 2008. Software Engineering Data Collection for Field Studies. In

Guide to Advanced Empirical Software Engineering, Forrest Shull, Janice Singer, and Dag I. K. Sjoberg (Eds.). Springer

London, Chapter 1, 9-34.



[56] Ewan Tempero, Hong Yul Yang, and James Noble. 2013. What Programmers Do with Inheritance in Java. In Proceedings of

the 27th European Conference on Object-Oriented Programming (ECOOP 2013). 577-601. DOL: http://dx.doi.org/10.1007/

978-3-642-39038-8_24



[57] TouK. 2017. ThrowingFunction. (2017). https://github.com/TouK/ThrowingFunction



[58] Nikolaos Tsantalis, Davood Mazinanian, and Giri P. Krishnan. 2015. Assessing the Refactorability of Software Clones. IEEE

Transactions on Software Engineering 41, 11 (Nov 2015), 1055-1090. DOI : http://dx.doi.org/10.1109/TSE.2015.2448531



[59] Nikolaos Tsantalis, Davood Mazinanian, and Shahriar Rostami. 2017. Clone Refactoring with Lambda Expressions. In

Proceedings of the 39th International Conference on Software Engineering (ICSE ’17). 60-70. DOI: http://dx.doi.org/10.1109/

ICSE.2017.14



[60] Phillip Merlin Uesbeck, Andreas Stefik, Stefan Hanenberg, Jan Pedersen, and Patrick Daleiden. 2016. An Empirical Study on

the Impact of C++ Lambdas and Programmer Experience. In Proceedings of the 38th International Conference on Software

Engineering (ICSE ’16). 760-771. DOL: http://dx.doi.org/10.1145/2884781.2884849



[61] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 85. Publication date: October 2017.

Understanding the Use of Lambda Expressions in Java 85:31



[62] Marek Vokaé, Walter Tichy, Dag I. K. Sjoberg, Erik Arisholm, and Magne Aldrin. 2004. A Controlled Experiment Comparing the Maintainability of Programs Designed with and Without Design Patterns — A Replication in a Real Programming Environment. Empirical Software Engineering 9, 3 (Sept. 2004), 149-195. DOI: http://dx.doi.org/10.1023/B:

EMSE.0000027778.69251.1f



[63] Geertjan Wielenga. 2014. Smart Migration to JDK 8 in NetBeans IDE. (January 2014). https://netbeans.org/kb/docs/java/

jdk8-migration-screencast.html



[64] Claes Wohlin and Aybiike Aurum. 2015. Towards a decision-making structure for selecting a research design in empirical software engineering. Empirical Software Engineering 20, 6 (2015), 1427-1455. DOI: http://dx.doi.org/10.1007/

810664-014-9319-7



[65] Alex Zhitnitsky. 2015. Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower. (2015). http://blog.takipi.

com/benchmark-how-java- 8-lambdas-and-streams-can-make-your-code-5-times-slower/



[66] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 85. Publication date: October 2017.
