[1] M. F. Adams. 2012. A low memory, highly concurrent multigrid algorithm. ArXiv
e-prints (July 2012). arXiv:math.NA/1207.6720
[2] Vinayaka Bandishti, Irshad Pananilath, and Uday Bondhugula. 2012. Tiling stencil
computations to maximize parallelism. In SC. Article 40, 11 pages.
[3] Protonu Basu, Mary W. Hall, Samuel Williams, Brian van Straalen, Leonid Oliker,
and Phillip Colella. 2015. Compiler-Directed Transformation for Higher-Order
Stencils. In IEEE IPDPS. 313–323.
[4] Protonu Basu, Anand Venkat, Mary W. Hall, Samuel W. Williams, Brian van
Straalen, and Leonid Oliker. 2013. Compiler generation and autotuning of
communication-avoiding operators for geometric multigrid. In 20th International
Conference on High Performance Computing (HiPC). 452–461.
[5] William L. Briggs, Van Emden Henson, and Steve F. McCormick. 2000. A Multigrid
Tutorial (2Nd Ed.). Society for Industrial and Applied Mathematics, Philadelphia,
PA, USA.
[6] Roshan Dathathri, Chandan Reddy, Thejas Ramashekar, and Uday Bondhugula.
2013. Generating Efficient Data Movement Code for Heterogeneous Architectures
with Distributed-Memory. In PACT.
[7] Pieter Ghysels, Przemyslaw Klosiewicz, and Wim Vanroose. 2012. Improving
the arithmetic intensity of multigrid with the help of polynomial smoothers.
Numerical Lin. Alg. with Applic. 19, 2 (2012), 253–267.
[8] Pieter Ghysels and Wim Vanroose. 2015. Modeling the Performance of Geometric
Multigrid Stencils on Multicore Computer Architectures. SIAM J. Scientific
Computing 37, 2 (2015).
[9] GMG Tiled 2015. Pieter Ghysels, Geometric Multigrid Tiled. (2015). https:
//bitbucket.org/pghysels/geometric_multigrid_tiled.
[10] Tobias Grosser, Albert Cohen, Paul HJ Kelly, J Ramanujam, P Sadayappan, and
Sven Verdoolaege. 2013. Split tiling for GPUs: automatic parallelization using
trapezoidal tiles. In Proceedings of the 6th Workshop on General Purpose Processor
Using Graphics Processing Units. 24–31.
[11] Christian Grossmann, Hans-GÃűrg Roos, and Martin Stynes. 2007. Numerical
treatment of partial differential equations. Springer, Berlin, Heidelberg, New York.
[12] Markus Kowarschik, Ulrich Rüde, Christian Weiß, and Wolfgang Karl. 2000.
Cache-Aware Multigrid Methods for Solving Poisson’s Equation in Two Dimensions. Computing 64, 4 (2000), 381–399.
[13] Sriram Krishnamoorthy, Muthu Baskaran, Uday Bondhugula, J. Ramanujam, A.
Rountev, and P. Sadayappan. 2007. Effective Automatic Parallelization of Stencil
Computations. In ACM SIGPLAN PLDI.
[14] Ravi Teja Mullapudi, Vinay Vasista, and Uday Bondhugula. 2015. PolyMage:
Automatic Optimization for Image Processing Pipelines. In ASPLOS. 429–443.
[15] Pluto 2008. PLUTO: An automatic parallelizer and locality optimizer for affine
loop nests. (2008). http://pluto-compiler.sourceforge.net.
[16] PolyMage GitHub project, Apache 2.0 license 2016. PolyMage. (2016). https:
//github.com/bondhugula/polymage.
[17] Jonathan Ragan-Kelley, Connelly Barnes, Andrew Adams, Sylvain Paris, Frédo
Durand, and Saman Amarasinghe. 2013. Halide: a language and compiler for
optimizing parallelism, locality, and recomputation in image processing pipelines.
In ACM SIGPLAN PLDI. 519–530.
[18] Sven Verdoolaege. 2010. An integer set library for program analysis. (2010).
http://isl.gforge.inria.fr/.
[19] Sven Verdoolaege. 2010. ISL: An Integer Set Library for the Polyhedral Model. In
International Congress Conference on Mathematical Software. Vol. 6327. 299–302.
[20] Samuel Williams, Dhiraj D. Kalamkar, Amik Singh, Anand M. Deshpande, Brian
van Straalen, Mikhail Smelyanskiy, Ann S. Almgren, Pradeep Dubey, John Shalf,
and Leonid Oliker. 2012. Optimization of geometric multigrid for emerging multiand manycore processors. In SC.
[21] D. Wonnacott. 2000. Using time skewing to eliminate idle time due to memory
bandwidth and network limitations. In IEEE IPDPS. 171 –180.
[22] T. Zeiser, G. Wellein, A. Nitsure, K. Iglberger, U Rude, and G. Hager. 2008. Introducing a parallel cache oblivious blocking approach for the lattice Boltzmann
method. Progress in Computational Fluid Dynamics 8 (2008), 179–188.
[23] N. Zhang, M. Driscoll, C. Markley, S. Williams, P. Basu, and A. Fox. 2017.
Snowflake: A Lightweight Portable Stencil DSL. In IEEE International Parallel and
Distributed Processing Symposium Workshops (IPDPSW). 795–804.
