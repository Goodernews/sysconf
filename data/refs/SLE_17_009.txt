[1] S. Apel and C. Kästner. 2009. An overview of feature-oriented software
development. Journal of Object Technology 8, 4 (2009), 49–84.
[2] R. S. Bird. 1984. Using Circular Programs to Eliminate Multiple Traversals of Data. Acta Informatica 21 (January 1984), 239–250.
[3] K. Claessen and J. Hughes. 2000. QuickCheck: A Lightweight Tool for
Random Testing of Haskell Programs. SIGPLAN Not. 35, 9 (Sept. 2000),
268–279. https://doi.org/10.1145/357766.351266
[4] T. Ekman and G. Hedin. 2007. The JastAdd extensible Java compiler.
In Proc. Conf. on Object-Oriented Programming Systems Languages and
Applications (OOPSLA ’07). ACM, New York, NY, USA, 1–18. https:
//doi.org/10.1145/1297027.1297029
[5] S. Erdweg, P. G. Giarrusso, and T. Rendel. 2012. Language composition
untangled. In Proc. Workshop on Language Descriptions, Tools, and
Applications (LDTA ’12). ACM, New York, NY, USA, 7:1–7:8. https:
//doi.org/10.1145/2427048.2427055
[6] S. Erdweg, T. Rendel, C. Kästner, and K. Ostermann. 2011. SugarJ:
library-based syntactic language extensibility. In Proc. Conf. on Object Oriented Programming Systems Languages and Applications (OOPSLA ’11). ACM, New York, NY, USA, 391–406. https://doi.org/10.1145/
2048066.2048099
[7] M. Flatt and PLT. 2010. Reference: Racket. Technical Report PLT-TR2010-1. PLT Inc. http://racket-lang.org/tr1/.
[8] G. Hedin. 2000. Reference Attribute Grammars. Informatica 24, 3
(2000), 301–317.

Ted Kaminski and Eric Van Wyk
[9] M. Jackson and P. Zave. 1998. Distributed feature composition: A
virtual architecture for telecommunications services. IEEE Transactions
on Software Engineering 24, 10 (1998), 831–847.
[10] T Kaminski. 2017. Reliably composable language extensions. Ph.D. Dissertation. University of Minnesota, Department of Computer Science
and Engineering, Minneapolis, Minnesota, USA. http://hdl.handle.net/
11299/188954
[11] T. Kaminski and E. Van Wyk. 2011. Integrating attribute grammar and
functional programming language features. In Proc. Conf. on Software
Language Engineering (SLE ’11), Vol. 6940. Springer, 263–282.
[12] T. Kaminski and E. Van Wyk. 2012. Modular well-definedness analysis
for attribute grammars. In Proc. Conf. on Software Language Engineering
(SLE ’12), Vol. 7745. Springer, 352–371.
[13] C. Kästner, S. Apel, and K. Ostermann. 2011. The Road to Feature Modularity?. In Proc. Workshop on Feature-Oriented Software Development
(FOSD ’11). ACM, New York, NY, USA, 5:1–5:8.
[14] D. E. Knuth. 1968. Semantics of Context-free Languages. Mathematical
Systems Theory 2, 2 (1968), 127–145. Corrections in 5(1971) pp. 95–96.
[15] E. Kohlbecker, D. P. Friedman, M. Felleisen, and B. Duba. 1986. Hygienic macro expansion. In Proc. Conf. on LISP and Functional Programming. ACM Press, 151–161. https://doi.org/10.1145/319838.319859
[16] R. Lämmel. 2001. Grammar Testing. In Proc. of Fundamental Approaches
to Software Engineering (FASE) 2001 (LNCS), Vol. 2029. Springer-Verlag,
201–216. http://homepages.cwi.nl/~ralf/fase01/
[17] R. Lämmel and J. Harm. 2000. Testing Attribute Grammars. In Proc.
Workshop on Attribute Grammars and their Applications (WAGA 2000).
79–98. http://citeseer.ist.psu.edu/297413.html
[18] F. Lorenzen and S. Erdweg. 2016. Sound Type-dependent Syntactic Language Extension. In Proc. Conf. on Principles of Programming
Languages (POPL ’16). ACM, New York, NY, USA, 204–216. https:
//doi.org/10.1145/2837614.2837644
[19] A. Middelkoop, A. Dijkstra, and S.D. Swierstra. 2011. Dependently
Typed Attribute Grammars. In Implementation and Application of
Functional Languages, Jurriaan Hage and MarcoT. MorazÃąn (Eds.).
Lecture Notes in Computer Science, Vol. 6647. Springer Berlin Heidelberg, 105–120. https://doi.org/10.1007/978-3-642-24276-2_7
[20] U. Norell. 2009. Dependently Typed Programming in Agda. In Proc.
Workshop on Types in Language Design and Implementation (TLDI ’09).
ACM, 1–2.
[21] C. Omar. 2017. Reasonably Programmable Syntax. Ph.D. Dissertation. Carnegie Mellon University, Department of Computer Science,
Pittsburgh, Pennsylvania, USA. https://www.cs.cmu.edu/~comar/
omar-thesis.pdf
[22] C. Omar, D. Kurilova, L. Nistor, B. Chung, A. Potanin, and J. Aldrich.
2014. Safely Composable Type-Specific Languages. In Proc. European
Conf. on Object-Oriented Programming (ECOOP ’14). Springer-Verlag
New York, Inc., New York, NY, USA, 105–130. https://doi.org/10.1007/
978-3-662-44202-9_5
[23] A. C. Schwerdfeger and E. Van Wyk. 2009. Verifiable composition
of deterministic grammars. In Proc. Conf. on Programming Language
Design and Implementation (PLDI ’09). ACM, New York, NY, USA, 199–
210. https://doi.org/10.1145/1542476.1542499
[24] E. Van Wyk, D. Bodin, J. Gao, and L. Krishnan. 2010. Silver: an Extensible Attribute Grammar System. Science of Computer Programming
75, 1–2 (January 2010), 39–54.
[25] E. Van Wyk, O. de Moor, K. Backhouse, and P. Kwiatkowski. 2002.
Forwarding in Attribute Grammars for Modular Language Design. In
Proc. Conf. on Compiler Construction (LNCS), Vol. 2304. 128–142.
[26] E. Van Wyk and A. C. Schwerdfeger. 2007. Context-aware scanning for
parsing extensible languages. In Proc. Conf. on Generative Programming
and Component Engineering (GPCE ’07). ACM, New York, NY, USA,
63–72. https://doi.org/10.1145/1289971.1289983
[27] H. Vogt, S. D. Swierstra, and M. F. Kuiper. 1989. Higher-order Attribute Grammars. In Proc. Conf. on Programming Language Design
and Implementation (PLDI ’89). ACM Press, 131–145.
