[1] 2016. 2016 Financial Industry Cybersecurity Report. https://cdn2.hubspot.net/hubfs/533449/SecurityScorecard 2016 Financial Report.pdf. (2016).
[2] 2016. FullDisclosure: CVE-2016-8655 Linux af packet.c race condition (local root). http://seclists.org/oss-sec/2016/q4/607. (2016).
[3] 2016. Kernel: Add KCOV Code Coverage. https://lwn.net/Articles/671640/. (2016).
[4] 2016. Syzkaller. https://github.com/google/syzkaller. (2016).
[5] 2016. Yahoo: Hackers Stole Data On Another Billion Accounts.
https://www.forbes.com/sites/thomasbrewster/2016/12/14/yahoo-admits-
another- billion- user- accounts- were- leaked- in- 2013. (2016).
[6] 2017. Application Vulnerability: Trend Analysis and Correlation of Coding Pat- terns across Industries. https://www.cognizant.com/whitepapers/Application-
Vulnerability- Trend- Analysis- and- Correlation- of- Coding- Patterns- Across-
Industries.pdf. (2017).
[7] 2017. Bug 195709. https://bugzilla.kernel.org/show bug.cgi?id=195709. (2017).
[8] 2017. Bug 195807. https://bugzilla.kernel.org/show bug.cgi?id=195807. (2017).
[9] 2017. Common Vulnerabilities and Exposures. https://cve.mitre.org. (2017).
[10] 2017. Common Weakness Enumeration. https://cwe.mitre.org. (2017).
[11] 2017. CWE: Improper Input Validation.
https://cwe.mitre.org/data/definitions/20.html. (2017).
[12] 2017. FullDisclosure Mailing List. http://seclists.org/fulldisclosure. (2017).
[13] 2017. Information Security Resources.
https://www.sans.org/security-resources/blogs. (2017).
[14] 2017. Krebs on Security. https://krebsonsecurity.com. (2017).
[15] 2017. Linux Kernel Git Repositories. https://git.kernel.org. (2017).
[16] 2017. Linux man pages online. http://man7.org/linux/man-pages/index.html. (2017).
[17] 2017. National Vulnerability Database. https://nvd.nist.gov. (2017).
[18] 2017. pyStatParser. https://github.com/emilmont/pyStatParser. (2017).
[19] 2017. STP Constraint Solver. http://stp.github.io. (2017).
[20] 2017. Vulnerability. https://en.wikipedia.org/wiki/Vulnerability (computing).
(2017).
[21] 2017. vUSBf. https://github.com/schumilo/vUSBf. (2017).
[22] 2017. WannaCry Ransomware Attack.
https://en.wikipedia.org/wiki/WannaCry ransomware attack. (2017).
[23] 2017. What is CVE and How Does It Work?
http://www.csoonline.com/article/3204884/application-security/what-is-
the-cve-and-how-does-it-work.html. (2017).
[24] Abeer Alhuzali, Birhanu Eshete, Rigel Gjomemo, and VN Venkatakrishnan.
2016. Chainsaw: Chained Automated Workflow-Based Exploit Generation. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS 2016). ACM, 641–652.
[25] Frances E Allen. 1970. Control Flow Analysis. In ACM SIGPLAN Notices, Vol. 5. ACM, 1–19.
[26] Thanassis Avgerinos, Sang Kil Cha, Alexandre Rebert, Edward J Schwartz, Mav- erick Woo, and David Brumley. 2014. Automatic Exploit Generation. Commun. ACM 57, 2 (2014), 74–84.
[27] Marcel Bo ̈hme, Van-Thuan Pham, and Abhik Roychoudhury. 2016. Coverage- Based Greybox Fuzzing as Markov Chain. In Proceedings of the 23rd ACM Con- ference on Computer and Communications Security (CCS 2016). ACM, 1032–1043.
[28] David Brumley, Pongsin Poosankam, Dawn Song, and Jiang Zheng. 2008. Auto- matic Patch-Based Exploit Generation is possible: Techniques and Implications. In Proceedings of the 29th IEEE Symposium on Security & Privacy (S&P 2008). IEEE, 143–157.
[29] Yan Cai and Lingwei Cao. 2015. Effective and Precise Dynamic Detection of Hidden Races for Java Programs. In Proceedings of the 10th Joint Meeting on Foundations of Software Engineering, (FSE 2015). 450–461.
[30] Eugene Charniak. 1996. Tree-Bank Grammars. In Proceedings of the 10th National Conference on Artificial Intelligence (AAAI 1996). 1031–1036.
[31] Kai Chen, Xueqiang Wang, Yi Chen, Peng Wang, Yeonjoon Lee, XiaoFeng Wang, Bin Ma, Aohui Wang, Yingjun Zhang, and Wei Zou. 2016. Following Devil’s Footprints: Cross-Platform Analysis of Potentially Harmful Libraries on Android and iOS. In Proceedings of the 37th IEEE Symposium on Security & Privacy (S&P 2016). 357–376.
[32] Kai Chen, Yingjun Zhang, and Peng Liu. 2016. Dynamically Discovering Likely Memory Layout to Perform Accurate Fuzzing. IEEE Trans. Reliability 65, 3 (2016), 1180–1194.
[33] Alessandra Gorla, Ilaria Tavecchia, Florian Gross, and Andreas Zeller. 2014. Checking App Behavior Against App Descriptions. In Proceedings of the 36th International Conference on Software Engineering (ICSE 2014). ACM, 1025–1035.
[34] Hong Hu, Zheng Leong Chua, Sendroiu Adrian, Prateek Saxena, and Zhenkai Liang. 2015. Automatic Generation of Data-Oriented Exploits. In Proceedings of the 24th USENIX Security Symposium (Security 2015). 177–192.
[35] Shih-Kun Huang, Han-Lin Lu, Wai-Meng Leong, and Huan Liu. 2013. Craxweb: Automatic Web Application Testing and Attack Generation. In Proceedings of the 7th IEEE International Conference on Software Security and Reliability (SERE 2013). IEEE, 208–217.
[36] James C King. 1976. Symbolic Execution and Program Testing. Commun. ACM 19, 7 (1976), 385–394.
[37] Zhenmin Li and Yuanyuan Zhou. 2005. PR-Miner: automatically extracting implicit programming rules and detecting violations in large software code. In Proceedings of the 13th ACM SIGSOFT International Symposium on Foundations of Software Engineering (FSE 2005). 306–315.
[38] Bin Liang, Pan Bian, Yan Zhang, Wenchang Shi, Wei You, and Yan Cai. 2016. AntMiner: mining more bugs by reducing noise interference. In Proceedings of the 38th International Conference on Software Engineering (ICSE 2016). 333–344.
[39] Lannan Luo, Qiang Zeng, Chen Cao, Kai Chen, Jian Liu, Limin Liu, Neng Gao, Min Yang, Xinyu Xing, and Peng Liu. 2017. System Service Call-oriented Symbolic Execution of Android Framework with Applications to Vulnerability Discovery and Exploit Generation. In Proceedings of the 15th Annual International Conference on Mobile Systems, Applications, and Services (MobiSys 2017). 225–238.
[40] Mitchell P Marcus, Mary Ann Marcinkiewicz, and Beatrice Santorini. 1993. Build- ing a Large Annotated Corpus of English: The Penn Treebank. Computational Linguistics 19, 2 (1993), 313–330.
[41] Andrew Meneely, Harshavardhan Srinivasan, Ayemi Musa, Alberto Rodriguez Tejeda, Matthew Mokary, and Brian Spates. 2013. When a Patch Goes Bad: Exploring the Properties of Vulnerability-Contributing Commits. In Proceedings of the 7th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement, (ESEM 2013). IEEE, 65–74.
[42] Andrew Meneely, Alberto C Rodriguez Tejeda, Brian Spates, Shannon Trudeau, Danielle Neuberger, Katherine Whitlock, Christopher Ketant, and Kayla Davis. 2014. An Empirical Investigation of Socio-Technical Code Review Metrics and Security Vulnerabilities. In Proceedings of the 6th International Workshop on Social Software Engineering (SSE 2014). ACM, 37–44.
[43] Andrew Meneely and Oluyinka Williams. 2012. Interactive Churn Metrics: Socio-
Technical Variants of Code Churn. ACM SIGSOFT Software Engineering Notes 37,
6 (2012), 1–6.
[44] Barton P Miller, Louis Fredriksen, and Bryan So. 1990. An Empirical Study of
the Reliability of UNIX Utilities. Commun. ACM 33, 12 (1990), 32–44.
[45] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Dumi- tras. 2015. The Attack of the Clones: a Study of the Impact of Shared Code on Vulnerability Patching. In Proceedings of the 36th IEEE Symposium on Security &
Privacy (S&P 2015). IEEE, 692–708.
[46] Stephan Neuhaus, Thomas Zimmermann, Christian Holler, and Andreas Zeller.
2007. Predicting vulnerable software components. In Proceedings of the 14th ACM conference on Computer and Communications Security (CCS 2007). ACM, 529–540.
[47] Rahul Pandita, Xusheng Xiao, Wei Yang, William Enck, and Tao Xie. 2013. WHY- PER: Towards Automating Risk Assessment of Mobile Applications. In Proceed- ings of the 22nd USENIX Security Symposium (Security 2013). 527–542.
[48] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi, Konrad Rieck, Sascha Fahl, and Yasemin Acar. 2015. Vccfinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS 2015). ACM, 426–437.
[49] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. 2017. VUzzer: Application-Aware Evolutionary Fuzzing. In Pro- ceedings of the 24th Annual Network and Distributed System Security Symposium (NDSS 2017). ISOC.
[50] Edward J Schwartz, Thanassis Avgerinos, and David Brumley. 2010. All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask). In Proceedings of the 31st IEEE Symposium on Security & Privacy (S&P 2010). IEEE, 317–331.
[51] Jacek S ́liwerski, Thomas Zimmermann, and Andreas Zeller. 2005. When Do Changes Induce Fixes?. In ACM SIGSOFT Software Engineering Notes, Vol. 30.
ACM, 1–5.
[52] Nick Stephens, John Grosen, Christopher Salls, Andrew Dutcher, Ruoyu Wang,
Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Pro- ceedings of the 23nd Annual Network and Distributed System Security Symposium (NDSS 2016).
[53] Michael Sutton, Adam Greene, and Pedram Amini. 2007. Fuzzing: Brute Force Vulnerability Discovery. Pearson Education.
[54] Lin Tan, Ding Yuan, Gopal Krishna, and Yuanyuan Zhou. 2007. iComment: Bugs or Bad Comments?. In Proceedings of the 21st ACM Symposium on Operating Systems Principles (SOSP 2007). ACM, 145–158.
[55] Lin Tan, Yuanyuan Zhou, and Yoann Padioleau. 2011. aComment: mining annotations from comments and code to detect interrupt related concurrency bugs. In Proceedings of the 33rd International Conference on Software Engineering (ICSE 2011). IEEE, 11–20.
[56] Junjie Wang, Bihuan Chen, Lei Wei, and Yang Liu. 2017. Skyfire: Data-Driven Seed Generation for Fuzzing. In Proceedings of the 38th IEEE Symposium on Security & Privacy (S&P 2017). IEEE.
[57] Xusheng Xiao, Amit Paradkar, Suresh Thummalapenta, and Tao Xie. 2012. Auto- mated Extraction of Security Policies from Natural-Language Software Docu- ments. In Proceedings of the 20th ACM SIGSOFT International Symposium on the Foundations of Software Engineering (FSE 2012). ACM, 12.
[58] Junfeng Yang, Ang Cui, Salvatore J Stolfo, and Simha Sethumadhavan. 2012. Concurrency Attacks. HotPar 12 (2012), 15.
[59] Juan Zhai, Jianjun Huang, Shiqing Ma, Xiangyu Zhang, Lin Tan, Jianhua Zhao, and Feng Qin. 2016. Automatic Model Generation from Documentation for Java API Functions. In Proceedings of the 38th International Conference on Software Engineering (ICSE 2016). ACM, 380–391.
[60] Hao Zhong, Lu Zhang, Tao Xie, and Hong Mei. 2009. Inferring Resource Specifi- cations from Natural Language API Documentation. In Proceedings of the 24th IEEE/ACM International Conference on Automated Software Engineering (ASE 2009). IEEE, 307–318.
