
[1] 45 nanometer - Wikipedia, Technology demos. https://en.wikipedia.org/wiki/45_
nanometer#Technology_demos.

[2] An Update on the Memcached/Redis Benchmark. http://oldblog.antirez.com/post/
update-on-memcached-redis- benchmark.html.

[3] Barefoot: The World’s Fastest and Most Programmable Networks.
https://barefootnetworks.com/media/white_papers/Barefoot- Worlds-FastestMost-Programmable-Networks.pdf.

[4] Benchmarking Apache Kafka: 2 Million Writes Per Second (On Three Cheap
Machines). https://engineering.linkedin.com/kafka/benchmarking-apache-kafka2-million- writes-second-three-cheap-machines.

[5] Broadcom First to Deliver 64 Ports of 100GE with Tomahawk II 6.4Tbps Ethernet
Switch. https://www.broadcom.com/news/product-releases/broadcom- first-todeliver-64-ports-of-100ge-with-tomahawk-ii-ethernet- switch.

[6] Cavium XPliant Switches and Microsoft Azure Networking Achieve SAI Routing
Interoperability. http://www.cavium.com/newsevents-Cavium- XPliant-S witches
-and-Microsoft-Azure-Networking- Achieve -SAI-Routing-Interoperability.html.

[7] Cisco IOS NetFlow. http://www.cisco.com/c/en/us/products/ios-nx-os-software/
ios-netflow/index.html.

[8] Configuring SPAN. http://www.cisco.com/c/en/us/td/docs/switches/lan/
catalyst2940/software/release/12-1_19_eal1/configuration/guide/2940scg_1/
swspan.html.

[9] Data center flow telemetry. http://www.cisco.com/c/en/us/products/collateral/datacenter-analytics/tetration- analytics/white-paper-cl 1-737366.html.

[10] Gigamon. https://www.gigamon.com/products/visibility-nodes/visibilityappliances.html.

[11] How Fast is Redis? http://redis.io/topics/benchmarks.

[12] In-band Network Telemetry. https://github.com/p4lang/p4factory/tree/master/
apps/int.

[13] Intel FlexPipe. http://www. intel.com/content/dam/www/public/us/en/documents/
product- briefs/ethernet-switch-fm6000-series-brief.pdf.

[14] Intel64 and JIA-32 Architectures Optimization Reference Manual.
http://www .intel.com/content/dam/www/public/us/en/documents/manuals/64-ia32-architectures-optimization-manual.pdf.

[15] Marple proofs. http://web.mit.edu/marple/marple_tr.pdf.

[16] Microsoft bets big on SDN. https://azure.microsoft.com/en-us/blog/microsoftshowcases- software-defined-networking-innovation-at-sigcomm-v2/.

[17] Multiply-accumulate operation. https://en. wikipedia.org/wiki/Multiplyaccumulate_operation.

[18] P4-16 Language Specification. http://p4.org/wp-content/uploads/2016/12/P4_16prerelease-Dec_16.html.

[19] P4 Behavioral Model. https://github.com/p4lang/behavioral-model.

[20] Redis. http://redis.io/.

[21] sFlow. https://en.wikipedia.org/wiki/SFlow.

[22] SRAM - ARM. https://www.arm.com/products/physical-ip/embedded-memoryip/sram.php.

[23] The CAIDA UCSD Anonymized Internet Traces 2014 - June. http://Awww.caida.
org/data/passive/passive_2014_dataset.xml.

[24] The CAIDA UCSD Anonymized Internet Traces 2016 - April. http://www.caida.
org/data/passive/passive_2016_dataset.xml.

[25] XPliant™ Ethernet Switch Product Family. http://Awww.cavium.com/XPliantEthernet-Switch- Product-Family.html.

[26] The Future of Network Monitoring with Barefoot Networks. https://youtu.be/
Gbm7kDHXR-o, 2017.

[27] M. Alizadeh, T. Edsall, $. Dharmapurikar, R. Vaidyanathan, K. Chu, A. Fingerhut,
V. T. Lam, F. Matus, R. Pan, N. Yadav, and G. Varghese. CONGA: Distributed
Congestion-Aware Load Balancing for Datacenters. In SIGCOMM, 2014.

[28] Alizadeh, Mohammad. Empirical Traffic Generator. https://github.com/datacenter/
empirical-traffic- gen, 2017.

[29] J. R. Allen, K. Kennedy, C. Porterfield, and J. Warren. Conversion of Control
Dependence to Data Dependence. In POPL, 1983.

[30] A. Arasu, S. Babu, and J. Widom. The CQL Continuous Query Language: Semantic Foundations and Query Execution. The VLDB Journal, 2006.

[31] B. Arzani, S. Ciraci, B. T. Loo, A. Schuster, and G. Outhred. Taking the Blame
Game out of Data Centers Operations with NetPoirot. In Proceedings of the 2016
Conference on ACM SIGCOMM 2016 Conference, SIGCOMM ’16, 2016.

[32] T. Benson, A. Akella, and D. A. Maltz. Network Traffic Characteristics of Data
Centers in the Wild. ACM International Measurement Conference, Nov. 2010.

98

S. Narayana et al.

[33] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese, N. McKeown, M. Izzard, F. Mujica,
and M. Horowitz. Forwarding Metamorphosis: Fast Programmable Match-Action
Processing in Hardware for SDN. In SIGCOMM, 2013.

[34] G. Cormode and S$. Muthukrishnan. An Improved Data Stream Summary: The
Count-Min Sketch and Its Applications. Journal of Algorithms, 2005.

[35] C. Cranor, T. Johnson, O. Spataschek, and V. Shkapenyuk. Gigascope: A Stream
Database for Network Applications. In SIGMOD, 2003.

[36] D.R. Ditzel and D. A. Patterson. Retrospective on High-level Language Computer
Architecture. In SCA, 1980.

[37] M. Dobrescu, K. Argyraki, and S. Ratnasamy. Toward Predictable Performance in
Software Packet-processing Platforms. In NSD/, 2012.

[38] N. Foster, R. Harrison, M. J. Freedman, C. Monsanto, J. Rexford, A. Story, and
D. Walker. Frenetic: A Network Programming Language. In JCFP, 2011.

[39] G. Gibb, G. Varghese, M. Horowitz, and N. McKeown. Design Principles for
Packet Parsers. In ANCS, 2013.

[40] C. Guo, L. Yuan, D. Xiang, Y. Dang, R. Huang, D. Maltz, Z. Liu, V. Wang, B. Pang,
H. Chen, Z.-W. Lin, and V. Kurien. Pingmesh: A Large-Scale System for Data
Center Network Latency Measurement and Analysis. In SIGCOMM, 2015.

[41] A. Gupta, R. Birkner, M. Canini, N. Feamster, C. Mac-Stoker, and W. Willinger.
Network Monitoring is a Streaming Analytics Problem. In HOTNETS, 2016.

[42] N. Handigol, B. Heller, V. Jeyakumar, D. Maziéres, and N. McKeown. I Know
What Your Packet Did Last Hop: Using Packet Histories to Troubleshoot Networks.
In NSDI, 2014.

[43] S. Hart, E. Frachtenberg, and M. Berezecki. Predicting Memcached Throughput
Using Simulation and Modeling. In Symposium on Theory of Modeling and
Simulation, 2012.

[44] V. Jeyakumar, M. Alizadeh, Y. Geng, C. Kim, and D. Maziéres. Millions of Little
Minions: Using Packets for Low Latency Network Programming and Visibility.
In SIGCOMM, 2014.

[45] S. P. Jones and P. Wadler. Comprehensive Comprehensions. In Proceedings of the
ACM SIGPLAN Workshop on Haskell Workshop, 2007.

[46] M. Kumar and K. Prasad. Auto-learning of MAC addresses and lexicographic
lookup of hardware database. US Patent App. 10/747,332.

[47] B. Lantz, B. Heller, and N. McKeown. A Network in a Laptop: Rapid Prototyping
for Software-defined Networks. In HotNets, 2010.

[48] Y. Li, R. Miao, C. Kim, and M. Yu. FlowRadar: A Better NetFlow for Data
Centers. In NSDI, 2016.

[49] Z. Liu, A. Manousis, G. Vorsanger, V. Sekar, and V. Braverman. One Sketch
to Rule Them All: Rethinking Network Flow Monitoring with UnivMon. In
SIGCOMM, 2016.

[S50] W. M. McKeeman. Language directed computer design. In Proceedings of the
November 14-16, 1967, fall joint computer conference, 1967.

[51] N. McKeown, T. Anderson, H. Balakrishnan, G. Parulkar, L. Peterson, J. Rexford,
S. Shenker, and J. Turner. OpenFlow: Enabling Innovation in Campus Networks.
SIGCOMM Comput. Commun. Rev., 38(2):69-74, Mar. 2008.

[52] M. Moshref, M. Yu, R. Govindan, and A. Vahdat. DREAM: Dynamic Resource
Allocation for Software-defined Measurement. In SIGCOMM, 2014.

[53] M. Moshref, M. Yu, R. Govindan, and A. Vahdat. Trumpet: Timely and Precise
Triggers in Data Centers. In SIGCOMM, 2016.

[54] S. Narayana, M. Tahmasbi, J. Rexford, and D. Walker. Compiling Path Queries.
In NSDI, 2016.

[55] P. Phaal. SFlow sampling rates, 2016. http://blog.sflow.com/2009/06/samplingrates.html.

[56] A. Sivaraman, A. Cheung, M. Budiu, C. Kim, M. Alizadeh, H. Balakrishnan,
G. Varghese, N. McKeown, and S. Licking. Packet Transactions: High-Level
Programming for Line-Rate Switches. In SIGCOMM, 2016.

[57] A. Sivaraman, S. Subramanian, M. Alizadeh, S. Chole, S.-T. Chuang, A. Agrawal,
H. Balakrishnan, T. Edsall, S$. Katti, and N. McKeown. Programmable Packet
Scheduling at Line Rate. In SIGCOMM, 2016.

[58] P. Tammana, R. Agarwal, and M. Lee. Simplifying Datacenter Network Debugging
with PathDump. In OSD/, 2016.

[59] D. Ungar, R. Blau, P. Foley, D, Samples, and D. Patterson. Architecture of SOAR:
Smalltalk on a RISC. In ISCA, 1984.

[60] E. Vanini, R. Pan, M. Alizadeh, P. Taheri, and T. Edsall. Let it Flow: Resilient
Asymmetric Load Balancing with Flowlet Switching. In NSDJ, 2017.

[61] V. Vasudevan, A. Phanishayee, H. Shah, E. Krevat, D. G. Andersen, G. R. Ganger,
G, A. Gibson, and B. Mueller. Safe and Effective Fine-Grained TCP Retransmissions for Datacenter Communication. In SIGCOMM, 2009.

[62] M. Yu, A. Greenberg, D. Maltz, J. Rexford, L. Yuan, S. Kandula, and C. Kim.
Profiling Network Performance for Multi-tier Data Center Applications. In NSDJ,
2011.

[63] M. Yu, L. Jose, and R. Miao. Software Defined Traffic Measurement with OpenSketch. In NSDJ, 2013.

[64] M. Zaharia, T. Das, H. Li, T. Hunter, S. Shenker, and I. Stoica. Discretized Streams:
Fault-tolerant Streaming Computation at Scale. In SOSP, 2013.

[65] Y. Zhu, N. Kang, J. Cao, A. Greenberg, G. Lu, R. Mahajan, D. Maltz, L. Yuan,
M. Zhang, B. Y. Zhao, and H. Zheng. Packet-Level Telemetry in Large Datacenter
Networks. In SIGCOMM, 2015.
