[1] Y. Afek, A. Matveev, O. R. Moll, and N. Shavit. Amalgamated lock-elision. In
Distributed Computing: 29th International Symposium, DISC 2015, Tokyo, Japan, October 7-9, 2015, Proceedings, pages 309–324. Springer Berlin Heidelberg, Berlin, Heidelberg, 2015.
[2] H. Attiya and E. Hillel. A single-version stm that is multi-versioned permissive. Theory of Computing Systems, 51(4):425–446, 2012.
[3] P. A. Bernstein and N. Goodman. Multiversion concurrency control-theory and algorithms. ACM Transactions on Database Systems (TODS), 8(4):465–483, 1983.
[4] T. Brown. Reclaiming memory for lock-free data structures: There has to be a better way. In Proceedings of the 2015 ACM Symposium on Principles of Distributed Computing, PODC ’15, pages 261–270, 2015.
[5] T. Brown. Techniques for Constructing Efficient Data Structures. PhD thesis, University of Toronto, 2017.
[6] T. Brown, F. Ellen, and E. Ruppert. Pragmatic primitives for non-blocking data structures. In Proceedings of the 2013 ACM Symposium on Principles of Distributed Computing, PODC ’13, pages 13–22, 2013.
[7] T. Brown, F. Ellen, and E. Ruppert. A general technique for non-blocking trees. In Proceedings of the 19th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP ’14, pages 329–342, 2014.
[8] I. Calciu, J. Gottschlich, T. Shpeisman, G. Pokam, and M. Herlihy. Invyswell: a hybrid transactional memory for haswell’s restricted transactional memory. In Proceedings of the 23rd international conference on Parallel architectures and compilation, pages 187–200. ACM, 2014.
[9] L. Dalessandro, F. Carouge, S. White, Y. Lev, M. Moir, M. L. Scott, and M. F. Spear. Hybrid norec: A case study in the effectiveness of best effort hardware transactional memory. In Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XVI, pages 39–52, New York, NY, USA, 2011. ACM.
[10] P. Damron, A. Fedorova, Y. Lev, V. Luchangco, M. Moir, and D. Nussbaum. Hybrid transactional memory. In Proceedings of the 12th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS XII, pages 336–346, New York, NY, USA, 2006. ACM.
[11] D. Dice, T. Harris, A. Kogan, Y. Lev, and M. Moir. Pitfalls of lazy subscription. In
Proceedings of the 6th Workshop on the Theory of Transactional Memory, Paris,
France, 2014.
[12] D. Dice, A. Kogan, and Y. Lev. Refined transactional lock elision. In Proceedings
of the 21st ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming, PPoPP ’16, pages 19:1–19:12, New York, NY, USA, 2016. ACM.
[13] D. Dice, Y. Lev, M. Moir, and D. Nussbaum. Early experience with a commercial hardware transactional memory implementation. In Proceedings of the 14th Int. Conf. on Architectural Support for Programming Languages and Operating
Systems, ASPLOS XIV, pages 157–168, New York, NY, USA, 2009.
[14] F. Ellen, P. Fatourou, E. Ruppert, and F. van Breugel. Non-blocking binary search trees. In Proceedings of the 29th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, PODC ’10, pages 131–140, 2010. Full
version available as Technical Report CSE-2010-04, York University.
[15] F. Ellen, Y. Lev, V. Luchangco, and M. Moir. Snzi: Scalable nonzero indicators. In Proceedings of the twenty-sixth annual ACM symposium on Principles of
distributed computing, pages 13–22. ACM, 2007.
[16] T. L. Harris, K. Fraser, and I. A. Pratt. A practical multi-word compare-and-swap
operation. In Proceedings of the 16th International Conference on Distributed
Computing, DISC ’02, pages 265–279, 2002.
[17] M. He and M. Li. Deletion without rebalancing in non-blocking binary search
trees. In Proceedings of the 20th International Conference on Principles of
Distributed Systems, 2016.
[18] L. Jacobsen and K. S. Larsen. Variants of (a, b)-trees with relaxed balance. Int. J.
Found. Comput. Sci., 12(4):455–478, 2001.
[19] S. Kumar, M. Chu, C. J. Hughes, P. Kundu, and A. Nguyen. Hybrid transactional
memory. In Proceedings of the Eleventh ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPoPP ’06, pages 209–220, New York, NY, USA, 2006. ACM.
[20] Y. Lev, M. Moir, and D. Nussbaum. Phtm: Phased transactional memory. In Workshop on Transactional Computing (Transact), 2007.
[21] Y. Liu, T. Zhou, and M. Spear. Transactional acceleration of concurrent data structures. In Proc. of 27th ACM Sym. on Parallelism in Algorithms and Arch., SPAA ’15, pages 244–253, New York, NY, USA, 2015. ACM.
[22] D. Makreshanski, J. Levandoski, and R. Stutsman. To lock, swap, or elide: on the interplay of hardware transactional memory and lock-free indexing. Proceedings of the VLDB Endowment, 8(11):1298–1309, 2015.
[23] A. Matveev and N. Shavit. Reduced hardware norec: A safe and scalable hybrid transactional memory. In Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS ’15, pages 59–71, New York, NY, USA, 2015. ACM.
[24] A. T. Nguyen. Investigation of Hardware Transactional Memory. PhD thesis, Massachusetts Institute of Technology, 2015.
[25] R. Rajwar and J. R. Goodman. Speculative lock elision: Enabling highly con- current multithreaded execution. In Proceedings of the 34th annual ACM/IEEE international symposium on Microarchitecture, pages 294–305. IEEE Computer Society, 2001.
[26] R. Rajwar and J. R. Goodman. Transactional lock-free execution of lock-based programs. In Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS X, pages 5–17, New York, NY, USA, 2002. ACM.
[27] T. Riegel, P. Marlier, M. Nowack, P. Felber, and C. Fetzer. Optimizing hybrid transactional memory: The importance of nonspeculative operations. In Proceed- ings of the 23rd ACM Symposium on Parallelism in Algorithms and Architectures, pages 53–64. ACM, 2011.
[28] S. Timnat, M. Herlihy, and E. Petrank. A practical transactional memory interface. In Euro-Par 2015: Parallel Processing, pages 387–401. Springer, 2015.
