[1] [n. d.]. OpenNVM. http:opennvm.github.io. ([n. d.]).
Intel and Micron Produce Breakthrough Memory Technol[2] 2015.
ogy. http://newsroom.intel.com/community/intel newsroom/blog/2015/07/28/
intel-and-micron-produce-breakthrough-memory-technology. (2015). [Online;
accessed 2016/11/08].
[3] 2015. NVM Programming Model (NPM). http://www.snia.org/tech activities/
standards/curr standards/npm/. (2015). [Online; accessed 2016/11/08].
[4] Joy Arulraj, Andrew Pavlo, and Subramanya R Dulloor. 2015. Let’s talk about
storage & recovery methods for non-volatile memory database systems. In Proceedings of the 2015 ACM SIGMOD International Conference on Management of
Data. ACM, 707–722.
[5] Katelin A Bailey, Peter Hornyack, Luis Ceze, Steven D Gribble, and Henry M
Levy. 2013. Exploring storage class memory with key value stores. In Proceedings
of the 1st Workshop on Interactions of NVM/FLASH with Operating Systems and
Workloads. ACM, 4.
[6] Ryan Berryhill, Wojciech Golab, and Mahesh Tripunitara. 2016. Robust shared objects for non-volatile main memory. In LIPIcs-Leibniz International Proceedings
in Informatics, Vol. 46. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[7] Dhruva R. Chakrabarti and Hans-J. Boehm. 2013. Durability Semantics for
Lock-based Multithreaded Programs. In USINEX Hotpar.
[8] Dhruva R Chakrabarti, Hans-J Boehm, and Kumud Bhandari. 2014. Atlas: Leveraging locks for non-volatile memory consistency. In ACM SIGPLAN Notices,
Vol. 49. ACM, 433–452.
[9] Andreas Chatzistergiou, Marcelo Cintra, and Stratis D Viglas. 2015. Rewind:
Recovery write-ahead system for in-memory non-volatile data-structures. Proceedings of the VLDB Endowment 8, 5 (2015), 497–508.
[10] Joel Coburn, Adrian M. Caulfield, Ameen Akel, Laura M. Grupp, Rajesh K. Gupta,
Ranjit Jhala, and Steven Swanson. 2011. NV-Heaps: making persistent objects fast
and safe with next-generation, non-volatile memories. In Proceedings of ASPLOS.
ACM, New York, NY, USA, 105–118. https://doi.org/10.1145/1950365.1950380
[11] Jeremy Condit, Edmund B Nightingale, Christopher Frost, Engin Ipek, Benjamin
Lee, Doug Burger, and Derrick Coetzee. 2009. Better I/O through byte-addressable,
persistent memory. In Proceedings of the ACM SIGOPS 22nd symposium on
Operating systems principles. ACM, 133–146.
[12] Jonathan Corbet. 2014. Supporting filesystems in persistent memory [LWN.net].
https://lwn.net/Articles/610174/. (2014). [Online; accessed 2016/11/08].
[13] Subramanya R Dulloor, Sanjay Kumar, Anil Keshavamurthy, Philip Lantz, Dheeraj
Reddy, Rajesh Sankaran, and Jeff Jackson. 2014. System software for persistent
memory. In Proceedings of the Ninth European Conference on Computer Systems.
ACM, 15.
[14] H. Garcia-Molina, J. Ullman, and J. Widom. 2009. Database Systems: The
Complete Book (2nd ed.). Pearson Prentice Hall.
[15] J. Izraelevitz, H. Mendes, and M. L. Scott. 2016. Linearizability of Persistent
Memory Objects under a Full-System-Crash Failure Model. In Proceedings of
Efficient Support of Position Independence on Non-Volatile Memory
30th Intl. Symp. on Distributed Computing (DISC). ACM.
[16] C. Lattner. 2002. LLVM: An Infrastructure for Multi-Stage Optimization. Ph.D.
Dissertation. Computer Science Dept., Univ. of Illinois at Urbana-Champaign.
[17] B. Lee, P. Zhou, J. Yang, Y. Zhang, B. Zhao, E. Ipek, O. Mutlu, and D. Burger.
2010. Phase-Change Technology and the Future of Main Memory. IEEE Micro 1
(2010).
[18] Ren-Shuo Liu, De-Yu Shen, Chia-Lin Yang, Shun-Chih Yu, and ChengYuan Michael Wang. 2014. NVM Duet: Unified Working Memory and Persistent Store Architecture. SIGPLAN Not. 49, 4 (Feb. 2014), 455–470. https:
//doi.org/10.1145/2644865.2541957
[19] Youyou Lu, Jiwu Shu, Long Sun, and Onur Mutlu. 2014. Loose-Ordering Consistency for persistent memory. In 32nd IEEE International Conference on Computer
Design, ICCD 2014, Seoul, South Korea, October 19-22, 2014. 216–223.
[20] Calif Milpitas. 2015. SanDisk and HP Launch Partnership to Create MemoryDriven Computing Solutions. https://www.sandisk.com/about/media-center/
press-releases/2015/sandisk-and-hp-launch-partnership. (2015). [Online; accessed 2016/11/08].
[21] Dushyanth Narayanan and Orion Hodson. 2012. Whole-system persistence. In
Proceedings of the 17th International Conference on Architectural Support for
Programming Languages and Operating Systems, ASPLOS. 401–410.
[22] Jiaxin Ou, Jiwu Shu, and Youyou Lu. 2016. A high performance file system for
non-volatile main memory. In Proceedings of the Eleventh European Conference
on Computer Systems. ACM, 12.
[23] Steven Pelley, Peter M. Chen, and Thomas F. Wenisch. 2014. Memory Persistency. In Proceeding of the 41st Annual International Symposium on Computer Architecuture (ISCA ’14). IEEE Press, Piscataway, NJ, USA, 265–276.
http://dl.acm.org/citation.cfm?id=2665671.2665712
[24] Simone Raoux, Geoffrey W. Burr, Matthew J. Breitwisch, Charles T. Rettner,
Yi-Chou Chen, Robert M. Shelby, Martin Salinga, Daniel Krebs, Shih-Hung Chen,
Hsiang-Lan Lung, and Chung Hon Lam. 2008. Phase-change random access
memory: A scalable technology. IBM Journal of Research and Development 52,

4-5 (2008), 465–480. https://doi.org/10.1147/rd.524.0465
[25] Andy Rudoff et al. [n. d.]. PMEM library website. http://pmem.io/nvml/. ([n. d.]).
[26] Hovav Shacham, Matthew Page, Ben Pfaff, Eu-Jin Goh, Nagendra Modadugu,
and Dan Boneh. 2004. On the Effectiveness of Address-space Randomization.
In Proceedings of the 11th ACM Conference on Computer and Communications
Security (CCS ’04). 298–307.
[27] Shivaram Venkataraman, Niraj Tolia, Parthasarathy Ranganathan, Roy H Campbell, et al. 2011. Consistent and Durable Data Structures for Non-Volatile ByteAddressable Memory.. In FAST, Vol. 11. 61–75.
[28] Haris Volos, Sanketh Nalli, Sankarlingam Panneerselvam, Venkatanathan
Varadarajan, Prashant Saxena, and Michael M Swift. 2014. Aerie: Flexible filesystem interfaces to storage-class memory. In Proceedings of the Ninth European
Conference on Computer Systems. ACM, 14.
[29] Haris Volos, Andres Jaan Tack, and Michael M. Swift. 2011. Mnemosyne:
lightweight persistent memory. In Proceedings of the sixteenth international
conference on Architectural support for programming languages and operating systems (ASPLOS XVI). ACM, New York, NY, USA, 91–104. https:
//doi.org/10.1145/1950365.1950379
[30] Tiancong Wang, Sakthikumaran Sambasivam, Yan Solihin, and James Tuck.
2017. Hardware Supported Persistent Object Address Translation. In The Annual
IEEE/ACM International Symposium on Microarchitecture, MICRO-46.
[31] Matthew Wilcox. 2014. Support ext4 on NV-DIMMs. http://lwn.net/Articles/
588218/. (2014). [Online; accessed 2016/11/08].
[32] Xiaojian Wu and AL Reddy. 2011. SCMFS: a file system for storage class
memory. In Proceedings of 2011 International Conference for High Performance
Computing, Networking, Storage and Analysis. ACM, 39.
[33] Jishen Zhao, Sheng Li, Doe Hyun Yoon, Yuan Xie, and Norman P. Jouppi. 2013.
Kiln: closing the performance gap between systems with and without persistence
support. In The 46th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO-46, Davis, CA, USA, December 7-11, 2013. 421–432.
