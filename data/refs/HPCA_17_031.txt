[1] L. A. Barroso, J, Clidaras, and U. Holzle, “The datacenter as
a computer: An introduction to the design of warehouse-scale
mm Synthesis Lectures on Computer Architecture, pp.

[2] A. Snavely and D, Tullsen, “Symbiotic job scheduling for a
simultaneous multithreading processor,” in International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2000.

[3] S. Zhuravlev, S. Blagodurov, and A. Fedorova, “Addressing shared resource contention in multicore processors via
ae eee pie Buernational Conference, om ayehieriural

upport for Programming Languages and Operating Systems
(ASPLOS), 3010.

[4] L. Tang, J. Mars, N. Vachharajani, R. Hundt, and M. Soffa,
“The impact of memory subsystem resource sharing on datacenter applications,” in International Symposium on Computer Architecture (ISCA), 2011.

[5] J. Mars, L. Tang, R. Hundt, K. Skadron, and M. Soffa,
“Bubble-up: Increasing utilization in modern warehouse scale
computers via sensible co-locations,” in International Symposium on Microarchitecture (MICRO), 2011.

[6] C. Delimitrou and C. Kozyrakis, “Paragon: Qos-aware
scheduling for heterogeneous datacenters,” in International
Conference on Architectural Support [or  pengnmning Languages and Operating Systems (ASPLOS), 2013

[7] S. M. Zahedi and B. C. Lee, “Sharing incentives and fair
division for multiprocessors,” IEEE Micro, 2015.
[8] S. Clearwater and S. Kleban, “ASCI Queueing Systems:
Overview and comparisons,” in International Parallel and
Distributed Processing Symposium (IPDPS), 2002.

[9] J. Ang, R. Ballance, L. Fisk, J. Johnston, and K.Pedretti.,
“Red Storm capabli computing queueing policy,” in Cray
Users’ Group (CUG), 2005.

[10] O. A. Ben-Yehuda, E. Posener, M. Ben-Yehuda, A. Schuster,
and A. Mu’alem, “Ginseng: Market-driven memory allocation,” in International Conference on Virtual Execution
Environments (VEE), 2014.

[11] A. Ghodsi, M. Zaharia, B. Hindman, A. Konwinski,
S. Shenker, and I. Stoica, “Dominant resource fairness: Fair
allocation of multiple resource types.” in USENIX Symposium
ge enorme Systems Design and Implementation (NSDI),

[12] Q. Pu, H. Li, M, Zaharia, A. Ghodsi, and I. Stoica, “Fairride:
near-optimal, fair cache sharing,’ in USENIX Symposium on
Networked Systems Design and Implementation (NSDI), 2016.

[13] S. M. Zahedi and B. C. Lee, “REF: Resource elasticity fairness with sharing incentives for multiprocessors,” in International Conference on Architectural Bunper or Programming
Languages and Operating Systems (ASPLOS), 2014.

[14] S. Fan, S. M. Zahedi, and B. C. Lee, “The computational
sprinting game,” in International Conference on Architectural
ope for Programming Languages and Operating Systems
(ASPLOS), 2016.
[15] Aristotle, Nicomachean Ethics.

[16] H. Moulin, Fair division and collective welfare.
Cambridge, 2004.

[17] N. Nisan, T. Roughgarden, E. Tardos, and V. Vazirani,
Algorithmic game theory. Cambridge University Press
Cambridge, 2007, vol. 1.

[18] D. Gale and L. Shapley, “College admissions and the stability
of marriage,” American Mathematical Monthly, 1962.

[19] R. W. Irving, “An efficient algorithm for the stable roommates
problem,” Journal of Algorithms, pp. 577-595, 1985.

[20] A. Roth, “Introduction to the Shapley value,” in The Shapley
value: Essays in honor of Lloyd S. Shapley. Cambridge
University Press, 1988.

[21] D. Gusfield and R. W. Irving, The stable marriage Reyeme
structure and algorithms. IT press Cambridge, 1989.

[22] K. Iwama and S. Miyazaki, “A survey of the stable marriage
roblem and its variants,’ in Informatics Education and
esearch for Knowledge-Circulating Society. EEE, 2008.

[23] H. Michael, “recommenderlab: A framework for developing
and testing recommendation algorithms,” 2011.

[24] G. Ren, E. Tune, T. Moseley, Y. Shi, S. Rus, and R. Hundt,
“Google-wide profiling: A continuous profiling infrastructure
for data centers,” IEEE Micro, Computer Society, 2010.

[25] J. Stamper, A. Niculescu-Mizil, S. Ritter, G. Gordon, and
K. Koedinger, “Algebra i 2006-2007. challenge data set
from kdd cup 2010 educational data mining challenge,”
http://pslcdatashop. web.cmu.edu/KDDCup/downloads.jsp.

[26] “Web data commons: _ Hyperlink raphs,” http:
//webdatacommons.org/hyperlinkgraph/index-html.

[27] “Us census data (1990) data set,” https://archive.ics.uci.edu/
ml/datasets/US+Census+Data+(1990).

[28] “Movielens,” http://grouplens.org/datasets/movielens/.

[29] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley, M. Franklin, S$. Shenker, and I. Stoica, “Resilient distributed datasets: A fault-tolerant abstraction for in-memory
cluster computing,” in USENIX Symposium on Networked
Systems Design and Implementation (NSDI), 2012.

[30] C. Bienia, S. Kumar, J. P. Singh, and K. Li, “The parsec
benchmark suite: Characterization and architectural implications,” Tech. Rep., 2008.

MIT Press

[31] A. Jacobvitz, A. Hilton, and D. Sorin, “Multi-program benchmark definition,” in International Symposium on Performance
Analysis of Systems and Software (ISPASS), 2015.

[32] D. Lo, L. Chengn, R. Govindaraju, P. Ranganathan, and
C. Kozyrakis, “Heracles: improving resource efficiency at
scale,” in International Symposium on Computer Architecture
(ISCA), 2015.

[33] O. Mutlu and T. Moscibroda, “Stall-time fair memory access scheduling for chip multiprocessors,” in International
Symposium on Microarchitecture (MICRO). YEEE Computer
Society, 2007.

[34] E. Ebrahimi, C. Lee, O. Mutlu, and Y. Patt, “Fairness via
source throttling: a configurable and high-performance fairness substrate for multi-core memory systems,” in International Conference on Architectural Seep for Programmin,
Languages and Operating Systems (ASPLOS). ACM, 2010.

[35] K. Nesbit, N. Aggarwal, J. Laudon, and J. Smith, “Fair
queuing memory systems,” in International Symposium on
icroarchitecture (MICRO), 2006.

[36] M. Qureshi and Y. Patt, “Utility-based cache partitioning:
A low-overhead, high-performance, runtime mechanism to
partition shared caches,” in International Symposium on Microarchitecture (MICRO), 2006.

[37] R. Grandl, G. Ananthanarayanan, S. Kandula, S. Rao, and
A. Akella, “Multi-resource packing for cluster schedulers,”

in Conference on Special Interest Group on Data Communication (SIGCOMM), ACM, 2014.

[38] H. Yang, A. Breslow, J. Mars, and L. Tang, “Bubble-flux:
Precise online qos management for increased utilization in
warehouse scale computers,” in International Symposium on
Computer Architecture (ISCA), 2013.

[39] Y. Jiang, K. Tian, and X. Shen, “Combining locality analysis
with online proactive job co-scheduling in chip multipro
cessors,” in International Conference on nies erformance
Embedded Architectures and Compilers, 2010.

[40] M. Liu and T. Li, “Optimizing virtual machine consolidation
erformance on numa server architecture for cloud workoads,” in International Symposium on Computer Architecture

(ISCA). IEEE, 2014.

[41] A. Fedorova, M. Seltzer, and M. Smith, “Improving performance isolation on chip multiprocessors via an operating
system scheduler,” in International Conference on Parallel
Architectures and Compilation Techniques (PACT), 2007.

[42] D. Xu, C. Wu, and P-C. Yew, “On mitigating memo
bandwidth contention through bandwidth-aware scheduling,’
in International Conference on Parallel Architectures and
Compilation Techniques (PACT), 2010.

[43] M. Dong, T. Lan, and L. Zhong, “Rethink energy accounting
with cooperative game theory,” in International Conference
on Mobile Computing and Networking (MobiCom), 2014.

[44] J. Feigenbaum, C. Papadimitriou, and S. Shenker, “Sharing
the cost of muliticast transmissions (peasy version),” in
Symposium on Theory of Computing (STOC), 2000.

[45] Z. Han, C. Pandana, and K. Liu, “A self-learning repeated.
game framework for optimizing packet forwarding networks,”
an gees Communications and Networking Conference,

[46] W. Saad, Z. Han, M. Debbah, A. Hjorungnes, and T. Basar,
“Coalitional game theory for communication networks,” Signal Processing Magazine, IEEE, 2009.

[47] E. Arkin, S. Bae, A. Efrat, K. Okamoto, J. Mitchell, and
V. Polishchuk, “Geometric ‘stable roommates,” Information
Processing Letters, 2009.

[48] E. Boutin, J. Ekanayake, W. Lin, B. Shi, J. Zhou, Z. Qian,
M. Wu, and L. Zhou, “Apollo: scalable and coordinated.
scheduling for cloud-scale computing,” in USENIX Symposium on Operating Systems Design and Implementation
(OSDD, 2014.