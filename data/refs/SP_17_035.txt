
[1] FreeRTOS-MPU. http://www.freertos.org/
FreeRTOS-MPU-memory-protection-unit.html

[2] FreeRToS Support Forum. ARM_CM3_MPU does not seem
to build in FreeRTOS 9.0.0. https://sourceforge.net/p/freertos/
discussion/382005/thread/3743f72c/

[3] FreeRToS Support Forum. Stack overflow detection on Cortexm3 with MPU . https://sourceforge.net/p/freertos/discussion/
382005/thread/18f8a0ce/#deab

[4] mbed OS. https://www.mbed.com/en/development/mbed-os/

[5] STM324791-EVAL. http://www.st.com/resource/en/user_
manual/dm00219352.pdf

[6] STM32F4-Discovery. http://www.st.com/st- web-ui/
static/active/en/resource/technical/document/data_brief/
DMO00037955.pdf

[7] The mbed OS uVisor. https://www.mbed.com/en/technologies/
security/uvisor/

[8] FreeRToS Support Forum. Mistype in portc for
GCC/ARM_CM3_MPU , Jan 2016. https://sourceforge.net/
p/freertos/discussion/382005/thread/6a4f7df2/

[9] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, Controlflow integrity, In ACM Conf: on Computer and Communication
Security. ACM, 2005, pp. 340-353.

[10] T. Abera, N. Asokan, L. Davi, J. Ekberg, T. Nyman, A. Paverd,
A. Sadeghi, and G. Tsudik, C-FLAT: control-flow attestation
for embedded systems software, In Symp. on Information,
Computer and Communications Security, 2016.

[11] ARM, ARMv7-M Architecture Reference Manual, “E.b” ed.,
2014.

[12] ARM,  Trustzone, 2015. —http://www.arm.com/products/
processors/technologies/trustzone/

[13] S. Bhatkar, D. DuVarney, and R. Sekar, Address Obfuscation:
An Efficient Approach to Combat a Broad Range of Memory
Error Exploits. USENIX Security Symp., 2003.

[14] S. Bhatkar, D. DuVarney, and R. Sekar, Efficient Techniques
for Comprehensive Protection from Memory Error Exploits,
USENIX Security Symp., 2005.

[15] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi, Leakage-resilient layout randomization for
mobile devices, In Network and Distributed Systems Security
Symp. (NDSS), 2016.
[16] F. Brasser, B. El Mahjoub, A.-R. Sadeghi, C. Wachsmann, and
P. Koeberl, Tytan: Tiny trust anchor for tiny devices, In Design
Automation Conf. ACM/IEEE, 2015, pp. 1-6.

[17] bunnie and Xobs, The exploration and explotation of a sd
memory card, In Chaos Computing Congress, 2013.

[18] N. Burow, S. A. Carr, J. Nash, P. Larsen, M. Franz, S. Brunthaler, and M. Payer, Control-Flow Integrity: Precision, Security,
and Performance, ACM Computing Surveys, vol. 50, no. 1, 2018,
preprint: https://arxiv.org/abs/1602.04056.

[19] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross,
Control-Flow Bending: On the Effectiveness of Control-Flow
Integrity, In SEC: USENIX Security Symposium, 2015.

[20] F. B. Cohen, Operating system protection through program
evolution, Computers and Security, vol. 12, no. 6, pp. 565-584,
oct 1993.

[21] A. Costin, J. Zaddach, A. Francillon, and D. Balzarotti, A
large-scale analysis of the security of embedded firmwares, In
USENIX Security Symp., 2014, pp. 95-110.

[22] C. Cowan, C. Pu, D. Maier, and J. Walpole, StackGuard:
Automatic Adaptive Detection and Prevention of BufferOverflow Attacks. USENIX Security Symp., 1998.

[23] A. Cui and S. J. S. Stolfo, Defending Embedded Systems
with Software Symbiotes, In Intl. Conf: on Recent Advances in
Intrusion Detection. Springer, 2011, pp. 358-377.

[24] L. Davi, M. Hanreich, D. Paul, A.-R. Sadeghi, P. Koeberl,
D. Sullivan, O. Arias, and Y. Jin, Hafix: Hardware-assisted flow
integrity extension, In Proceedings of the 52Nd Annual Design
Automation Conference, set. DAC °15, 2015, pp. 74:1-74:6.

[25] L. V. Davi, A. Dmitrienko, S. Niirnberger, and A.-R. Sadeghi,
Gadge Me If You Can, In Symp. on Information, Computer
and Communications Security. ACM Press, 2013, p. 299.

[26] L. Duflot, Y.-A. Perez, G. Valadon, and O. Levillain, Can you
still trust your network card, CanSecWest, pp. 24-26, 2010.

[27] K. Eldefrawy, G. Tsudik, A. Francillon, and D. Perito, Smart:
Secure and minimal architecture for (establishing dynamic) root
of trust. In Network and Distributed System Security Symp.,
vol. 12, 2012, pp. 1-15.

[28] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard,
H. Okhravi, and S. Sidiroglou-Douskos, Control jujutsu: On the
weaknesses of fine-grained control flow integrity, In CCS’15:
Conference on Computer and Communications Security, 2015.

[29] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh, Jump over
aslr: Attacking branch predictors to bypass aslr, In IEEE/ACM
International Symposium on Microarchitecture (MICRO), 2016.

[30] A. Francillon, Q. Nguyen, K. B. Rasmussen, and G. Tsudik,
A minimalist approach to remote attestation, In Euro. Design,
Automation, and Test. EDAA, 2014, p. 244.

[31] A. Francillon, D. Perito, and C. Castelluccia, Defending
embedded systems against control flow attacks, In ACM Conf:
on Computer and Communication Security, 2009, pp. 19-26.

[32] C. Giuffrida, A. Kuijsten, and A. Tanenbaum, Enhanced
operating system security through efficient and fine-grained
address space randomization. USENIX Security Symp., 2012.

[33] J. Gustafsson, A. Betts, A. Ermedahl, and B. Lisper, The
mialardalen wcet benchmarks: Past, present and future, In Open
Access Series in Informatics, vol. 15. Schloss DagstuhlLeibniz-Zentrum fuer Informatik, 2010.

[34] M. R. Guthaus, J. S. Ringenberg, D. Ernst, T. M. Austin,
T. Mudge, and R. B. Brown, Mibench: A free, commercially
representative embedded benchmark suite, In In#l. Work. on
Workload Characterization. YEEE, 2001, pp. 3-14.

[35] A. Homescu, S. Neisius, P. Larsen, S. Brunthaler, and M. Franz,
Profile-guided automated software diversity, In Intl Symp. on
Code Generation and Optimization. YEEE, 2013, pp. 1-11.

[36] A. Homescu, S. Brunthaler, P. Larsen, and M. Franz, Librando:
Transparent code randomization for just-in-time compilers, In
ACM Conf. on Computer and Communication Security, 2013.

[37] H. Hu, S. Shinde, S. Adrian, Z. L. Chua, P. Saxena, and
Z. Liang, Data-oriented programming: On the expressiveness
of non-control data attacks, In JEEE Symp. on Security and
Privacy. YEEE, 2016, pp. 969-986.

[38] T. Jackson, B. Salamat, A. Homescu, K. Manivannan, G. Wagner, A. Gal, S. Brunthaler, C. Wimmer, and M. Franz,
Compiler-generated software diversity, In Moving Target De
fense. Springer, 2011, pp. 77-98.
[39] B. Krebs, DDoS on Dyn Impacts Twitter, Spotify, Reddit. https://krebsonsecurity.com/2016/10/

ddos-on- dyn-impacts-twitter-spotify-reddit/

[40] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and
D. Song, Code Pointer Integrity, USENIX Symp. on Operating
Systems Design and Implementation, 2014.

[41] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, SoK:
Automated Software Diversity, IEEE Symp. on Security and
Privacy, pp. 276-291, 2014.

[42] C. Lattner and V. Adve, Llvm: A compilation framework for
lifelong program analysis and transformation, In Intl. Symp.
Code Generation and Optimization. YEEE, 2004, pp. 75-86.

[43] J. Li, Z. Wang, T. Bletsch, D. Srinivasan, M. Grace, and
X. Jiang, Comprehensive and efficient protection of kernel control data, IEEE Trans. on Information Forensics and Security,
vol. 6, no. 4, pp. 1404-1417, 2011.

[44] Y. Li, J. M. McCune, and A. Perrig, Viper: Verifying the
integrity of peripherals’ firmware, In ACM Conf. on Computer
and Communications Security, 2011, pp. 3-16.

[45] S. E. McLaughlin, D. Podkuiko, A. Delozier, S. Miadzvezhanka,
and P. McDaniel, Embedded firmware diversity for smart electric meters. In USENIX Work. on Hot Topics in Security, 2010.

[46] B. Niu and G. Tan, Modular control-flow integrity, ACM SIGPLAN Notices, vol. 49, no. 6, pp. 577-587, 2014.

[47] J. Pallister, S. J. Hollis, and J. Bennett, BEEBS: open
benchmarks for energy measurements on embedded platforms,
CoRR, vol. abs/1308.5174, 2013.

[48] V. Pappas, M. Polychronakis, and A. D. Keromytis, Smashing
the gadgets: Hindering return-oriented programming using inplace code randomization, IEEE Symp. on Security and Privacy,
pp. 601-615, 2012.

[49] PaX Team, PaX address space layout randomization (ASLR),
2003. http://pax.grsecurity.net/docs/aslr.txt

[50] G. Ramalingam, The undecidability of aliasing, ACM Trans.
Program. Lang. Syst., vol. 16, no. 5, Sep. 1994.

[51] A.-R. Sadeghi, C. Wachsmann, and M. Waidner, Security and
privacy challenges in industrial internet of things, In Design
Automation Conf. ACM/IEEE, 2015, p. 54.

[52] J. Salwan, ROPgadget - Gadgets Finder and Auto-Roper, 2011.
http://shell-storm.org/project/ROPgadget/

[53] L. Szekeres, M. Payer, and D. Song, SoK: Eternal War in
Memory, In IEEE Symp. on Security and Privacy. YEEE, may
2013, pp. 48-62. ,

[54] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, U. Erlingsson, L. Lozano, and G. Pike, Enforcing forward-edge controlflow integrity in gcc & llvm, In USENIX Security Symp., 2014.

[55] A. van de Ven and I. Molnar, Exec Shield, 2004. https:
/www.redhat.com/f/pdf/rhel/W HPO0006US_Execshield.pdf

[56] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham,
Efficient software-based fault isolation, In SOSP’03: Symposium
on Operating Systems Principles, 1993.

[57] J. Zaddach, A. Kurmus, D. Balzarotti, E.-O. Blass, A. Francillon, T. Goodspeed, M. Gupta, and I. Koltsidas, Implementation
and implications of a stealth hard-drive backdoor, In Annual
Computer Security Applications Conf., 2013, pp. 279-288.

[58] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, Practical control flow integrity and randomization for binary executables, In JEEE Symp. on Security
and Privacy. YEEE, 2013, pp. 559-573. stone: A dsp-oriented benchmarking methodology, In Intl. Conf:
[59] M. Zhang and R. Sekar, Control flow integrity for cots binaries, on Signal Processing Applications and Technology, 1994, pp.
In USENIX Security Symp., 2013, pp. 337-352. 715-720.
[60] V. Zivojnovic, J. M. Velarde, C. Schlager, and H. Meyr, Dsp
