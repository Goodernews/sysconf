[1] Property cache.

Projects/SpiderMonkey/Internals/Property cache.
November 2015].

https://developer.mozilla.org/en-US/docs/Mozilla/
[Online; accessed 2

[2] ABADI, M., BUDIU, M., ERLINGSSON, U., AND LIGATTI, J. Control-
ﬂow integrity. In Proceedings of CCS 2005 (2005), ACM, pp. 340–353.
[3] ANSEL, J., MARCHENKO, P., ERLINGSSON, U., TAYLOR, E., CHEN,
B., SCHUFF, D. L., SEHR, D., BIFFLE, C. L., AND YEE, B. Language-
independent sandboxing of just-in-time compilation and self-modifying
code. In Proceedings of PLDI 2011 (New York, NY, USA, 2011).

[4] ATHANASAKIS, M., ATHANASOPOULOS, E., POLYCHRONAKIS, M.,
PORTOKALIDIS, G., AND IOANNIDIS, S. The devil is in the constants:
In Proceedings of NDSS
Bypassing defenses in browser jit engines.
2015 (Feb. 2015).

[5] BANIA, P.

JIT spraying and mitigations.

arXiv preprint

[6] BECK, P.

JIT Spraying on ARM.

https://prezi.com/ih3ypﬁvoeeq/

arXiv:1009.1038 (2010).

jit-spraying-on-arm/, 2011.

[7] BLAZAKIS, D.

Interpreter exploitation: Pointer inference and JIT

spraying. Presented at BlackHat DC 2010, Feb. 2010.

[8] CARLINI, N., BARRESI, A., PAYER, M., WAGNER, D., AND GROSS,
T. R. Control-ﬂow bending: On the effectiveness of control-ﬂow
integrity. In In Proceedings of USENIX Security 2015 (Aug. 2015).

[9] CHEN, P., FANG, Y., MAO, B., AND XIE, L. JITDefender: A defense
In Future Challenges in Security and

against JIT spraying attacks.
Privacy for Academia and Industry. Springer, 2011, pp. 142–153.

[10] CHEN, P., WU, R., AND MAO, B. Jitsafe: a framework against just-in-
time spraying attacks. IET Information Security 7, 4 (2013), 283–292.
[11] DE GROEF, W., NIKIFORAKIS, N., YOUNAN, Y., AND PIESSENS, F.
JITSec: Just-In-Time security for code injection attacks. In Proceedings
of WISSEC 2010 (Nov. 2010), pp. 1–15.

[12] DEUTSCH, L. P., AND SCHIFFMAN, A. M. Efﬁcient implementation of

the smalltalk-80 system. In Proceedings of POPL 1984 (1984).

[13] DREPPER, U. SELinux memory protection tests. http://www.akkadia.
org/drepper/selinux-mem.html, Apr. 2009. [Online; accessed 3 Novem-
ber 2015].

[14] HOMESCU, A., BRUNTHALER, S., LARSEN, P., AND FRANZ, M.
Librando: transparent code randomization for just-in-time compilers.
In Proceedings of CCS 2013 (2013), ACM, pp. 993–1004.
[15] JANGDA, A., MISHRA, M., AND DE SUTTER, B. Adaptive just-in-time
code diversiﬁcation. In Proceedings of ACM MTD 2015 (2015).
[16] JAUERNIG, M., NEUGSCHWANDTNER, M., PLATZER, C., AND COM-
PARETTI, P. M. Lobotomy: An architecture for jit spraying mitigation.
In Procedings of ARES 2014 (2014), IEEE, pp. 50–58.

[17] LIAN, W., SHACHAM, H., AND SAVAGE, S. Too LeJIT to Quit:
Extending JIT Spraying to ARM. In Proceedings of NDSS 2015 (2015).
[18] MAISURADZE, G., BACKES, M., AND ROSSOW, C. What Cannot
Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP
Defenses. In Proceedings of USENIX Security 2016 (2016).

[19] MAVADDAT, F., AND PARHAMI, B. Urisc: the ultimate reduced in-
struction set computer. International Journal of Electrical Engineering
Education (1988).

[20] MILLIKIN, K. V8: High Performance JavaScript in Google Chrome.
[Online; ac-

https://www.youtube.com/watch?v=lZnaaUoHPhs, 2008.
cessed 2 November 2015].

[21] MOOIJ, J. D. WˆX JIT-code enabled in Firefox. http://jandemooij.nl/

blog/2015/12/29/wx-jit-code-enabled-in-ﬁrefox/, Dec. 2015.

[22] MOZILLA. Bug 506693 - SELinux is preventing JIT from changing
memory segment access. https://bugzilla.mozilla.org/show bug.cgi?id=
506693, 2009. [Online; accessed 3 November 2015].

[23] NIU, B., AND TAN, G. Rockjit: Securing just-in-time compilation using

modular control-ﬂow integrity. In Proceedings of CCS 2014 (2014).

[24] PIE, P. Mobile Pwn2Own Autumn 2013 - Chrome on Android - Exploit

Writeup, 2013.

[25] ROHLF, C., AND IVNITSKIY, Y. Attacking Clientside JIT Com-
http://www.matasano.com/research/Attacking Clientside JIT

pilers.
Compilers Paper.pdf, 2011.

[26] SINTSOV, A.
at

JIT-Spray Attacks & Advanced Shellcode.
Presented
Online:
http://dsecrg.com/ﬁles/pub/pdf/HITB%20-%20JIT-Spray%20Attacks%
20and%20Advanced%20Shellcode.pdf, July 2010.

HITBSecConf

Amsterdam

2010.

[27] SINTSOV, A. Writing JIT Shellcode for fun and proﬁt. Online:

http://dsecrg.com/ﬁles/pub/pdf/Writing%20JIT-Spray%20Shellcode%
20for%20fun%20and%20proﬁt.pdf, Mar. 2010.

[28] SONG, C., ZHANG, C., WANG, T., LEE, W., AND MELSKI, D. Ex-
In Proceedings of

ploiting and protecting dynamic code generation.
NDSS 2015 (2015).

[29] SOTIROV, A. Heap feng shui in javascript. Black Hat Europe (2007).
Introducing SquirrelFish Extreme. https://www.
[30] STACHOWIAK, M.
[Online;

webkit.org/blog/214/introducing-squirrelﬁsh-extreme/, 2008.
accessed 2 November 2015].

[31] W3C. Web workers. http://www.w3.org/TR/workers/, 2015. [Online;

accessed 3 November 2015].

[32] WEI, T., WANG, T., DUAN, L., AND LUO, J. Secure dynamic code

generation against spraying. In Proceedings of CCS 2010 (2010).

[33] WU, R., CHEN, P., MAO, B., AND XIE, L. Rim: A method to defend

from jit spraying attack. In Proceedings of ARES 2012 (2012).

[34] YEE, B., SEHR, D., DARDYK, G., CHEN, J. B., MUTH, R., OR-
MANDY, T., OKASAKA, S., NARULA, N., AND FULLAGAR, N. Native
client: A sandbox for portable, untrusted x86 native code. In Proceed-
ings of IEEE S&P (Oakland) 2009 (2009).

[35] ZHANG, C., NIKNAMI, M., CHEN, K. Z., SONG, C., CHEN, Z., AND
SONG, D. JITScope: Protecting web users from control-ﬂow hijacking
attacks. In Proceedings of INFOCOM 2015 (2015).
