[1] MapD. https://www.mapd.com/.

[2] A. Ailamaki, D. J. DeWitt, M. D. Hill, and
M. Skounakis. Weaving Relations for Cache
Performance. In VEDB, 2001.

[3] I. Alagiannis, S. Idreos, and A. Ailamaki. H20: a
hands-free adaptive store. In SIGMOD, 2014.

[4] J. Arulraj, A. Pavlo, and P. Menon. Bridging the
Archipelago Between Row-Stores and Column-Stores
for Hybrid Workloads. In STGMOD, 2016.

[5] A. Barbalace, M. Sadini, S. Ansary, C. Jelesnianski,
A. Ravichandran, C. Kendir, A. Murray, and
B. Ravindran. Popcorn: bridging the programmability
gap in heterogeneous-ISA platforms. In EuroSys, 2015.

[6] A. Baumann, P. Barham, P. Dagand, T. L. Harris,

R. Isaacs, S. Peter, T. Roscoe, A. Schtipbach, and
A. Singhania. The multikernel: a new OS architecture
for scalable multicore systems. In SOSP, 2009.

[7] A. Baumann, C. Hawblitzel, K. Kourtis, T. Harris,
and T. Roscoe. Cosh: Clear OS Data Sharing In An
Incoherent World. In TRIOS, 2014.

[8] P. A. Bonez, M. L. Kersten, and S. Manegold.
Breaking the memory wall in MonetDB.
Communications of ACM, 51(12):77-85, 2008.

[9] S. Bre8, H. Funke, and J. Teubner. Robust Query
Processing in Co-Processor-accelerated Databases. In
SIGMOD, pages 1891-1906, 2016.

[10] S. BreB, M. Heimel, N. Siegmund, L. Bellatreche, and
G. Saake. GPU-Accelerated Database Systems: Survey
and Open Challenges. Trans. Large-Scale Data- and
Knowledge-Centered Systems, 15:1-35, 2014.

[11] J. Cai and A. Shrivastava. Software Coherence
Management on Non-coherent Cache Multi-cores. In
VLSID, 2016.

[12] B. F. Cooper, A. Silberstein, E. Tam,

R. Ramakrishnan, and R. Sears. Benchmarking cloud
serving systems with YCSB. In SoCC, pages 143-154,
2010.

[13] G. P. Copeland and S. N. Khoshafian. A
Decomposition Storage Model. SIGMOD Record,
14(4):268-279, 1985.

[14] G. F. Diamos, H. Wu, J. Wang, A. Lele, and
S. Yalamanchili. Relational algorithms for
multi-bulk-synchronous processors. In PPoPP, 2013.

[15] M. Grund, J. Kriiger, H. Plattner, A. Zeier,

P. Cudré-Mauroux, and 8. Madden. HYRISE - A Main
Memory Hybrid Storage Engine. PVLDB, 4(2), 2010.

[16] M. Gschwind, H. P. Hofstee, B. Flachs, M. Hopkins,
Y. Watanabe, and T. Yamazaki. Synergistic
Processing in Cell’s Multicore Architecture. IEEE
Micro, 26:10—24, 2006.

[17] B. He, M. Lu, K. Yang, R. Fang, N. K. Govindaraju,
Q. Luo, and P. V. Sander. Relational Query
Coprocessing on Graphics Processors. TODS,
34(4):21:1-21:39, 2009.

[18] M. Heimel, M. Saecker, H. Pirk, S. Manegold, and
V. Markl. Hardware-oblivious parallelism for
in-memory column-stores. PVLDB, 6(9):709-720,
2013.

[19] J. Howard, S. Dighe, Y. Hoskote, S. Vangal, D. Finan,
G. Ruhl, D. Jenkins, H. Wilson, N. Borkar, G. Schrom,

F. Pailet, S. Jain, T. Jacob, S. Yada, 5. Marella,

P. Salihundam, V. Erraguntla, M. Konow, M. Riepen,
G. Droege, J. Lindemann, M. Gries, T. Apel,

K. Henriss, T. Lund-Larsen, S. Steibl, S. Borkar,

V. De, R. V. D. Wijngaart, and T. Mattson. A
48-Core IA-32 message-passing processor with DVFS
in 45nm CMOS. In ISSCC, pages 108-109, 2010.

[20] C. G. III, F. Sironi, M. F. Kaashoek, and
N. Zeldovich. Hare: a file system for
non-cache-coherent multicores. In FuroSys, 2015.

[21] S. Jha, B. He, M. Lu, X. Cheng, and H. P. Huynh.
Improving Main Memory Hash Joins on Intel Xeon
Phi Processors: An Experimental Approach. PVLDB,
8(6):642-653, 2015.

[22] M. Karpathiotakis, I. Alagiannis, and A. Ailamaki.
Fast Queries Over Heterogeneous Data Through
Engine Customization. PVLDB, 9(12):972-983, 2016.

[23] M. Karpathiotakis, I. Alagiannis, T. Heinis,

M. Branco, and A. Ailamaki. Just-In-Time Data
Virtualization: Lightweight Data Management with
ViDa. In CIDR, 2015.

[24] M. Karpathiotakis, M. Branco, I. Alagiannis, and

A. Ailamaki. Adaptive Query Processing on RAW

Data. PVLDB, 7(12):1119-1130, 2014.

[25] A. Kemper and T. Neumann. HyPer: A hybrid

OLTP&OLAP main memory database system based

on virtual memory snapshots. In ICDE, 2011.

[26] Y. Klonatos, C. Koch, T. Rompf, and H. Chaifi.

Building Efficient Query Engines in a High-Level

Language. PVLDB, 7(10):853-864, 2014.

[27] K. Krikellas, 8. Viglas, and M. Cintra. Generating

code for holistic query evaluation. In ICDE, 2010.

[28] H. Lang, T. Miihlbauer, F. Funke, P. A. Boncz,

T. Neumann, and A. Kemper. Data Blocks: Hybrid

OLTP and OLAP on Compressed Storage using both

Vectorization and Compilation. In SIGMOD, 2016.

[29] J. Lee, S. Seo, C. Kim, J. Kim, P. Chun, Z. Sura,

J. Kim, and S. Han. COMIC: A Coherent Shared

Memory Interface for Cell Be. In PACT, 2008.

[30] J. J. Levandoski, P. Larson, and R. Stoica. Identifying

hot and cold data in main-memory databases. In

ICDE, 2013.

[31] F. X. Lin, Z. Wang, and L. Zhong. K2: A Mobile

Operating System for Heterogeneous Coherence

Domains. TOCS, 33(2):4, 2015.

[32] M. Martin, M. Hill, and D. Sorin. Why on-chip cache

coherence is here to stay. CACM, 55(7):78-89, 2012.

[33] T. G. Mattson, R. Van der Wijngaart, and

M. Frumkin. Programming the Intel 80-core

Network-on-a-chip Terascale Processor. In ICS, 2008.

[34] D. Molka, D. Hackenberg, R. Schéne, and W. E.
Nagel. Cache Coherence Protocol and Memory
Performance of the Intel Haswell-EP Architecture. In
ICPP, 2015.

[35] R. Mueller, J. Teubner, and G. Alonso. Data
Processing on FPGAs. PVLDB, 2(1):910-921, 2009.

[36] T. Neumann. Efficiently Compiling Efficient Query
Plans for Modern Hardware. PVLDB, 4(9):539-550,
2011.

[37] NVIDIA. CUDA C Programming Guide. http:
//docs.nvidia.com/cuda/cuda-c-programming-guide.

 

 
 

 

[38] NVIDIA. NVLink High-Speed Interconnect.
http://www-nvidia.com/object /nvlink html.

[39] NVIDIA. Parallel Thread Execution ISA Version 4.3.
http:

/ /docs.nvidia.com/cuda/parallel-thread-execution.
[40] NVIDIA. Summit and Sierra Supercomputers: An
Inside Look at the U.S. Department of Energy’s New
Pre-Exascale Systems. Technical report, 11 2014.
[41] J. Paul, J. He, and B. He. GPL: A GPU-based
Pipelined Query Processing Engine. In SIGMOD,
pages 1935-1950, 2016.

[42] D. Porobic, I. Pandis, M. Branco, P. Téziin, and

A. Ailamaki. OLTP on Hardware Islands. PVLDB,
5(11):1447-1458, 2012.

[43] I. Psaroudakis, F. Wolf, N. May, T. Neumann,

A. Béhm, A. Ailamaki, and K. Sattler. Scaling Up
Mixed Workloads: A Battle of Data Freshness,
Flexibility, and Scheduling. In TPCTC, 2014.

[44] J. Rao, H. Pirahesh, C. Mohan, and G. M. Lohman.
Compiled Query Execution Engine using JVM. In
ICDE, 2006.

[45] F. M. Schuhknecht, J. Dittrich, and A. Sharma.

RUMA Has It: Rewired User-space Memory Access is
Possible! PVLDB, 9(10):768-779, 2016.

[46] A. Shaikhha et al. How to Architect a Query
Compiler. In SIGMOD, 2016.

[47] S. Tu, W. Zheng, E. Kohler, B. Liskov, and
S. Madden. Speedy transactions in multicore
in-memory databases. In SOSP, 2013.

[48] D. Sidlauskas, C. S. Jensen, and S. Saltenis. A
Comparison of the Use of Virtual Versus Physical
Snapshots for Supporting Update-intensive
Workloads. In DAMON, 2012.

[49] D. Wentzlaff and A. Agarwal. Factored operating
systems (fos): the case for a scalable operating system
for multicores. OS Review, 43(2):76-85, 2009.

[50] Y. Xu, Y. Du, Y. Zhang, and J. Yang. A Composite
and Scalable Cache Coherence Protocol for Large
Scale CMPs. In ICS, 2011.

[51] Y. Yuan, R. Lee, and X. Zhang. The Yin and Yang of
Processing Data Warehousing Queries on GPU
Devices. PVLDB, 6(10):817—-828, 2013.
