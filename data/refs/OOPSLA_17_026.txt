[1] Karen L. Bernstein and Eugene W. Stark. 1995. Debugging Type Errors. Technical Report. State University of New York at

Stony Brook.



[2] Bernd Brafel. 2004. TypeHope: There is hope for your type errors. In Int. Workshop on Implementation of Functional

Languages.



[3] Manuel MT Chakravarty and Gabriele Keller. 2004. The risks and benefits of teaching purely functional programming in

first year. Journal of Functional Programming 14, 01 (2004), 113-123.



[4] Christopher Chambers, Sheng Chen, Duc Le, and Christopher Scaffidi. 2012. The function, and dysfunction, of information

sources in learning functional programming. Journal of Computing Sciences in Colleges 28, 1 (2012), 220-226.



[5] S. Chen and M. Erwig. 2014a. Counter-Factual Typing for Debugging Type Errors. In ACM SIGPLAN-SIGACT Symp. on

Principles of Programming Languages. 583-594.



[6] S. Chen and M. Erwig. 2014b. Guided Type Debugging. In Int. Symp. on Functional and Logic Programming (LNCS 8475).

35-51,



[7] Sheng Chen, Martin Erwig, and Karl Smeltzer. 2014. Let’s hear both sides: On combining type-error reporting tools. In 2014

IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC). IEEE, 145-152.



[8] S. Chen, M. Erwig, and E. Walkingshaw. 2012. An Error-Tolerant Type System for Variational Lambda Calculus. In ACM Int.

Conf. on Functional Programming. 29-40.



[9] S. Chen, M. Erwig, and E. Walkingshaw. 2014. Extending Type Inference to Variational Programs. ACM Trans. on Programming

Languages and Systems 36, 1, Article 1 (2014), 54 pages.



[10] Olaf Chitil. 2001. Compositional Explanation of Types and Algorithmic Debugging of Type Errors. In ACM Int. Conf. on

Functional Programming. 193-204.



[11] Chris Clack and Colin Myers. 1995. The dys-functional student. In Funtional Programming Languages in Education. Springer,

289-309,



[12] Paul Denny, Andrew Luxton-Reilly, and Ewan Tempero. 2012. All syntax errors are not equal. In Proceedings of the 17th

ACM annual conference on Innovation and technology in computer science education. ACM, 75-80.



[13] Dominic Duggan and Frederick Bent. 1995. Explaining Type Inference. In Science of Computer Programming. 37-83.



[14] Hyunjun Eo, Oukseh Lee, and Kwangkeun Yi. 2004. Proofs of a set of hybrid let-polymorphic type inference algorithms.

New Generation Computing 22, 1 (2004), 1-36. DOL : http://dx.doi.org/10.1007/BF03037279



[15] James B Fenwick Jr, Cindy Norris, Frank E Barry, Josh Rountree, Cole J Spicer, and Scott D Cheek. 2009. Another look at the

behaviors of novice programmers. In ACM SIGCSE Bulletin, Vol. 41. ACM, 296-300.



[16] Christian Haack and J. B. Wells. 2003. Type error slicing in implicitly typed higher-order languages. In European Symposium

on Programming. 284-301.



[17] J. Hage. Helium benchmark programs, (2002-2005). Private communication. (???7).



[18] Jurriaan Hage and Bastiaan Heeren. 2007. Heuristics for Type Error Discovery and Recovery. In Implementation and

Application of Functional Languages. 199-216.



[19] Jurriaan Hage and Peter Van Keeken. 2006. Mining for Helium. Technical report UU-CS 2006-047 (2006).



[20] Jurriaan Hage and Peter van Keeken. 2009. Neon: A Library for Language Usage Analysis. In Software Language Engineering.

Lecture Notes in Computer Science, Vol. 5452, 35-53.



[21] Bastiaan Heeren, Daan Leijen, and Arjan van JJzendoorn. 2003. Helium, for learning Haskell. In Proceedings of the 2003 ACM

SIGPLAN workshop on Haskeil (Haskell 03). ACM, New York, NY, USA, 62-71. DOI: http://dx.doi.org/10.1145/871895.

871902



[22] Bastiaan J. Heeren. 2005. Top Quality Type Error Messages. Ph.D. Dissertation. Universiteit Utrecht, The Netherlands.

http://www.cs.uu.nl/people/bastiaan/phdthesis



[23] Simon Peyton Jones. 2003. Haskell 98 language and libraries: the revised report. Cambridge University Press.



[24] Stef Joosten, Klaas Van Den Berg, and Gerrit Van Der Hoeven. 1993. Teaching functional programming to first-year students.

Journal of Functional Programming 3, 01 (1993), 49-65.



[25] Yang Jun, Greg Michaelson, and Phil Trinder. 2002. Explaining polymorphic types. Comput. J. 45, 4 (2002), 436-452.



[26] Oukseh Lee and Kwangkeun Yi. 1998. Proofs about a folklore let-polymorphic type inference algorithm. ACM Trans. on

Programming Languages and Systems 20, 4 (July 1998), 707-723. DOT : http://dx.doi.org/10.1145/291891.291892



[27] Oukseh Lee and Kwangkeun Yi. 2000. A Generalized Let-Polymorphic Type Inference Algorithm. Technical Report. Technical Memorandum ROPAS-2000-5, Research on Program Analysis System, Korea Advanced Institute of Science and

Technology.



[28] B. Lerner, M. Flower, Dan Grossman, and Craig Chambers. 2007. Searching for type-error messages. In ACM Int. Conf. on

Programming Language Design and Implementation. 425-434. DOI: http://dx.doi.org/10.1145/1250734.1250783



[29] Benjamin Lerner, Dan Grossman, and Craig Chambers. 2006. Seminal: searching for ML type-error messages. In Workshop

on ML, 63-73. DOI: http://dx.doi.org/10.1145/1159876,1159887



[30] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 105. Publication date: October 2017.

How Type Errors Were Fixed and What Students Did? 105:27



[31] Calvin Loncaric, Satish Chandra, Cole Schlesinger, and Manu Sridharan. 2016. A Practical Framework for Type Inference

Error Explanation. In OOPSLA. 781-799.



[32] Guillaume Marceau, Kathi Fisler, and Shriram Krishnamurthi. 2011a. Measuring the effectiveness of error messages designed

for novice programmers. In Proceedings of the 42nd ACM technical symposium on Computer science education. ACM,

499-504.



[33] Guillaume Marceau, Kathi Fisler, and Shriram Krishnamurthi. 2011b. Mind your language: on novices’ interactions with error

messages. In Proceedings of the 10th SIGPLAN symposium on New ideas, new paradigms, and reflections on programming

and software. ACM, 3-18.



[34] Bruce J McAdam. 2002. Repairing type errors in functional programs. Ph.D. Dissertation. University of Edinburgh. College of

Science and Engineering. School of Informatics.



[35] Jonathan P Munson and Elizabeth A Schilling. 2016. Analyzing novice programmers’ response to compiler error messages.

Journal of Computing Sciences in Colleges 31, 3 (2016), 53-61.



[36] Robert Nieuwenhuis, Albert Oliveras, and Cesare Tinelli. 2006. Solving SAT and SAT Modulo Theories: From an Abstract

Davis—Putnam—Logemann-Loveland Procedure to DPLL(T). J. ACM 53, 6 (Nov. 2006), 937-977. DOL: http://dx.doi.org/

10.1145/1217856.1217859



[37] Zvonimir Pavlinovic, Tim King, and Thomas Wies. 2014. Finding Minimum Type Error Sources. In OOPSLA. 525-542.



[38] Zvonimir Pavlinovic, Tim King, and Thomas Wies. 2015. Practical SMT-based Type Error Localization. In ICFP, 412-423.



[39] Thomas Schilling. 2012. Constraint-Free type error slicing. In Trends in Functional Programming. Springer, 1-16.



[40] Jon Sneyers, Tom Schrijvers, and Bart Demoen. 2009. The Computational Power and Complexity of Constraint Handling

Rules. ACM Trans. Program. Lang. Syst. 31, 2 (Feb. 2009), 8:1-8:42. DOL: http://dx.doi.org/10.1145/1462166.1462169



[41] Peter J. Stuckey, Martin Sulzmann, and Jeremy Wazny. 2003. Interactive type debugging in Haskell. In ACM SIGPLAN

Workshop on Haskell. 72-83. DOI: http://dx.doi.org/10.1145/87 1895.87 1903



[42] Peter J. Stuckey, Martin Sulzmann, and Jeremy Wazny. 2004. Improving type error diagnosis. In ACM SIGPLAN Workshop on

Haskell. 80-91. DOL: http://dx.doi.org/10.1145/1017472.1017486



[43] Ville Tirronen. 2014. Study on difficulties and misconceptions with modern type systems. In Proceedings of the 2014 conference

on Innovation & technology in computer science education. ACM, 303-308.



[44] Ville Tirronen, SAMUEL UUSI-MAKELA, and VILLE ISOMOTTONEN. 2015. Understanding beginners’ mistakes with

Haskell. Journal of Functional Programming 25 (2015), e11.



[45] Kanae Tsushima and Kenichi Asai. 2013. An Embedded Type Debugger. Springer Berlin Heidelberg, Berlin, Heidelberg,

190-206. DOL: http://dx.doi.org/10.1007/978-3-642-41582-1_12



[46] Kanae Tsushima and Kenichi Asai. 2014. A Weighted Type-Error Slicer. Computer Software 31, 4 (2014), 131-148. DOI:

http://dx.doi.org/10.11309/jssst.31.4_131



[47] Kanae Tsushima and Olaf Chitil. 2014. Enumerating Counter-Factual Type Error Messages with an Existing Type Checker.

In 16th Workshop on Programming and Programming Languages (PPL 2014).



[48] Peter van Keeken. 2006. Analyzing Helium Programs Obtained Through Logging-The process of mining novice Haskell

programs. Master’s thesis. Department of Information and Computing Sciences, Utrecht University.



[49] Mitchell Wand. 1986. Finding the source of type errors. In ACM Symp. on Principles of Programming Languages. 38-43. DOL:

http://dx.doi-org/10.1145/512644.512648



[50] Jeremy Richard Wazny. 2006. Type inference and type error diagnosis for Hindley/Milner with extensions, Ph.D. Dissertation.

The University of Melbourne.



[51] Baijun Wu, John Peter Campora, and Sheng Chen. 2017. Learning User Friendly Type-error Messages. Proc. ACM Program.

Lang. 1, OOPSLA, Article 106 (2017), 1 — 29.



[52] Jun Yang. 2000. Explaining Type Errors by Finding the Source of a Type Conflict. In Trends in Functional Programming.

Intellect Books, 58-66.



[53] Jun Yang, Greg Michaelson, Phil Trinder, and JB Wells. 2000. Improved type error reporting. In In Proceedings of 12th

International Workshop on Implementation of Functional Languages. Citeseer.



[54] Danfeng Zhang and Andrew C. Myers. 2014. Toward General Diagnosis of Static Errors. In ACM Symp. on Principles of

Programming Languages. 569-581.



[55] Danfeng Zhang, Andrew C. Myers, Dimitrios Vytiniotis, and Simon Peyton-Jones. 2015. Diagnosing Type Errors with Class.

In ACM SIGPLAN Conference on Programming Language Design and Implementation. 12-21.



[56] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 105. Publication date: October 2017.
