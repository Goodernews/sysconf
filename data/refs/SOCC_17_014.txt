
[1] Apache Flink. http://flink.apache.org/.
[2] Apache Spark. http://spark.apache.org/.
[3] Apache Storm. http://storm.apache.org/.
[4] Apache storm performance tuners. https://www.ericsson.com/research-blog/

data-knowledge/apache-storm-performance-tuners.

[5] Companies using Apache Storm. http://storm.apache.org/Powered-By.html.

SoCC ’17, September 24–27, 2017, Santa Clara, CA, USA

Muhammad Bilal and Marco Canini

[6] How spotify scales apache storm. https://labs.spotify.com/2015/01/05/how-

spotify-scales-apache-storm.

[7] Intel storm benchmark. https://github.com/intel-hadoop/storm-benchmark.
[8] Investment

in Fast Data Processing Growing: Survey.

http://www.

enterpriseappstoday.com/data-management/investment-in-fast-data-
processing-growing-survey.html.

[9] Making storm fly with netty. https://yahooeng.tumblr.com/post/64758709722/

making-storm-fly-with-netty.

[10] Notes on tuning storm+trident. https://gist.github.com/mrflip/5958028.
[11] Parameter

tuning framework repository.

https://github.com/MBtech/

stormbenchmark/.

[12] Performance tuning for hdinsight storm and microsoft azure eventhubs.
https://blogs.msdn.microsoft.com/shanyu/2015/05/14/performance-tuning-for-
hdinsight-storm-and-microsoft-azure-eventhubs.

[13] Rolling top words topology from bigdatabench. http://prof.ict.ac.cn/bdb_uploads/

bdb_streaming/SocialNetwork-JStorm.tar.gz.

[14] Sentiment analysis storm. https://github.com/zdata-inc/StormSampleProject.
[15] T-digest. https://github.com/tdunning/t-digest.
[16] T-digest service. https://github.com/MBtech/TDigestService.
[17] O. Alipourfard, H. H. Liu, J. Chen, S. Venkataraman, M. Yu, and M. Zhang. Cher-
rypick: Adaptively unearthing the best cloud configurations for big data analytics.
In 14th USENIX Symposium on Networked Systems Design and Implementation
(NSDI 17). USENIX Association, 2017.

[18] S. T. Allen, M. Jankowski, and P. Pathirana. Storm Applied: Strategies for Real-time
Event Processing. Manning Publications Co., Greenwich, CT, USA, 1st edition,
2015.

[19] L. Aniello, R. Baldoni, and L. Querzoni. Adaptive Online Scheduling in Storm. In

[20] S. Babu. Towards Automatic Optimization of MapReduce Programs. In SoCC,

DEBS, 2013.

2010.

[21] R. Calandra, J. Peters, C. E. Rasmussen, and M. P. Deisenroth. Manifold gaussian
processes for regression. In Neural Networks (IJCNN), 2016 International Joint
Conference on, pages 3338–3345. IEEE, 2016.

[22] S. Chandrasekaran, O. Cooper, A. Deshpande, M. J. Franklin, J. M. Hellerstein,
W. Hong, S. Krishnamurthy, S. R. Madden, F. Reiss, and M. A. Shah. TelegraphCQ:
Continuous Dataflow Processing. In SIGMOD, 2003.

[23] T. Das, Y. Zhong, I. Stoica, and S. Shenker. Adaptive stream processing using
dynamic batch sizing. In Proceedings of the ACM Symposium on Cloud Computing,
pages 1–13. ACM, 2014.

[24] S. Duan, V. Thummala, and S. Babu. Tuning Database Configuration Parameters

with iTuned. VLDB Endowment, 2(1), 2009.

[25] A. Floratou, A. Agrawal, B. Graham, S. Rao, and K. Ramasamy. Dhalion: Self-

Regulating Stream Processing in Heron. In VLDB, 2017.

[26] A. Ganapathi, K. Datta, A. Fox, and D. Patterson. A case for machine learning to

optimize multicore performance. In HotPar, 2009.

[27] T. Heinze, L. Roediger, A. Meister, Y. Ji, Z. Jerzak, and C. Fetzer. Online parameter
optimization for elastic data stream processing. In Proceedings of the Sixth ACM
Symposium on Cloud Computing, pages 276–287. ACM, 2015.

[28] H. Herodotou and S. Babu. Profiling, what-if analysis, and cost-based optimization

of MapReduce programs. VLDB Endowment, 4(11), 2011.

[29] H. Herodotou, F. Dong, and S. Babu. No one (cluster) size fits all: automatic

cluster sizing for data-intensive analytics. In SoCC, 2011.

[30] P. Jamshidi and G. Casale. An uncertainty-aware approach to optimal config-
uration of stream processing systems. In Modeling, Analysis and Simulation of
Computer and Telecommunication Systems (MASCOTS), 2016 IEEE 24th Interna-
tional Symposium on, pages 39–48. IEEE, 2016.

[31] K. Kambatla, A. Pathak, and H. Pucha. Towards Optimizing Hadoop Provisioning

in the Cloud. In HotCloud, 2009.

[32] S. Kulkarni, N. Bhagat, M. Fu, V. Kedigehalli, C. Kellogg, S. Mittal, J. M. Patel,
K. Ramasamy, and S. Taneja. Twitter Heron: Stream Processing at Scale. In
SIGMOD, 2015.

[33] E. Kwan, S. Lightstone, A. Storm, and L. Wu. Automatic configuration for IBM

DB2 universal database. IBM Perf. Technical Report, 2002.

[34] M. Li, L. Zeng, S. Meng, J. Tan, L. Zhang, A. R. Butt, and N. Fuller. MRONLINE:

MapReduce Online Performance Tuning. In HPDC, 2014.

[35] G. Liao, K. Datta, and T. L. Willke. Gunther: Search-Based Auto-Tuning of

MapReduce. In European Conference on Parallel Processing, 2013.

[36] W. Lin, Z. Qian, J. Xu, S. Yang, J. Zhou, and L. Zhou. Streamscope: continuous
reliable distributed processing of big data streams. In Proc. of NSDI, pages 439–454,
2016.

[37] B. Lohrmann, D. Warneke, and O. Kao. Massively-parallel stream processing
under qos constraints with nephele.
In Proceedings of the 21st international
symposium on High-Performance Parallel and Distributed Computing, pages 271–
282. ACM, 2012.

[38] M. McKay, R. Beckman, and W. Conover. A Comparison of Three Methods for
Selecting Values of Input Variables in the Analysis of Output from a Computer
Code. Technometrics, 21(2), 1979.

[39] M. D. Morris and T. J. Mitchell. Exploratory designs for computational experi-

ments. Journal of statistical planning and inference, 43(3):381–402, 1995.

[40] M. A. U. Nasir, G. D. F. Morales, D. García-Soriano, N. Kourtellis, and M. Ser-
afini. The power of both choices: Practical load balancing for distributed stream
processing engines. In Data Engineering (ICDE), 2015 IEEE 31st International
Conference on, pages 137–148. IEEE, 2015.

[41] M. A. U. Nasir, G. D. F. Morales, N. Kourtellis, and M. Serafini. When two choices
are not enough: Balancing at scale in distributed stream processing. In Data
Engineering (ICDE), 2016 IEEE 32nd International Conference on, pages 589–600.
IEEE, 2016.

[42] B. Palanisamy, A. Singh, L. Liu, and B. Jain. Purlieus: locality-aware resource

allocation for MapReduce in a cloud. In SC, 2011.

[43] B. Peng, M. Hosseini, Z. Hong, R. Farivar, and R. Campbell. R-storm: Resource-
aware scheduling in storm. In Proceedings of the 16th Annual Middleware Confer-
ence, pages 149–161. ACM, 2015.

[44] M. J. Sax, M. Castellanos, Q. Chen, and M. Hsu. Performance optimization for

distributed intra-node-parallel streaming systems. In ICDEW, 2013.

[45] M. A. Shah, J. M. Hellerstein, S. Chandrasekaran, and M. J. Franklin. Flux: An

adaptive partitioning operator for continuous query systems. In ICDE, 2003.

[46] P. Shivam, V. Marupadi, J. Chase, and S. Babu. Cutting Corners: Workbench

Automation for Server Benchmarking. In USENIX ATC, 2008.

[47] J. Singer, G. Kovoor, G. Brown, and M. Luján. Garbage collection auto-tuning for
Java MapReduce on multi-cores. ACM SIGPLAN Notices, 46(11):109–118, 2011.

[48] R. Thonangi, V. Thummala, and S. Babu. Finding Good Configurations in High-
Dimensional Spaces: Doing More with Less. In IEEE International Symposium on
Modeling, Analysis, and Simulation of Computer and Telecommunication Systems,
2008.

[49] D. Van Aken, A. Pavlo, G. J. Gordon, and B. Zhang. Automatic database man-
agement system tuning through large-scale machine learning. In Proceedings of
the 2017 ACM International Conference on Management of Data, pages 1009–1024.
ACM, 2017.

[50] S. Venkataraman, A. Panda, K. Ousterhout, A. Ghodsi, M. J. Franklin, B. Recht,
and I. Stoica. Drizzle: Fast and adaptable stream processing at scale, 2016. http:
//shivaram.org/drafts/drizzle.pdf.

[51] S. Venkataraman, Z. Yang, M. Franklin, B. Recht, and I. Stoica. Ernest: efficient
performance prediction for large-scale advanced analytics.
In 13th USENIX
Symposium on Networked Systems Design and Implementation (NSDI 16), pages
363–378. USENIX Association, 2016.

[52] B. Xi, Z. Liu, M. Raghavachari, C. H. Xia, and L. Zhang. A smart hill-climbing

algorithm for application server configuration. In WWW, 2004.

[53] Y. Xing, S. Zdonik, and J.-H. Hwang. Dynamic load distribution in the borealis
stream processor. In 21st International Conference on Data Engineering (ICDE’05),
pages 791–802. IEEE, 2005.

[54] T. Ye and S. Kalyanaraman. A recursive random search algorithm for large-scale
network parameter configuration. ACM SIGMETRICS Performance Evaluation
Review, 31(1), 2003.

[55] W. Zheng, R. Bianchini, G. J. Janakiraman, J. R. Santos, and Y. Turner. JustRunIt:
Experiment-Based Management of Virtualized Data Centers. In USENIX ATC,
2009.

[56] W. Zheng, R. Bianchini, and T. D. Nguyen. Automatic Configuration of Internet

Services. In EuroSys, 2007.

[57] Q. Zhu, B. Kveton, L. Mummert, and P. Pillai. Automatic tuning of interactive

perception applications. arXiv preprint arXiv:1203.3537, 2012.

