[1] Advanced Micro Devices. Mantle Programming Guide and API Reference 1.0. _https://www.amd.com/Documents/

Mantle-Programming-Guide-and- API-Reference.pdf.



[2] Jason Ansel, Cy P. Chan, Yee Lok Wong, Marek Olszewski, Qin Zhao, Alan Edelman, and Saman P. Amarasinghe. 2009.

PetaBricks: a language and compiler for algorithmic choice. In ACM Conference on Programming Language Design and

Implementation (PLDI).



[3] Apple. Metal Shading Language Specification, Version 2.0. https://developer.apple.com/metal/

Metal-Shading-Language-Specification.pdf.



[4] Joshua Auerbach, David F. Bacon, Perry Cheng, and Rodric Rabbah. 2010. Lime: A Java-compatible and Synthesizable

Language for Heterogeneous Architectures. In ACM Conference on Object-Oriented Programming, Systems, Languages,

and Applications (OOPSLA).



[5] Chad Austin and Dirk Reiners. 2005. Renaissance: A functional shading language. In ACM SIGGRAPH/EUROGRAPHICS

Conference on Graphics Hardware.



[6] Omer Sinan Agacan. Staging is not just code generation. http://osa1.net/posts/2015-05-17-staging-is-not-just-codegen.html.



[7] Baggers. Varjo: Lisp to GLSL Language Translator. https://github.com/cbaggers/varjo.



[8] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 71. Publication date: October 2017.

Static Stages for Heterogeneous Programming 71:25



[9] Alan Bawden. 1999, Quasiquotation in Lisp. In ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation

(PEPM).



[10] Zine-E]-Abidine Benaissa, Eugenio Moggi, Walid Taha, and Tim Sheard. 1999. Logical Modalities and Multi-Stage Programming. In Federated Logic Conference (FLoC) Satellite Workshop on Intuitionistic Modal Logics and Applications (MLA).



[11] Tobias Bexelius. GPipe. http://hackage.haskell.org/package/GPipe.



[12] Kovas Boguta. Gamma. https://github.com/kovasb/gamma.



[13] Kevin J. Brown, Arvind K. Sujeeth, HyoukJoong Lee, Tiark Rompf, Hassan Chafi, Martin Odersky, and Kunle Olukotun.

2011. A Heterogeneous Parallel Framework for Domain-Specific Languages. In International Conference on Parallel

Architectures and Compilation Techniques (PACT).



[14] C. Calcagno, E. Moggi, and T. Sheard. 2003a. Closed Types for a Safe Imperative MetaML. Journal of Functional Programming

13, 3 (May 2003), 545-571.



[15] Cristiano Calcagno, Eugenio Moggi, and Walid Taha. 2004. ML-Like Inference for Classifiers. In European Symposium on

Programming (ESOP).



[16] Cristiano Calcagno, Walid Taha, Liwen Huang, and Xavier Leroy. 2003b. Implementing Multi-stage Languages Using ASTs,

Gensym, and Reflection. In International Conference on Generative Programming and Component Engineering (GPCE).

Hassan Chafi, Arvind K. Sujeeth, Kevin J. Brown, HyoukJoong Lee, Anand R. Atreya, and Kunle Olukotun. 2011. A Domainspecific Approach to Heterogeneous Parallelism. In ACM SIGPLAN Symposium on Principles and Practice of Parallel



[17] Programming (PPoPP).



[18] Bradford L. Chamberlain, David Callahan, and Hans P. Zima. 2007. Parallel Programmability and the Chapel Language.

International Journal of High Performance Computing Applications 21, 3 (2007), 291-312.



[19] Philippe Charles, Christian Grothoff, Vijay Saraswat, Christopher Donawa, Allan Kielstra, Kemal Ebcioglu, Christoph

von Praun, and Vivek Sarkar. 2005. X10: An Object-oriented Approach to Non-uniform Cluster Computing. In ACM

Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA).



[20] Chiyan Chen and Hongwei Xi. 2003. Meta-programming Through Typeful Code Representation. In ACM SIGPLAN

International Conference on Functional Programming (ICFP).



[21] James Cheney, Sam Lindley, and Philip Wadler. 2013. A Practical Theory of Language-integrated Query. In ACM SIGPLAN

International Conference on Functional Programming (ICFP).



[22] Rowan Davies and Frank Pfenning. 1996. A Modal Analysis of Staged Computation. In ACM SIGPLAN-SIGACT Symposium

on Principles of Programming Languages (POPL).



[23] Zachary DeVito, James Hegarty, Alex Aiken, Pat Hanrahan, and Jan Vitek. 2013. Terra: A Multi-stage Language for

High-performance Computing. In ACM Conference on Programming Language Design and Implementation (PLDI).



[24] Jason Eckhardt, Roumen Kaiabachev, Emir Pasalic, Kedar Swadi, and Walid Taha. 2007. Implicitly Heterogeneous Multi-stage

Programming. New Generation Computing 25, 3 (Jan. 2007), 305-336.



[25] Conal Elliott. 2004. Programming Graphics Processors Functionally. In Haskell Workshop.



[26] Nicolas Feltman, Carlo Angiuli, Umut A. Acar, and Kayvon Fatahalian. 2016. Automatically Splitting a Two-Stage Lambda

Calculus. In European Symposium on Programming (ESOP).



[27] Matthew Flatt. 2002. Composable and Compilable Macros: You Want It When?. In ACM SIGPLAN International Conference

on Functional Programming (ICFP).



[28] Matthew Flatt. 2016. Binding As Sets of Scopes. In ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL).



[29] Tim Foley and Pat Hanrahan. 2011. Spark: Modular, Composable Shaders for Graphics Hardware. In SIGGRAPH.



[30] Steven E. Ganz, Amr Sabry, and Walid Taha. 2001. Macros As Multi-stage Computations: Type-safe, Generative, Binding

Macros in MacroML. In ACM SIGPLAN International Conference on Functional Programming (ICFP).



[31] Kate Gregory and Ade Miller. 2012. C++ AMP: Accelerated Massive Parallelism with Microsoft Visual C++. O'Reilly.

http://www.gregcons.com/cppamp/



[32] Ilya Grigorik, James Simonsen, and Jatinder Mann. High Resolution Time Level 2: W3C Working Draft. https://www.w3.

org/TR/hr-time/.



[33] Yuichiro Hanada and Atsushi Igarashi. 2014. On Cross-Stage Persistence in Multi-Stage Programming. In International

Symposium on Functional and Logic Programming (FLOPS).



[34] Johann Hauswald, Yiping Kang, Michael A. Laurenzano, Quan Chen, Cheng Li, Trevor Mudge, Ronald G. Dreslinski, Jason

Mars, and Lingjia Tang. 2015. DjiNN and Tonic: DNN As a Service and Its Implications for Future Warehouse Scale

Computers. In International Symposium on Computer Architecture (ISCA).



[35] Yong He, Tim Foley, and Kayvon Fatahalian. 2016. A System for Rapid Exploration of Shader Optimization Choices. In

SIGGRAPH.



[36] Yong He, Tim Foley, Natalya Tatarchuk, and Kayvon Fatahalian. 2015. A System for Rapid, Automatic Shader Level-of-detail.

In SIGGRAPH Asia.



[37] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 71. Publication date: October 2017.

71:26 Adrian Sampson, Kathryn S McKinley, and Todd Mytkowicz



[38] Troels Henriksen, Niels G. W. Serup, Martin Elsman, Fritz Henglein, and Cosmin Oancea. 2017. Futhark: Purely Functional

GPU-programming with Nested Parallelism and In-place Array Updates. In ACM Conference on Programming Language

Design and Implementation (PLDI).



[39] Martin Hirzel and Robert Grimm. 2007. Jeannie: Granting Java Native Interface Developers Their Wishes. In ACM Conference

on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA).



[40] Lee Howes and Maria Rovatsou. SYCL Specification. https://www.khronos.org/registry/sycl/.



[41] Dean Jackson and Jeff Gilbert. WebGL Specification. https://www.khronos.org/registry/webgl/specs/latest/1.0/.



[42] Ulrik Jorring and William L. Scherlis. 1986. Compilers and Staging Transformations. In ACM SIGPLAN-SIGACT Symposium

on Principles of Programming Languages (POPL).



[43] Norman P. Jouppi, Cliff Young, Nishant Patil, David Patterson, Gaurav Agrawal, Raminder Bajwa, Sarah Bates, Suresh Bhatia,

Nan Boden, Al Borchers, Rick Boyle, Pierre luc Cantin, Clifford Chao, Chris Clark, Jeremy Coriell, Mike Daley, Matt Dau,

Jeffrey Dean, Ben Gelb, Tara Vazir Ghaemmaghami, Rajendra Gottipati, William Gulland, Robert Hagmann, C. Richard

Ho, Doug Hogberg, John Hu, Robert Hundt, Dan Hurt, Julian Ibarz, Aaron Jaffey, Alek Jaworski, Alexander Kaplan,

Harshit Khaitan, Andy Koch, Naveen Kumar, Steve Lacy, James Laudon, James Law, Diemthu Le, Chris Leary, Zhuyuan

Liu, Kyle Lucke, Alan Lundin, Gordon MacKean, Adriana Maggiore, Maire Mahony, Kieran Miller, Rahul Nagarajan, Ravi

Narayanaswami, Ray Ni, Kathy Nix, Thomas Norrie, Mark Omernick, Narayana Penukonda, Andy Phelps, Jonathan Ross,

Matt Ross, Amir Salek, Emad Samadiani, Chris Severn, Gregory Sizikov, Matthew Snelham, Jed Souter, Dan Steinberg,

Andy Swing, Mercedes Tan, Gregory Thorson, Bo Tian, Horia Toma, Erick Tuttle, Vijay Vasudevan, Richard Walter,

Walter Wang, Eric Wilcox, and Doe Hyun Yoon. 2017. In-Datacenter Performance Analysis of a Tensor Processing Unit.

In International Symposium on Computer Architecture (ISCA).



[44] John Kessenich. An Introduction to SPIR-V: A Khronos-Defined Intermediate Language for Native Representation of

Graphical Shaders and Compute Kernels. https://www.khronos.org/registry/spir-v/papers/WhitePaper.pdf.



[45] Khronos. Vulkan 1.0.48: A Specification. https://www.khronos.org/registry/vulkan/specs/1.0/pdf/vkspec.pdf.



[46] Ik-Soon Kim, Kwangkeun Yi, and Cristiano Calcagno. 2006. A Polymorphic Modal Type System for Lisp-like Multi-staged

Languages. In ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL).



[47] Oleg Kiselyov. 2014. The Design and Implementation of BER MetaOCamll. In International Symposium on Functional and

Logic Programming (FLOPS).



[48] Oleg Kiselyov. MetaOCaml — an OCaml dialect for multi-stage programming. http://okmij.org/ftp/ML/MetaOCaml. html.



[49] Andreas Kléckner. 2014. Loo.py: Transformation-based Code Generation for GPUs and CPUs. In International Workshop on

Libraries, Languages, and Compilers for Array Programming (ARRAY).



[50] Andreas Kléckner, Nicolas Pinto, Yunsup Lee, Bryan Catanzaro, Paul Ivanov, and Ahmed Fasih. 2012. PyCUDA and

PyOpenCL: A Scripting-based Approach to GPU Run-time Code Generation. Parallel Comput. 38, 3 (March 2012),

157-174,



[51] Eugene Kohlbecker, Daniel P. Friedman, Matthias Felleisen, and Bruce Duba. 1986. Hygienic Macro Expansion. In ACM

Conference on LISP and Functional Programming.



[52] LambdaCube. LambdaCube 3D. http://lambdacube3d.com.



[53] Byeongcheol Lee, Robert Grimm, Martin Hirzel, and Kathryn S. McKinley. 2012. Marco: Safe, Expressive Macros for Any

Language. In European conference on Object-Oriented Programming (ECOOP).



[54] Chi-Keung Luk, Sunpyo Hong, and Hyesoon Kim. 2009. Qilin: Exploiting Parallelism on Heterogeneous Multiprocessors

with Adaptive Mapping. In IEEE/ACM International Symposium on Microarchitecture (MICRO).



[55] Geoffrey Mainland. 2012. Explicitly heterogeneous metaprogramming with MetaHaskell. In ACM SIGPLAN International

Conference on Functional Programming (ICFP).



[56] David Majda. PEG.js: Parser Generator for JavaScript. http://pegjs.org.



[57] Michael McCool, Stefanus Du Toit, Tiberiu Popa, Bryan Chan, and Kevin Moule. 2004. Shader Algebra. In SIGGRAPH.



[58] Michael McCool, Zheng Qin, and Tiberiu S. Popa. 2002. Shader Metaprogramming. In ACM SIGGRAPH/EUROGRAPHICS

Conference on Graphics Hardware.



[59] Sean McDirmid. Two Lightweight DSLs for Rich UI Programming. http://research.microsoft.com/pubs/191794/ldsl09.pdf.



[60] Morgan McGuire. Computer Graphics Archive. http://graphics.cs.williams.edu/data.



[61] Microsoft. Direct3D. https://msdn.microsoft.com/en-us/library/windows/desktop/hh309466(v=vs.85).aspx.



[62] Eugenio Moggi, Walid Taha, Zine-El-Abidine Benaissa, and Tim Sheard. 1999. An Idealized MetaML: Simpler, and More

Expressive. In European Symposium on Programming (ESOP).



[63] Tom Murphy, VIL Karl Crary, and Robert Harper. 2007. Type-safe Distributed Programming with ML5. In Conference on

Trustworthy Global Computing (TGC).



[64] Todd Mytkowicz and Wolfram Schulte. 2014. Waiting for Godot? The Right Language Abstractions for Parallel Programming

Should Be Here Soon: The Multicore Transformation. Ubiquity (June 2014), 4:1-4:12.



[65] Shayan Najd, Sam Lindley, Josef Svenningsson, and Philip Wadler. 2016. Everything Old is New Again: Quoted Domainspecific Languages. In ACM SIGPLAN Workshop on Partial Evaluation and Program Manipulation (PEPM).



[66] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 71. Publication date: October 2017.

Static Stages for Heterogeneous Programming 71:27



[67] Aleksandar Nanevski and Frank Pfenning. 2005. Staged Computation with Names and Necessity. journal of Functional

Programming (FP) 15 (Nov. 2005), 893-939, Issue 6.



[68] John Nickolls, Ian Buck, Michael Garland, and Kevin Skadron. 2008. Scalable Parallel Programming with CUDA. Queue 6, 2

(March 2008), 40-53.



[69] OpenACC. The OpenACC Application Programming Interface. http://www.openacc.org/sites/default/files/OpenACC_2pt5.

pdf.



[70] Bui Tuong Phong. 1975. Illumination for Computer Generated Pictures. Commun. ACM 18, 6 (June 1975), 311-317.



[71] Phitchaya Mangpo Phothilimthana, Jason Ansel, Jonathan Ragan-Kelley, and Saman Amarasinghe. 2013. Portable Performance on Heterogeneous Architectures. In International Conference on Architectural Support for Programming Languages

and Operating Systems (ASPLOS).



[72] Kekoa Proudfoot, William R. Mark, Svetoslav Tzvetkov, and Pat Hanrahan. 2001. A Real-time Procedural Shading System

for Programmable Graphics Hardware. In SIGGRAPH.



[73] Andrew Putnam, Adrian M. Caulfield, Eric S. Chung, Derek Chiou, Kypros Constantinides, John Demme, Hadi Esmaeilzadeh,

Jeremy Fowers, Gopi Prashanth, Gopal Jan, Gray Michael, Haselman Scott Hauck, Stephen Heil, Amir Hormati, Joo-Young

Kim, Sitaram Lanka, James Larus, Eric Peterson, Simon Pope, Aaron Smith, Jason Thong, Phillip Y. Xiao, and Doug

Burger. 2014. A Reconfigurable Fabric for Accelerating Large-scale Datacenter Services. In International Symposium on

Computer Architecture (ISCA).



[74] Jonathan Ragan-Kelley, Connelly Barnes, Andrew Adams, Sylvain Paris, Frédo Durand, and Saman Amarasinghe. 2013.

Halide: A Language and Compiler for Optimizing Parallelism, Locality, and Recomputation in Image Processing Pipelines.

In ACM Conference on Programming Language Design and Implementation (PLDI).



[75] Tiark Rompf and Martin Odersky. 2010. Lightweight Modular Staging: A Pragmatic Approach to Runtime Code Generation

and Compiled DSLs. In International Conference on Generative Programming and Component Engineering (GPCE).



[76] Tiark Rompf, Arvind K. Sujeeth, Kevin J. Brown, HyoukJoong Lee, Hassan Chafi, and Kunle Olukotun. 2014. Surgical

Precision JIT Compilers. In ACM Conference on Programming Language Design and Implementation (PLDI).



[77] Adrian Sampson. Braid source code, documentation, and interactive compiler. https://capra.cs.cornell.edu/braid/.



[78] Ben Sander, Greg Stoner, Siu-Chi Chan, Wen-Heng Chung, and Robin Maffeo. HCC: A C++ Compiler For Heterogeneous

Computing. http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0069r0.pdf.



[79] Carlos Scheidegger. Lux: the DSEL for WebGL graphics. http://cscheid.github.io/lux/.



[80] Mark Segal and Kurt Akeley. The OpenGL 4.5 Graphics System: A Specification. https://www.opengl.org/registry/doc/

glspec45.core.pdf.



[81] Stanford. The Stanford 3D Scanning Repository. http://graphics.stanford.edu/data/3Dscanrep/.



[82] John E. Stone, David Gohara, and Guochun Shi. 2010. OpenCL: A Parallel Programming Standard for Heterogeneous

Computing Systems. IEEE Design & Test 12, 3 (May 2010), 66-73.



[83] Walid Taha. 2003. Domain-Specific Program Generation: International Seminar, Dagstuhl Castle, Germany, March 23-28, 2003.

Revised Papers. Chapter A Gentle Introduction to Multi-stage Programming, 30-50.



[84] Walid Taha and Michael Florentin Nielsen. 2003. Environment Classifiers. In ACM SIGPLAN-SIGACT Symposium on

Principles of Programming Languages (POPL).



[85] Walid Taha and Tim Sheard. 1997. Multi-stage Programming with Explicit Annotations. In ACM SIGPLAN Workshop on

Partial Evaluation and Program Manipulation (PEPM).



[86] Naoki Takashima, Hiroki Sakamoto, and Yukiyoshi Kameyama. 2015. Generate and Offshore: Type-safe and Modular Code

Generation for Low-level Optimization. In Workshop on Functional High-Performance Computing (FHPC).



[87] Web Hypertext Application Technology Working Group. HTML Living Standard. Section 8.9: Animation Frames.

https://html.spec.whatwg.org/multipage/webappapis.html.



[88] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 71. Publication date: October 2017.
