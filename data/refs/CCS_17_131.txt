[1] 2016. Android Security BulletinâĂŤMay 2017. (2016). https:// source.android.com/security/bulletin/2017-05-01.
[2] Alfred Aho, Jeffrey Ullman, Monica S. Lam, and Ravi Sethi. 1986. Compilers: Principles, Techniques, and Tools. "Addison-Wesley".
[3] Dave Aitel. 2002. The Advantages of Block-Based Protocol Analysis for Security Testing. (2002). https://www.immunitysec.com/downloads/ advantages_of_block_based_analysis.html.
[4] ARM. 2013. ARM Exception levels. (2013). http://infocenter.arm.com/help/ index.jsp?topic=/com.arm.doc.ddi0488c/CHDHJIJG.html.
[5] K. Ashcraft and D. Engler. 2002. Using programmer-written compiler extensions to catch security holes. In Proceedings of the 2002 IEEE Symposium on Security and Privacy (SP ’02). 143–159. https://doi.org/10.1109/SECPRI.2002.1004368
[6] ThomasBall,EllaBounimova,ByronCook,VladimirLevin,JakobLichtenberg, Con McGarvey, Bohus Ondrusek, Sriram K. Rajamani, and Abdullah Ustuner. 2006. Thorough Static Analysis of Device Drivers. In Proceedings of the 2006 ACM SIGOPS/EuroSys European Conference on Computer Systems (EuroSys ’06). ACM, New York, NY, USA, 73–85. https://doi.org/10.1145/1217935.1217943
[7] Peter T. Breuer and Simon Pickin. 2006. One Million (LOC) and Counting: Static Analysis for Errors and Vulnerabilities in the Linux Kernel Source Code. Springer Berlin Heidelberg, Berlin, Heidelberg, 56–70. https://doi.org/10.1007/11767077_5
[8] LaurentButtiandJulienTinnes.2008.Discoveringandexploiting802.11wireless driver vulnerabilities. Journal in Computer Virology 4, 1 (2008), 25–37.
[9] Cristian Cadar, Daniel Dunbar, and Dawson Engler. 2008. KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs. In Proceedings of the 2008 USENIX Conference on Operating Systems Design and Implementation (OSDI ’08). USENIX Association, Berkeley, CA, USA, 209–224. http://dl.acm.org/citation.cfm?id=1855741.1855756
[10] CristianCadar,VijayGanesh,PeterM.Pawlowski,DavidL.Dill,andDawsonR. Engler. 2006. EXE: Automatically Generating Inputs of Death. In Proceedings of the 2006 ACM Conference on Computer and Communications Security (CCS ’06). ACM, New York, NY, USA, 322–335. https://doi.org/10.1145/1180405.1180445
[11] Gabriel Campana. 2009. Fuzzgrind: un outil de fuzzing automatique. Actes du (2009), 213–229.
[12] Sang Kil Cha, Maverick Woo, and David Brumley. 2015. Program-Adaptive Mutational Fuzzing. In Proceedings of the 2015 IEEE Symposium on Security and Privacy (SP ’15). IEEE Computer Society, Washington, DC, USA, 725–741. https: //doi.org/10.1109/SP.2015.50
[13] PaoloMilaniComparetti,GilbertWondracek,ChristopherKruegel,andEngin Kirda. 2009. Prospex: Protocol Specification Extraction. In Proceedings of the 2009 IEEE Symposium on Security and Privacy (SP ’09). IEEE Computer Society, Washington, DC, USA, 110–125. https://doi.org/10.1109/SP.2009.14
[14] Jonathan Corbet, Alessandro Rubini, and Greg Kroah-Hartman. 2005. Linux Device Drivers: Where the Kernel Meets the Hardware. " O’Reilly Media, Inc.".
[15] International Data Corporation. 2016. Smartphone OS Market Share. (2016). http://www.idc.com/promo/smartphone-market-share/os.
[16] Cr4sh. 2011. IOCTL Fuzzer - Windows kernel drivers fuzzer. (2011). https: //github.com/Cr4sh/ioctlfuzzer.
[17] debasishm89. 2014. A mutation based user mode (ring3) dumb in-memory Win- dows Kernel (IOCTL) Fuzzer. (2014). https://github.com/debasishm89/iofuzz.
[18] Kyle Dewey, Jared Roesch, and Ben Hardekopf. 2015. Fuzzing the Rust Type- checker Using CLP (T). In Proceedings of the 2015 IEEE/ACM International Con- ference on Automated Software Engineering (ASE ’15). IEEE Computer Society, Washington, DC, USA, 482–493. https://doi.org/10.1109/ASE.2015.65
[19] Fabien Duchene, Sanjay Rawat, Jean-Luc Richier, and Roland Groz. 2014. KameleonFuzz: Evolutionary Fuzzing for Black-box XSS Detection. In Proceed- ings of the 2014 ACM Conference on Data and Application Security and Privacy (CODASPY ’14). ACM, New York, NY, USA, 37–48. https://doi.org/10.1145/ 2557547.2557550
[20] Adrienne Porter Felt, Matthew Finifter, Erika Chin, Steve Hanna, and David Wagner. 2011. A Survey of Mobile Malware in the Wild. In Proceedings of the 2011 ACM Workshop on Security and Privacy in Smartphones and Mobile Devices (SPSM
’11). ACM, New York, NY, USA, 3–14. https://doi.org/10.1145/2046614.2046618
[21] Vijay Ganesh, Tim Leek, and Martin Rinard. 2009. Taint-based Directed White- box Fuzzing. In Proceedings of the 2009 International Conference on Software Engineering (ICSE ’09). IEEE Computer Society, Washington, DC, USA, 474–484.
https://doi.org/10.1109/ICSE.2009.5070546
[22] GNU. 2007. GNU General Public License. (2007). https://www.gnu.org/licenses/
gpl-3.0.en.html.
[23] Patrice Godefroid, Adam Kiezun, and Michael Y. Levin. 2008. Grammar-based
Whitebox Fuzzing. In Proceedings of the 2008 ACM SIGPLAN Conference on Pro- gramming Language Design and Implementation (PLDI ’08). ACM, New York, NY, USA, 206–215. https://doi.org/10.1145/1375581.1375607
[24] Patrice Godefroid, Nils Klarlund, and Koushik Sen. 2005. DART: Directed Auto- mated Random Testing. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’05). ACM, New York, NY, USA, 213–223. https://doi.org/10.1145/1065010.1065036
[25] Patrice Godefroid, Michael Y Levin, David A Molnar, et al. 2008. Automated Whitebox Fuzz Testing.. In Proceedings of the 2008 Symposium on Network and Distributed System Security (NDSS ’08). San Diego, CA, USA.
[26] Google. 2016. The Kernel Address Sanitizer. (2016). https://www.kernel.org/ doc/html/latest/dev-tools/kasan.html.
[27] Google. 2017. Goole Android Kernel Sources. (2017). https:// android.googlesource.com/kernel.
[28] Google. 2017. syzkaller - linux syscall fuzzer. (2017). https://github.com/google/ syzkaller.
[29] GustavoGrieco,MartínCeresa,andPabloBuiras.2016.QuickFuzz:AnAutomatic Random Fuzzer for Common File Formats. In Proceedings of the 2016 International Symposium on Haskell (Haskell ’16). ACM, New York, NY, USA, 13–20. https: //doi.org/10.1145/2976002.2976017
[30] IstvanHaller,AsiaSlowinska,MatthiasNeugschwandtner,andHerbertBos.2013. Dowser: a guided fuzzer to find buffer overflow vulnerabilities. In Proceedings of the 2013 USENIX Security Symposium (SEC ’13). Washington, DC, USA, 49–64.
[31] Christian Holler, Kim Herzig, and Andreas Zeller. 2012. Fuzzing with Code Fragments.. In Proceedings of the 2012 USENIX Security Symposium (SEC ’12). Bellevue, WA, USA, 445–458.
[32] HTC. 2017. HTC Android Kernel Sources. (2017). https://www.htcdev.com/ devcenter/downloads.
[33] Huawei. 2017. Huawei Android Kernel Sources. (2017). http:// consumer.huawei.com/ng/support/downloads/index.htm.
[34] Dave Jones. 2011. Trinity: A system call fuzzer. In Proceedings of the 2011 Ottawa Linux Symposium (OLS ’11).
[35] kernel. 2001. Character device registration. (2001). http://www.makelinux.net/ ldd3/chp- 3- sect- 4.
[36] PaulLarson,NigelHinds,RajanRavindran,andHubertusFranke.2003.Improving the Linux Test Project with kernel code coverage analysis. In Proceedings of the 2003 Ottawa Linux Symposium (OLS ’03).
[37] VuLe,ChengnianSun,andZhendongSu.2015.FindingDeepCompilerBugsvia Guided Stochastic Program Mutation. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA ’15). ACM, New York, NY, USA, 386–399. https:// doi.org/10.1145/2814270.2814319
[38] Stanislas Lejay. 2016. Fuzzing IOCTLs with angr. (2016). https://thunderco.re/ project/security/2016/07/18/fuzzing- ioctls/.
[39] LG. 2017. LG Android Kernel Sources. (2017). http://opensource.lge.com/osList/ list?m=Mc001&s=Sc002.
[40] Zhiqiang Lin, Xiangyu Zhang, and Dongyan Xu. 2010. Automatic Reverse En- gineering of Data Structures from Binary Execution. In Proceedings of the 2010 Annual Information Security Symposium (CERIAS ’10). CERIAS - Purdue Univer- sity, West Lafayette, IN, Article 5, 1 pages. http://dl.acm.org/citation.cfm?id= 2788959.2788964
[41] Guang-HongLiu,GangWu,ZhengTao,Jian-MeiShuai,andZhuo-ChunTang. 2008. Vulnerability analysis for x86 executables using genetic algorithm and fuzzing. In Proceedings of the 2008 Convergence and Hybrid Information Technology (ICCIT ’08), Vol. 2. IEEE, 491–497.
[42] Manuel Mendonça and Nuno Neves. 2008. Fuzzing wi-fi drivers to locate secu- rity vulnerabilities. In Proceedings of the 2008 Dependable Computing Conference (EDCC ’08). IEEE, 110–119.
[43] AlessioMerlo,GabrieleCosta,LucaVerderame,andAlessandroArmando.2016. Android vs. SEAndroid. Pervasive Mob. Comput. 30, C (Aug. 2016), 113–131. https://doi.org/10.1016/j.pmcj.2016.01.006
[44] Microsoft. 2017. How to Perform Fuzz Tests with IoSpy and IoAttack. (2017). https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/ how- to- perform- fuzz- tests- with- iospy- and- ioattack.
[45] Barton P. Miller, Louis Fredriksen, and Bryan So. 1990. An Empirical Study of the Reliability of UNIX Utilities. Commun. ACM 33, 12 (Dec. 1990), 32–44. https://doi.org/10.1145/96267.96279
[46] Motorola. 2017. Motorola Android Kernel Sources. (2017). https://github.com/ MotorolaMobilityLLC.
[47] NicholasNethercoteandJulianSeward.2007.Valgrind:AFrameworkforHeavy- weight Dynamic Binary Instrumentation. In Proceedings of the 2007 ACM SIG- PLAN Conference on Programming Language Design and Implementation (PLDI ’07). ACM, New York, NY, USA, 89–100. https://doi.org/10.1145/1250734.1250746
[48] Matthias Neugschwandtner, Paolo Milani Comparetti, Istvan Haller, and Her- bert Bos. 2015. The BORG: Nanoprobing Binaries for Buffer Overreads. In Pro- ceedings of the 2015 ACM Conference on Data and Application Security and Pri- vacy (CODASPY ’15). ACM, New York, NY, USA, 87–97. https://doi.org/10.1145/ 2699026.2699098
[49] Peach. 2017. The Peach Fuzzer. (2017). http://www.peachfuzzer.com/.
[50] Hendrik Post and Wolfgang Küchlin. 2007. Integrated Static Analysis for Linux Device Driver Verification. Springer Berlin Heidelberg, Berlin, Heidelberg, 518–537.
https://doi.org/10.1007/978-3-540-73210-5_27
[51] LLVM Project. 2003. LLVM Bitcode File Format. (2003). http://llvm.org/docs/
BitCodeFormat.html.
[52] FernandoMagnoQuintaoPereira,RaphaelErnaniRodrigues,andVictorHugo
Sperle Campos. 2013. A fast and low-overhead technique to secure programs against integer overflows. In Proceedings of the 2013 IEEE/ACM International Symposium on Code Generation and Optimization (CGO ’13). IEEE Computer Society, 1–11.
[53] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Cojocar, Cristiano Giuffrida, and Herbert Bos. 2017. VUzzer: Application-aware Evolutionary Fuzzing. In Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS ’17). San Diego, CA, USA.
[54] redhat. 2017. Proc device registration. (2017). https://access.redhat.com/ documentation/en- US/Red_Hat_Enterprise_Linux/4/html/Reference_Guide/s2- proc-devices.html.
[55] Juha Röning, Marko Laakso, and Ari Takanen. 2002. PROTOS – Systematic Approach to Eliminate Software Vulnerabilities. Invited presentation at Microsoft Research (May 2002).
[56] Alessandro Rubini and Jonathan Corbet. 2001. Linux device drivers. " O’Reilly Media, Inc.".
[57] Samsung. 2017. Samsung Android Kernel Sources. (2017). http: //opensource.samsung.com/reception/receptionSub.do?method=sub&sub= T&menu_item=mobile&classification1=mobile_phone.
[58] Sergej Schumilo, Ralf Spenneberg, and H Schwartke. 2014. DonâĂŹt trust your USB! How to find bugs in USB device drivers. Blackhat Europe (2014).
[59] Kwan Yong Sim, F-C Kuo, and R Merkel. 2011. Fuzzing the out-of-memory killer on embedded Linux: an adaptive random approach. In Proceedings of the 2011 ACM Symposium on Applied Computing (SAC ’11). ACM, 387–392.
[60] Sony. 2017. Sony Android Kernel Sources. (2017). https://github.com/ sonyxperiadev/kernel.
[61] NickStephens,JohnGrosen,ChristopherSalls,AndrewDutcher,RuoyuWang, Jacopo Corbetta, Yan Shoshitaishvili, Christopher Kruegel, and Giovanni Vigna. 2016. Driller: Augmenting Fuzzing Through Selective Symbolic Execution. In Proceedings of the 2016 Network and Distributed System Security Symposium (NDSS ’16). San Diego, CA, USA.
[62] Jeffrey Vander Stoep. 2016. Android: protecting the kernel. In Linux Security Summit. Linux Foundation.
[63] Linus Torvalds. 2011. C2XML - Converting source code to XML. (2011). http: //c2xml.sourceforge.net/.
[64] Vincent M Weaver and Dave Jones. 2015. perf fuzzer: Targeted fuzzing of the perf event open () system call. Technical Report. Technical Report UMAINEVMW-TR- PERF-FUZZER, University of Maine.
[65] Wiki. 2017. TanenbaumâĂŞTorvalds debate. (2017). https://en.wikipedia.org/ wiki/Tanenbaum%E2%80%93Torvalds_debate.
[66] Xiaomi. 2017. Xiaomi Android Kernel Sources. (2017). https://github.com/ MiCode/Xiaomi_Kernel_OpenSource.
[67] Xst3nZ. 2012. IOCTLbf is just a small tool (Proof of Concept) that can be used to search vulnerabilities in Windows kernel drivers. (2012). https: //code.google.com/archive/p/ioctlbf/.
[68] Michal Zalewski. 2014. Binary fuzzing strategies: what works, what doesn’t. (2014). https://lcamtuf.blogspot.com/2014/08/binary-fuzzing-strategies-what- works.html.
[69] M. Zalewski. 2017. American Fuzzy Lop. (2017). http://lcamtuf .coredump.cx/ afl/technical_details.txt.
