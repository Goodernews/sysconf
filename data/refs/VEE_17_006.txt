
[1] B. Alpern, C. R. Attanasio, J. J. Barton, M. G. Burke, P. Cheng, J.-D.
Choi, A. Cocchi, S. J. Fink, D. Grove, M. Hind, S. F. Hummel, D. Lieber,
V. Litvinov, M. F. Mergen, T. Ngo, J. R. Russell, V. Sarkar, M. J. Serrano,
J. C. Shepherd, S. E. Smith, V. C. Sreedhar, H. Srinivasan, and J. Whaley.
2000. The JalapeñO Virtual Machine. IBM Systems Journal (2000).

[2] AMD-Aparapi.

2017.

http://developer.amd.com/tools-and-

sdks/heterogeneous-computing/aparapi/. (Feb. 2017).

[3] Arvind. 2003. Bluespec: A Language for Hardware Design, Simulation,
Synthesis and Verification Invited Talk. In Proceedings of the First ACM
and IEEE International Conference on Formal Methods and Models for
Co-Design (MEMOCODE ’03). IEEE Computer Society, Washington,
DC, USA, 249–. http://dl.acm.org/citation.cfm?id=823453.823860

[4] Joshua Auerbach, David F. Bacon, Perry Cheng, and Rodric Rabbah.
2010. Lime: A Java-compatible and Synthesizable Language for Het-
erogeneous Architectures. In Proceedings of the ACM International
Conference on Object Oriented Programming Systems Languages and
Applications (OOPSLA ’10). ACM, New York, NY, USA, 89–108. DOI:
http://dx.doi.org/10.1145/1869459.1869469

[5] James Bergstra, Olivier Breuleux, Frédéric Bastien, Pascal Lamblin,
Razvan Pascanu, Guillaume Desjardins, Joseph Turian, David Warde-
Farley, and Yoshua Bengio. 2010. Theano: a CPU and GPU Math
Expression Compiler. In Proceedings of the Python for Scientific Com-
puting Conference (SciPy).

[6] P. J. Besl and H. D. McKay. 1992. A method for registration of 3-D
shapes. IEEE Transactions on Pattern Analysis and Machine Intelligence
14, 2 (Feb 1992), 239–256.

[7] S. M. Blackburn, R. Garner, C. Hoffman, A. M. Khan, K. S. McKinley, R.
Bentzur, A. Diwan, D. Feinberg, D. Frampton, S. Z. Guyer, M. Hirzel, A.
Hosking, M. Jump, H. Lee, J. E. B. Moss, A. Phansalkar, D. Stefanović,
T. VanDrunen, D. von Dincklage, and B. Wiedermann. 2006. The
DaCapo Benchmarks: Java Benchmarking Development and Analysis.
In OOPSLA ’06: Proceedings of the 21st annual ACM SIGPLAN conference
on Object-Oriented Programing, Systems, Languages, and Applications.
ACM Press.

[8] J. Butzke, K. Daniilidis, A. Kushleyev, D. D. Lee, M. Likhachev, C.
Phillips, and M. Phillips. 2012. The University of Pennsylvania MAGIC
2010 multi-robot unmanned vehicle system. Journal of Field Robotics
29, 5 (2012), 745–761.

[9] Bryan Catanzaro, Michael Garland, and Kurt Keutzer. 2011. Copper-
head: Compiling an Embedded Data Parallel Language. In Proceed-
ings of the 16th ACM Symposium on Principles and Practice of Parallel
Programming (PPoPP ’11). ACM, New York, NY, USA, 47–56. DOI:
http://dx.doi.org/10.1145/1941553.1941562

[10] Olivier Chafik. 2017. ScalaCL: Faster Scala: optimizing compiler plugin
+ GPU-based collections (OpenCL). (Feb. 2017). Retrieved March 11,
2017 from http://code.google.com/p/scalacl

[11] Manuel M.T. Chakravarty, Gabriele Keller, Sean Lee, Trevor L. Mc-
Donell, and Vinod Grover. 2011. Accelerating Haskell Array Codes
with Multicore GPUs. In Proceedings of the Sixth Workshop on Declara-
tive Aspects of Multicore Programming (DAMP ’11). ACM, New York,
NY, USA, 3–14. DOI:http://dx.doi.org/10.1145/1926354.1926358

[12] James Clarkson, Christos Kotselidis, Gavin Brown, and Mikel Luján.
2017. Boosting Java Performance using GPGPUs. In Proceedings of the
30th International Conference on Architecture of Computing Systems
(ARCS ’17).

[13] Ronan Collobert, Koray Kavukcuoglu, and Clément Farabet. 2011.
Torch7: A Matlab-like Environment for Machine Learning. In BigLearn,
NIPS Workshop.

[14] Georg Dotzler, Ronald Veldema, and Michael Klemm. 2010. JCudaMP.
In Proceedings of the 3rd International Workshop on Multicore Software
Engineering. DOI:http://dx.doi.org/10.1145/1808954.1808959

[15] EJML. 2017. (Feb. 2017). Retrieved March 11, 2017 from http://ejml.org

81

[16] Juan José Fumero, Michel Steuwer, and Christophe Dubach. 2014. A
Composable Array Function Interface for Heterogeneous Computing
in Java. In Proceedings of ACM SIGPLAN International Workshop on Li-
braries, Languages, and Compilers for Array Programming (ARRAY’14).
ACM, New York, NY, USA, 44:44–44:49. DOI:http://dx.doi.org/10.1145/
2627373.2627381

[17] A. Handa, T. Whelan, J.B. McDonald, and A.J. Davison. 2014. A Bench-
mark for RGB-D Visual Odometry, 3D Reconstruction and SLAM. In
ICRA.

[18] A. Handa, T. Whelan, J.B. McDonald, and A.J. Davison. 2014. A Bench-
mark for RGB-D Visual Odometry, 3D Reconstruction and SLAM. In
IEEE Intl. Conf. on Robotics and Automation, ICRA. Hong Kong, China.
[19] Akihiro Hayashi, Max Grossman, Jisheng Zhao, Jun Shirako, and Vivek
Sarkar. 2013. Accelerating Habanero-Java Programs with OpenCL Gen-
eration. In Proceedings of the 2013 International Conference on Principles
and Practices of Programming on the Java Platform: Virtual Machines,
Languages, and Tools. DOI:http://dx.doi.org/10.1145/2500828.2500840
[20] Sylvain Henry. 2013. ViperVM: A Runtime System for Parallel Func-
tional High-performance Computing on Heterogeneous Architectures.
In Proceedings of the 2Nd ACM SIGPLAN Workshop on Functional High-
performance Computing (FHPC ’13). ACM, New York, NY, USA, 3–12.
DOI:http://dx.doi.org/10.1145/2502323.2502329

[21] Stephan Herhut, Richard L. Hudson, Tatiana Shpeisman, and Jaswanth
Sreeram. 2013. River Trail: A Path to Parallelism in JavaScript. In
Proceedings of the 2013 ACM SIGPLAN International Conference on
Object Oriented Programming Systems Languages &#38; Applications
(OOPSLA ’13). ACM, New York, NY, USA, 729–744. DOI:http://dx.doi.
org/10.1145/2509136.2509516

[22] JEP

243:

Java-Level

JVM Compiler

Interface.

2017.

http://openjdk.java.net/jeps/243. (Feb. 2017).

[23] Java bindings for OpenCL. 2017. (Feb. 2017). Retrieved March 11,

2017 from http://www.jocl.org/

[24] Andreas Klöckner, Nicolas Pinto, Yunsup Lee, Bryan Catanzaro, Paul
Ivanov, and Ahmed Fasih. 2012. PyCUDA and PyOpenCL: A Scripting-
based Approach to GPU Run-time Code Generation. Parallel Comput.
38, 3 (March 2012), 157–174.

[25] Christos Kotselidis, Andrey Rodchenko, Colin Barrett, Andy Nis-
bet, John Mawer, Will Toms, James Clarksonand Cosmin Gorgovan,
Amanieu d’Antras, Yaman Cakmakci, Thanos Stratikopoulos, Sebatian
Werner, Jim Garside, Javier Navaridas, Antoniu Pop, John Goodacre,
, and Mikel Luján. 2016. Project Beehive: A Hardware/Software Co-
designed Stack for Runtime and Architectural Research. In Proceedings
of the 9th International Workshop on Programmability and Architectures
for Heterogeneous Multicores (MULTIPROG ’16).

[26] Geoffrey Mainland and Greg Morrisett. 2010. Nikola: Embedding
Compiled GPU Functions in Haskell. In Proceedings of the Third ACM
Haskell Symposium on Haskell (Haskell ’10). ACM, New York, NY, USA,
67–78. DOI:http://dx.doi.org/10.1145/1863523.1863533

[27] Luigi Nardi, Bruno Bodin, M. Zeeshan Zia, John Mawer, Andy Nisbet,
Paul H. J. Kelly, Andrew J. Davison, Mikel Luján, Michael F. P. O’Boyle,
Graham Riley, Nigel Topham, and Steve Furber. 2015.. Introducing
SLAMBench, a performance and accuracy benchmarking methodology
for SLAM. In ICRA.

[28] Richard A. Newcombe, Shahram Izadi, Otmar Hilliges, David
Molyneaux, David Kim, Andrew J. Davison, Pushmeet Kohli, Jamie
Shotton, Steve Hodges, and Andrew Fitzgibbon. 2011. KinectFusion:
Real-time Dense Surface Mapping and Tracking. In Proceedings of
the 2011 10th IEEE International Symposium on Mixed and Augmented
Reality (ISMAR ’11). IEEE Computer Society, Washington, DC, USA,
127–136. DOI:http://dx.doi.org/10.1109/ISMAR.2011.6092378

[29] Nathaniel Nystrom, Derek White, and Kishen Das. 2011. Firepile: Run-
time Compilation for GPUs in Scala. In Proceedings of the 10th ACM
International Conference on Generative Programming and Component
Engineering (GPCE ’11). ACM, New York, NY, USA, 107–116. DOI:
http://dx.doi.org/10.1145/2047862.2047883

Heterogeneous Managed Runtime Systems: A Computer Vision Case Study

VEE’17, Xi’an, China

[30] OpenJDK. 2017. http://openjdk.java.net/. (Feb. 2017).
[31] P.C. Pratt-Szeliga, J.W. Fawcett, and R.D. Welch. 2012. Rootbeer: Seam-
lessly Using GPUs from Java. In Proceedings of 14th International IEEE
High Performance Computing and Communication Conference on Em-
bedded Software and Systems. DOI:http://dx.doi.org/10.1109/HPCC.
2012.57

[32] Alex Rubinsteyn, Eric Hielscher, Nathaniel Weinman, and Dennis
Shasha. 2012. Parakeet: A Just-in-time Parallel Accelerator for Python.
In Proceedings of the 4th USENIX Conference on Hot Topics in Parallelism
(HotPar’12). USENIX Association, Berkeley, CA, USA, 14–14.

[33] SpecJVM2008. 2017. https://www.spec.org/jvm2008/. (Feb. 2017).
[34] Lukas Stadler, Thomas Würthinger, and Hanspeter Mössenböck. 2014.
Partial Escape Analysis and Scalar Replacement for Java. In Proceedings
of Annual IEEE/ACM International Symposium on Code Generation and
Optimization (CGO ’14). ACM, New York, NY, USA, 165:165–165:174.
DOI:http://dx.doi.org/10.1145/2544137.2544157

[35] Tango. 2017.

(Feb. 2017). Retrieved March 11, 2017 from https:

//get.google.com/tango/

[36] Christian Wimmer, Michael Haupt, Michael L. Van De Vanter, Mick
Jordan, Laurent Daynès, and Douglas Simon. 2013. Maxine: An Ap-
proachable Virtual Machine for, and in, Java. ACM Trans. Archit. Code
Optim. (January 2013).

[37] Yonghong Yan, Max Grossman, and Vivek Sarkar. 2009. JCUDA: A
Programmer-Friendly Interface for Accelerating Java Programs with
CUDA. In Euro-Par 2009 Parallel Processing, Henk Sips, Dick Epema,
and Hai-Xiang Lin (Eds.), Vol. 5704. Springer Berlin Heidelberg.

[38] Wojciech Zaremba, Yuan Lin, and Vinod Grover. 2012. JaBEE: Frame-
work for Object-oriented Java Bytecode Compilation and Execution on
Graphics Processor Units. In Proceedings of the 5th Annual Workshop
on General Purpose Processing with Graphics Processing Units (GPGPU-
5). ACM, New York, NY, USA, 74–83. DOI:http://dx.doi.org/10.1145/
2159430.2159439

[39] Zhengyou Zhang. 1994. Iterative Point Matching for Registration of
Free-form Curves and Surfaces. Int. J. Comput. Vision 13, 2 (Oct. 1994),
119–152.

