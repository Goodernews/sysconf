[1] American Fuzzy Lop. http://lcamtuf.coredump.cx/afl/.
[2] cgit. https://git.zx2c4.com/cgit/about/.
[3] Core Infrastructure Initiative. https://www.coreinfrastructure.org.
[4] Exuberant Ctags. http://ctags.sourceforge.net/.
[5] GitLab. https://about.gitlab.com/.
[6] GitWeb. https://git- scm.com/book/en/v2/Git- on- the- Server- GitWeb.
[7] ISC Software Defect and Security Vulnerability Disclosure Policy.
https://kb.isc.org/article/AA- 00861/164/ISC- Software- Defect- and- Security-
Vulnerability- Disclosure- Policy.html.
[8] Open Crypto Audit Project. https://opencryptoaudit.org.
[9] Undefined Behavior Sanitizer. https://clang.llvm.org/docs/UndefinedBehavior
Sanitizer.html.
[10] Steve Christey and Brian Martin. Buying Into the Bias: Why Vulnerability
Statistics Suck. In BlackHat, 2013.
[11] Zakir Durumeric, Frank Li, James Kasten, Nicholas Weaver, Johanna Amann,
Jethro Beekman, Mathias Payer, David Adrian, Vern Paxson, Michael Bailey, and J. Alex Halderman. The Matter of Heartbleed. In ACM Internet Measurement Conference (IMC), 2014.
[12] Forum of Incident Response and Security Teams. Common Vulnerability Scoring System v3.0: Specification Document. https://www.first.org/cvss/ specification- document.
[13] Stefan Frei. End-Point Security Failures: Insights gained from Secunia PSI Scans. In USENIX Predict Workshop, 2011.
[14] Stefan Frei, Martin May, Ulrich Fiedler, and Bernhard Plattner. Large-Scale Vulnerability Analysis. In SIGCOMM Workshops, 2006.
[15] Google. Sanitizers. https://github.com/google/sanitizers.
[16] Google Open Source Blog. Announcing OSS-Fuzz: Continuous Fuzzing
for Open Source Software. https://opensource.googleblog.com/2016/12/
announcing- oss- fuzz- continuous- fuzzing.html.
[17] Zhongxian Gu, Earl Barr, David Hamilton, and Zhendong Su. Has the Bug Really
Been Fixed? In International Conference on Software Engineering (ICSE), 2010.
[18] Zhen Huang, Mariana D’Angelo, Dhaval Miyani, and David Lie. Talos: Neutral- izing Vulnerabilities with Security Workarounds for Rapid Response. In IEEE
Security and Privacy (S&P), 2016.
[19] Jonathan Corbet. Kernel Vulnerabilities: Old or New?, October 2010.
https://lwn.net/Articles/410606/.
[20] Kees Cook. Security Bug Lifetime, October 2016. https://outflux.net/blog/
archives/2016/10/18/security- bug- lifetime.
[21] Frank Li, Zakir Durumeric, Jakub Czyz, Mohammad Karami, Michael Bailey,
Damon McCoy, Stefan Savage, and Vern Paxson. You’ve Got Vulnerability: Exploring Effective Vulnerability Notifications. In USENIX Security Symposium, 2016.
[22] T. J. McCabe. A Complexity Measure. In IEEE Transaction on Software Engineering, 1976.
[23] MITRE Corporation. Common Vulnerabilities and Exposures. https://cve.mitre.org/.
[24] MITRE Corporation. CWE: Common Weakness Enumeration. https://cwe.mitre.org/.
[25] Nuthan Munaiah and Andrew Meneely. Vulnerability Severity Scoring and Bounties: Why the Disconnect? In International Workshop on Software Analytics (SWAN), 2016.
[26] Emerson Murphy-Hill, Thomas Zimmermann, Christian Bird, and Nachiappan Nagappan. The Design of Bug Fixes. In International Conference on Software Engineering (ICSE), 2013.
[27] Antonio Nappa, Richard Johnson, Leyla Bilge, Juan Caballero, and Tudor Du- mitras. The Attack of the Clones: A Study of the Impact of Shared Code on Vulnerability Patching. In IEEE Security and Privacy (S&P), 2015.
[28] Andy Ozment and Stuart E. Schechter. Milk or Wine: Does Software Security Improve with Age? In USENIX Security Symposium, 2006.
[29] Jihun Park, Miryung Kim, Baishkhi Ray, and Doo-Hwan Bae. An Empirical Study on Supplementary Bug Fixes. In Mining Software Repositories (MSR), 2012.
[30] Henning Perl, Sergej Dechand, Matthew Smith, Daniel Arp, Fabian Yamaguchi,
Konrad Rieck, Sascha Fahl, and Yasemin Acar. VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits. In ACM Conference on Computer and Communications Security (CCS), 2015.
[31] RhodeCode. Version Control Systems Popularity in 2016. https://rhodecode. com/insights/version- control- systems- 2016.
[32] Muhammad Shahzad, M. Zubair Shafiq, and Alex X. Liu. A Large Scale Ex- ploratory Analysis of Software Vulnerability Life Cycles. In International Con- ference on Software Engineering (ICSE), 2012.
[33] Jacek Sliwerski, Thomas Zimmermann, and Andreas Zeller. When Do Changes Induce Fixes. In Mining Software Repositories (MSR), 2005.
[34] Mauricio Soto, Ferdian Thung, Chu-Pan Wong, Claire Le Goues, and David Lo. A Deeper Look into Bug Fixes: Patterns, Replacements, Deletions, and Additions. In Mining Software Repositories (MSR), 2016.
[35] U.S. National Institute of Standards and Technology. CVSS Information. https://nvd.nist.gov/cvss.cfm.
[36] U.S. National Institute of Standards and Technology. National Checklist Program Glossary. https://web.nvd.nist.gov/view/ncp/repository/glossary.
[37] U.S. National Institute of Standards and Technology. National Vulnerability Database. https://nvd.nist.gov/home.cfm.
[38] U.S. National Institute of Standards and Technology. NVD Data Feed. https://nvd.nist.gov/download.cfm.
[39] Zhengzi Xu, Bihuan Chen, Mahinthan Chandramohan, Yang Liu, and Fu Song. SPAIN: Security Patch Analysis for Binaries Towards Understanding the Pain and Pills. In International Conference on Software Engineering (ICSE), 2017.
[40] Zuoning Yin, Ding Yuan, Yuanyuan Zhou, Shankar Pasupathy, and Lakshmi Bairavasundaram. How do Fixes become Bugs? In ACM European Conference on Foundations of Software Engineering (ESEC/FSE), 2011.
[41] Shahed Zaman, Bram Adams, and Ahmed E. Hassan. Security Versus Perfor- mance Bugs: A Case Study on Firefox. In Mining Software Repositories (MSR), 2011.
[42] Hao Zhong and Zhendong Su. An Empirical Study on Real Bug Fixes. In International Conference on Software Engineering (ICSE), 2015.
