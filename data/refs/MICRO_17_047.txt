[1] Advanced Micro Devices, Inc. 2013. Preliminary BIOS and Kernel DeveloperaAZs
Guide (BKDG) for AMD Family 16h Models 00h-0Fh (Kabini) Processors. Chapter
2.6.2 Instruction Based Sampling.

[2] Amittai Aviram, Shu-Chun Weng, Sen Hu, and Bryan Ford. 2010. Efficient
System-Enforced Deterministic Parallelism. CoRR abs/1005.3450 (2010). http:
/farxiv.org/abs/1005.3450

[3] Mark Batty, Scott Owens, Susmit Sarkar, Peter Sewell, and Tjark Weber. 2011.
Mathematizing C++ Concurrency. In Proceedings of the 38th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL
’11). ACM, New York, NY, USA, 55-66. https://doLorg/10.1145/1926385.1926394

[4] Christian Bienia. 2011. Benchmarking Modern Multiprocessors. Ph.D. Dissertation.
Princeton, NJ, USA. Advisor(s) Li, Kai, AAI3445564.

[5] Silas Boyd-Wickizer, Austin T. Clements, Yandong Mao, Aleksey Pesterev,

M. Frans Kaashoek, Robert Morris, and Nickolai Zeldovich. 2010. An Analysis of

Linux Scalability to Many Cores. In Proceedings of the 9th USENIX Conference on

Operating Systems Design and Implementation (OSDI’10). USENIX Association,

Berkeley, CA, USA, 1-8. http://dlacm.org/citation.cfm?id=1924943.1924944

Derek Bruening, Timothy Garnett, and Saman Amarasinghe. 2003. An Infras
tructure for Adaptive Dynamic Optimization. In Proceedings of the International

Symposium on Code Generation and Optimization: Feedback-directed and Runtime

Optimization (CGO ’03), IEEE Computer Society, Washington, DC, USA, 265-275.

http://dLacm.org/citation.cfim?id=776261.776290

[7] Buddhika Chamith, Bo Joel Svensson, Luke Dalessandro, and Ryan R. Newton.

2016. Living on the Edge: Rapid-toggling Probes with Cross-modification on x86.

In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language

Design and Implementation (PLDI ’16). ACM, New York, NY, USA, 16-26. https:

//doi.org/10.1145/2908080.2908084

Austin T. Clements, M. Frans Kaashoek, and Nickolai Zeldovich. 2012. Scalable

Address Spaces Using RCU Balanced Trees. In Proceedings of the Seventeenth

International Conference on Architectural Support for Programming Languages and

Operating Systems (ASPLOS XVII). ACM, New York, NY, USA, 199-210. https:

//doi.org/10.1145/2150976.2150998

Austin T. Clements, M. Frans Kaashoek, and Nickolai Zeldovich. 2013. RadixVM:

Scalable Address Spaces for Multithreaded Applications. In Proceedings of the 8th

ACM European Conference on Computer Systems (EuroSys ’13). ACM, New York,

NY, USA, 211-224. https://doi.org/10.1145/2465351.2465373

[10] Intel Corporation. 2015. Intel VTune Amplifier 2015. (May 2015). https://software.

intel.com/en-us/intel-vtune-amplifier-xe

[11] Ariel Eizenberg, Shiliang Hu, Gilles Pokam, and Joseph Devietti. 2016. Remix:

Online Detection and Repair of Cache Contention for the JVM. In Proceedings
of the 37th ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI ’16). ACM, New York, NY, USA, 251-265. https://doi.org/
10.1145/2908080.2908090

[12] Joseph L. Greathouse, Zhigiang Ma, Matthew I Frank, Ramesh Peri, and Todd
Austin. 2011. Demand-driven Software Race Detection Using Hardware Performance Counters. In Proceedings of the 38th Annual International Symposium on Computer Architecture (ISCA ’11). ACM, New York, NY, USA, 165-176.
https://doLorg/10.1145/2000064.2000084

[13] Stephan M. Giinther and Josef Weidendorfer. 2009. Assessing Cache False Sharing
Effects by Dynamic Binary Instrumentation. In Proceedings of the Workshop on
Binary Instrumentation and Applications (WBIA ’09). ACM, New York, NY, USA,
26-33. https://doLorg/10.1145/1791194.1791198

[14] Lockless Inc. 2015. Lockless Performance. http://locklessinc.com/

[15] International Standard ISO/IEC 14882:2011. 2011. Programming Languages — C++.
International Organization for Standards.

[16] Sanath Jayasena, Saman Amarasinghe, Asanka Abeyweera, Gayashan Amarasinghe, Himeshi De Silva, Sunimal Rathnayake, Xiaogiao Meng, and Yanbin
Liu. 2013. Detection of False Sharing Using Machine Learning. In Proceedings
of the International Conference on High Performance Computing, Networking,
Storage and Analysis (SC 713). ACM, New York, NY, USA, Article 30, 9 pages.
https://doLorg/10.1145/2503210.2503269

[17] David Levinthal. [n. d.]. Performance Analysis Guide for Intel Core i7 Processor
and Intel Xeon 5500 Processors. Intel Corporation.

[18] C.-L. Liu. 2009. False sharing analysis for multithreaded programs. Master’s thesis.
National Chung Cheng University.

[19] Tongping Liu and Emery D. Berger. 2011. SHERIFF: Precise Detection and Automatic Mitigation of False Sharing. In Proceedings of the 2011 ACM International
Conference on Object Oriented Programming Systems Languages and Applications
(OOPSLA °11). ACM, New York, NY, USA, 3-18. https://doi-org/10.1145/2048066.
2048070

[20] Tongping Liu, Charlie Curtsinger, and Emery D. Berger. 2011. Dthreads: Efficient
Deterministic Multithreading. In Proceedings of the Twenty-Third ACM Symposium
on Operating Systems Principles (SOSP ’11). ACM, New York, NY, USA, 327-336.
https://doLorg/10.1145/2043556.2043587

[21] Tongping Liu and Xu Liu. 2016. Cheetah: Detecting False Sharing Efficiently and
Effectively. In Proceedings of the 2016 International Symposium on Code Generation
and Optimization (CGO 2016). ACM, New York, NY, USA, 1-11. https://doi.org/
10.1145/2854038.2854039

[22] Tongping Liu, Chen Tian, Ziang Hu, and Emery D. Berger. 2014. PREDATOR:
Predictive False Sharing Detection. In Proceedings of the 19th ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming (PPoPP ’14). ACM,
New York, NY, USA, 3-14. https://doi.org/10.1145/2555243.2555244

[23] Kai Lu, Xu Zhou, Tom Bergan, and Xiaoping Wang. 2014. Efficient Deterministic
Multithreading Without Global Barriers. In Proceedings of the 19th ACM SIGPLAN
Symposium on Principles and Practice of Parallel Programming (PPoPP ’14). ACM,
New York, NY, USA, 287-300. https://doLorg/10.1145/2555243.2555252

[24] Liang Luo, Akshitha Sriraman, Brooke Fugate, Shiliang Hu, Gilles Pokam, Chris
Newburn, and Joseph Devietti. 2016. LASER: Light, Accurate Sharing Detection
and Repair. In IEEE International Symposium on High Performance Computer
Architecture (HPCA ’16).

[25] Luc Maranget, Susmit Sarkar, and Peter Sewell. 2012. A Tutorial Introduction
to the ARM and POWER Relaxed Memory Models. Technical Report. INRIA and
University of Cambridge. https://www.cl.cam.ac.uk/~pes20/ppe-supplemental/
test7 pdf

C. DeLozier et al.

[26] Joe Mario. 2016. C2C - False Sharing Detection in Linux Perf. (September 2016).
https://joemario. github.io/blog/2016/09/01/c2c-blog/

[27] Robert Martin, John Demme, and Simha Sethumadhavan. 2012. TimeWarp:
Rethinking Timekeeping and Performance Monitoring Mechanisms to Mitigate
Side-channel Attacks. In Proceedings of the 39th Annual International Symposium
on Computer Architecture (ISCA ’12), IEEE Computer Society, Washington, DC,
USA, 118-129. http://dLacm.org/citation.cfim?id=2337159.2337173

[28] memee. 2012. false sharing in  boost::detail::spinlock_pool?
(June 2012). http://stackoverflow.com/questions/11037655/
false-sharing-in-boostdetailspinlock-pool

[29] Timothy Merrifield and Jakob Eriksson. 2013. Increasing Concurrency in Deterministic Runtimes with Conversion. (2013).

[30] Mihir Nanavati, Mark Spear, Nathan Taylor, Shriram Rajagopalan, Dutch T. Meyer,
William Aiello, and Andrew Warfield. 2013. Whose Cache Line is It Anyway?:
Operating System Support for Live Detection and Repair of False Sharing. In
Proceedings of the 8th ACM European Conference on Computer Systems (EuroSys
°13). ACM, New York, NY, USA, 141-154. https://doiorg/10.1145/2465351.2465366

[31] Colby Ranger, Ramanan Raghuraman, Arun Penmetsa, Gary Bradski, and Christos Kozyrakis. 2007. Evaluating MapReduce for Multi-core and Multiprocessor
Systems. In Proceedings of the 2007 IEEE 13th International Symposium on High Performance Computer Architecture (HPCA ’07). EEE Computer Society, Washington,
DC, USA, 13-24. https://doiorg/10.1109/HPCA.2007.346181

[32] Mikael Ronstrom. 2012. MySQL team increases scalability by
>50% for Sysbench OLTP RO in MySQL 5.6 labs release april
2012. (April 2012). http://mikaelronstrom.blogspot.com/2012/04/
mysql-team-increases-scalability-by-50.html

[33] Susmit Sarkar, Peter Sewell, Jade Alglave, Luc Maranget, and Derek Williams.
2011. Understanding POWER Multiprocessors. In Proceedings of the 32Nd ACM
SIGPLAN Conference on Programming Language Design and Implementation (PLDI
°11). ACM, New York, NY, USA, 175-186. https://doiorg/10.1145/1993498.1993520

[34] Martin Schindewolf. 2007. Analysis of Cache Misses Using SIMICS. Master’s thesis.
Institute for Computing Systems Architecture, University of Edinburgh.

[35] Peter Sewell, Susmit Sarkar, Scott Owens, Francesco Zappa Nardelli, and Magnus O. Myreen. 2010. X86-TSO: A Rigorous and Usable Programmer’s Model
for x86 Multiprocessors. Commun. ACM 53, 7 (July 2010), 89-97. https:
//doi.org/10.1145/1785414.1785443

[36] David L. Weaver and Tom Germond (Eds.). 1994, SPARC Architecture Manual
(Version 9). PTR Prentice Hall.

[37] Vince Weaver. 2015. perf events Library Man Page. http://web.eece.maine.edu/
~vweaver/projects/perf_events/perf_event_open-html

[38] Steven Cameron Woo, Moriyoshi Ohara, Evan Torrie, Jaswinder Pal Singh, and
Anoop Gupta. 1995. The SPLASH-2 Programs: Characterization and Methodological Considerations. In Proceedings of the 22Nd Annual International Symposium on Computer Architecture (ISCA °95). ACM, New York, NY, USA, 24-36.
hitps://doi.org/10.1145/223982.223990

[39] Qin Zhao, David Koh, Syed Raza, Derek Bruening, Weng-Fai Wong, and Saman
Amarasinghe. 2011. Dynamic Cache Contention Detection in Multi-threaded
Applications. In Proceedings of the 7th ACM SIGPLAN/SIGOPS International Con
ference on Virtual Execution Environments (VEE ’11). ACM, New York, NY, USA,
27-38. https://doi.org/10.1145/1952682.1952688