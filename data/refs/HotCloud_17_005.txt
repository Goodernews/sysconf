[1] Ç IÇEK , E., BARTHE , G., G ABOARDI , M., G ARG , D., AND
H OFFMANN , J. Relational Cost Analysis. In ACM SIGPLAN
Symposium on Principles of Programming Languages (POPL)
(Jan. 2017), pp. 316–329.
[2] Ceph. http://ceph.com.
[3] C OPPA , E., AND F INOCCHI , I. On Data Skewness, Stragglers,
and MapReduce Progress Indicators. In ACM Symposium on
Cloud Computing (SOCC) (Aug. 2015), pp. 139–152.
[4] G ORDON , A. D., H ENZINGER , T. A., N ORI , A. V., AND R A JAMANI , S. K. Probabilistic programming. In Proceedings of the
on Future of Software Engineering (New York, NY, USA, 2014),
FOSE 2014, ACM, pp. 167–181.
[5] GNU gprof.
gprof/.

https://sourceware.org/binutils/docs/

[6] G ULWANI , S., JAIN , S., AND KOSKINEN , E. Control-flow Refinement and Progress Invariants for Bound Analysis. In ACM
SIGPLAN Conference on Programming Language Design and
Implementation (PLDI) (June 2009), pp. 375–385.
[7] G ULWANI , S., M EHRA , K. K., AND C HILIMBI , T. SPEED: Precise and Efficient Static Estimation of Program Computational
Complexity. In ACM SIGPLAN Symposium on Principles of Programming Languages (POPL) (Jan. 2009), pp. 127–139.
[8] H OFFMANN , J., A EHLIG , K., AND H OFMANN , M. Multivariate
Amortized Resource Analysis. In ACM SIGPLAN Symposium on
Principles of Programming Languages (POPL) (Jan. 2011).
[9] H OFFMANN , J., DAS , A., AND W ENG , S.-C. Towards Automatic Resource Bound Analysis for OCaml. In ACM SIGPLAN
Symposium on Principles of Programming Languages (POPL)
(Jan. 2017), pp. 359–373.
[10] H OFMANN , M., AND J OST, S. Static Prediction of Heap Space
Usage for First-order Functional Programs. In ACM SIGPLAN
Symposium on Principles of Programming Languages (POPL)
(Jan. 2003), pp. 185–197.
[11] J IN , G., S ONG , L., S HI , X., S CHERPELZ , J., AND L U , S. Understanding and Detecting Real-World Performance Bugs. In
ACM SIGPLAN Conference on Programming Language Design
and Implementation (PLDI) (2012), pp. 77–88.
[12] J OST, S., H AMMOND , K., L OIDL , H.-W., AND H OFMANN , M.
Static Determination of Quantitative Resource Usage for HigherOrder Programs. In ACM SIGPLAN Symposium on Principles of
Programming Languages (POPL) (Jan. 2010), pp. 237–236.
[13] JProfiler. https://www.ej-technologies.com/products/
jprofiler/overview.html.
[14] OpenStack. https://www.openstack.org/.
[15] ownCloud. https://owncloud.org.
[16] P ERL , S. E., AND W EIHL , W. E. Performance Assertion Checking. In ACM Symposium on Operating Systems Principles (SOSP)
(Dec. 1993), pp. 134–145.
[17] R EYNOLDS , P., K ILLIAN , C. E., W IENER , J. L., M OGUL ,
J. C., S HAH , M. A., AND VAHDAT, A. Pip: Detecting the Unexpected in Distributed Systems. In USENIX Symposium on Networked Systems Design and Implementation (NSDI) (May 2006),
pp. 115–128.
[18] runkit. http://php.net/manual/en/book.runkit.php.
[19] Z APARANUKS , D., AND H AUSWIRTH , M. Algorithmic Profiling. In ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI) (June 2012), pp. 67–76.