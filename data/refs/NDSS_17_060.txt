[1] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and J. Pewny.
You Can Run but You Can’t Read: Preventing Disclosure Exploits in
Executable Code. CCS’14.

[2] A. Barresi, K. Razavi, M. Payer, and T. R. Gross. CAIN: Silently

Breaking ASLR in the Cloud. WOOT’15.

[3] D. B. Bartolini, P. Miedl, and L. Thiele. On the Capacity of Thermal

Covert Channels in Multicores. EuroSys’16.

[4] R. Bhargava, B. Serebrin, F. Spadini, and S. Manne. Accelerating Two-

dimensional Page Walks for Virtualized Systems. ASPLOS XIII.

[5] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazi`eres, and D. Boneh.

Hacking Blind. SP’14.

[6] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida. Dedup Est Machina:

Memory Deduplication as an Advanced Exploitation Vector. SP’16.

[7] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.-
R. Sadeghi. Leakage-resilient layout randomization for mobile devices.
NDSS’16.

[8] Microsoft/ChakraCore/pull/1759.

https://github.com/

[9] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida.
StackArmor: Comprehensive Protection From Stack-based Memory
Error Vulnerabilities for Binaries. NDSS.

[10] Shared Array Buffers, Atomics and Futex APIs.

chromestatus.com/feature/4570991992766464.

https://www.

[11] D. Cock, Q. Ge, T. Murray, and G. Heiser. The Last Mile: An Empirical

Study of Timing Channels on seL4. CCS’14.

[12] S. Crane, A. Homescu, S. Brunthaler, P. Larsen, and M. Franz. Thwart-
ing Cache Side-Channel Attacks Through Dynamic Software Diversity.
NDSS’15.

[13] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz. Readactor: Practical Code Randomization
Resilient to Memory Disclosure. NDSS.

[14] CVE-2016-3272. https://goo.gl/d8jqgt.
[15] T. H. Dang, P. Maniatis, and D. Wagner. The performance cost of

shadow stacks and stack canaries. ASIA CCS’15.

[16] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose.
to (Just-In-Time) Return-

Isomeron: Code Randomization Resilient
Oriented Programming. NDSS’15.
[17] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang, H. Shrobe,
S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi. Missing the
Point(er): On the Effectiveness of Code Pointer Integrity. SP’15.


[18] D. Evtyushkin, D. Ponomarev, and N. Abu-Ghazaleh.

Jump Over

ASLR: Attacking Branch Predictors to Bypass ASLR. MICRO’16.

[19] R. Gawlik, B. Kollenda, P. Koppe, B. Garmany, and T. Holz. Enabling
Client-Side Crash-Resistance to Overcome Diversiﬁcation and Informa-
tion Hiding. NDSS’16.

[20] D. Genkin, L. Pachmanov, I. Pipman, E. Tromer, and Y. Yarom. ECDSA
Key Extraction from Mobile Devices via Nonintrusive Physical Side
Channels. CCS’16.

[21] C. Giraud and H. Thiebeauld. A Survey on Fault Attacks. CARDIS’04.
[22] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced Operating
System Security Through Efﬁcient and Fine-grained Address Space
Randomization. SEC’12.

[23] E. Goktas, R. Gawlik, B. Kollenda, E. Athanasopoulos, G. Portokalidis,
C. Giuffrida, and H. Bos. Undermining Entropy-based Information
Hiding (And What to do About it). SEC’16.

[24] M. Gorman. Understanding the Linux virtual memory manager.
[25] D. Gruss, C. Maurice, A. Fogh, M. Lipp, and S. Mangard. Prefetch
Side-Channel Attacks: Bypassing SMAP and Kernel ASLR. CCS’16.
[26] D. Herman, L. Wagner, and A. Zakai. asm.js. http://asmjs.org/spec/

latest/.

[27] R. Hund, C. Willems, and T. Holz. Practical Timing Side Channel

Attacks Against Kernel Space ASLR. SP’13.
[28] Intel 64 and IA-32 Architectures Optimization Reference Manual. Order
Number: 248966-032, January 2016.
[29] Intel 64 and IA-32 Architectures Software Developer’s Manual. Order
Number: 253668-060US, September 2016.

[30] G. Irazoqui, M. Inci, T. Eisenbarth, and B. Sunar. Wait a Minute! A

fast, Cross-VM Attack on AES. RAID’14.

[31] G. Irazoqui, M. S. Inci, T. Eisenbarth, and B. Sunar. Lucky 13 Strikes

Back. ASIA CCS’15.

[32] Y. Jang, S. Lee, and T. Kim. Breaking kernel address space layout

randomization with intel tsx. CCS’16.

[33] T. Kim, M. Peinado, and G. Mainar-Ruiz. STEALTHMEM: System-
level Protection Against Cache-based Side Channel Attacks in the
Cloud. SEC’12.

[34] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson,
K. Lai, and O. Mutlu. Flipping Bits in Memory Without Accessing
Them: An Experimental Study of DRAM Disturbance Errors. ISCA’14.
[35] D. Kohlbrenner and H. Shacham. Trusted browsers for uncertain times.

SEC’16, 2016.

[36] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song.

Code-pointer integrity. OSDI’14.

15

[37] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, and D. Song. Poster:
Getting the point (er): On the feasibility of attacks on code-pointer
integrity. SP’15.

[38] B. Lee, C. Song, T. Kim, and W. Lee. Type casting veriﬁcation:

Stopping an emerging attack vector. SEC’15.

[39] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee. Last-level cache

side-channel attacks are practical. SP’15.
[40] LKML. Page Colouring. goo.gl/7o101i.
[41]

J. Longo, E. De Mulder, D. Page, and M. Tunstall. SoC It to EM:
ElectroMagnetic Side-Channel Attacks on a Complex System-on-Chip.
CHES’15.

[42] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee. ASLR-Guard:

Stopping Address Space Leakage for Code Reuse Attacks. CCS’15.

[43] R. Martin, J. Demme, and S. Sethumadhavan. TimeWarp: Rethinking
Timekeeping and Performance Monitoring Mechanisms to Mitigate
Side-channel Attacks. ISCA’12.

[44] C. Maurice, N. L. Scouarnec, C. Neumann, O. Heen, and A. Francillon.
Reverse Engineering Intel Last-Level Cache Complex Addressing Using
Performance Counters. RAID’15.

[45] M. Miller and K. Johnson. Exploit Mitigation Improvements in Win 8.

BH-US’12.

[46] Microsoft Security Bulletin MS16-092. https://technet.microsoft.com/

library/security/MS16-092.

[47] A. Oikonomopoulos, C. Giuffrida, E. Athanasopoulos, and H. Bos.

Poking Holes into Information Hiding. SEC’16.

[48] Y. Oren, V. P. Kemerlis, S. Sethumadhavan, and A. D. Keromytis. The
Spy in the Sandbox: Practical Cache Attacks in JavaScript and their
Implications. CCS’15.

[49] D. A. Osvik, A. Shamir, and E. Tromer. Cache Attacks and Counter-

measures: The Case of AES. CT-RSA’06.

[50] M. Payer. HexPADS: A Platform to Detect “Stealth” Attacks. ES-

SoS’16.

[51] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and H. Bos.
Flip Feng Shui: Hammering a Needle in the Software Stack. SEC’16.

[52] SafeStack. http://clang.llvm.org/docs/SafeStack.html.
[53] Chromium issue 508166. https://goo.gl/KalbZx.
[54] F. J. Serna. The Info Leak Era on Software Exploitation. BH-US’12.
[55] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh.

On the Effectiveness of Address-space Randomization. CCS’04.

[56] ECMAScript Shared Memory. https://goo.gl/WXpasG.
[57] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and
A. R. Sadeghi. Just-In-Time Code Reuse: On the Effectiveness of Fine-
Grained Address Space Layout Randomization. SP’13.
[58] A. Sotirov. Heap Feng Shui in JavaScript. BH-EU’07.
[59] D. Stefan, P. Buiras, E. Z. Yang, A. Levy, D. Terei, A. Russo, and
D. Mazi`eres. Eliminating Cache-Based Timing Attacks with Instruction-
Based Scheduling. ESORICS’13.

[60] A. Tang, S. Sethumadhavan, and S. Stolfo. Heisenbyte: Thwarting
Memory Disclosure Attacks Using Destructive Code Reads. CCS’15.
´U. Erlingsson,
L. Lozano, and G. Pike. Enforcing forward-edge control-ﬂow integrity
in gcc & llvm. SEC’14.

[61] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway,

[62] V. van der Veen, Y. Fratantonio, M. Lindorfer, D. Gruss, C. Maurice,
G. Vigna, H. Bos, K. Razavi, and C. Giuffrida. Drammer: Deterministic
Rowhammer Attacks on Mobile Platforms. CCS’16.

[63] VMWare. Security considerations and disallowing inter-Virtual Ma-

chine Transparent Page Sharing.

[64] D. Weston and M. Miller. Windows 10 Mitigation Improvements. BH-

US’16.

[65] Y. Yarom and K. Falkner. FLUSH+RELOAD: A High Resolution, Low

Noise, L3 Cache Side-channel Attack. SEC’14.

[66] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar. Native Client: A Sandbox
for Portable, Untrusted x86 Native Code. SP’09.

[67] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. Cross-Tenant Side-

Channel Attacks in PaaS Clouds. CCS’14.
