[1] V. Aurora. Soft update,
https:/Awn.net/Articles/339337/, 2009.

[2] V. Chidambaram, T. S. Pillai, A. C. Arpaci-Dusseau, and.
R. H. Arpaci-Dusseau. Optimistic crash consistency.
In Proceedings of the Twenty-Fourth ACM Symposium
on Operating Systems Principles, pages 228-243. ACM,
2013.

[3] V. Chidambaram, T. Sharma, A. C. Arpaci-Dusseau, and.
R. H. Arpaci-Dusseau. Consistency without ordering. In
FAST, page 9, 2012.

[4] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee,
D. Burger, and D. Coetzee. Better i/o through byteaddressable, persistent memory. In Proceedings of the
ACM SIGOPS 22nd symposium on Operating systems
principles, pages 133-146. ACM, 2009.

hard problems.

[5] Supporting filesystems in persistent memory.
https:/Awn.net/Articles/610174/, 2014.
[6] Support ext4 on nv-dimms.

http://lwn.net/Articles/588218/, 2014.

[7] M. Dong, Q. Yu, X. Zhou, Y. Hong, H. Chen, and B. Zang.
Rethinking benchmarking for nvm-based file systems. In
Proceedings of the 7th ACM SIGOPS Asia-Pacific Workshop on Systems, pages 20:1-20:7, 2016.

[8] S. R. Dulloor, $. Kumar, A. Keshavamurthy, P. Lantz,
D. Reddy, R. Sankaran, and J. Jackson. System software
for persistent memory. In Proceedings of the Ninth European Conference on Computer Systems, 2014.

[9] C. Frost, M. Mammarella, E. Kohler, A. de los Reyes,
S. Hovsepian, A. Matsuoka, and L. Zhang. Generalized
file system dependencies. In SOSP, pages 307-320. ACM,
2007.

[10] G. R. Ganger, M. K. McKusick, C. A. Soules, and Y. N.
Patt. Soft updates: a solution to the metadata update
problem in file systems. ACM Transactions on Computer
Systems (TOCS), 18(2):127-153, 2000.

[11] G. R. Ganger and Y. N. Patt. Metadata update performance
in file systems. In Proceedings of the Ist USENIX conference on Operating Systems Design and Implementation.
USENIX Association, 1994.

[12] R. Hagmann. Reimplementing the cedar file system using
logging and group commit. In SOSP. ACM, 1987.

[13] V. Henson. Khb: A_ filesystems reading list.
https:/Awn.net/Articles/196292/, 2006.

[14] D. Hitz, J. Lau, and M. A. Malcolm. File system design for
an nfs file server appliance. In USENIX winter, volume 94,
1994.

[15] H. Kimura. Foedus: Oltp engine for a thousand cores
and nvram. In Proceedings of the 2015 ACM SIGMOD
International Conference on Management of Data, pages
691-706. ACM, 2015.

[16] A. Kolli, S. Pelley, A. Saidi, P. M. Chen, and T. F. Wenisch.
High-performance transactions for persistent memories. In
Proceedings of the Twenty-First International Conference

730 2017 USENIX Annual Technical Conference

on Architectural Support for Programming Languages and
Operating Systems, pages 399-411. ACM, 2016.

[17] R. Konishi, Y. Amagai, K. Sato, H. Hifumi, S. Kihara, and
S. Moriai. The linux implementation of a log-structured
file system. ACM SIGOPS Operating Systems Review,
40(3):102-107, 2006.

[18] E. Kustarz. Zfs-the last word in file systems.
http://www. opensolaris.org/os/community/zfs/, 2008.

[19] C. Lee, D. Sim, J. Hwang, and S. Cho. F2fs: A new file
system for flash storage. In 13th USENIX Conference on
File and Storage Technologies (FAST 15), pages 273-286,
2015.

[20] E. Lee, H. Bahn, and S. H. Noh. Unioning of the buffer
cache and journaling layers with non-volatile memory. In
USENIX Conference on File and Storage Technologies,
pages 73-80, 2013.

[21] R. Liu and H. Chen. Ssmalloc: a low-latency, localityconscious memory allocator with stable performance scalability. In Proceedings of the Asia-Pacific Workshop on
Systems, page 15. ACM, 2012.

[22] K. McKusick. Journaling soft updates. In BSDCan, 2010.

[23] M. K. McKusick, G. R. Ganger, et al. Soft updates: A
technique for eliminating most synchronous writes in the
fast filesystem. In USENIX Annual Technical Conference,
FREENIX Track, pages 1-17, 1999.

[24] C. Min, K. Kim, H. Cho, S.-W. Lee, and Y. I. Eom. Sfs:
random write considered harmful in solid state drives. In
FAST, page 12, 2012.

[25] J. Ou, J. Shu, and Y. Lu. A high performance file system
for non-volatile main memory. In European Conference
on Computer Systems, 2016.

[26] S. Pelley, P. M. Chen, and T. F Wenisch. Memory persistency. In ISCA, pages 265-276. ACM, 2014.

[27] C. PM, N. WT, S. Chandra, C. Aycock, G. Rajamani, and
D. Lowell. The rio file cache: Surviving operating system
crashes. In ASPLOS, 1996.

[28] V. Prabhakaran, L. N. Bairavasundaram, N. Agrawal,
H. S. Gunawi, A. C. Arpaci-Dusseau, and R. H. ArpaciDusseau. Iron file systems. In Proceedings of the Twentieth ACM Symposium on Operating Systems Principles,
SOSP â€™05, pages 206-220. ACM, 2005.

[29] V. Prabhakaran, T. L. Rodeheffer, and L. Zhou. Transactional flash. In OSDI, pages 147-160, 2008.

[30] O. Rodeh, J. Bacik, and C. Mason. Btrfs: The linux b-tree
filesystem. ACM Transactions on Storage (TOS), 9(3):9,
2013.

[31] M. Rosenblum and J. K. Ousterhout. The design and implementation of a log-structured file system. ACM Transactions on Computer Systems (TOCS), 10(1):26-52, 1992.

[32] A. M.  Rudoff. Deprecating the pcommit instruction. https://software.intel.com/enus/blogs/2016/09/12/deprecate-pcommit-instruction,
2016.

[33] S. M. Rumble, A. Kejriwal, and J. Ousterhout. Logstructured memory for dram-based storage. In Proceed
USENIX Association
ings of the 12th USENIX Conference on File and Storage
Technologies (FAST 14), pages 1-16, 2014.

[34] M. Seltzer, K. Bostic, M. K. McKusick, and C. Staelin. An
implementation of a log-structured file system for unix. In
Proceedings of the USENIX Winter 1993 Conference Proceedings on USENIX Winter 1993 Conference Proceedings, pages 3-3. USENIX Association, 1993.

[35] M. I. Seltzer, G. R. Ganger, M. K. McKusick, K. A. Smith,
C. A. Soules, and C. A. Stein. Journaling versus soft updates: Asynchronous meta-data protection in file systems.
In USENIX Annual Technical Conference, General Track,
pages 71-84, 2000.

[36] M. I. Seltzer, G. R. Ganger, M. K. McKusick, K. A. Smith,
C. A.N. Soules, and C. A. Stein. Journaling versus soft updates: Asynchronous meta-data protection in file systems.
In Usenix ATC, 2000.

[37] D. Sengupta, Q. Wang, H. Volos, L. Cherkasova, J. Li,
G. Magalhaes, and K. Schwan. A framework for emulating
non-volatile memory systemswith different performance
characteristics. In Proceedings of the 6th ACM/SPEC
International Conference on Performance Engineering,
pages 317-320. ACM, 2015.

[38] E. Sha, X. Chen, Q. Zhuge, L. Shi, and W. Jiang. Designing an efficient persistent in-memory file system. In
IEEE Non-Volatile Memory System and Applications Symposium, pages 1-6, 2015.

[39] Silicon Graphics International Corp. Xfs:
A high-performance journaling file system.
http://oss.sgi.com/projects/xfs, 2012.

[40] S. Venkataraman, N. Tolia, P. Ranganathan, R. H. Campbell, et al. Consistent and durable data structures for non
USENIX Association

volatile byte-addressable memory. In FAST, volume 11,
pages 61-75, 2011.

[41] H. Volos, S. Nalli, S. Panneerselvam, V. Varadarajan,
P. Saxena, , and M. M. Swift. Aerie: Flexible file-system
interfaces to storage-class memory. In Proceedings of the
Ninth Euro- pean Conference on Computer Systems (EuroSys 14), page 14:114:14, 2014.

[42] H. Volos, A. J. Tack, and M. M. Swift. Mnemosyne:
Lightweight persistent memory. ACM SIGPLAN Notices,
46(3):91-104, 2011.

[43] M. Wu and W. Zwaenepoel. envy: A non-volatile, main
memory storage system. In ASPLOS, 1994.

[44] X. Wu and A. Reddy. Scmfs: a file system for storage class
memory. In Proceedings of 2011 International Conference
for High Performance Computing, Networking, Storage
and Analysis, page 39. ACM, 2011.

[45] J. Xu and S. Swanson. Nova: A log-structured file system for hybrid volatile/non-volatile main memories. In
USENIX Conference on File and Storage Technologies,
pages 323-338, 2016.

[46] J. Yang, Q. Wei, C. Chen, C. Wang, K. L. Yong, and B. He.
Ny-tree: Reducing consistency cost for nvm-based single
level systems. In 13th USENIX Conference on File and
Storage Technologies (FAST 15), pages 167-181, 2015.

[47] J. Zhao, S. Li, D. H. Yoon, Y. Xie, and N. P. Jouppi. Kiln:
Closing the performance gap between systems with and
without persistence support. In Proceedings of the 46th
Annual IEEE/ACM International Symposium on Microarchitecture, pages 421-432. ACM, 2013.

