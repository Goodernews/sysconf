[1] Esh - statistical similarity of binaries. http: //binsim.com.

[2] gcc optimizations options. https: //gcc.gnu.org/onlinedocs/

gcc/Optimize-Options.html.

[3] Llvm’s analysis and transform passes. http: //llvm.org/
docs/Passes.html.

[4] Mcsema. https://github.com/trailofbits/mcsema.
[5] Shellshock vulnerability cve information. https://cve.

mitre .org/cgi-bin/cvename .cgi?name=CVE- 2014-6271.

[6] Yard - yet another roc drawer. http://github.com/

ntamas/yard.

[7] zynamics bindiff. http: //www.zynamics.com/bindiff .
html.

[8] zynamics bindiff manual - understanding bindiff. http:
//waw.zynamics.com/bindiff/manual/index.html#
chapUnderstanding.

[9] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz. Bap: A
binary analysis platform. In Proceedings of the 23rd International Conference on Computer Aided Verification, CAV’ 11,
pages 463-469, Berlin, Heidelberg, 2011. Springer-Verlag.

[10] Y. David, N. Partush, and E. Yahav. Statistical similarity of
binaries. In Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation,
PLDI ’16, 2016.

[11] Y. David and E. Yahav. Tracelet-based code search in executables. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation,
PLDI ’14, pages 349-360, New York, NY, USA, 2014. ACM.

[12] J. Duan and J. Regehr. Correctness proofs for device drivers
in embedded systems. In 5th International Workshop on Systems Software Verification, SSV’ 10, Vancouver, BC, Canada,
October 6-7, 2010, 2010.

[13] M. Egele, M. Woo, P. Chapman, and D. Brumley. Blanket execution: Dynamic similarity testing for program binaries and
components. In Proceedings of the 23rd USENIX Security
Symposium, San Diego, CA, USA, August 20-22, 2014., pages
303-317, 2014.

[14] S. Eschweiler, K. Yakdan, and E. Gerhards-Padilla. discovre:
Efficient cross-architecture identification of bugs in binary
code. In 23nd Annual Network and Distributed System Security Symposium, NDSS 2016, San Diego, California, USA,
February 21-24, 2016, 2016.

[15] Q. Feng, R. Zhou, C. Xu, Y. Cheng, B. Testa, and H. Yin.
Scalable graph-based bug search for firmware images. In Proceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security, Vienna, Austria, October 2428, 2016, pages 480-491, 2016.

[16] C. Hawblitzel, S. K. Lahiri, K. Pawar, H. Hashmi, S. Gokbulut, L. Fernando, D. Detlefs, and S. Wadsworth. Will you still
compile me tomorrow? static cross-version compiler validation. In Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the
Foundations of Software Engineering, ESEC/FSE’13, Saint Petersburg, Russian Federation, August 18-26, 2013, pages
191-201, 2013.

[17] E. R. Jacobson, N. Rosenblum, and B. P. Miller. Labeling
library functions in stripped binaries. In Proceedings of the
10th ACM SIGPLAN-SIGSOFT Workshop on Program Analysis for Software Tools, PASTE 711, pages 1-8, New York,
NY, USA, 2011. ACM.

[18] J. Jang, D. Brumley, and S. Venkataraman. BitShred : Feature
Hashing Malware for Scalable Triage and Semantic Analysis.
Proceedings of the 18th ACM Conference on Computer and
Communications Security, pages 309-320, 2011.

[19] W. M. Khoo, A. Mycroft, and R. Anderson. Rendezvous: A
search engine for binary code. In Proceedings of the 10th
Working Conference on Mining Software Repositories, MSR
*13, pages 329-338, Piscataway, NJ, USA, 2013. IEEE Press.

[20] S. K. Lahiri, C. Hawblitzel, M. Kawaguchi, and H. Rebélo.
Symdiff: A language-agnostic semantic diff tool for imperative programs. In CAV, pages 712-717, 2012.

[21] K.R. M. Leino. This is boogie 2. http: //microsoft.com/
en-us/research/publication/this-is-boogie-2-2/.

[22] N. Nethercote and J. Seward. Valgrind: a framework for
heavyweight dynamic binary instrumentation. In PLDI, pages
89-100, 2007.

[23] B. H. Ng and A. Prakash. Expose: Discovering potential binary code re-use. In Computer Software and Applications
Conference (COMPSAC), 2013 IEEE 37th Annual, pages
492-501, July 2013.

[24] N. Partush and E. Yahav. Abstract semantic differencing for
numerical programs. In Static Analysis: 20th International
Symposium, SAS 2013, Seattle, WA, USA, June 20-22, 2013.
Proceedings, pages 238-258. Springer, 2013.

[25] N. Partush and E. Yahav. Abstract semantic differencing via
speculative correlation. In Proceedings of the 2014 ACM
International Conference on Object Oriented Programming
Systems Languages & Applications, OOPSLA 2014, part of
SPLASH 2014, Portland, OR, USA, October 20-24, 2014,
pages 811-828, 2014.

[26] S. Person, M. B. Dwyer, S. G. Elbaum, and C. S. Pasareanu.
Differential symbolic execution. In SIGSOFT FSE, pages
226-237, 2008.

[27] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz.
Cross-architecture bug search in binary executables. In 20/5
IEEE Symposium on Security and Privacy, SP 2015, San Jose,
CA, USA, May 17-21, 2015, pages 709-724, 2015.

[28] J. Pewny, F. Schuster, L. Bernhard, T. Holz, and C. Rossow.
Leveraging semantic signatures for bug search in binary programs. In Proceedings of the 30th Annual Computer Security
Applications Conference, ACSAC 14, pages 406-415, New
York, NY, USA, 2014. ACM.

[29] D. A. Ramos and D. R. Engler. Practical, low-effort equivalence verification of real code. In Proceedings of the 23rd
International Conference on Computer Aided Verification,
CAV’ 11, pages 669-685, Berlin, Heidelberg, 2011. SpringerVerlag.
[30] N. Rosenblum, B. P. Miller, and X. Zhu. Recovering the
Toolchain Provenance of Binary Code Categories and Subject Descriptors. 20th International Symposium on Software
Testing and Analysis (ISSTA), page 11, 2011.

[31] R. Sharma, E. Schkufza, B. Churchill, and A. Aiken. Datadriven equivalence checking. In Proceedings of the 2013
ACM SIGPLAN International Conference on Object Oriented
Programming Systems Languages &#38; Applications, OOPSLA °13, pages 391-406, New York, NY, USA, 2013. ACM.

[32] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and
G. Vigna. Sok: (state of) the art of war: Offensive techniques
in binary analysis. 2016.
[33] R. Smith and S. Horwitz. Detecting and measuring similarity
in code clones. In Proceedings of the International Workshop
on Software Clones (IWSC), 2009.

[34] S. J. Swamidass, C. Azencott, K. Daily, and P. Baldi. A
CROC stronger than ROC: measuring, visualizing and optimizing early retrieval. Bioinformatics, 26(10):1348-1356,
2010.

[35] M. Weiser. Program slicing. In Proceedings of the 5th In
ternational Conference on Software Engineering, San Diego,
California, USA, March 9-12, 1981., pages 439-449, 1981.
