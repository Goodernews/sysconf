[1] A. Roy, I. Mihailovic, and W. Zwaenepoel, “X-stream: Edge-centric
graph processing using streaming partitions,” in Proceedings of the
Twenty-Fourth ACM Symposium on Operating Systems Principles, ser.
SOSP ’13, 2013, pp. 472–488.
[2] F. Khorasani, K. Vora, R. Gupta, and L. N. Bhuyan, “Cusha: Vertexcentric graph processing on gpus,” in Proceedings of the 23rd International Symposium on High-performance Parallel and Distributed
Computing, ser. HPDC ’14, 2014, pp. 239–252.
[3] K. Vora, G. H. Xu, and R. Gupta, “Load the edges you need: A generic
I/O optimization for disk-based graph processing,” in 2016 USENIX
Annual Technical Conference, USENIX ATC 2016, Denver, CO, USA,
June 22-24, 2016., 2016, pp. 507–522.
[4] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser,
and G. Czajkowski, “Pregel: A system for large-scale graph processing,”
in Proceedings of the 2010 ACM SIGMOD International Conference on
Management of Data, ser. SIGMOD ’10, 2010, pp. 135–146.
[5] J. E. Gonzalez, R. S. Xin, A. Dave, D. Crankshaw, M. J. Franklin,
and I. Stoica, “Graphx: Graph processing in a distributed dataflow
framework,” in 11th USENIX Symposium on Operating Systems
Design and Implementation (OSDI 14). Broomfield, CO: USENIX
Association, 2014, pp. 599–613. [Online]. Available: https://www.
usenix.org/conference/osdi14/technical-sessions/presentation/gonzalez
[6] Harshvardhan, A. Fidel, N. M. Amato, and L. Rauchwerger, “Kla: A new
algorithmic paradigm for parallel graph computations,” in Proceedings
of the 23rd International Conference on Parallel Architectures and
Compilation, ser. PACT ’14, 2014, pp. 27–38.
[7] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin, “Powergraph: Distributed graph-parallel computation on natural graphs,” in 10th
USENIX Symposium on Operating Systems Design and Implementation,
OSDI 2012, Hollywood, CA, USA, October 8-10, 2012, 2012, pp. 17–30.
[8] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. M.
Hellerstein, “Distributed graphlab: A framework for machine learning
in the cloud,” PVLDB, vol. 5, no. 8, pp. 716–727, 2012.
[9] Y. Tian, A. Balmin, S. A. Corsten, S. Tatikonda, and J. McPherson,
“From ”think like a vertex” to ”think like a graph”,” Proc. VLDB
Endow., vol. 7, no. 3, pp. 193–204, Nov. 2013. [Online]. Available:
http://dx.doi.org/10.14778/2732232.2732238
[10] R. Chen, J. Shi, Y. Chen, and H. Chen, “Powerlyra: differentiated graph
computation and partitioning on skewed graphs,” in Proceedings of
the Tenth European Conference on Computer Systems, EuroSys 2015,
Bordeaux, France, April 21-24, 2015, 2015, pp. 1:1–1:15.
[11] A. Kyrola, G. Blelloch, and C. Guestrin, “Graphchi: Large-scale graph
computation on just a pc,” in Proceedings of the 10th USENIX Conference on Operating Systems Design and Implementation, ser. OSDI’12,
2012, pp. 31–46.
[12] D. Nguyen, A. Lenharth, and K. Pingali, “A lightweight infrastructure
for graph analytics,” in ACM SIGOPS 24th Symposium on Operating
Systems Principles, SOSP ’13, Farmington, PA, USA, November 3-6,
2013, 2013, pp. 456–471.
[13] R. Nasre, M. Burtscher, and K. Pingali, “Morph algorithms on gpus,” in
Proceedings of the 18th ACM SIGPLAN Symposium on Principles and
Practice of Parallel Programming, ser. PPoPP ’13, 2013, pp. 147–156.
[14] ——, “Data-driven versus topology-driven irregular computations on
gpus,” in Proceedings of the 2013 IEEE 27th International Symposium
on Parallel and Distributed Processing, ser. IPDPS ’13, 2013, pp. 463–
474.
[15] F. Khorasani, R. Gupta, and L. N. Bhuyan, “Efficient warp execution
in presence of divergence with collaborative context collection,” in
Proceedings of the 48th International Symposium on Microarchitecture,
ser. MICRO-48, 2015, pp. 204–215.
[16] H. Liu and H. H. Huang, “Enterprise: Breadth-first graph traversal
on gpus,” in Proceedings of the International Conference for High
Performance Computing, Networking, Storage and Analysis, ser. SC ’15,
2015, pp. 68:1–68:12.
[17] Y. Wang, A. Davidson, Y. Pan, Y. Wu, A. Riffel, and J. D. Owens,
“Gunrock: A high-performance graph processing library on the gpu,” in
Proceedings of the 21st ACM SIGPLAN Symposium on Principles and
Practice of Parallel Programming, ser. PPoPP ’16, 2016, pp. 11:1–11:12.
[18] M.-S. Kim, K. An, H. Park, H. Seo, and J. Kim, “Gts: A fast and
scalable graph processing method based on streaming topology to gpus,”
in Proceedings of the 2016 International Conference on Management of
Data, ser. SIGMOD ’16, 2016, pp. 447–461.
[19] D. Sengupta, S. L. Song, K. Agarwal, and K. Schwan, “Graphreduce:
Processing large-scale graphs on accelerator-based systems,” in Proceedings of the International Conference for High Performance Computing,
Networking, Storage and Analysis, ser. SC ’15, 2015, pp. 28:1–28:12.
[20] P. Yuan, C. Xie, L. Liu, and H. Jin, “Pathgraph: A path centric graph
processing system,” IEEE Trans. Parallel Distrib. Syst., vol. 27, no. 10,
pp. 2998–3012, 2016.
[21] N. Sundaram, N. Satish, M. M. A. Patwary, S. R. Dulloor, M. J.
Anderson, S. G. Vadlamudi, D. Das, and P. Dubey, “Graphmat: High
performance graph analytics made productive,” Proc. VLDB Endow.,
vol. 8, no. 11, Jul. 2015.
[22] A. Roy, L. Bindschaedler, J. Malicevic, and W. Zwaenepoel, “Chaos:
Scale-out graph processing from secondary storage,” in Proceedings of
the 25th Symposium on Operating Systems Principles, ser. SOSP ’15,
2015, pp. 410–424.
[23] S. Pai and K. Pingali, “A compiler for throughput optimization of
graph algorithms on gpus,” in Proceedings of the 2016 ACM SIGPLAN
International Conference on Object-Oriented Programming, Systems,
Languages, and Applications, OOPSLA 2016, part of SPLASH 2016,
Amsterdam, The Netherlands, October 30 - November 4, 2016, 2016,
pp. 1–19.
[24] “Cage15,” http://www.ufl.edu/research/sparse/matrices/vanhenkelum.
[25] R. Rossi and N. Ahmed, “The network data repository with interactive
graph analytics and visualization.” 2015.
[26] O. Schenk, A. Wächter, and M. Weiser, “Inertia-revealing preconditioning for large-scale nonconvex constrained optimization,” SIAM Journal
on Scientific Computing, vol. 31, no. 2, pp. 939–960, 2008.
[27] J. Yang and J. Leskovec, “Defining and evaluating network communities
based on ground-truth,” Knowledge and Information Systems, vol. 42,
no. 1, pp. 181–213, 2015.
[28] “uk-2002,” http://law.di.unimi.it/webdata/uk-2002/.
[29] H. Kwak, C. Lee, H. Park, and S. Moon, “What is twitter, a social
network or a news media?” in Proceedings of the 19th international
conference on World wide web. ACM, 2010, pp. 591–600.
[30] NVIDIA, “Next generation cuda computer architecture kepler gk110,”
Tech. Rep., 2012.
[31] J. Shun and G. E. Blelloch, “Ligra: A lightweight graph processing
framework for shared memory,” in Proceedings of the 18th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming,
ser. PPoPP ’13, 2013, pp. 135–146.
[32] K. Zhang, R. Chen, and H. Chen, “Numa-aware graph-structured analytics,” in Proceedings of the 20th ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, PPoPP 2015, San
Francisco, CA, USA, February 7-11, 2015, 2015, pp. 183–193.
[33] R. Kaleem, A. Venkat, S. Pai, M. W. Hall, and K. Pingali, “Synchronization trade-offs in GPU implementations of graph algorithms,” in 2016
IEEE International Parallel and Distributed Processing Symposium,
IPDPS 2016, Chicago, IL, USA, May 23-27, 2016, 2016, pp. 514–523.
[34] T. Ben-Nun, M. Sutton, S. Pai, and K. Pingali, “Groute: An asynchronous multi-gpu programming model for irregular computations,” in
Proceedings of the 22Nd ACM SIGPLAN Symposium on Principles and
Practice of Parallel Programming, ser. PPoPP ’17, 2017, pp. 235–248.
[35] H. Liu, H. H. Huang, and Y. Hu, “ibfs: Concurrent breadth-first search
on gpus,” in Proceedings of the 2016 International Conference on
Management of Data, ser. SIGMOD ’16, 2016, pp. 403–416.
[36] F. Khorasani, R. Gupta, and L. N. Bhuyan, “Scalable simd-efficient
graph processing on gpus,” in 2015 International Conference on Parallel
Architecture and Compilation, PACT 2015, San Francisco, CA, USA,
October 18-21, 2015, 2015, pp. 39–50.
[37] J. Zhong and B. He, “Medusa: A parallel graph processing system on
graphics processors,” SIGMOD Record, vol. 43, no. 2, pp. 35–40, 2014.
[38] A. Gharaibeh, L. B. Costa, E. Santos-Neto, and M. Ripeanu, “A yoke
of oxen and a thousand chickens for heavy lifting graph processing,”
in International Conference on Parallel Architectures and Compilation
Techniques, PACT ’12, Minneapolis, MN, USA - September 19 - 23,
2012, 2012, pp. 345–354.
[39] D. Merrill, M. Garland, and A. Grimshaw, “Scalable gpu graph traversal,” in Proceedings of the 17th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, ser. PPoPP ’12, 2012, pp.
117–128.
[40] R. Kaleem, R. Barik, T. Shpeisman, B. T. Lewis, C. Hu, and K. Pingali,
“Adaptive heterogeneous scheduling for integrated gpus,” in International Conference on Parallel Architectures and Compilation, PACT ’14,
Edmonton, AB, Canada, August 24-27, 2014, 2014, pp. 151–162.
[41] F. Zhang, B. Wu, J. Zhai, B. He, and W. Chen, “Finepar: irregularityaware fine-grained workload partitioning on integrated architectures,” in
Proceedings of the 2017 International Symposium on Code Generation
and Optimization, CGO 2017, Austin, TX, USA, February 4-8, 2017,
2017, pp. 27–38.
[42] B. Wu, Z. Zhao, E. Z. Zhang, Y. Jiang, and X. Shen, “Complexity
analysis and algorithm design for reorganizing data to minimize noncoalesced memory accesses on GPU,” in ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, PPoPP ’13, Shenzhen,
China, February 23-27, 2013, 2013, pp. 57–68.
[43] N. Fauzia, L. Pouchet, and P. Sadayappan, “Characterizing and enhancing global memory data coalescing on gpus,” in Proceedings of the 13th

Annual IEEE/ACM International Symposium on Code Generation and
Optimization, CGO 2015, San Francisco, CA, USA, February 07 - 11,
2015, 2015, pp. 12–22.
[44] B. Ren, G. Agrawal, J. R. Larus, T. Mytkowicz, T. Poutanen, and
W. Schulte, “SIMD parallelization of applications that traverse irregular
data structures,” in Proceedings of the 2013 IEEE/ACM International
Symposium on Code Generation and Optimization, CGO 2013, Shenzhen, China, February 23-27, 2013, 2013, pp. 20:1–20:10.
[45] P. Jiang, L. Chen, and G. Agrawal, “Reusing data reorganization for
efficient SIMD parallelization of adaptive irregular applications,” in
Proceedings of the 2016 International Conference on Supercomputing,
ICS 2016, Istanbul, Turkey, June 1-3, 2016, 2016, pp. 16:1–16:10.
