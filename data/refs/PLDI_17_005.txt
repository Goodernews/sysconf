[1] R. Alur. Streaming String Transducers, pages 1-1. Springer
Berlin Heidelberg, Berlin, Heidelberg, 2011.

[2] R. Alur, R. Bodik, G. Juniwal, M. M. Martin, M. Raghothaman,
S. A. Seshia, R. Singh, A. Solar-Lezama, E. Torlak, and
A. Udupa. Syntax-guided synthesis. In Formal Methods in
Computer-Aided Design (FMCAD), 2013, pages 1-8. IEEE,
2013.

[3] R. Alur, D. Fisman, R. Singh, and A. Solar-Lezama. Results and analysis of SyGuS-comp’15. arXiv _ preprint
arXiv: 1602.01170, 2016.

[4] M. Benedikt, J. Engelfriet, and S. Maneth. Determinacy
and rewriting of top-down and mso tree transformations. In
International Symposium on Mathematical Foundations of
Computer Science, pages 146-158. Springer, 2013.

[5] W. Chen and J. T. Udding. Program inversion: More than fun!
Science of Computer Programming, 15(1):1-13, 1990.

[6] L. D’antoni and R. Alur. Symbolic visibly pushdown automata.
In International Conference on Computer Aided Verification,
pages 209-225. Springer, 2014.

[7] L. D’Antoni and M. Veanes. Equivalence of extended symbolic
finite transducers. In International Conference on Computer
Aided Verification, pages 624-639. Springer, 2013.

[8] L. D’Antoni and M. Veanes. Extended symbolic finite automata and transducers. Formal Methods in System Design, 47
(1):93-119, 2015.

[9] L. D’Antoni, M. Veanes, B. Livshits, and D. Molnar. Fast:
A transducer-based language for tree manipulation. In ACM
SIGPLAN Notices, volume 49, pages 384-394. ACM, 2014.

[10] L. De Moura and N. Bjgrner. Z3: An efficient smt solver. In
International conference on Tools and Algorithms for the Construction and Analysis of Systems, pages 337-340. Springer,
2008.

[11] E. Dijkstra. Program inversion. Program Construction, pages
54-57, 1979.

[12] D. Eppstein. A heuristic approach to program inversion. In
IJCAIJ, volume 85, pages 219-221, 1985.

[13] Z. Fueloep and P. Gyenizse. On injectivity of deterministic
top-down tree transducers. Information processing letters, 48
(4):183-188, 1993.

[14] R. Gltick and M. Kawabe. A method for automatic program
inversion based on Ir (0) parsing. Fundamenta Informaticae,
66(4):367-395, 2005.

[15] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and
M. Veanes. Fast and precise sanitizer analysis with BEK.
In Proceedings of the 20th USENIX conference on Security,
pages 1-1. USENIX Association, 2011.

[16] A. Kanade, R. Alur, S$. Rajamani, and G. Ramanlingam. Representation dependence testing using program inversion. In
Proceedings of the eighteenth ACM SIGSOFT international
symposium on Foundations of software engineering, pages
277-286. ACM, 2010.

[17] M. Kawabe and R. Gliick. The program inverter LRinv and its
structure. In International Workshop on Practical Aspects of
Declarative Languages, pages 219-234. Springer, 2005.

[18] B. J. Ross. Running programs backwards: the logical inversion
of imperative computation. Formal Aspects of Computing, 9
(3):331-348, 1997.

[19] SANS. Malware faq. https: //ww.sans.org/
security-resources/malwarefaq/wnt- unicode.

[20] B. Schoenmakers. Inorder traversal of a binary heap and
its inversion in optimal time and space. In Mathematics of
Program Construction, pages 291-301. Springer, 1993.

[21] F Servais and J.-F. Raskin. Visibly pushdown transducers.
ULB, Belgique, 2011.

[22] S. Srivastava, S. Gulwani, S. Chaudhuri, and J. S. Foster. Pathbased inductive synthesis for program inversion. In ACM
SIGPLAN Notices, volume 46, pages 492-503. ACM, 2011.

[23] M. Veanes, N. Bj@rner, L. Nachmanson, and S. Bereg.
Monadic decomposition. In International Conference on Computer Aided Verification, pages 628-645. Springer, 2014.

[24] M. Veanes, T. Mytkowicz, D. Molnar, and B. Livshits. Dataparallel string-manipulating programs. In ACM SIGPLAN
Notices, volume 50, pages 139-152. ACM, 2015.

[25] D. M. Yellin. Attribute Grammar Inversion and Source-tosource Translation. Springer-Verlag New York, Inc., New
York, NY, USA, 1988. ISBN 0-387-19072-4.

