[1] https://java.net/jira/browse/GRIZZLY-1690.

[2] ANDERSEN, M. P., AND CULLER, D. E. BTrDB:
Optimizing Storage System Design for Timeseries
Processing. In USENIX Conf. File and Storage
Techn. (FAST) (Santa Clara, CA, 2016), pp. 39-52.

[3] APACHE CASSANDRA. Manage massive amounts
of data. http://cassandra.apache.org.

[4] APACHE LUCENCE. A full-featured text search engine. http://lucene.apache.org.

[5] APACHE SOLR. Open source enterprise search
platform. http://lucene.apache.org/solr.

[6] ASSENT, I., KRIEGER, R., AFSCHARI, F., AND
SEIDL, T. The TS-tree: Efficient Time Series
Search and Retrieval. In Intl. Conf. Extending
database technology: Advances in database technology (Nantes, France, 2008), pp. 252-263.
[7] B URROWS , M., AND W HEELER , D. A Blocksorting Lossless Data Compression Algorithm.
Tech. Rep. 124, Systems Research Center, Palo
Alto, CA, 1994.
[8] C AMERRA , A., PALPANAS , T., S HIEH , J., AND
K EOGH , E. iSAX 2.0: Indexing and Mining One
Billion Time Series. In Intl. Conf. Data Mining
(ICDM) (Sydney, Australia, 2010), pp. 58–67.
[9] C HAN , K.- P., AND F U , A. W.- C . Efﬁcient Time
Series Matching by Wavelets. In Intl. Conf. Data
Eng. (Sydney, Australia, 1999), pp. 126–133.
[10] COLLECTD . The system statistics collection daemon. https://collectd.org.
[11] C OLLET, Y. LZ4 is lossless compression algorithm. http://www.lz4.org.
[12] DAVIS , C. Graphite project – a highly scalable realtime graphing system. https://github.com/graphiteproject.
[13] D ERI , L., M AINARDI , S., AND F USCO , F. tsdb:
A Compressed Database for Time Series. In Intl.
Conf. Trafﬁc Monitoring and Analysis (Vienna,
Austria, 2012), pp. 143–156.
[14] D EUTSCH , P. GZIP ﬁle format speciﬁcation version 4.3. https://www.ietf.org/rfc/rfc1952.txt, 1996.
[15] DING, H., TRAJCEVSKI, G., SCHEUERMANN, P.,
WANG, X., AND KEOGH, E. Querying and Mining of Time Series Data: Experimental Comparison of Representations and Distance Measures. In
Very Large Databases Endowment (Auckland, New
Zealand, 2008), pp. 1542–1552.
[16] DOCKER. Docker is the leading software containerization platform. https://www.docker.com.
[17] DUNNING, T., AND FRIEDMAN, E. Time Series
Databases: New Ways to Store and Access Data.
O’Reilly Media, 2014.
[18] ELASTIC. Logstash: Collect, Parse, Transform
Logs. https://www.elastic.co/products/logstash.
[19] GOOGLE. Guice. https://github.com/google/guice.
[20] GOOGLE. Protocol buffers – google’s data interchange format. https://github.com/google/protobuf.
[21] GOOGLE. Snappy. http://google.github.io/snappy.
[22] GRAEFE, G., AND SHAPIRO, L. Data Compression and Database Performance. In Symp. Applied
Computing (Kansas City, MO, 1991), pp. 22–27.
[23] HBASE, A. The hadoop database, a distributed,
scalable, big data store. http://hbase.apache.org.
[24] INFLUXDATA. InfluxDB: Time-Series
Storage. https://influxdata.com/time-seriesplatform/influxdb.
[25] KAIROSDB. Fast Time Series Database.
https://kairosdb.github.io/.
[26] KEOGH, E., CHAKRABARTI, K., PAZZANI, M.,
AND MEHROTRA, S. Dimensionality Reduction
for Fast Similarity Search in Large Time Series
Databases. Knowledge and information Systems 3,
3 (2001), 263–286.
[27] LAPTEV, N., AMIZADEH, S., AND FLINT, I.
Generic and scalable framework for automated
time-series anomaly detection. In Intl. Conf.
Knowledge Discovery and Data Mining (KDD)
(Sydney, Australia, 2015), pp. 1939–1947.
[28] LOBOZ, C., SMYL, S., AND NATH, S. DataGarage: Warehousing Massive Amounts of Performance Data on Commodity Servers. In Very
Large Databases Endowment (Singapore, 2010),
pp. 1447–1458.
[29] MASSIE, M. L., CHUN, B. N., AND CULLER,
D. E. The ganglia distributed monitoring system:
design, implementation, and experience. Parallel
Computing 30, 7 (2004), 817–840.
[30] MELNIK, S., GUBAREV, A., LONG, J. J.,
ROMER, G., SHIVAKUMAR, S., TOLTON, M.,
AND VASSILAKIS, T. Dremel: Interactive Analysis
of Web-Scale Datasets. In Very Large Databases
Endowment (Singapore, 2010), pp. 330–339.
[31] OETIKER, T. RRDtool: Data logging
and graphing system for time series data.
http://oss.oetiker.ch/rrdtool.
[32] OPENTSDB. The Scalable Time Series Database.
http://opentsdb.net.
[33] PATEL, P., KEOGH, E., LIN, J., AND LONARDI,
S. Mining Motifs in Massive Time Series
Databases. In Intl. Conf. Data Mining (Maebashi
City, Japan, 2002), pp. 370–377.
[34] PELKONEN, T., FRANKLIN, S., TELLER, J., CAVALLARO, P., HUANG, Q., MEZA, J., AND VEERARAGHAVAN, K. Gorilla: A Fast, Scalable, InMemory Time Series Database. In Conf. Very Large
Databases (Kohala Coast, HI, 2015), pp. 1816–
1827.
[35] POPIVANOV, I., AND MILLER, R. Similarity
Search Over Time-Series Data Using Wavelets.
In Intl. Conf. Data Eng. (San Jose, CA, 2002),
pp. 212–221.
[36] PROMETHEUS. Monitoring system and time series
database. http://prometheus.io.
[37] QUICKLZ. Fast compression library.
http://www.quicklz.com.
[38] SALVADOR, S., AND CHAN, P. FastDTW: Toward
Accurate Dynamic Time Warping in Linear Time
and Space. Intelligent Data Analysis 11, 5 (2007),
561–580.
[39] SEWARD, J. bzip2. http://www.bzip.org.
[40] SHAFER, I., SAMBASIVAN, R., ROWE, A., AND
GANGER, G. Specialized Storage for Big Numeric
Time Series. In USENIX Conf. Hot Topics Storage
and File Systems (San Jose, CA, 2013).
[41] SHVACHKO, K., KUANG, H., RADIA, S., AND
CHANSLER, R. The Hadoop Distributed File System. In Symp. Mass Storage Systems and Technologies (Lake Tahoe, NV, 2010), pp. 1–10.
[42] TUKAANI. Xz. http://tukaani.org/xz.
[43] VALLIS, O., HOCHENBAUM, J., AND KEJARIWAL, A. A Novel Technique for Long-Term
Anomaly Detection in the Cloud. In USENIX Conf.
Hot Topics Cloud Computing (Philadelphia, PA,
2014).
[44] VAN HOORN, A., WALLER, J., AND HASSELBRING, W. Kieker: A framework for application performance monitoring and dynamic software
analysis. In Intl. Conf. Perf. Eng. (ICPE) (Boston,
MA, 2012), pp. 247–248.
[45] WANG, C., VISWANATHAN, K., CHOUDUR, L.,
TALWAR, V., SATTERFIELD, W., AND SCHWAN,
K. Statistical Techniques for Online Anomaly
Detection in Data Centers. In Intl. Symp. Integrated Network Management (IM) (Dublin, Ireland, 2011), pp. 385–392.
[46] WERT, A., HAPPE, J., AND HAPPE, L. Supporting Swift Reaction: Automatically Uncovering Performance Problems by Systematic Experiments. In
Intl. Conf. Soft. Eng. (ICSE) (San Francisco, CA,
2013), pp. 552–561.
[47] XU, W., HUANG, L., FOX, A., PATTERSON,
D. A., AND JORDAN, M. I. Mining console logs
for large-scale system problem detection. In Conf.
Tackling Computer Systems Problems with Machine Learning Techniques (San Diego, CA, 2008).
