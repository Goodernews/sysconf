[1] Intel R(cid:2) 64 and ia-32 architectures software developers manual. 2010.
[2] L. Adhianto et al. HPCToolkit: Tools for performance analysis of
optimized parallel programs. Concurrency and Computation: Practice
and Experience, 2010.

[3] D. H. Bailey, E. Barszcz, et al. The NAS parallel benchmarks – summary
and preliminary results. In Proc. of the 1991 ACM/IEEE conference on
Supercomputing, 1991.

[4] C. Bienia, S. Kumar, J. P. Singh, and K. Li. The PARSEC benchmark
suite: characterization and architectural implications.
In Proc. of the
17th Intl. Conf. on Parallel Architecture and Compilation Techniques
(PACT), 2008.

[5] M. Casas and G. Bronevetsky. Active measurement of memory resource
In Proceedings of the 2014 IEEE 28th International

consumption.
Parallel and Distributed Processing Symposium, 2014.

[6] S. Che, M. Boyer, J. Meng, D. Tarjan, J. W. Sheaffer, S.-H. Lee, and
K. Skadron. Rodinia: A benchmark suite for heterogeneous computing.
In Proc. of the 2009 IEEE Intl. Symp. on Workload Characterization
(IISWC), 2009.

[7] M. Dashti et al. Trafﬁc management: a holistic approach to memory
the 18th Intl. Conf.
placement on NUMA systems.
on Architectural Support for Programming Languages and Operating
Systems, 2013.

In Proc. of

[8] M. Diener, E. H. Cruz, P. O. Navaux, A. Busse, and H.-U. Heiß. kmaf:
Automatic kernel-level management of thread and data afﬁnity. In Pro-
ceedings of the 23rd International Conference on Parallel Architectures
and Compilation, 2014.

[9] P. J. Drongowski.

Instruction-based sampling: A new performance
analysis technique for AMD family 10h processors. http://developer.
amd.com/Assets/AMD\ IBS\ paper\ EN.pdf, November 2007. Last
accessed: Dec. 13, 2013.

[10] D. Eklov, N. Nikoleris, D. Black-Schaffer, and E. Hagersten. Bandwidth
bandit: Quantitative characterization of memory contention.
In 2013
IEEE/ACM International Symposium on Code Generation and Optimiza-
tion, 2013.

[11] Intel Corporation. Intel VTune performance analyzer. http://www.intel.

com/software/products/vtune.

[12] Intel Corporation. Linux performance tool. http://www.brendangregg.

com/linuxperf.html.

[13] S.

Jayasena, S. Amarasinghe, A. Abeyweera, G. Amarasinghe,
H. De Silva, S. Rathnayake, X. Meng, and Y. Liu. Detection of false
sharing using machine learning. In 2013 SC-International Conference
for High Performance Computing, Networking, Storage and Analysis
(SC), pages 1–9. IEEE, 2013.

[14] A. Kleen. A NUMA API for Linux.

http://developer.amd.com/
wordpress/media/2012/10/LibNUMA-WP-fv1.pdf, 2005. Last accessed:
Dec. 12, 2013.

[15] R. Lachaize, B. Lepers, and V. Qu´ema. MemProf: A memory proﬁler
In Proc. of the 2012 USENIX Annual

for NUMA multicore systems.
Technical Conf., Berkeley, CA, USA, 2012.
[16] Lawrence Livermore National Laboratory.

Livermore Unstructured
Lagrangian Explicit Shock Hydrodynamics (LULESH). https://codesign.
llnl.gov/lulesh.php. Last accessed: Dec. 12, 2013.

[17] Lawrence Livermore National Laboratory. LLNL Sequoia Benchmarks.
https://asc.llnl.gov/sequoia/benchmarks. Last accessed: Dec. 12, 2013.
[18] B. Lepers, V. Qu´ema, and A. Fedorova. Thread and memory placement
In Proceedings of the 2015

on numa systems: Asymmetry matters.
USENIX Conference on Usenix Annual Technical Conference.

[19] X. Liu and J. Mellor-Crummey. A tool to analyze the performance of
multithreaded programs on NUMA architectures. In Proceedings of the
19th ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming, 2014.

[20] X. Liu and J. M. Mellor-Crummey. A data-centric proﬁler for parallel
programs. In Proc. of the 2013 ACM/IEEE Conference on Supercom-
puting, 2013.

[21] X. Liu, K. Sharma, and J. Mellor-Crummey. Arraytool: a lightweight
proﬁler to guide array regrouping.
In Proceedings of the 23rd inter-
national conference on Parallel architectures and compilation, pages
405–416. ACM, 2014.

[22] J. Marathe and F. Mueller. Hardware proﬁle-guided automatic page
placement for ccNUMA systems.
the eleventh
ACM SIGPLAN symposium on Principles and practice of parallel
programming, pages 90–99. ACM, 2006.

In Proceedings of

[23] E. Ould-Ahmed-Vall, J. Woodlee, C. Yount, K. A. Doshi, and S. Abra-
ham. Using model trees for computer architecture performance analysis
of software applications.
In 2007 IEEE International Symposium on
Performance Analysis of Systems & Software, pages 116–125. IEEE,
2007.

[24] G. Piccoli, H. N. Santos, R. E. Rodrigues, C. Pousa, E. Borin, and F. M.
Quint˜ao Pereira. Compiler support for selective page migration in numa
architectures. In Proceedings of the 23rd International Conference on
Parallel Architectures and Compilation, 2014.

[25] M. Srinivas, B. Sinharoy, R. Eickemeyer, R. Raghavan, S. Kunkel,
T. Chen, W. Maron, D. Flemming, A. Blanchard, and P. Seshadri. IBM
POWER7 performance modeling, veriﬁcation, and evaluation.
IBM
Journal of Research and Development, 55(3):4–1, 2011.

[26] J. Vetter. Performance analysis of distributed applications using auto-
matic classiﬁcation of communication inefﬁciencies. In Proceedings of
the 14th international conference on Supercomputing, pages 245–254.
ACM, 2000.

[27] W. Yoo. Automated performance characterization of applications using
PhD thesis, University of Illinois at

hardware monitoring events.
Urbana-Champaign, 2013.

