[1] “CVE-2012-1889: Vulnerability in Microsoft XML core services could allow remote code execution,” 2012.
[2] P. Akritidis, M. Costa, M. Castro, and S. Hand, “Baggy bounds checking: An efficient and backwards-compatible defense against out- of-bounds errors.” in USENIX Security, 2009.
[3] F. Araujo and K. Hamlen, “Compiler-instrumented, dynamic secret- redaction of legacy processes for attacker deception,” in USENIX Security, 2015.
[4] M. Auslander and M. Hopkins, “An overview of the PL. 8 compiler,” in SIGPLAN Symposium on Compiler Construction, 1982.
[5] E. D. Berger and B. G. Zorn, “DieHard: probabilistic memory safety for unsafe languages,” in PLDI, 2006.
[6] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton, S. Hallem, C. Henri- Gros, A. Kamsky, S. McPeak, and D. Engler, “A few billion lines of code later: using static analysis to find bugs in the real world,” Communications of the ACM, vol. 53, no. 2, pp. 66–75, 2010.
[7] D. Bruening and Q. Zhao, “Practical memory checking with dr. mem- ory,” in CGO, 2011.
[8] H. Chen, Y. Mao, X. Wang, D. Zhou, N. Zeldovich, and M. F. Kaashoek, “Linux kernel vulnerabilities: State-of-the-art defenses and open problems,” in APSys, 2011.
[9] X. Chen, A. Slowinska, D. Andriesse, H. Bos, and C. Giuffrida, “StackArmor: Comprehensive protection from stack-based memory error vulnerabilities for binaries.” in NDSS, 2015.
[10] J. Chow, B. Pfaff, T. Garfinkel, K. Christopher, and M. Rosenblum, “Understanding data lifetime via whole system simulation,” in USENIX Security, 2004.
[11] J. Chow, B. Pfaff, T. Garfinkel, and M. Rosenblum, “Shredding your garbage: Reducing data lifetime through secure deallocation.” in USENIX Security, 2005.
[12] K. Cook, “Kernel exploitation via uninitialized stack,” DEFCON 19, 2011.
[13] ——, “Kernel address space layout randomization,” 2013, Linux Secu- rity Summit.
[14] C. Cowan, C. Pu, D. Maier, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, Q. Zhang, and H. Hinton, “StackGuard: Automatic adaptive detection and prevention of buffer-overflow attacks,” in USENIX Secu- rity, 1998.
[15] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi, S. Brunthaler, and M. Franz, “Readactor: Practical code randomization resilient to memory disclosure,” in S&P, 2015.
[16] C. Deng and K. S. Namjoshi, “Securing a compiler transformation,” in Static Analysis, 2016.
[17] C. Ding and Y. Zhong, “Predicting whole-program locality through reuse distance analysis,” in PLDI, 2003.
[18] D. Edelsohn, W. Gellerich, M. Hagog, D. Naishlos, M. Namolaru, E. Pasch, H. Penner, U. Weigand, and A. Zaks, “Contributions to the GNU compiler collection,” IBM Systems Journal, 2005.
[19] I. Evans, S. Fingeret, J. Gonza ́lez, U. Otgonbaatar, T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi, “Missing the point (er): On the effectiveness of code pointer integrity,” in S&P, 2015.
[20] J. Evans, “A scalable concurrent malloc(3) implementation for FreeBSD,” in BSDCan, 2006.
[21] H. Flake, “Attacks on uninitialized local variables,” Black Hat Europe, 2006.
[22] S. Ghemawat and P. Menage, “TCMalloc : Thread-caching malloc,” 2007.
[23] K. Gondi, P. Bisht, P. Venkatachari, A. P. Sistla, and V. N. Venkatakr- ishnan, “SWIPE: Eager erasure of sensitive data in large scale systems software,” in CODASPY, 2012.
[24] K. Harrison and S. Xu, “Protecting cryptographic keys from memory disclosure attacks,” in DSN, 2007.
[25] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “ILR: Where’d my gadgets go?” in S&P, 2012.
[26] G. Hoflehner, “LLVM performance improvements and headroom,” in LLVM Developers’ Meeting, 2015.
[27] J. Hubicka, “Interprocedural optimization framework in GCC,” in GCC Developers Summit, 2007.
[28] T. Johnson and D. L. Xinliang, “ThinLTO: A fine-grained demand- driven infrastructure,” in EuroLLVM, 2015.
[29] M. Jurczyk, “Enabling QR codes in Internet Explorer, or a story of a cross-platform memory disclosure,” 2015.
[30] K. Koning, H. Bos, and C. Giuffrida, “Secure and efficient multi-variant execution using hardware-assisted process virtualization,” in DSN, 2016.
[31] B. C. Kuszmaul, “SuperMalloc: a super fast multithreaded malloc for 64-bit machines,” in ISMM, 2015.
[32] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song, “Code-Pointer Integrity,” in OSDI, 2014.
[33] W. Landi, “Undecidability of static analysis,” ACM Lett. Program. Lang. Syst., 1992.
[34] C. Lattner, “What every C programmer should know about undefined behavior,” 2011, LLVM project blog.
[35] C. Lattner and V. Adve, “LLVM: A Compilation Framework for Lifelong Program Analysis & Transformation,” in CGO, 2004.
[36] X. Leroy, “Formal verification of a realistic compiler,” Communications of the ACM, no. 7, pp. 107–115, 2009.
[37] Linux Foundation, “LLVMLinux project.”
[38] K. Lu, C. Song, T. Kim, and W. Lee, “UniSan: Proactive kernel memory initialization to eliminate data leakages,” in CCS, 2016.
[39] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee, “ASLR- Guard: Stopping address space leakage for code reuse attacks,” in CCS, 2015.
[40] K. Lu, M.-T. Walter, D. Pfaff, N. Stefan, W. Lee, and M. Backes, “Unleashing use-before-initialization vulnerabilities in the Linux kernel using targeted stack spraying,” in NDSS, 2017.
[41] V. B. Lvin, G. Novark, E. D. Berger, and B. G. Zorn, “Archipelago: trading address space for reliability and security,” in ASPLOS, 2008.
[42] V. Makarov, “The integrated register allocator for GCC,” in GCC Developers Summit, 2007.
[43] L. W. McVoy and C. Staelin, “LMbench: Portable tools for performance analysis,” in USENIX, 1996.
[44] K. Memarian, J. Matthiesen, J. Lingard, K. Nienhuis, D. Chisnall, R. N. M. Watson, and P. Sewell, “Into the depths of c: Elaborating the de facto standards,” in PLDI, 2016.
[45] Microsoft, “MS08-014 : The case of the uninitialized stack variable vulnerability,” 1998.
[46] O. Moerbeek, “A new malloc (3) for OpenBSD,” in EuroBSDCon, 2009.
[47] A. Nemet and M. Zolotukhin, “Advances in loop analysis frameworks
and optimizations,” in LLVM Developers’ Meeting, 2015.
[48] G. Novark and E. D. Berger, “DieHarder: securing the heap,” in CCS,
2010.
[49] PaX Team, “PaX - gcc plugins galore,” 2013, H2HC.
[50] S. Peiro ́, M. Munoz, and A. Crespo, “An analysis on the impact and detection of kernel stack infoleaks,” Logic Journal of IGPL, 2016.
[51] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and T. Holz, “Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in c++ applications,” in S&P, 2015.
[52] J. Seibert, H. Okhravi, and E. So ̈derstro ̈m, “Information leaks without memory disclosures: Remote side channel attacks on diversified code,” in CCS, 2014.
[53] F. J. Serna, “The info leak era on software exploitation,” Black Hat USA, 2012.
[54] J. Seward and N. Nethercote, “Using valgrind to detect undefined value errors with bit-precision,” in USENIX, 2005.
[55] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh, “On the effectiveness of address-space randomization,” in CCS, 2004.
[56] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R. Sadeghi, “Just-in-time code reuse: On the effectiveness of fine- grained address space layout randomization,” in S&P, 2013.
[57] B. Spengler, “Detection, prevention, and containment: A study of grsecurity,” 2002, libres Software Meeting.
[58] E. Stepanov and K. Serebryany, “MemorySanitizer: fast detector of uninitialized memory use in c++,” in CGO, 2015.
[59] C. Sun, V. Le, and Z. Su, “Finding and analyzing compiler warning defects,” in ICSE, 2016.
[60] L. Szekeres, M. Payer, T. Wei, and D. Song, “SoK: Eternal war in memory,” in S&P, 2013.
[61] R. van Eeden, “Unexpected code execution in smbd,” 2015.
[62] J. Wang, M. Zhao, Q. Zeng, D. Wu, and P. Liu, “Risk assessment of
buffer “heartbleed” over-read vulnerabilities,” in DSN, 2015.
[63] X. Wang, H. Chen, A. Cheung, Z. Jia, N. Zeldovich, and M. F. Kaashoek, “Undefined behavior: what happened to my code?” in APSys, 2012.
[64] X. Yang, Y. Chen, E. Eide, and J. Regehr, “Finding and understanding bugs in c compilers,” in PLDI, 2011.
[65] D. Ye, Y. Sui, and J. Xue, “Accelerating dynamic detection of uses of undefined values with static value-flow analysis,” in CGO, 2014.
[66] S. Yilek, E. Rescorla, H. Shacham, B. Enright, and S. Savage, “When private keys are public: results from the 2008 Debian OpenSSL vulner- ability,” in IMC, 2009.
[67] J. Zhao, S. Nagarakatte, M. M. Martin, and S. Zdancewic, “Formal verification of SSA-based optimizations for LLVM,” in PLDI, 2013.
[68] D. Y. Zhu, J. Jung, D. Song, T. Kohno, and D. Wetherall, “TaintEraser: Protecting sensitive data leaks using application-level taint tracking,” ACM SIGOPS Operating Systems Review, 2011.
