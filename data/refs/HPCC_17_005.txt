[1] “Metasploit ropdb,” https://community.rapid7.com/community/metasp
loit/blog/2012/10/03/defeat-the-hard-and-strong-with-the-soft-and-gen
tle-metasploit-ropdb.
[2] H. Marco-Gisbert and I. Ripoll, “On the effectiveness of full-aslr on 64bit linux,” in Proceedings of the In-depth security conference, DeepSec,
2014.
[3] C.W.Otterstad, “Brute force bypassing of alsr on 64-bit x86 gnu/linux,”
http://tapironline.no/last-ned/1081, 2012.
[4] N. Goonasekera, W. Caelli, and C. Fidge, “Libvm: an architecture for
shared library sandboxing,” Software: Practice and Experience, vol. 45,
no. 12, pp. 1597–1617, 2015.
[5] Y. Wu, S. Sathyanarayan, R. H. Yap, and Z. Liang, “Codejail:
Application-transparent isolation of libraries with tight program interactions,” in Proceedings of the 17th European Symposium on Research
in Computer Security, 2012, pp. 859–876.
[6] “Cve-2013-2028,” http://cve.mitre.org/cgi-bin/cvename.cgi?name=CV
E-2013-2028.
[7] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and D. Song,
“Code-pointer integrity.” in Proceedings of the 11th USENIX Symposium
on Operating Systems Design and Implementation, 2014, pp. 147–163.
[8] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson,
L. Lozano, and G. Pike, “Enforcing forward-edge control-ﬂow integrity
in gcc & llvm.” in Proceedings of the 23rd USENIX Security Symposium,
2014, pp. 941–955.
[9] A. B. Andrea Bittau, D. M. Ali Mashtizadeh, and D. Boneh, “Hacking
blind,” in Proceedings of the 35th IEEE Symposium on Security and
Privacy, 2014, pp. 227–242.
[10] “Ropgadget,” https://github.com/JonathanSalwan/ROPgadget.
[11] R. Wahbe, S. Lucco, T. E. Anderson, and S. L. Graham, “Efﬁcient
software-based fault isolation,” ACM SIGOPS Operating Systems Review, vol. 27, no. 5, pp. 203–216, 1994.
[12] M. Castro, M. Costa, J.-P. Martin, M. Peinado, P. Akritidis, A. Donnelly,
P. Barham, and R. Black, “Fast byte-granularity software fault isolation,”
in Proceedings of the ACM SIGOPS 22nd Symposium on Operating
Systems Principles, 2009, pp. 45–58.
[13] B. Yee, D. Sehr, G. Dardyk, J. B. Chen, R. Muth, T. Ormandy,
S. Okasaka, N. Narula, and N. Fullagar, “Native client: A sandbox for
portable, untrusted x86 native code,” in Proceedings of the 30th IEEE
Symposium on Security and Privacy, 2009, pp. 79–93.
[14] B. Ford and R. Cox, “Vx32: Lightweight user-level sandboxing on the
x86.” in Proceedings of the USENIX Annual Technical Conference, 2008,
pp. 293–306.
[15] D. Kilpatrick, “Privman: A library for partitioning applications.” in
Proceedings of the USENIX Annual Technical Conference, 2003, pp.
273–284.
[16] N. Provos, M. Friedl, and P. Honeyman, “Preventing privilege escalation.” in Proceedings of the 12th USENIX Security Symposium, 2003.
[17] J. M. McCune, B. J. Parno, A. Perrig, M. K. Reiter, and H. Isozaki,
“Flicker: An execution infrastructure for tcb minimization,” ACM
SIGOPS Operating Systems Review, vol. 42, no. 4, pp. 315–328, 2008.
[18] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig,
“Trustvisor: Efﬁcient tcb reduction and attestation,” in Proceedings of
the 31st IEEE Symposium on Security and Privacy, 2010, pp. 143–158.
[19] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas, H. Shaﬁ,
V. Shanbhogue, and U. R. Savagaonkar, “Innovative instructions and
software model for isolated execution.” in Proceedings of the 2nd
International Workshop on Hardware and Architectural Support for
Security and Privacy, 2013.
[20] Y. Liu, T. Zhou, K. Chen, H. Chen, and Y. Xia, “Thwarting memory
disclosure with efﬁcient hypervisor-enforced intra-domain isolation,” in
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security, 2015, pp. 1607–1619.
[21] Y. Chen, S. Reymondjohnson, Z. Sun, and L. Lu, “Shreds: Fine-grained
execution units with private memory,” in Proceedings of the 2016 IEEE
Symposium on Security and Privacy, 2016, pp. 56–71.