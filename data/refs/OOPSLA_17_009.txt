
[1] AMD. 2016. Graphics Core Next Architecture, Generation 3. (2016). http://gpuopen.com/compute-product/

amd-gen3-isa-architecture-manual/.



[2] Android Community. 2017. OpenGL ES Testing. (2017). http://source.android.com/devices/graphics/testing.html.



[3] Earl T. Barr, Mark Harman, Phil McMinn, Muzammil Shahbaz, and Shin Yoo. 2015. The Oracle Problem in Software Testing:

A Survey. IEEE Trans. Software Eng. 41, 5 (2015), 507-525.



[4] AS. Boujarwah and K. Saleh. 1997. Compiler test case generation methods: a survey and assessment. Information and

Software Technology 39, 9 (1997), 617 — 625.



[5] CJ. Burgess and M. Saidi. 1996. The automatic generation of test cases for optimizing Fortran compilers. Information and

Software Technology 38, 2 (1996), 111 — 119.



[6] Junjie Chen, Yanwei Bai, Dan Hao, Yingfei Xiong, Hongyu Zhang, and Bing Xie. 2017. Learning to prioritize test programs

for compiler testing. In Proc. International Conference on Software Engineering, Sebastian Uchitel, Alessandro Orso, and

Martin P. Robillard (Eds.). IEEE / ACM, 700-711. http://dl.acm.org/citation.cfm?id=3097451



[7] Junjie Chen, Wenxiang Hu, Dan Hao, Yingfei Xiong, Hongyu Zhang, Lu Zhang, and Bing Xie. 2016. An empirical comparison

of compiler testing techniques. In Proc. International Conference on Software Engineering. ACM, 180-190.



[8] TY. Chen, S.C. Cheung, and S.M. Yiu. 1998. Metamorphic testing: a new approach for generating next test cases. Technical

Report HKUST-CS98-01. Hong Kong University of Science and Technology.



[9] Yang Chen, Alex Groce, Chaoqiang Zhang, Weng-Keen Wong, Xiaoli Fern, Eric Eide, and John Regehr. 2013. Taming compiler

fuzzers. In Proc. ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 197-208.



[10] Context. 2011.  WebGL: More WebGL Security Flaws. (2011). https://www.contextis.com/resources/blog/

webg]-more-webgl-security-flaws/.



[11] Pascal Cuoq, Benjamin Monate, Anne Pacalet, Virgile Prevosto, John Regehr, Boris Yakobowski, and Xuejun Yang. 2012.

Testing Static Analyzers with Randomly Generated Programs. In Proc. NASA Formal Methods Symposium. Springer,

120-125.



[12] Alastair F. Donaldson. 2016. Crashes, Hangs and Crazy Images by Adding Zero: Fuzzing OpenGL Shader Compilers. (2016).

https://medium.com/@afd_icl/crashes-hangs-and-crazy-images-by-adding-zero-689d15ce922b.



[13] Alastair F. Donaldson and Andrei Lascu. 2016. Metamorphic Testing for (Graphics) Compilers [Short Paper]. In Proc.

International Workshop on Metamorphic Testing. ACM, 44-47.



[14] Alastair F. Donaldson and Paul Thomson. 2017. Automated Testing of Graphics Shader Compiler: Video Illustration of

Security Bugs. (2017). https://youtu.be/d3CNfMoP2t8.



[15] Google. 2017. ANGLE: Almost Native Graphics Layer Engine. (2017). https://chromium.googlesource.com/angle/angle.



[16] Alex Groce, Chaoqiang Zhang, Eric Eide, Yang Chen, and John Regehr. 2012. Swarm testing. In Proc. International Symposium

on Software Testing and Analysis. ACM, 78-88.



[17] Ralph Guderlei and Johannes Mayer. 2007. Towards Automatic Testing of Imaging Software by Means of Random and

Metamorphic Testing. International Journal of Software Engineering and Knowledge Engineering 17, 6 (2007), 757-781.



[18] Nicolai Hahnle. 2017. Piglit - OpenGL driver testing framework. (2017). https://people.freedesktop.org/~nh/piglit/.



[19] Tahir Jameel, Mengxiang Lin, and Liu Chao. 2016. Metamorphic Relations Based Test Oracles for Image Processing

Applications. International Journal of Software Innovation 4, 1 (2016), 16-30.



[20] John Kessenich, Dave Baldwin, and Randi Rost. 2016a. The OpenGL Shading Language, Language Version 4.50. (2016).

https://www.opengl.org/registry/doc/GLSLangSpec.4.50.pdf.



[21] John Kessenich, Boaz Ouriel, and Raun Krisch. 2016b. SPIR-V Specification (Provisional). (2016). https://www.khronos.org/

registry/spir-v/specs/1.1/SPIRV.pdf.



[22] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 93. Publication date: October 2017.

Automated Testing of Graphics Shader Compilers 93:29



[23] John Kessenich, Graham Sellers, and Dave Shreiner. 2016c. OpenGL Programming Guide: The Official Guide to Learning

OpenGL, Version 4.5 with SPIR-V (9 ed.). Addison-Wesley.



[24] Khronos Group. 2014. WebGL Specification, Version 1.0.3. (2014). https://www.khronos.org/registry/webgl/specs/1.0/.



[25] Khronos Group. 2015. Khronos Invites Industry Participation to Create Safety Critical Graphics and Compute Standards,

https://www.khronos.org/news/press/. (August 2015).



[26] Khronos Group. 2016. Vulkan 1.0.38 — A Specification. (2016). https://www.khronos.org/registry/vulkan/specs/1.0/pdf/

vkspec.pdf.



[27] Vu Le, Mehrdad Afshari, and Zhendong Su. 2014. Compiler validation via equivalence modulo inputs. In Proc. ACM SIGPLAN

Conference on Programming Language Design and Implementation. ACM, 216-226.



[28] Vu Le, Chengnian Sun, and Zhendong Su. 2015. Finding deep compiler bugs via guided stochastic program mutation. In

Proc. ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications.

ACM, 386-399.



[29] Sangho Lee, Youngsok Kim, Jangwoo Kim, and Jong Kim. 2014. Stealing Webpages Rendered on Your Browser by Exploiting

GPU Vulnerabilities. In Proc. IEEE Symposium on Security and Privacy. IEEE, 19-33.



[30] Christopher Lidbury, Andrei Lascu, Nathan Chong, and Alastair F. Donaldson. 2015. Many-core compiler fuzzing. In Proc.

ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 65-76.



[31] William M. McKeeman. 1998. Differential Testing for Software. Digital Technical Journal 10, 1 (1998), 100-107.



[32] Microsoft. 2017a. Direct3D 12 Progrmming Guide. (2017). https://msdn.microsoft.com/en-us/library/windows/desktop/

dn899121(v=vs.85).aspx.



[33] Microsoft. 2017b. HLSL. (2017). https://msdn.microsoft.com/en-us/library/windows/desktop/bb509561(v=vs.85).aspx.



[34] Multicore Programming Group. 2017. A collection of shader compiler bugs. (2017). http://github.com/mc-imperial/

shader-compiler-bugs.



[35] Moritz Pflanzer, Alastair F. Donaldson, and Andrei Lascu. 2016. Automatic Test Case Reduction for OpenCL. In Proc.

International Workshop on OpenCL. ACM, 1:1-1:12.



[36] John Regehr, Yang Chen, Pascal Cuogq, Eric Eide, Chucky Ellison, and Xuejun Yang. 2012. Test-case reduction for C compiler

bugs. In Proc. ACM SIGPLAN Conference on Programming Language Design and Implementation. ACM, 335-346.



[37] RS. Scowen and Z,J. Ciechanowicz. 1983. Compiler validation—a survey. In PASCAL Compiler Validation, B.A. Wichmann

and Z,J. Ciechanowicz (Eds.). Wiley-Blackwell, Chapter 13, 90-144.



[38] SecurityWeek. 2016. Code Execution Flaw Plagues Intel Graphics Driver. (2016). http://www.securityweek.com/

code- execution-flaw-plagues-intel-graphics- driver.



[39] Sergio Segura, Gordon Fraser, Ana B. Sanchez, and Antonio Ruiz Cortés. 2016. A Survey on Metamorphic Testing. IEEE

Trans. Software Eng. 42, 9 (2016), 805-824.



[40] Chengnian Sun, Vu Le, and Zhendong Su. 2016. Finding compiler bugs via live code mutation. In Proc. ACM SIGPLAN

International Conference on Object-Oriented Programming, Systems, Languages, and Applications, ACM, 849-863.



[41] Qiuming Tao, Wei Wu, Chen Zhao, and Wuwei Shen. 2010. An Automatic Testing Approach for Compiler Based on

Metamorphic Testing Technique. In Proc. Asia Pacific Software Engineering Conference. IEEE, 270-279.



[42] Ilja van Sprundel. 2014. Windows Kernel Graphics Driver Attack Surface. (2014). https://www.blackhat.com/docs/us- 14/

materials/us- 14-vanSprundel-Windows-Kernel-Graphics-Driver- Attack-Surface.pdf.



[43] Elaine J. Weyuker. 1982. On Testing Non-Testable Programs. Comput. J. 25, 4 (1982), 465-470.



[44] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. 2011. Finding and understanding bugs in C compilers. In Proc. ACM

SIGPLAN Conference on Programming Language Design and Implementation. ACM, 283-294,



[45] Andreas Zeller and Ralf Hildebrandt. 2002. Simplifying and Isolating Failure-Inducing Input. IEEE Trans. Software Eng. 28, 2

(2002), 183-200.



[46] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 93. Publication date: October 2017.
