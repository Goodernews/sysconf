[1] NVIDIA CUDA C Programming Guide, v8.0, 2016.
[2] D. R. Kaeli, P. Mistry, D. Schaa, and D. P. Zhang, “Heterogeneous
computing with OpenCL 2.0,” San Francisco, CA, USA, 2015.
[3] W.-M.Hwu, GPU Computing Gems Emerald Edition. Elsevier, 2011.
[4] CUDA Runtime API, v8.0, 2016.
[5] CUDA Driver API, v8.0, 2016.
[6] NVIDIA Kepler GK110 Architecture Whitepaper, 2012.
[7] E. Lindholm, J. Nickolls, §. Oberman, and J. Montrym, “Nvidia tesla:
A unified graphics and computing architecture,” IEEE micro, vol. 28,
no. 2, pp. 39-55, 2008.
[8] NVIDIA Fermi Compute Architecture Whitepaper, 2009.
[9] NVIDIA Geforce GTX 980 Whitepaper, 2014.
[10] NVIDIA PTX:Parallel Thread Execution ISA, v5.0, 2016.
[11] NVIDIA Tesla K20X GPU Accelerator, 2013.
[12] D. Burger and T. M. Austin, “The simplescalar tool set, version 2.0,”
ACM SIGARCH Comp. Arch. News, vol. 25, no. 3, pp. 13-25, 1997.
[13] Y. Lee, A. Waterman, R. Avizienis, H. Cook, C. Sun, V. Stojanovié,
and K. Asanovié, “A 45nm 1.3 ghz 16.7 double-precision gflops/w
tisc-v processor with vector accelerators,” in 40th European Solid State
Circuits Conference (ESSCIRC). YEEE, 2014, pp. 199-202.
[14] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi, A. Basu,
J. Hestness, D. R. Hower, T. Krishna, S. Sardashti et al., “The gem5
simulator,” ACM SIGARCH Comp. Arch. News, vol. 39, no. 2, pp. 1-7,

2011.
[15] H. Wong, M.-M. Papadopoulou, M. Sadooghi-Alvandi, and
A. Moshovos, “Demystifying gpu microarchitecture through

microbenchmarking,” in IEEE Int. Symp. on Performance Analysis of
Systems & Software, 2010, pp. 235-246.

[16] X. Mei and X. Chu, “Dissecting gpu memory hierarchy through
microbenchmarking,” IEEE Transactions on Parallel and Distributed
Systems, vol. 28, no. 1, pp. 72-86, 2017.

[17] A. Bakhoda, G. L. Yuan, W. W. Fung, H. Wong, and T. M. Aamodt,
“Analyzing cuda workloads using a detailed gpu simulator,” in IEEE
Int. Symp. on Performance Analysis of Systems and Software, 2009, pp.
163-174.

[18] R. Ubal, B. Jang, P. Mistry, D. Schaa, and D. Kaeli, “ Multi2Sim:
A Simulation Framework for CPU-GPU Computing ,” in Proc. of the
21st International Conference on Parallel Architectures and Compilation
Techniques, Sep. 2012.

[19] J. Power, J. Hestness, M. §. Orr, M. D. Hill, and D. A. Wood, “gem5
gpu: A heterogeneous cpu-gpu simulator,” IEEE Computer Architecture

Letters, vol. 14, no. 1, pp. 34-36, 2015.

[20] 8. Collange, M. Daumas, D. Defour, and D. Parello, “Barra: A parallel

functional simulator for gpgpu,” in 2010 IEEE International Symposium

on Modeling, Analysis and Simulation of Computer and Telecommuni
cation Systems, 2010, pp. 351-360.

[21] G. E Diamos, A. R. Kerr, §. Yalamanchili, and N. Clark, “Ocelot: a

dynamic optimization framework for bulk-synchronous applications in

heterogeneous systems,” in ACM Proc. of the 19th Int. Conf. on Parallel

Architectures and Compilation Techniques, 2010, pp. 353-364.
