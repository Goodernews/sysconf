[1] Miltiadis Allamanis, Earl T. Barr, Christian Bird, and Charles Sutton. 2015. Suggesting Accurate Method and Class Names.

In Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2015). ACM, New York,

NY, USA, 38-49. https://doi.org/10.1145/2786805.2786849



[2] Miltiadis Allamanis, Hao Peng, and Charles Sutton. 2016. A Convolutional Attention Network for Extreme Summarization

of Source Code. In Proceedings of The 33rd International Conference on Machine Learning. 2091-2100.



[3] L. O. Andersen. 1994. Program Analysis and Specialization for the C Programming Language. Ph.D. Dissertation. DIKU,

University of Copenhagen. (DIKU report 94/19).



[4] Thomas Ball and Sriram K. Rajamani. 2002. The SLAM Project: Debugging System Software via Static Analysis. In Proceedings

of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’02). ACM, New York, NY,

USA, 1-3. https://doi.org/10.1145/503272.503274



[5] Nels E. Beckman and Aditya V. Nori. 2011. Probabilistic, Modular and Scalable Inference of Typestate Specifications. In

Proceedings of the 32Nd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’11).

ACM, New York, NY, USA, 211-221. https://doi.org/10.1145/1993498.1993524



[6] Yoshua Bengio, Aaron Courville, and Pascal Vincent. 2013. Representation learning: A review and new perspectives. IEEE

transactions on pattern analysis and machine intelligence 35, 8 (2013), 1798-1828.



[7] Pavol Bielik, Veselin Raychev, and Martin T Vechev. 2016. PHOG: probabilistic model for code. In Proceedings of the 33nd

International Conference on Machine Learning, ICML, 19-24.



[8] Sam Blackshear, Bor-Yuh Evan Chang, and Manu Sridharan. 2015. Selective Control-flow Abstraction via Jumping. In

Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and

Applications (OOPSLA 2015). ACM, New York, NY, USA, 163-182. https://doi.org/10.1145/2814270.2814293



[9] Leo Breiman. 2001. Random forests. Machine learning 45, 1 (2001), 5-32.



[10] Sooyoung Cha, Sehun Jeong, and Hakjoo Oh. 2016. Learning a Strategy for Choosing Widening Thresholds from a Large

Codebase. In Asian Symposium on Programming Languages and Systems. Springer, 25-41.



[11] Edmund Clarke, Orna Grumberg, Somesh Jha, Yuan Lu, and Helmut Veith. 2003. Counterexample-guided Abstraction

Refinement for Symbolic Model Checking. 7. ACM 50, 5 (Sept. 2003), 752-794. https://doi.org/10.1145/876638.876643

Yaniv David, Nimrod Partush, and Eran Yahav. 2016. Statistical Similarity of Binaries. In Proceedings of the 37th ACM

SIGPLAN Conference on Programming Language Design and Implementation (PLDI 16). ACM, New York, NY, USA, 266-280.



[12] https://doi.org/10.1145/2908080.2908126



[13] Azadeh Farzan and Zachary Kincaid. 2012. Verification of Parameterized Concurrent Programs by Modular Reasoning About

Data and Control. In Proceedings of the 39th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL ’12). ACM, New York, NY, USA, 297-308. https://doi.org/10.1145/2103656.2103693



[14] Pranav Garg, Christof Léding, P Madhusudan, and Daniel Neider. 2014. ICE: A robust framework for learning invariants. In

International Conference on Computer Aided Verification. Springer, 69-87.



[15] Pranav Garg, Daniel Neider, P. Madhusudan, and Dan Roth. 2016. Learning Invariants Using Decision Trees and Implication

Counterexamples. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL ’16). ACM, New York, NY, USA, 499-512. https://doi.org/10.1145/2837614.2837664



[16] Timon Gehr, Dimitar Dimitrov, and Martin Vechev. 2015. Learning commutativity specifications. In International Conference

on Computer Aided Verification. Springer, 307-323.



[17] Sergey Grebenshchikov, Ashutosh Gupta, Nuno P Lopes, Corneliu Popeea, and Andrey Rybalchenko. 2012. HSF (C): a

software verifier based on horn clauses. In International Conference on Tools and Algorithms for the Construction and

Analysis of Systems. Springer, 549-551.



[18] Radu Grigore and Hongseok Yang. 2016. Abstraction Refinement Guided by a Learnt Probabilistic Model. In Proceedings of

the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’16). ACM, New York,

NY, USA, 485-498. https://doi.org/10.1145/2837614.2837663



[19] Bhargav S Gulavani, Supratik Chakraborty, Aditya V Nori, and Sriram K Rajamani. 2008. Automatically refining abstract

interpretations. In International Conference on Tools and Algorithms for the Construction and Analysis of Systems. Springer,

443-458.



[20] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 101. Publication date: October 2017.

101:24 Kwonsoo Chae, Hakjoo Oh, Kihong Heo, and Hongseok Yang



[21] Ashutosh Kumar Gupta, Rupak Majumdar, and Andrey Rybalchenko. 2013. From tests to proofs. International Journal on

Software Tools for Technology Transfer 15, 4 (2013), 291-303.



[22] Thomas A. Henzinger, Ranjit Jhala, Rupak Majumdar, and Kenneth L. McMillan. 2004. Abstractions from Proofs. In

Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’04). ACM,

New York, NY, USA, 232-244, https://doi.org/10.1145/964001.964021



[23] Kihong Heo, Hakjoo Oh, and Hongseok Yang. 2016. Learning a variable-clustering strategy for octagon from labeled data

generated by a static analysis. In International Static Analysis Symposium. Springer, 237-256.



[24] Abram Hindle, Earl T. Barr, Zhendong Su, Mark Gabel, and Premkumar Devanbu. 2012. On the Naturalness of Software.

In Proceedings of the 34th International Conference on Software Engineering (ICSE ’12). IEEE Press, Piscataway, NJ, USA,

837-847. http://dl.acm.org/citation.cfm?id=2337223 2337322



[25] Bertrand Jeannet and Antoine Miné. 2009. Apron: A library of numerical abstract domains for static analysis. In International

Conference on Computer Aided Verification. Springer, 661-667.



[26] Sehun Jeong, Minseok Jeon, Sungdeok Cha, and Hakjoo Oh. 2017. Data-Driven Context-Sensitivity for Points-to Analysis.

Proceedings of the ACM on Programming Languages 1, OOPSLA (2017).



[27] George Kastrinis and Yannis Smaragdakis. 2013. Hybrid Context-sensitivity for Points-to Analysis. In Proceedings of the

34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’13). ACM, New York, NY,

USA, 423-434, https://doi.org/10.1145/2491956,2462191



[28] Omer Katz, Ran El-Yaniv, and Eran Yahav. 2016. Estimating Types in Binaries Using Predictive Modeling. In Proceedings of

the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’16). ACM, New York,

NY, USA, 313-326. https://doi.org/10.1145/2837614.2837674



[29] Sulekha Kulkarni, Ravi Mangal, Xin Zhang, and Mayur Naik. 2016. Accelerating Program Analyses by Cross-program

Training. In Proceedings of the 2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems,

Languages, and Applications (OOPSLA 2016). ACM, New York, NY, USA, 359-377. https://doi.org/10.1145/2983990.2984023



[30] Yann LeCun, Yoshua Bengio, and Geoffrey Hinton. 2015. Deep learning. Nature 521, 7553 (2015), 436-444.



[31] Percy Liang, Omer Tripp, and Mayur Naik. 2011. Learning Minimal Abstractions. In Proceedings of the 38th Annual ACM

SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’11). ACM, New York, NY, USA, 31-42.

https://doi.org/10.1145/1926385.1926391



[32] Benjamin Livshits, Aditya V. Nori, Sriram K. Rajamani, and Anindya Banerjee. 2009. Merlin: Specification Inference for

Explicit Information Flow Problems. In Proceedings of the 30th ACM SIGPLAN Conference on Programming Language

Design and Implementation (PLDI ’09). ACM, New York, NY, USA, 75-86. https://doi.org/10.1145/1542476,1542485



[33] Fan Long and Martin Rinard. 2016. Automatic Patch Generation by Learning Correct Code. In Proceedings of the 43rd

Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’16). ACM, New York, NY,

USA, 298-312. https://doi.org/10.1145/2837614.2837617



[34] Magnus Madsen and Anders Moller. 2014. Sparse dataflow analysis with pointers and reachability. In International Static

Analysis Symposium. Springer, 201-218.



[35] Ravi Mangal, Xin Zhang, Aditya V. Nori, and Mayur Naik. 2015. A User-guided Approach to Program Analysis. In Proceedings

of the 2015 10th Joint Meeting on Foundations of Software Engineering (ESEC/FSE 2015). ACM, New York, NY, USA, 462-473.

https://doi.org/10.1145/2786805.2786851



[36] A. Miné. 2006. The Octagon Abstract Domain. Higher-Order and Symbolic Computation 19, 1 (2006), 31-100.



[37] Alon Mishne, Sharon Shoham, and Eran Yahav. 2012. Typestate-based Semantic Code Search over Partial Programs. In

Proceedings of the ACM International Conference on Object Oriented Programming Systems Languages and Applications

(OOPSLA ’12), ACM, New York, NY, USA, 997-1016. https://doi.org/10.1145/2384616.2384689



[38] Mayur Naik, Hongseok Yang, Ghila Castelnuovo, and Mooly Sagiv. 2012. Abstractions from Tests. In Proceedings of the 39th

Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’12). ACM, New York, NY,

USA, 373-386. https://doi.org/10.1145/2103656.2103701



[39] Aditya V. Nori and Rahul Sharma. 2013. Termination Proofs from Tests. In Proceedings of the 2013 9th Joint Meeting on

Foundations of Software Engineering (ESEC/FSE 2013). ACM, New York, NY, USA, 246-256. https://doi.org/10.1145/2491411.

2491413



[40] Hakjoo Oh, Kihong Heo, Wonchan Lee, Woosuk Lee, and Kwangkeun Yi. 2012. Design and Implementation of Sparse Global

Analyses for C-like Languages. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design

and Implementation (PLDI ’12). ACM, New York, NY, USA, 229-238. https://doi.org/10.1145/2254064.2254092



[41] Hakjoo Oh, Wonchan Lee, Kihong Heo, Hongseok Yang, and Kwangkeun Yi. 2014. Selective Context-sensitivity Guided

by Impact Pre-analysis. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’14). ACM, New York, NY, USA, 475-484. https://doi.org/10.1145/2594291.2594318



[42] Hakjoo Oh, Hongseok Yang, and Kwangkeun Yi. 2015. Learning a Strategy for Adapting a Program Analysis via Bayesian

Optimisation. In Proceedings of the 2015 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems,

Languages, and Applications (OOPSLA 2015). ACM, New York, NY, USA, 572-588. https://doi.org/10.1145/2814270.2814309



[43] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 101. Publication date: October 2017.

Automatically Generating Features for Learning Program Analysis Heuristics ... 101:25



[44] Saswat Padhi, Rahul Sharma, and Todd Millstein. 2016. Data-driven Precondition Inference with Learned Features. In

Proceedings of the 37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’16). ACM,

New York, NY, USA, 42-56. https://doi.org/10.1145/2908080.2908099



[45] Fabian Pedregosa, Gaél Varoquaux, Alexandre Gramfort, Vincent Michel, Bertrand Thirion, Olivier Grisel, Mathieu Blondel,

Peter Prettenhofer, Ron Weiss, Vincent Dubourg, Jake Vanderplas, Alexandre Passos, David Cournapeau, Matthieu

Brucher, Matthieu Perrot, and Edouard Duchesnay. 2011. Scikit-learn: Machine Learning in Python. J. Mach. Learn. Res.

12 (Nov. 2011), 2825-2830. http://dl.acm.org/citation.cfm?id=1953048.2078195



[46] Veselin Raychev, Pavol Bielik, Martin Vechev, and Andreas Krause. 2016. Learning Programs from Noisy Data. In Proceedings

of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’16). ACM, New

York, NY, USA, 761-774. https://doi.org/10.1145/2837614.2837671



[47] Veselin Raychev, Martin Vechev, and Andreas Krause. 2015. Predicting Program Properties from “Big Code". In Proceedings

of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’15). ACM, New

York, NY, USA, 111-124. https://doi.org/10.1145/2676726.2677009



[48] Veselin Raychev, Martin Vechev, and Eran Yahav. 2014. Code Completion with Statistical Language Models. In Proceedings

of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’14). ACM, New York,

NY, USA, 419-428. https://doi.org/10.1145/2594291.2594321



[49] John Regehr, Yang Chen, Pascal Cuogq, Eric Eide, Chucky Ellison, and Xuejun Yang. 2012. Test-case Reduction for C Compiler

Bugs. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI

’12), ACM, New York, NY, USA, 335-346. https://doi.org/10.1145/2254064,.2254104



[50] Sriram Sankaranarayanan, Swarat Chaudhuri, Franjo Ivandi¢, and Aarti Gupta. 2008. Dynamic Inference of Likely Data

Preconditions over Predicates by Tree Learning. In Proceedings of the 2008 International Symposium on Software Testing

and Analysis (ISSTA ’08). ACM, New York, NY, USA, 295-306. https://doi.org/10.1145/1390630.1390666



[51] Rahul Sharma, Saurabh Gupta, Bharath Hariharan, Alex Aiken, Percy Liang, and Aditya V Nori. 2013. A data driven

approach for algebraic loop invariants. In European Symposium on Programming. Springer, 574-592.



[52] Rahul Sharma, Aditya V Nori, and Alex Aiken. 2012. Interpolants as classifiers. In International Conference on Computer

Aided Verification. Springer, 71-87.



[53] Gagandeep Singh, Markus Piischel, and Martin Vechev. 2015. Making Numerical Program Analysis Fast. In Proceedings of

the 36th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’15). ACM, New York,

NY, USA, 303-313. https://doi.org/10.1145/2737924.2738000



[54] Yannis Smaragdakis, George Kastrinis, and George Balatsouras. 2014. Introspective Analysis: Context-sensitivity, Across

the Board. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation

(PLDI ’14), ACM, New York, NY, USA, 485-495. https://doi.org/10.1145/2594291,2594320



[55] Xin Zhang, Ravi Mangal, Radu Grigore, Mayur Naik, and Hongseok Yang. 2014. On Abstraction Refinement for Program Analyses in Datalog. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and

Implementation (PLDI ’14). ACM, New York, NY, USA, 239-248. https://doi.org/10.1145/2594291.2594327



[56] Xin Zhang, Mayur Naik, and Hongseok Yang. 2013. Finding Optimum Abstractions in Parametric Dataflow Analysis. In

Proceedings of the 34th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’13). ACM,

New York, NY, USA, 365-376. https://doi.org/10.1145/2491956.2462185



[57] Xiang Zhang, Junbo Zhao, and Yann LeCun. 2015. Character-level convolutional networks for text classification. In Advances

in neural information processing systems. 649-657.



[58] He Zhu, Aditya V. Nori, and Suresh Jagannathan. 2015. Learning Refinement Types. In Proceedings of the 20th ACM

SIGPLAN International Conference on Functional Programming (ICFP 2015). ACM, New York, NY, USA, 400-411. https:

//doi.org/10.1145/2784731.2784766



[59] He Zhu, Gustavo Petri, and Suresh Jagannathan. 2016. Automatically Learning Shape Specifications. In Proceedings of the

37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’16). ACM, New York, NY,

USA, 491-507. https://doi.org/10.1145/2908080.2908125



[60] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 101. Publication date: October 2017.
