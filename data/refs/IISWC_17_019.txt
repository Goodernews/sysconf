[1] D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis,
“Heracles: Improving resource efficiency at scale,” in ISCA-42, 2015.
[2] H. Kasture and D. Sanchez, “Ubik: Efficient cache sharing with strict
qos for latency-critical workloads,” in ASPLOS, 2014.
[3] H. Kasture, D. B. Bartolini, N. Beckmann, and D. Sanchez, “Rubik: Fast
analytical power management for latency-critical systems,” in MICRO,
2015.
[4] X. Liang, M. Nguyen, and H. Che, “Wimpy or brawny cores: A
throughput perspective,” J. Parallel Distrib. Comput., 2013.
[5] V. Janapa Reddi, B. C. Lee, T. Chilimbi, and K. Vaid, “Web search
using mobile cores: Quantifying and mitigating the price of efficiency,”
in ISCA-37, 2010.
[6] K. Vaid, “Datacenter power efficiency: Separating fact from fiction,”
Workshop on Power Aware Computing and Systems, 2010.
[7] “Nginx official website,” http://nginx.org.
[8] “Usage statistics and market share of nginx for websites,” https://
w3techs.com/technologies/details/ws-nginx/all/all.
[9] B. Fitzpatrick, “Distributed caching with memcached,” in Linux Journal,
2004.
[10] S. Li, H. Lim, V. W. Lee et al., “Architecting to achieve a billion requests
per second throughput on a single key-value store server platform,” in
ISCA, 2015.
[11] J. Leverich and C. Kozyrakis, “Reconciling high server utilization and
sub-millisecond quality-of-service,” in EuroSys, 2014.
[12] J. Li, N. K. Sharma, and S. D. Ports, Dan RK Gribble, “Tales of the tail:
Hardware, OS, and application-level sources of tail latency,” in SoCC,
2014.
[13] M.-C. Lee, F.-Y. Leu, and Y.-P. Chen, “Cache replacement algorithms
for youtube,” in AINA-28, 2014.
[14] K. Lim, P. Ranganathan, J. Chang, C. Patel, T. Mudge, and S. Reinhardt,
“Understanding and designing new server architectures for emerging
warehouse-computing environments,” in ACM SIGARCH Computer Architecture News, 2008.
[15] M. Coppola, B. Falsafi, J. Goodacre, and G. Kornaros, “From embedded
multi-core socs to scale-out processors,” in DATE, 2013.
[16] J. D. Davis, J. Laudon, and K. Olukotun, “Maximizing cmp throughput
with mediocre cores,” in PACT-14, 2005.
[17] L. Geppert, “Suns big splash: Niagara multiprocessor chip,” IEEE
Spectrum, 2005.
[18] D. Loghin, B. M. Tudor, H. Zhang, B. C. Ooi, and Y. M. Teo, “A
performance study of big data on small nodes,” VLDB, 2015.
[19] U. Hölzle, “Brawny cores still beat wimpy cores, most of the time,”
IEEE Micro, 2010.
[20] A. Putnam, A. M. Caulfield, E. S. Chung et al., “A reconfigurable fabric
for accelerating large-scale datacenter services,” in ISCA-41, 2014.

[21] T. Chen, Z. Du, N. Sun, J. Wang, C. Wu, Y. Chen, and O. Temam,
“Diannao: A small-footprint high-throughput accelerator for ubiquitous
machine-learning,” in ASPLOS-19, 2014.
[22] N. P. Jouppi, C. Young, N. Patil, D. Patterson, G. Agrawal, R. Bajwa,
S. Bates, S. Bhatia, N. Boden, A. Borchers et al., “In-datacenter
performance analysis of a tensor processing unit,” in ISCA-44, 2017.
[23] “Specifications of Intel Xeon E5-2699 v4,” http://ark.intel.com/products/
91317/Intel-Xeon-Processor-E5-2699-v4-55M-Cache-2 20-GHz.
[24] Cavium Inc., “High performance memory caching using thunderx,”
Tirias Research, 2016.
[25] ——, “High performance nginx content delievery using thunderx,” Tirias
Research, 2016.
[26] “Memcached official website,” http://memcached.org.
[27] “Nginx documentation of http core module,” http://nginx.org/en/docs/
http/ngx http core module.html.
[28] B. Schroeder, A. Wierman, and M. Harchol-Balter, “Open versus closed:
A cautionary tale.” in NSDI, 2006.
[29] Y. Zhang, D. Meisner, J. Mars, and L. Tang, “Treadmill: Attributing
the source of tail latency through precise load testing and statistical
inference,” in ISCA-43, 2016.
[30] “Memcached load generator,” https://github.com/leverich/mutilate.
[31] “Wrk2: A constant throughput, correct latency recording variant of wrk,”
https://github.com/giltene/wrk2.
[32] L. A. Adamic and B. A. Huberman, “Zipf’s law and the internet.”
Glottometrics, 2002.
[33] L. Ramaswamy, L. Liu, and A. Iyengar, “Cache clouds: Cooperative
caching of dynamic documents in edge networks,” in ICDCS-25, 2005.
[34] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and M. Paleczny,
“Workload analysis of a large-scale key-value store,” in SIGMETRICS,
2012.
[35] L. Barroso and U. Hoelzle, The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines, 2009.
[36] C. Delimitrou and C. Kozyrakis, “Quasar: Resource-Efficient and QoSAware Cluster Management,” in ASPLOS-19, 2014.
[37] H. Yang, A. Breslow, J. Mars, and L. Tang, “Bubble-flux: precise online
qos management for increased utilization in warehouse scale computers,”
in ISCA-40, 2013.
[38] J. Mars and L. Tang, “Whare-map: heterogeneity in ”homogeneous”
warehouse-scale computers,” in ISCA-40, 2013.
[39] “Host server cpu utilization in amazon ec2 cloud,” http://goo.gl/2LTx4T.
[40] A. Verma, L. Pedrosa, M. Korupolu, D. Oppenheimer, E. Tune, and
J. Wilkes, “Large-scale cluster management at google with borg,” ser.
EuroSys, 2015.
[41] M. Schwarzkopf, A. Konwinski, M. Abd-El-Malek, and J. Wilkes,
“Omega: flexible, scalable schedulers for large compute clusters,” in
EuroSys. 2013.
[42] D. Domingo and W. Cohen, “Systemtap 2.9 systemtap beginners guide,”
2013.
[43] M. Ferdman, A. Adileh, O. Kocberber et al., “Clearing the clouds:
A study of emerging scale-out workloads on modern hardware,” in
ASPLOS, 2012.
[44] I. S. Adapters, “Receive side scaling on intel network adapters.”
[45] A. S. Tanenbaum, J. N. Herder, and H. Bos, “File size distribution on
unix systems: then and now,” SIGOSR, 2006.
[46] R. W. Schmidt and S. Grarup, “Vapp: A standards-based container for
cloud providers,” SIGOSR, 2010.
[47] J. Smith and R. Nair, Virtual machines: versatile platforms for systems
and processes, 2005.
[48] H. Zhu and M. Erez, “Dirigent: Enforcing qos for latency-critical tasks
on shared multicore systems,” in ASPLOS-21, 2016.
[49] “Cgroups,” http://man7.org/linux/man-pages/man7/cgroups.7.html.
[50] M. A. Brown, “Traffic control howto,” http://linux-ip.net/articles/
Traffic-Control-HOWTO/.
[51] “Intel R 64 and IA-32 Architecture Software Developer’s Manual,
vol3B: System Programming Guide, Part 2, September 2014.”
[52] D. Sanchez and C. Kozyrakis, “Vantage: Scalable and efficient fine-grain
cache partitioning,” in ISCA-38, 2011.
[53] D. Marr, F. Binns, D. Hill et al., “Hyper-threading technology in the
netburst R microarchitecture,” HotChips, 2002.
[54] C. Kozyrakis, A. Kansal, S. Sankar, and K. Vaid, “Server engineering
insights for large-scale online services,” IEEE Micro, 2010.
