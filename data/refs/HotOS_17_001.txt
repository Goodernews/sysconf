[1] Daniel J. Abadi. Consistency Tradeoffs in Modern Distributed Database
System Design. Computer, pages 37-42, February 2012.
[2] Michael Abd-El-Malek, Gregory R. Ganger, Garth R. Goodson, Michael K.
Reiter, and Jay J. Wylie. Fault-Scalable Byzantine Fault-Tolerant Services.
Tn Proc. SOSP. ACM, 2005.

[3] Amazon. Summary of the Amazon DynamoDB Service
Disruption and Related Impacts in the US-Hast Region.
https://aws.amazon.com/message/5467D2/, September 2015. Last
accessed on Jan 12, 2017.

[4] Jason Baker, Chris Bond, James C. Corbett, JJ Furman, Andrey Khorlin,
James Larson, Jean-Michel Leon, Yawei Li, Alexander Lloyd, and Vadim
Yushprakh. Megastore: Providing Scalable, Highly Available Storage for
Interactive Services. In Proceedings of the Conference on Innovative Data
system Research (CIDR), pages 223-234, 2011.

[5] Betsy Beyer, Chris Jones, Jennifer Petoff, and Niall Richard Murphy, edi
tors. Site Reliability Engineering. O’ Reilly Media, Inc., 2016.

[6] Ken Birman, Gregory Chockler, and Robbert van Renesse. Toward a cloud

computing research agenda. SIGACT News, 40:68-80, June 2009.

[7] Eric Brewer. CAP Twelve Years Later: How the ”Rules" Have Changed.

Computer, 45(2):23-29, Feb 2012.

[8] Mike Burrows. The Chubby lock service for loosely-coupled distributed

systems. In Proc. OSDI, pages 335-350, 2006.

[9] Brad Calder, Ju Wang, Aaron Ogus, Niranjan Nilakantan, Arild Skjolsvold,

Sam McKelvie, Yikang Xu, Shashwat Srivastav, Jiesheng Wu, Huseyin

Simitci, Jaidev Haridas, Chakravarthy Uddaraju, Hemal Khatri, Andrew

Edwards, Vaman Bedekar, Shane Mainali, Rafay Abbasi, Arpit Agarwal,

Mian Fahim ul Hag, Muhammad Ikram ul Haq, Deepali Bhardwaj, Sowmya

Dayanand, Anitha Adusumilli, Marvin McNett, Sriram Sankaran, Kavitha

Manivannan, and Leonidas Rigas. Windows Azure Storage: A Highly Avail
able Cloud Storage Service with Strong Consistency. In Proc. SOSP. ACM,

2011.

[10] George Candea, Shinichi Kawamoto, Yuichi Fujiki, Greg Friedman, and

Armando Fox. Microreboot — A Technique for Cheap Recovery. In Proc.

OSDI, 2004.

[11] Miguel Castro and Barbara Liskov. Practical Byzantine Fault Tolerance and
Proactive Recovery. Transactions on Computer Systems (TOCS), 20:398461, November 2002.

[12] HealthCare.gov Progress and Performance
port. Centers for Medicare & Medicaid
https://www.cms.gov/newsroom/mediareleasedatabase/pressreleases/2013-press-releases-items/2013-12-01 html.

[13] Mike Y. Chen, Emre Kiciman, Eugene Fratkin, Armando Fox, and Eric
Brewer. Pinpoint: Problem Determination in Large, Dynamic Internet Services. In Proc. DSN, pages 595-604, 2002.

[14] Allen Clement, Edmund Wong, Lorenzo Alvisi, and Mike Dahlin. Making
Byzantine Fault Tolerant Systems Tolerate Byzantine Faults. In Proc. NSDI.
USENIX, 2009.

[15] Michael Conley, Amin Vahdat, and George Porter. Achieving Cost-efficient,

Data-intensive Computing in the Cloud. In Proc. SoCC, pages 302-314,

2015.

[16] James C. Corbett, Jeffrey Dean, Michael Epstein, Andrew Fikes, Christo
pher Frost, J. J. Furman, Sanjay Ghemawat, Andrey Gubarev, Christopher
Heiser, Peter Hochschild, Wilson Hsieh, Sebastian Kanthak, Eugene Ko
gan, Hongyi Li, Alexander Lloyd, Sergey Melnik, David Mwaura, David

Nagle, Sean Quinlan, Rajesh Rao, Lindsay Rolig, Yasushi Saito, Michal

Szymaniak, Christopher Taylor, Ruth Wang, and Dale Woodford. Span
ner: Google’s Globally Distributed Database. ACM Trans. Comput. Syst.,

31(3):8:1-8:22, August 2013.

[17] Jeffrey Dean and Luiz André Barroso. The Tail at Scale. CACM, 56(2):74—

80, February 2013.

[18] Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, Gunavardhan Kaku
lapati, Avinash Lakshman, Alex Pilchin, Swaminathan Sivasubramanian,

Peter Vosshall, and Werner Vogels. Dynamo: Amazon’s Highly Available

Key-value Store. In Proc. SOSP. ACM, 2007.

[19] Bryan Ford. Icebergs in the Clouds: the Other Risks of Cloud Computing.
In Proc. HotCloud, 2012.

[20] Adam Glick, Jason Roth, Ralph Squillace, and Simon Rolfe. Disaster recovery and high availability for applications built on Méicrosoft Azure. https://docs.microsoft.com/en-us/azure/resiliency/resiliencydisaster-recovery-high-availability-azure-applications, August 2016. Last
accessed on Jan 12, 2017.

[21] Ramesh Govindan, Ina Minei, Mahesh Kallahalla, Bikash Koley, and Amin
Vahdat. Evolve or Die: High-Availability Design Principles Drawn from
Google’s Network Infrastructure. In Proc. SIGCOMM, pages 58-72, 2016.

[22] John Graham-Cumming. How and why the leap second affected Cloudflare
DNS. _https://blog.cloudflare.com/how-and-why-the-leap-second-affectedcloudflare-dns/, January 2017.

[23] Peng Huang, Chuanxiong Guo, Lidong Zhou, Jacob R. Lorch, Yingnong
Dang, Murali Chintalapati, and Randolph Yao. Gray failure: The
achillesiAZ heel of cloud-scale systems. In Proc. HotOS, May 2017.

[24] Patrick Hunt, Mahadev Konar, Flavio P. Junqueira, and Benjamin Reed.
ZooKeeper: Wait-free Coordination for Internet-scale Systems. In Proc.
USENIX ATC, 2010.

[25] Raj Jain. The Art of Computer Systems Performance Analysis, chapter 3.
John Wiley, 1991.

[26] Kimberley Keeton, Cipriano Santos, Dirk Beyer, Jeffrey Chase, and John
Wilkes. Designing for Disasters. In Proc. FAST, pages 59-62, 2004.

[27] James J. Kistler and M. Satyanarayanan. Disconnected Operation in the
Coda File System. Trans. Comput. Syst., 10(1):3-25, February 1992.

[28] Ramakrishna Kotla, Lorenzo Alvisi, Mike Dahlin, Allen Clement, and Edmund Wong. Zyzzyva: Speculative Byzantine Fault Tolerance. In Proc.
SOSP. ACM, 2007.

[29] Alok Kumar, Sushant Jain, Uday Naik, Anand Raghuraman, Nikhil Kasinadhuni, Enrique Cauich Zermeno, C. Stephen Gunn, Jing Ai, Bjérn Carlin,
Mihai Amarandei-Stavila, Mathieu Robin, Aspi Siganporia, Stephen Stuart,
and Amin Vahdat. BwE: Flexible, Hierarchical Bandwidth Allocation for
WAN Distributed Computing. In Proc. SIGCOMM ’15, 2015.

[30] Leslie Lamport. The part-time parliament. Transactions on Computer Systems (TOCS), 16:133-169, May 1998.

[31] Butler W. Lampson. Computer Security in the Real World. Computer,
37(6):37-46, June 2004.

[32] John F. Meyer. Performability: a retrospective and some pointers to the
future. Performance Evaluation, 14:139-156, 1992.

[33] Robinson Meyer. The Secret Startup That Saved the Worst Website in America. The Atlantic, July 2015.

[34] David Patterson, Aaron Brown, Pete Broadwell, George Candea, Mike
Chen, James Cutler, Patricia Enriquez, Armando Fox, Emre KAécAgman,
Matthew Merzbacher, David Oppenheimer, Naveen Sastry, William Tetzlaff, Jonathan Traupman, and Noah Treuhaft. Recovery Oriented Computing (ROC): Motivation, Definition, Techniques, and Case Studies. Technical Report UCB//CSD-02-1175, U.C. Berkeley Computer Science, March
2002.

[35] Teri Radichel. Case Study: Critical Controls that Could Have Prevented
Target Breach. SANS Institute InfoSec Reading Room, August 2014.

[36] Jerome H. Saltzer and Michael D. Schroeder. The Protection of Information
in Computer Systems. Proc. IEEE, 63(9):1278—1308, September 1975.

[37] Gabriel Sanchez. Case Study: Critical Controls that Sony Should Have
Implemented. SANS Institute InfoSec Reading Room, June 2015.

[38] Mehul A. Shah, Mary Baker, Jeffrey C. Mogul, and Ram Swaminathan. Auditing to Keep Online Storage Services Honest. In Proc. HOTOS, pages
11:1-11:6, 2007.

[39] Arjun Singh, Joon Ong, Amit Agarwal, Glen Anderson, Ashby Armistead,
Roy Bannon, Seb Boving, Gaurav Desai, Bob Felderman, Paulie Germano,
Anand Kanagala, Jeff Provost, Jason Simmons, Eiichi Tanda, Jim Wanderer,
Urs Hélzle, Stephen Stuart, and Amin Vahdat. Jupiter Rising: A Decade of
Clos Topologies and Centralized Control in Google’s Datacenter Network.
In Proc. SIGCOMM, pages 183-197, 2015.

[40] James P. G. Sterbenz, David Hutchison, Egemen K. Cetinkaya, Abdul Jabbar, Justin P. Rohrer, Marcus Schéller, and Paul Smith. Resilience and survivability in communication networks: Strategies, principles, and survey of
disciplines. Computer Networks, 54:1245-1265, 2010.

[41] Yu-Wei Eric Sung, Xiaozheng Tie, Starsky H.Y. Wong, and Hongyi Zeng.
Robotron: Top-down Network Management at Facebook Scale. In Proc.
SIGCOMM, pages 426-439, 2016.

[42] Frank Swiderski and Window Snyder. Threat Modeling. Microsoft Press,
Redmond, WA, USA, 2004.

[43] Douglas B. Terry, Vijayan Prabhakaran, Ramakrishna Kotla, Mahesh Balakrishnan, Marcos K. Aguilera, and Hussam Abu-Libdeh. Consistencybased Service Level Agreements for Cloud Storage. In Proc. SOSP. ACM,
2013.

[44] John Wilkes. Utility Functions, Prices, and Negotiation. In Rajkumar Buyya
and Kris Bubendorfer, editors, Market-Oriented Grid and Utility Computing, Wiley Series on Parallel and Distributed Computing, chapter 4, pages
67-88. John Wiley & Sons, Hoboken, NJ, October 2009.

17

[45] Jian Yin, Jean-Philippe Martin, Arun Venkataramani, Lorenzo Alvisi, and
Mike Dahlin. Separating Agreement from Execution for Byzantine Fault
Tolerant Services. In Proc. SOSP. ACM, 2003.

[46] Haifeng Yu and Amin Vahdat. Design and evaluation of a continuous consistency model for replicated services. In Proc. OSDI, 2000.