[1] 2014. PlayDrone Android Apps. https://archive.org/details/android apps. (2014).
[2] 2017. Apktool:A tool for reverse engineering Android apk files.
https://ibotpeaches.github.io/Apktool/. (2017).
[3] Vitor Afonso, Antonio Bianchi, Yanick Fratantonio, Adam Doupe ́, Mario Polino,
Paulo de Geus, Christopher Kruegel, and Giovanni Vigna. 2016. Going Native: Using a Large-Scale Analysis of Android Apps to Create a Practical Native-Code Sandboxing Policy. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[4] Steven Arzt, Siegfried Rasthofer, Christian Fritz, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2014. Flowdroid: Precise context, flow, field, object-sensitive and lifecycle-aware taint analysis for android apps. ACM SIGPLAN Notices 49, 6 (2014), 259–269.
[5] Vitalii Avdiienko, Konstantin Kuznetsov, Alessandra Gorla, Andreas Zeller, Steven Arzt, Siegfried Rasthofer, and Eric Bodden. 2015. Mining apps for abnor- mal usage of sensitive data. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 426–436.
[6] Paulo Barros, Rene ́ Just, Suzanne Millstein, Paul Vines, Werner Dietl, Michael D Ernst, et al. 2015. Static Analysis of Implicit Control Flow: Resolving Java Reflection and Android Intents (T). In Automated Software Engineering (ASE), 2015 30th IEEE/ACM International Conference on. IEEE, 669–679.
[7] Sven Bugiel, Stephen Heuser, and Ahmad-Reza Sadeghi. 2013. Flexible and fine- grained mandatory access control on Android for diverse security and privacy policies. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). 131–146.
[8] Stefano Calzavara, Ilya Grishchenko, and Matteo Maffei. 2016. Horndroid: Prac- tical and sound static analysis of android applications by smt solving. In Security and Privacy (EuroS&P), 2016 IEEE European Symposium on. IEEE, 47–62.
[9] Qi Alfred Chen, Zhiyun Qian, and Zhuoqing Morley Mao. 2014. Peeking into Your App without Actually Seeing It: UI State Inference and Novel Android Attacks.. In USENIX Security, Vol. 14. 1037–1052.
[10] Erika Chin, Adrienne Porter Felt, Kate Greenwood, and David Wagner. 2011. Analyzing inter-application communication in Android. In Proceedings of the 9th international conference on Mobile systems, applications, and services. ACM, 239–252.
[11] Jeffrey Dean, David Grove, and Craig Chambers. 1995. Optimization of object- oriented programs using static class hierarchy analysis. In European Conference on Object-Oriented Programming. Springer, 77–101.
[12] Manuel Egele, David Brumley, Yanick Fratantonio, and Christopher Kruegel. 2013. An empirical study of cryptographic misuse in android applications. In Proceedings of the 2013 ACM SIGSAC conference on Computer & communications security. ACM, 73–84.
[13] William Enck, Damien Octeau, Patrick McDaniel, and Swarat Chaudhuri. 2011. A Study of Android Application Security.. In USENIX security symposium, Vol. 2. 2.
[14] Adrienne Porter Felt, Erika Chin, Steve Hanna, Dawn Song, and David Wagner. 2011. Android permissions demystified. In Proceedings of the 18th ACM conference on Computer and communications security. ACM, 627–638.
[15] Yanick Fratantonio, Antonio Bianchi, William Robertson, Engin Kirda, Christo- pher Kruegel, and Giovanni Vigna. 2016. Triggerscope: Towards detecting logic bombs in android applications. In Security and Privacy (SP), 2016 IEEE Symposium on. IEEE, 377–396.
[16] Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric Bodden, Alexandre Bartel, Jacques Klein, Yves Le Traon, Damien Octeau, and Patrick McDaniel. 2013. Highly precise taint analysis for Android applications. EC SPRIDE, TU Darmstadt, Tech. Rep (2013).
[17] Google. 2017. Android Application Fundamentals. https://developer.android.com/guide/components/fundamentals.html. (2017).
[18] Google. 2017. GooglePlay. https://play.google.com/store/apps?hl=en. (2017).
[19] Google. 2017. Intents and Intent Filters. https://developer.android.com/guide/components/intents-filters.html. (2017).
[20] Google. 2017. Service Component. https://developer.android.com/guide/topics/manifest /service-element.html. (2017).
[21] Google. 2017. Shared-Preferences:Saving Key-Value Sets. (2017).
[22] Google. 2017. Uses SDK Element in Android Application Manifest File.
https://developer.android.com/guide/topics/manifest/uses-sdk-element.html.
(2017).
[23] Michael I Gordon, Deokhwan Kim, Jeff H Perkins, Limei Gilham, Nguyen Nguyen,
and Martin C Rinard. 2015. Information Flow Analysis of Android Applications
in DroidSafe.. In NDSS. Citeseer.
[24] Johannes Hoffmann, Martin Ussath, Thorsten Holz, and Michael Spreitzenbarth.
2013. Slicing droids: program slicing for smali code. In Proceedings of the 28th
Annual ACM Symposium on Applied Computing. ACM, 1844–1851.
[25] PSU SIIS Lab. 2014. coal solver. http://siis.cse.psu.edu/coal/. (2014).
[26] Ondrˇej Lhota ́k and Laurie Hendren. 2003. Scaling Java points-to analysis using
Spark. In International Conference on Compiler Construction. Springer, 153–169.
[27] Ding Li, Yingjun Lyu, Mian Wan, and William GJ Halfond. 2015. String analysis for Java and Android applications. In Proceedings of the 2015 10th Joint Meeting
on Foundations of Software Engineering. ACM, 661–672.
[28] Li Li, Alexandre Bartel, Tegawende ́ F Bissyande ́, Jacques Klein, Yves Le Traon,
Steven Arzt, Siegfried Rasthofer, Eric Bodden, Damien Octeau, and Patrick McDaniel. 2015. Iccta: Detecting inter-component privacy leaks in android apps.
In Proceedings of the 37th International Conference on Software Engineering-Volume
1. IEEE Press, 280–291.
[29] Li Li, Tegawende ́ F Bissyande ́, Damien Octeau, and Jacques Klein. 2016. Droidra:
Taming reflection to support whole-program analysis of android apps. In Pro- ceedings of the 25th International Symposium on Software Testing and Analysis. ACM, 318–329.
[30] Martina Lindorfer, Matthias Neugschwandtner, Lukas Weichselbaum, Yanick Fratantonio, Victor Van Der Veen, and Christian Platzer. 2014. Andrubis– 1,000,000 apps later: A view on current Android malware behaviors. In 2014 Third International Workshop on Building Analysis Datasets and Gathering Experience Returns for Security (BADGERS). IEEE, 3–17.
[31] Long Lu, Zhichun Li, Zhenyu Wu, Wenke Lee, and Guofei Jiang. 2012. Chex: statically vetting android apps for component hijacking vulnerabilities. In Pro- ceedings of the 2012 ACM conference on Computer and communications security. ACM, 229–240.
[32] Tyler McDonnell, Baishakhi Ray, and Miryung Kim. 2013. An empirical study of api stability and adoption in the android ecosystem. In Software Maintenance (ICSM), 2013 29th IEEE International Conference on. IEEE, 70–79.
[33] Damien Octeau, Daniel Luchaup, Matthew Dering, Somesh Jha, and Patrick McDaniel. 2015. Composite constant propagation: Application to android inter- component communication analysis. In Proceedings of the 37th International Conference on Software Engineering-Volume 1. IEEE Press, 77–88.
[34] Damien Octeau, Patrick McDaniel, Somesh Jha, Alexandre Bartel, Eric Bodden, Jacques Klein, and Yves Le Traon. 2013. Effective inter-component communica- tion mapping in android: An essential step towards holistic security analysis. In Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13). 543–558.
[35] Sebastian Poeplau, Yanick Fratantonio, Antonio Bianchi, Christopher Kruegel, and Giovanni Vigna. 2014. Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading in Android Applications.. In NDSS, Vol. 14. 23–26.
[36] Siegfried Rasthofer, Steven Arzt, Marc Miltenberger, and Eric Bodden. 2016. Harvesting runtime values in android applications that feature anti-analysis techniques. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[37] Thomas Reps, Susan Horwitz, and Mooly Sagiv. 1995. Precise interprocedural dataflow analysis via graph reachability. In Proceedings of the 22nd ACM SIGPLAN- SIGACT symposium on Principles of programming languages. ACM, 49–61.
[38] Stephen Smalley and Robert Craig. 2013. Security Enhanced (SE) Android: Bringing Flexible MAC to Android.. In NDSS, Vol. 310. 20–38.
[39] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A measurement study of google play. In ACM SIGMETRICS Performance Evaluation Review, Vol. 42. ACM, 221–233.
[40] Ruowen Wang, William Enck, Douglas Reeves, Xinwen Zhang, Peng Ning, Dingbang Xu, Wu Zhou, and Ahmed M Azab. 2015. EASEAndroid: automatic policy analysis and refinement for security enhanced android via large-scale semi-supervised learning. In 24th USENIX Security Symposium (USENIX Security 15). 351–366.
[41] Fengguo Wei, Sankardas Roy, Xinming Ou, et al. 2014. Amandroid: A precise and general inter-component data flow analysis framework for security vetting of android apps. In Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security. ACM, 1329–1341.
[42] Michelle Y Wong and David Lie. 2016. Intellidroid: A targeted input generator for the dynamic analysis of android malware. In Proceedings of the Annual Symposium on Network and Distributed System Security (NDSS).
[43] Meng Xu, Chengyu Song, Yang Ji, Ming-Wei Shih, Kangjie Lu, Cong Zheng, Ruian Duan, Yeongjin Jang, Byoungyoung Lee, Chenxiong Qian, et al. 2016. Toward Engineering a Secure Android Ecosystem: A Survey of Existing Techniques. ACM Computing Surveys (CSUR) 49, 2 (2016), 38.
[44] Mu Zhang and Heng Yin. 2014. AppSealer: Automatic Generation of Vulnerability-Specific Patches for Preventing Component Hijacking Attacks in Android Applications.. In NDSS.
