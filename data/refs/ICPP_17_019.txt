[1] V. Agarwal, F. Petrini, D. Pasetto, and D. A. Bader, “Scalable graph
exploration on multicore processors,” in Proc. of the ACM/IEEE Intl.
Conf. for High Performance Computing, Networking, Storage and Analysis. 2010, pp. 1–11.
[2] J. Shun and G. E. Blelloch, “Ligra: A lightweight graph processing
framework for shared memory,” in Proc. of the ACM Symp. on Principles
and Practice of Parallel Programming. 2013, pp. 135–146.
[3] K. Zhang, R. Chen, and H. Chen, “NUMA-aware graph-structured
analytics,” in Proc. of the ACM Symp. on Principles and Practice of
Parallel Programming. 2015, pp. 183–193.
[4] D. Nguyen, A. Lenharth, and K. Pingali, “A lightweight infrastructure
for graph analytics,” in Proc. of the ACM Symp. on Operating Systems
Principles. 2013, pp. 456–471.
[5] A. Kyrola, G. E. Blelloch, and C. Guestrin, “GraphChi: Large-scale
graph computation on just a PC.” in OSDI, vol. 12, 2012, pp. 31–46.
[6] A. Roy, I. Mihailovic, and W. Zwaenepoel, “X-stream: Edge-centric
graph processing using streaming partitions,” in Proc. of the ACM Symp.
on Operating Systems Principles. 2013, pp. 472–488.
[7] L. Yuan, C. Ding, D. Tefankovic, and Y. Zhang, “Modeling the locality
in graph traversals,” in Proc. of the Intl. Conf. on Parallel Processing.
2012, pp. 138–147.
[8] S. Beamer, K. Asanovic, and D. Patterson, “Locality exists in graph
processing: Workload characterization on an Ivy Bridge server,” in Proc.
IEEE Intl. Symp. on Workload Characterization. 2015, pp. 56–65.
[9] A. Lumsdaine, D. Gregor, B. Hendrickson, and J. Berry, “Challenges in
parallel graph processing,” Parallel Processing Letters, vol. 17, no. 01,
pp. 5–20, 2007.
[10] G. Cong and S. Sbaraglia, “A study on the locality behavior of minimum
spanning tree algorithms,” in High Performance Computing-HiPC. 2006,
pp. 583–594.
[11] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser,
and G. Czajkowski, “Pregel: a system for large-scale graph processing,”
in Proc. of the ACM SIGMOD Intl. Conf. on Management of data. 2010,
pp. 135–146.
[12] Y. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and J. M.
Hellerstein, “Distributed GraphLab: a framework for machine learning
and data mining in the cloud,” Proc. of the VLDB Endowment, vol. 5,
no. 8, pp. 716–727, 2012.
[13] W.-S. Han, S. Lee, K. Park, J.-H. Lee, M.-S. Kim, J. Kim, and H. Yu,
“TurboGraph: A fast parallel graph engine handling billion-scale graphs
in a single PC,” in Proc. of the ACM SIGKDD Intl. Conf. on Knowledge
Discovery and Data Mining. 2013, pp. 77–85.
[14] J. E. Gonzalez, Y. Low, H. Gu, D. Bickson, and C. Guestrin, “Powergraph: Distributed graph-parallel computation on natural graphs.” in
OSDI, vol. 12, no. 1, 2012, p. 2.
[15] Y. Saad, “SPARSKIT: A basic tool for sparse matrix computations,”
NASA, Tech. Rep. NASA-CR-185876, May 1990.
[16] S. Hong, T. Oguntebi, and K. Olukotun, “Efﬁcient parallel graph
exploration on multi-core cpu and gpu,” in Intl. Conf. on Parallel
Architectures and Compilation Techniques. 2011, pp. 78–88.
[17] S. Beamer, K. Asanović, and D. Patterson, “Direction-optimizing
breadth-ﬁrst search,” in Proc. of the Intl. Conf. on High Performance
Computing, Networking, Storage and Analysis. 2012, pp. 12:1–12:10.
[18] Y. Low, D. Bickson, J. Gonzalez, C. Guestrin, A. Kyrola, and J. M.
Hellerstein, “Distributed graphlab: A framework for machine learning
and data mining in the cloud,” Proc. VLDB Endow., vol. 5, no. 8, pp.
716–727, Apr. 2012.
[19] J. Sun, H. Vandierendonck and D.S. Nikolopoulos, “GraphGrind: Addressing Load Imbalance of Graph Partitioning,” in Proc. of the ACM
International. Conference on Supercomputing. 2017, pp. 16:1–16:10.
[20] L. Page, S. Brin, R. Motwani, and T. Winograd, “The pagerank citation
ranking: Bringing order to the web.” Stanford InfoLab, Technical Report
1999-66, November 1999, previous number = SIDL-WP-1999-0120.
[21] H. Kwak, C. Lee, H. Park, and S. Moon, “What is twitter, a social
network or a news media?” in Proc. of the 19th Intl. Conf. on World
wide web. 2010, pp. 591–600.
[22] J. Yang and J. Leskovec, “Deﬁning and evaluating network communities
based on ground-truth,” CoRR, vol. abs/1205.6233, 2012.
[23] A. Mislove, M. Marcon, K. P. Gummadi, P. Druschel, and B. Bhattacharjee, “Measurement and Analysis of Online Social Networks,” in
Proc. of the ACM/Usenix Internet Measurement Conf., October 2007.
[24] Y. Vigfusson, “Afﬁnity in distributed systems,” Ph.D. dissertation, Cornell University, 2010.
[25] D. G. Murray, F. McSherry, R. Isaacs, M. Isard, P. Barham, and
M. Abadi, “Naiad: A timely dataﬂow system,” in Proc. of the TwentyFourth ACM Symp. on Operating Systems Principles. 2013, pp. 439–455.
[26] F. McSherry, M. Isard, and D. G. Murray, “Scalability! but at what
COST?” in Workshop on Hot Topics in Operating Systems (HotOS XV).
May 2015.
[27] K. Pingali, D. Nguyen, M. Kulkarni, M. Burtscher, M. A. Hassaan,
R. Kaleem, T.-H. Lee, A. Lenharth, R. Manevich, M. Méndez-Lojo et al.,
“The tao of parallelism in algorithms,” ACM Sigplan Notices, vol. 46,
no. 6, pp. 12–25, 2011.
[28] G. Karypis and V. Kumar, “Multilevel k-way partitioning scheme
for irregular graphs,” Journal of Parallel and Distributed Computing,
vol. 48, no. 1, pp. 96 – 129, 1998.
[29] D. Margo and M. Seltzer, “A scalable distributed graph partitioner,”
Proc. VLDB Endow., vol. 8, no. 12, pp. 1478–1489, Aug. 2015.
[30] J. Mellor-Crummey, D. Whalley, and K. Kennedy, “Improving memory
hierarchy performance for irregular applications using data and computation reorderings,” Intl. Journal of Parallel Programming, vol. 29,
no. 3, pp. 217–247, 2001.
[31] C. Ding and K. Kennedy, “Improving cache performance in dynamic
applications through data and computation reorganization at run time,”
in Proc. of the ACM Conf. on Programming Language Design and
Implementation. 1999, pp. 229–241.
[32] S. Chatterjee, V. V. Jain, A. R. Lebeck, S. Mundhra, and M. Thottethodi,
“Nonlinear array layouts for hierarchical memory systems,” in Proc. of
the 13th Intl. Conf. on Supercomputing. 1999, pp. 444–453.
[33] M. Frasca, K. Madduri, and P. Raghavan, “NUMA-aware graph mining
techniques for performance and energy efﬁciency,” in Proc. of the
Intl. Conf. on High Performance Computing, Networking, Storage and
Analysis. 2012, pp. 95:1–95:11.
[34] G. Dai, T. Huang, Y. Chi, N. Xu, Y. Wang, and H. Yang, “Foregraph:
Exploring large-scale graph processing on multi-FPGA architecture,” in
Proc. of the 2017 ACM/SIGDA Intl. Symp. on Field-Programmable Gate
Arrays. 2017, pp. 217–226.
[35] W. Han, Y. Miao, K. Li, M. Wu, F. Yang, L. Zhou, V. Prabhakaran,
W. Chen, and E. Chen, “Chronos: A graph engine for temporal graph
analysis,” in Proc. of the Ninth European Conf. on Computer Systems
(EuroSys). 2014, pp. 1:1–1:14.
