[1] Baidu Baike. http://baike.baidu.com/.
[2] Enron Email Dataset. https://www.cs.cmu.edu/~./enron/.
[3] InnoDB Compression. http://dev.mysql.com/doc/refman/5.6/

en/innodb-compression-internals.html.

[4] Linux SDFS. www.opendedup.org.
[5] MongoDB. http://www.mongodb.org.
[6] MurmurHash. https://sites.google.com/site/murmurhash.
[7] Ocarina Networks. www.ocarinanetworks.com.
[8] Permabit Data Optimization. www.permabit.com.
[9] Snappy. http://google.github.io/snappy/.
[10] Stack Exchange Data Archive.

https://archive.org/details/stackexchange.

[11] vBulletin. https://www.vbulletin.com.
[12] W3Techs. http://www.w3techs.com.
[13] Wikimedia Downloads. https://dumps.wikimedia.org.
[14] Wikipedia. https://www.wikipedia.org/.
[15] Windows Storage Server.

technet.microsoft.com/en-us/library/gg232683(WS.10).aspx.

[16] WiredTiger. http://www.wiredtiger.com/.
[17] ZFS Deduplication.

blogs.oracle.com/bonwick/entry/zfs_dedup.

[18] D. Abadi, S. Madden, and M. Ferreira. Integrating

compression and execution in column-oriented database
systems. In SIGMOD, pages 671–682, 2006.

[19] C. Alvarez. NetApp deduplication for FAS and V-Series

deployment and implementation guide. 2010.

[20] L. Aronovich, R. Asher, E. Bachmat, H. Bitner, M. Hirsch,

and S. T. Klein. The design of a similarity based
deduplication system. In SYSTOR, page 6, 2009.

[21] J. Bentley and D. McIlroy. Data compression using long
common strings. In Data Compression Conference, 1999.
Proceedings. DCC’99, pages 287–295, 1999.

[22] D. Bhagwat, K. Eshghi, D. D. Long, and M. Lillibridge.

Extreme binning: Scalable, parallel deduplication for
chunk-based ﬁle backup. In MASCOTS, pages 1–9, 2009.

[23] C. Binnig, S. Hildenbrand, and F. Färber. Dictionary-based

order-preserving string compression for main memory
column stores. In SIGMOD, pages 283–296, 2009.
[24] A. Broder. On the resemblance and containment of

documents. Compression and Complexity of Sequences,
1997.

[25] A. Broder. Identifying and ﬁltering near-duplicate

documents. 11th Annual Symposium on Combinatorial
Pattern Matching, 2000.

[26] R. C. Burns and D. D. Long. Efﬁcient distributed backup

with delta compression. In Proceedings of the ﬁfth workshop
on I/O in parallel and distributed systems, pages 27–36,

13

1997.

[27] A. Clements, I. Ahmad, M. Vilayannur, and J. Li.

Decentralized Deduplication in SAN Cluster File Systems.
In USENIX ATC, 2009.

[28] G. Cobena, S. Abiteboul, and A. Marian. Detecting changes

in xml documents. In ICDE, pages 41–52, 2002.

[29] B. Collins-Sussman, B. Fitzpatrick, and M. Pilato. Version

control with subversion. 2004.

[30] G. V. Cormack. Data compression on a database system.
Communications of the ACM, 28(12):1336–1342, 1985.

[31] B. Debnath, S. Sengupta, and J. Li. Chunkstash: Speeding up
inline storage deduplication using ﬂash memory. In USENIX
Annual Technical Conference, 2010.

[32] P. Deutsch and J.-L. Gailly. Zlib compressed data format

speciﬁcation version 3.3. Technical report, 1996.

[33] C. Dubnicki, L. Gryz, L. Heldt, M. Kaczmarczyk, W. Kilian,

P. Strzelczak, and J. Szczepkowski. Hydrastor: A scalable
secondary storage. In FAST, 2009.

[34] C. Dubnicki, L. Gryz, L. Heldt, M. Kaczmarczyk, W. Kilian,

P. Strzelczak, J. Szczepkowski, C. Ungureanu, , and
M. Welnicki. HYDRAstor: a Scalable Secondary Storage. In
FAST, 2009.

[35] A. El-Shimi, R. Kalach, A. K. Adi, O. J. Li, and S. Sengupta.

Primary data deduplication-large scale study and system
design. In USENIX Annual Technical Conference, 2012.
[36] S. Harizopoulos, V. Liang, D. J. Abadi, and S. Madden.
Performance tradeoffs in read-optimized databases. In
VLDB, pages 487–498, 2006.

[37] B. Iyer and D. Wilhite. Data compression support in

databases. 1994.

[38] N. Jain, M. Dahlin, and R. Tewari. Taper: Tiered approach
for eliminating redundancy in replica synchronization. In
FAST, 2005.

[39] E. Leonardi and S. S. Bhowmick. Xanadue: a system for
detecting changes to xml data in tree-unaware relational
databases. In SIGMOD, pages 1137–1140, 2007.

[40] M. Lillibridge, K. Eshghi, D. Bhagwat, V. Deolalikar,

G. Trezise, and P. Camble. Sparse indexing: Large scale,
inline deduplication using sampling and locality. In FAST,
2009.

[41] J. Loeliger. Version control with git: Powerful tools and

techniques for collaborative software development. 2009.

[42] J. P. MacDonald. File system support for delta compression.

Master’s thesis, University of California, Berkeley, 2000.
[43] S. Mishra. Data compression: Strategy, capacity planning

and best practices. SQL Server Technical Article, 2009.

[44] A. Muthitacharoen, B. Chen, and D. Mazières. A

low-bandwidth network ﬁle system. In SOSP, 2001.
[45] R. Pagh and F. F. Rodler. Cuckoo hashing. Journal of

Algorithms, 51(2):122–144, 2004.

[46] M. Poess and D. Potapov. Data compression in oracle. In

VLDB, pages 937–947, 2003.

[47] H. Pucha, D. G. Andersen, and M. Kaminsky. Exploiting

similarity for multi-source downloads using ﬁle handprints.
In NSDI, 2007.

[48] W. Pugh. Skip lists: A probabilistic alternative to balanced

trees. In Workshop on Algorithms and Data Structures, pages
437–449. Springer, 1989.

[49] S. Quinlan and S. Dorward. Venti: A new approach to

archival storage. In FAST, 2002.

[50] M. O. Rabin. Fingerprinting by random polynomials.

delta compression tool. Technical Report TR-CIS-2002-02,
Polytechnic University, 2002.

[61] A. Tridgell. Efﬁcient algorithms for sorting and

synchronization. In PhD thesis, Australian National
University , 2000.

[62] G. Urdaneta, G. Pierre, and M. Van Steen. Wikipedia

workload analysis for decentralized hosting. Computer
Networks, 53(11):1830–1845, 2009.

[63] Y. Wang, D. J. DeWitt, and J.-Y. Cai. X-diff: An effective
change detection algorithm for xml documents. In ICDE,
pages 519–530, 2003.

[64] W. Xia, H. Jiang, D. Feng, and Y. Hua. Silo: A

similarity-locality based near-exact deduplication scheme
with low ram overhead and high throughput. In USENIX
Annual Technical Conference, 2011.

[65] L. Xu, A. Pavlo, S. Sengupa, J. Li, and G. R. Ganger.

Reducing replication bandwidth for distributed document
databases. In SoCC, pages 222–235, 2015.

[66] L. L. You, K. T. Pollack, and D. D. Long. Deep store: An

archival storage system architecture. In ICDE, pages
804–815, 2005.

[67] B. Zhu, K. Li, and R. H. Patterson. Avoiding the disk

bottleneck in the data domain deduplication ﬁle system. In
FAST, 2008.

[68] J. Ziv and A. Lempel. A universal algorithm for sequential

data compression. IEEE Transactions on information theory,
23(3):337–343, 1977.

[69] M. Zukowski, S. Heman, N. Nes, and P. Boncz. Super-scalar

ram-cpu cache compression. In ICDE, pages 59–59, 2006.

[51] V. Raman, G. Attaluri, R. Barber, N. Chainani, D. Kalmuk,
V. KulandaiSamy, J. Leenstra, S. Lightstone, S. Liu, G. M.
Lohman, et al. Db2 with blu acceleration: So much more
than just a column store. VLDB, 6(11):1080–1091, 2013.

[52] S. Sakr. Xml compression techniques: A survey and

comparison. Journal of Computer and System Sciences,
75(5):303–322, 2009.

[53] P. Shilane, M. Huang, G. Wallace, and W. Hsu.

Wan-optimized replication of backup datasets using
stream-informed delta compression. In FAST, 2012.
[54] P. Shilane, G. Wallace, M. Huang, and W. Hsu. Delta

compressed and deduplicated storage using stream-informed
locality. USENIX Hot Storage, 2012.

[55] K. Srinivasan, T. Bisson, G. Goodson, and K. Voruganti.

idedup: Latency-aware, inline data deduplication for primary
storage. In FAST, 2012.

[56] M. Stonebraker, D. J. Abadi, A. Batkin, X. Chen,

M. Cherniack, M. Ferreira, E. Lau, A. Lin, S. Madden,
E. O’Neil, et al. C-store: a column-oriented dbms. In VLDB,
pages 553–564, 2005.

[57] T. Suel and N. Memon. Algorithms for delta compression

and remote ﬁle synchronization. Lossless Compression
Handbook, 2002.

[58] D. Teodosiu, Y. Gurevich, M. Manasse, and J. Porkka.

Optimizing ﬁle replication over limited bandwidth networks
using remote differential compression. Tech. Rep.
MSR-TR-2006-157, Microsoft Research, 2006.

[59] W. F. Tichy. Rcs–a system for version control. Software:

Practice and Experience, 15(7):637–654, 1985.

[60] D. Trendaﬁlov, N. Memon, and T. Suel. zdelta: An efﬁcient

delta compression tool. Technical Report TR-CIS-2002-02,
Polytechnic University, 2002.
[61] A. Tridgell. Efficient algorithms for sorting and
synchronization. In PhD thesis, Australian National
University , 2000.
[62] G. Urdaneta, G. Pierre, and M. Van Steen. Wikipedia
workload analysis for decentralized hosting. Computer
Networks, 53(11):1830–1845, 2009.
[63] Y. Wang, D. J. DeWitt, and J.-Y. Cai. X-diff: An effective
change detection algorithm for xml documents. In ICDE,
pages 519–530, 2003.
[64] W. Xia, H. Jiang, D. Feng, and Y. Hua. Silo: A
similarity-locality based near-exact deduplication scheme with low ram overhead and high throughput. In USENIX Annual Technical Conference, 2011.
[65] L. Xu, A. Pavlo, S. Sengupa, J. Li, and G. R. Ganger. Reducing replication bandwidth for distributed document databases. In SoCC, pages 222–235, 2015.
[66] L. L. You, K. T. Pollack, and D. D. Long. Deep store: An archival storage system architecture. In ICDE, pages 804–815, 2005.
[67] B. Zhu, K. Li, and R. H. Patterson. Avoiding the disk bottleneck in the data domain deduplication file system. In FAST, 2008.
[68] J. Ziv and A. Lempel. A universal algorithm for sequential data compression. IEEE Transactions on information theory, 23(3):337–343, 1977.
[69] M. Zukowski, S. Heman, N. Nes, and P. Boncz. Super-scalar ram-cpu cache compression. In ICDE, pages 59–59, 2006.
