[1] M. Scott, Programming Language Pragmatics. Morgan
Kaufmann, 2009.
[2] M. Batty, S. Owens, S. Sarkar, P. Sewell, and T. Weber,
“Mathematizing C++ Concurrency,” in Proceedings of the
28th ACM Symposium on Principles of Programming Languages, Austin, TX, Jan. 2011.
[3] J. Manson, W. Pugh, and S. Adve, “The Java Memory
Model,” in Proceedings of the 35th ACM Symposium on
Principles of Programming Languages, Long Beach, CA, Jan.
2005.
[4] Standard C++ Foundation, “C++11 Overview,” 2017,
https://isocpp.org/wiki/faq/cpp11.
[5] D. Lea, “JSR-166 Interest Site,” 2017,
http://gee.cs.oswego.edu/dl/concurrency-interest/.
[6] ISO/IEC TS 19570:2015, “Technical Specification for C++
Extensions for Parallelism,” 2015.
[7] C. A. R. Hoare, “Communicating Sequential Processes,”
Communications of the ACM, vol. 21, no. 8, pp. 666–677,
1978.
[8] G. Agha and C. Hewitt, “Actors: A Conceptual Foundation
for Concurrent Object-Oriented Programming,” in Research
Directions in Object-Oriented Programming. MIT Press,
1987, pp. 49–74.
[9] ISO/IEC JTC 1/SC 22/WG 21, “Technical Specification for C++ Extensions for
Transactional Memory,” May 2015. [Online].
Available: http://www.open-std.org/jtc1/sc22/wg21/docs/
papers/2015/n4514.pdf
[10] R. von Behren, J. Condit, F. Zhou, G. Necula, and E. Brewer,
“Capriccio: Scalable Threads for Internet Services,” in Proceedings of the 19th ACM Symposium on Operating Systems
Principles, Bolton Landing, NY, Oct. 2003.
[11] M. P. Herlihy and J. M. Wing, “Linearizability: a Correctness
Condition for Concurrent Objects,” ACM Transactions on
Programming Languages and Systems, vol. 12, no. 3, pp.
463–492, 1990.
[12] M. Herlihy, “A Methodology for Implementing Highly Concurrent Data Structures,” in Proceedings of the Second ACM
Symposium on Principles and Practice of Parallel Programming, Seattle, WA, Mar. 1990.
[13] V. Gramoli, “More Than You Ever Wanted to Know about
Synchronization,” in Proceedings of the 20th ACM Symposium on Principles and Practice of Parallel Programming,
San Francisco, CA, Feb. 2015.
[14] T. Brown, F. Ellen, and E. Ruppert, “Pragmatic Primitives for
Non-blocking Data Structures,” in Proceedings of the 32nd
ACM Symposium on Principles of Distributed Computing,
Montreal, Quebec, Jul. 2013.
[15] V. Luchangco, M. Moir, and N. Shavit, “Nonblocking kcompare-single-swap,” in Proceedings of the 15th ACM Symposium on Parallel Algorithms and Architectures, San Diego,
CA, Jun. 2003.
[16] T. Harris, K. Fraser, and I. Pratt, “A Practical Multiword Compare-and-Swap Operation,” in Proceedings of the
16th International Conference on Distributed Computing,
Toulouse, France, Oct. 2002.
[17] S. Heller, M. Herlihy, V. Luchangco, M. Moir, W. Scherer,
and N. Shavit, “A Lazy Concurrent List-Based Set Algorithm,” in Proceedings of the 9th international conference on
Principles of Distributed Systems, Pisa, Italy, Dec. 2006.
[18] O. Shalev and N. Shavit, “Split-ordered lists: Lock-free
extensible hash tables,” Journal of the ACM, vol. 53, no. 3,
pp. 379–405, 2006.
[19] M. Michael, “High Performance Dynamic Lock-Free Hash
Tables and List-Based Sets,” in Proceedings of the 14th
ACM Symposium on Parallel Algorithms and Architectures,
Winnipeg, Manitoba, Canada, Aug. 2002.
[20] Y. Liu, K. Zhang, and M. Spear, “Dynamic-Sized Nonblocking Hash Tables,” in Proceedings of the 33rd ACM Symposium
on Principles of Distributed Computing, Paris, France, Jul.
2014.
[21] M. Herlihy and N. Shavit, The Art of Multiprocessor Programming. Morgan Kaufmann, 2008.
[22] A. Braginsky and E. Petrank, “A Lock-Free B+tree,” in
Proceedings of the 24th ACM Symposium on Parallelism in
Algorithms and Architectures, Pittsburgh, PA, Jun. 2012.
[23] I. Lotan and N. Shavit, “Skiplist-Based Concurrent Priority
Queues,” in Proceedings of the 14th International Parallel
and Distributed Processing Symposium, Cancun, Mexico,
May 2000.
[24] A. Spiegelman, G. Golan-Gueta, and I. Keidar, “Transactional
Data Structure Libraries,” in Proceedings of the 37th ACM
Conference on Programming Language Design and Implementation, Santa Barbara, CA, Jun. 2016.
[25] X. Yang, D. Frampton, S. Blackburn, and A. Hosking, “Barriers Reconsidered, Friendlier Still!” in Proceedings of the
International Symposium on Memory Management, Beijing,
China, Jun. 2012.
[26] M. Desnoyers, P. McKenney, A. Stern, M. Dagenais, and
J. Walpole, “User-Level Implementations of Read-Copy Update,” IEEE Transactions on Parallel and Distributed Systems,
vol. 23, no. 2, pp. 375–382, 2012.
[27] C. Lameter, “Effective Synchronization on Linux/NUMA
Systems,” in Proceedings of the May 2005 Gelato Federation
Meeting, San Jose, CA, May 2005.
[28] N. Shavit and D. Touitou, “Software Transactional Memory,”
in Proceedings of the 14th ACM Symposium on Principles of
Distributed Computing, Ottawa, ON, Canada, Aug. 1995.
[29] T. Harris, “A Pragmatic Implementation of Non-Blocking
Linked Lists,” in Proceedings of the 15th International Symposium on Distributed Computing, Lisbon, Portugal, Oct.
2001.
[30] Zond, “Non blocking data structures for Go,” 2016,
https://github.com/zond/gotomic/.
[31] IronSource Neon, “A thread-safe concurrent map for go,”
2016, https://github.com/streamrail/concurrent-map/.
[32] D. Tullsen, S. Eggers, and H. Levy, “Simultaneous Multithreading: Maximizing On-Chip Parallelism,” in Proceedings
of the 22nd International Symposium on Computer Architecture, Santa Margherita Ligure, Italy, Jun. 1995.
[33] A. Israeli and L. Rappoport, “Disjoint-Access-Parallel Implementations of Strong Shared Memory Primitives,” in Proceedings of the 13th ACM Symposium on Principles of Distributed
Computing, 1994.
