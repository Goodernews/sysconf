[1] Online; accessed 17-May-2017. Webkit CSS Type Confusion. http://em386. blogspot.com/2010/12/webkit- css- type- confusion.html. (Online; accessed 17- May-2017).
[2] Martín Abadi, Mihai Budiu, Ulfar Erlingsson, and Jay Ligatti. 2005. Control-flow integrity. In CCS.
[3] Nathan Burow, Scott A. Carr, Joseph Nash, Per Larsen, Michael Franz, Stefan Brunthaler, and Mathias Payer. 2018, preprint: https://arxiv.org/abs/1602.04056. Control-Flow Integrity: Precision, Security, and Performance. Comput. Surveys 50, 1 (2018, preprint: https://arxiv.org/abs/1602.04056). DOI:https://doi.org/10. 1145/3054924
[4] Scott A. Carr and Mathias Payer. 2017. DataShield: Configurable Data Confi- dentiality and Integrity. In AsiaCCS: ACM Symp. on InformAtion, Computer and Communications Security. DOI:https://doi.org/10.1145/3052973.3052983
[5] CERT. Online; accessed 17-May-2017. the CERT C++ Coding Standard (5 The Void section). https://www.securecoding.cert.org/confluence/display/cplusplus/ 5+The+Void/. (Online; accessed 17-May-2017).
[6] Clang. Online; accessed 17-May-2017. Clang 3.9 documentation - Control Flow In- tegrity. http://clang.llvm.org/docs/ControlFlowIntegrity.html. (Online; accessed 17-May-2017).
[7] Standard Performance Evaluation Corporation. Online; accessed 17-May-2017. SPEC CPU 2006. http://www.spec.org/cpu2006. (Online; accessed 17-May-2017). [8] John Criswell, Nathan Dautenhahn, and Vikram Adve. 2014. KCoFI: Complete
Control-Flow Integrity for Commodity Operating System Kernels. In Oakland:
IEEE Symp. on Security and Privacy.
[9] John Criswell, Andrew Lenharth, Dinakar Dhurjati, and Vikram Adve. 2007. Se-
cure virtual architecture: A safe execution environment for commodity operating
systems. In ACM SIGOPS Operating Systems Review, Vol. 41. ACM, 351–366. [10] The Mozilla Foundation. Online; accessed 17-May-2017. DROMAEO, JavaScript Performance Testing. https://www.webkit.org/perf/sunspider/sunspider.html.
(Online; accessed 17-May-2017).
[11] The Mozilla Foundation. Online; accessed 17-May-2017. Mozilla Firefox. https:
//www.mozilla.org/firefox. (Online; accessed 17-May-2017).
[12] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine- Grained Control-Flow Integrity for Kernel Software. In EuroSP: IEEE European
Symp. on Security and Privacy.
[13] Google. Online; accessed 17-May-2017. Octane Benchmark. https://code.google.
com/p/octane-benchmark. (Online; accessed 17-May-2017).
[14] Istvan Haller, Enes Goktas, Elias Athanasopoulos, Georgios Portokalidis, and Herbert Bos. 2015. ShrinkWrap: VTable protection without loose ends. In ACSAC. [15] Istvan Haller, Yuseok Jeon, Hui Peng, Mathias Payer, Cristiano Giuffrida, Herbert Bos, and Erik van der Kouwe. 2016. TypeSan: Practical Type Confusion Detection.
In 23rd ACM SIGSAC Conference on Computer and Communications Security. [16] Reed Hastings and Bob Joyce. 1991. Purify: Fast detection of memory leaks and
access errors. In In proc. of the winter 1992 usenix conference. Citeseer.
[17] Dongseok Jang, Zachary Tatlock, and Sorin Lerner. 2014. SafeDispatch: Securing
C++ Virtual Calls from Memory Corruption Attacks.. In NDSS.
[18] Trevor Jim, J Gregory Morrisett, Dan Grossman, Michael W Hicks, James Cheney, and Yanling Wang. 2002. Cyclone: A Safe Dialect of C.. In USENIX Annual
Technical Conference, General Track. 275–288.
[19] JTC1/SC22/WG21. Online; accessed 17-May-2017. ISO/IEC 14882:2014 Program-
ming Language C++. http://www.iso.org/iso/catalogue_detail.htm?csnumber=
64029. (Online; accessed 17-May-2017).
[20] Volodymyr Kuznetsov, László Szekeres, Mathias Payer, George Candea, R. Sekar,
and Dawn Song. 2014. Code-pointer Integrity. In OSDI.
[21] Byoungyoung Lee, Chengyu Song, Taesoo Kim, and Wenke Lee. 2015. Type
Casting Verification: Stopping an Emerging Attack Vector. In USENIX Secu- rity. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/lee
[22] llvm. Online; accessed 17-May-2017. The LLVM Compiler Infrastructure Project.
http://llvm.org/. (Online; accessed 17-May-2017).
[23] Microsoft. Online; accessed 17-May-2017. Microsoft Security Intelligence Report.
https://www.microsoft.com/security/sir. (Online; accessed 17-May-2017).
[24] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic. 2009. SoftBound: Highly compatible and complete spatial memory safety for C.
In ACM Sigplan Notices, Vol. 44. ACM, 245–258.
[25] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2009. SoftBound: Highly compatible and complete spatial memory safety for C.
ACM Sigplan Notices 44, 6 (2009), 245–258.
[26] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic.
2010. CETS: compiler enforced temporal safety for C. In ACM Sigplan Notices,
Vol. 45. ACM, 31–40.
[27] George C Necula, Jeremy Condit, Matthew Harren, Scott McPeak, and West-
ley Weimer. 2005. CCured: Type-safe retrofitting of legacy software. ACM Transactions on Programming Languages and Systems (TOPLAS) 27, 3 (2005), 477–526.
[28] Nicholas Nethercote and Julian Seward. 2007. Valgrind: a framework for heavy- weight dynamic binary instrumentation. In ACM Sigplan notices, Vol. 42. ACM, 89–100.
[29] Google Chromium Project. Online; accessed 17-May-2017. Undefined Behavior Sanitizer. https://www.chromium.org/developers/testing/ undefinedbehaviorsanitizer. (Online; accessed 17-May-2017).
[30] QT Code Review. Online; accessed 17-May-2017. Type confusion: From QMapN- odeBase to QMapNode. https://codereview.qt-project.org/#/c/191188/. (Online; accessed 17-May-2017).
[31] Pawel Sarbinowski, Vasileios P Kemerlis, Cristiano Giuffrida, and Elias Athana- sopoulos. 2016. VTPin: practical VTable hijacking protection for binaries. In Proceedings of the 32nd Annual Conference on Computer Security Applications. ACM, 448–459.
[32] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. 2012. AddressSanitizer: A Fast Address Sanity Checker. In Pre- sented as part of the 2012 USENIX Annual Technical Conference (USENIX ATC 12). USENIX, Boston, MA, 309–318. https://www.usenix.org/conference/atc12/ technical- sessions/presentation/serebryany
[33] Konstantin Serebryany, Derek Bruening, Alexander Potapenko, and Dmitriy Vyukov. 2012. AddressSanitizer: A Fast Address Sanity Checker.. In USENIX Annual Technical Conference. 309–318.
[34] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-edge Control- flow Integrity in GCC & LLVM. In USENIX Security. 15. http://dl.acm.org/citation. cfm?id=2671225.2671285
[35] Victor van der Veen, Dennis Andriesse, Enes Göktaş, Ben Gras, Lionel Sambuc, Asia Slowinska, Herbert Bos, and Cristiano Giuffrida. 2015. Practical Context- Sensitive CFI. In CCS.
[36] Victor van der Veen, Enes Goktas, Moritz Contag, Andre Pawlowski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks At The Binary Level. In IEEE S&P.
[37] M. Zalewski. Online; accessed 17-May-2017. American Fuzzy Lop. http://lcamtuf. coredump.cx/afl/. (Online; accessed 17-May-2017).
[38] Chao Zhang, Scott A Carr, Tongxin Li, Yu Ding, Chengyu Song, Mathias Payer, and Dawn Song. 2016. VTrust: Regaining Trust on Virtual Calls. In NDSS.
[39] Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song. 2015. VTint: Protecting Virtual Function Tables’ Integrity.. In NDSS.
[40] Mingwei Zhang and R Sekar. 2013. Control flow integrity for COTS binaries. In
SEC: USENIX Security Symposium.
