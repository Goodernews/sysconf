[1] M. Allamanis and C. Sutton. Mining source code
repositories at massive scale using language modeling.
In Proceedings of the 10th Working Conference on
Mining Software Repositories, MSR ’13, pages
207–216, Piscataway, NJ, USA, 2013. IEEE Press.
[2] Chronicle. Koloboke. http:
//chronicle.software/products/koloboke-collections/,
Oct. 2015.
[3] A. Georges, D. Buytaert, and L. Eeckhout.
Statistically rigorous java performance evaluation.
SIGPLAN Not., 42(10):57–76, Oct. 2007.
[4] A. Georges, L. Eeckhout, and D. Buytaert. Java
performance evaluation through rigorous replay
compilation. SIGPLAN Not., 43(10):367–384, Oct.
2008.
[5] J. Y. Gil and Y. Shimron. Smaller footprint for java
collections. In Proceedings of the ACM International
Conference Companion on Object Oriented
Programming Systems Languages and Applications
Companion, OOPSLA ’11, pages 191–192, New York,
NY, USA, 2011. ACM.
[6] GNU Trove. Trove.
http://trove.starlight-systems.com/, May 2015.
[7] Goldman Sachs Group, Inc. GS Collections.
https://github.com/goldmansachs/gs-collections, June
2015.
[8] Google. Guava. https://github.com/google/guava,
Aug. 2014.
[9] S. Hasan, Z. King, M. Hafiz, M. Sayagh, B. Adams,
and A. Hindle. Energy profiles of java collections
classes. In Proceedings of the 38th International
Conference on Software Engineering, ICSE ’16, pages
225–236, New York, NY, USA, 2016. ACM.
[10] N. Hunt, P. S. Sandhu, and L. Ceze. Characterizing
the performance and energy efficiency of lock-free data
structures. In 2011 15th Workshop on Interaction
between Compilers and Computer Architectures, pages
63–70, Feb 2011.
[11] C. Jung, S. Rus, B. P. Railing, N. Clark, and
S. Pande. Brainy: Effective selection of data
structures. SIGPLAN Not., 46(6):86–97, June 2011.
[12] E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer,
D. M. German, and D. Damian. The promises and
perils of mining github. In Proceedings of the 11th
Working Conference on Mining Software Repositories,
MSR 2014, pages 92–101, New York, NY, USA, 2014.
ACM.
[13] K. Kawachiya, K. Ogata, and T. Onodera. Analysis
and reduction of memory inefficiencies in java strings.
SIGPLAN Not., 43(10):385–402, Oct. 2008.
[14] R. Leventov. Time - Memory Tradeoff With the
Example of Java Maps. https:
//dzone.com/articles/time-memory-tradeoff-example.
[15] L. Lewis. Java Collection Performance. https:
//dzone.com/articles/java-collection-performance,
July 2011.

[16] N. Mitchell and G. Sevitsky. The causes of bloat, the
limits of health. In Proceedings of the 22Nd Annual
ACM SIGPLAN Conference on Object-oriented
Programming Systems and Applications, OOPSLA ’07,
pages 245–260, New York, NY, USA, 2007. ACM.
[17] D. C. Montgomery. Design and Analysis of
Experiments. Wiley, Hoboken, NJ, 8 edition edition,
Apr. 2012.
[18] T. Mytkowicz, A. Diwan, M. Hauswirth, and P. F.
Sweeney. Evaluating the accuracy of java profilers. In
Proceedings of the 31st ACM SIGPLAN Conference
on Programming Language Design and
Implementation, PLDI ’10, pages 187–197, New York,
NY, USA, 2010. ACM.
[19] H. A. Nguyen, R. Dyer, T. N. Nguyen, and H. Rajan.
Mining preconditions of apis in large-scale code
corpus. In Proceedings of the 22Nd ACM SIGSOFT
International Symposium on Foundations of Software
Engineering, FSE 2014, pages 166–177, New York,
NY, USA, 2014. ACM.
[20] Oracle. Java development kit.
https://www.oracle.com/java/index.html, Sept. 2015.
[21] S. Osiński and D. Weiss. HPPC: High Performance
Primitive Collections for Java.
http://labs.carrotsearch.com/hppc.html, Jan. 2015.
[22] B. Ray, D. Posnett, V. Filkov, and P. Devanbu. A
large scale study of programming languages and code
quality in github. In Proceedings of the 22Nd ACM
SIGSOFT International Symposium on Foundations
of Software Engineering, FSE 2014, pages 155–165,
New York, NY, USA, 2014. ACM.
[23] O. Shacham, M. Vechev, and E. Yahav. Chameleon:
Adaptive selection of collections. In Proceedings of the
30th ACM SIGPLAN Conference on Programming
Language Design and Implementation, PLDI ’09,
pages 408–418, New York, NY, USA, 2009. ACM.
[24] S. Vigna. Fastutil. http://fastutil.di.unimi.it/l, Jan.
2016.
[25] M. Vorontsov. Large HashMap Overview. http://javaperformance.info/hashmap-overview-jdk-fastutilgoldman-sachs-hppc-koloboke-trove-january-2015/,
Feb. 2015.
[26] G. Xu. Coco: Sound and adaptive replacement of java
collections. In Proceedings of the 27th European
Conference on Object-Oriented Programming,
ECOOP’13, pages 1–26, Berlin, Heidelberg, 2013.
Springer-Verlag.
[27] G. Xu and A. Rountev. Precise memory leak detection
for java software using container profiling. In
Proceedings of the 30th International Conference on
Software Engineering, ICSE ’08, pages 151–160, New
York, NY, USA, 2008. ACM.
[28] G. Xu and A. Rountev. Detecting inefficiently-used
containers to avoid bloat. In Proceedings of the 31st
ACM SIGPLAN Conference on Programming
Language Design and Implementation, PLDI ’10,
pages 160–173, New York, NY, USA, 2010. ACM.
[29] S. Yang, D. Yan, G. Xu, and A. Rountev. Dynamic
analysis of inefficiently-used containers. In Proceedings
of the Ninth International Workshop on Dynamic
Analysis, WODA 2012, pages 30–35, New York, NY,
USA, 2012. ACM.