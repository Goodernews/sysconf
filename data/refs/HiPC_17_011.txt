[1] J. H. Anderson, S. Ramamurthy, and R. Jain, “Implementing
wait-free objects on priority-based systems,” in PODC, 1997.

[2] A. Israeli and L. Rappoport, “Disjoint-access-parallel implementations of strong shared memory primitives,’ in PODC,
1994,

[3] S. Feldman, P. LaBorde, and D. Dechev, “A wait-free multiword compare-and-swap operation,” IJ/PP, 2014.

[4] H. Sundell, “Wait-free multi-word compare-and-swap using
greedy helping and grabbing,” International Journal of Parallel Programming, vol. 39, no. 6, pp. 694-716, 2011.

[5] T. L. Harris, K. Fraser, and I. A. Pratt, “A practical multiword compare-and-swap operation,” in Distributed Computing, 2002.

[6] M. M. Michael, “Aba prevention using single-word instructions,’ JBM Research Division, RC23089 (W0401-136), Tech.
Rep, 2004.

[7] ——, “Scalable lock-free dynamic memory allocation,’ ACM
Sigplan Notices, vol. 39, no. 6, pp. 35-46, 2004.

[8] ——, “High performance dynamic lock-free hash tables and
list-based sets,” in SPAA, 2002.

[9] J. D. Valois, “Implementing lock-free queues,’ in PDCS,
1994,

[10] M. Herlihy and N. Shavit, Art of Multiprocessor Programming. Morgan Kaufmann, March 2008.

[11] M. M. Michael and M. L. Scott, “Nonblocking algorithms
and preemption-safe locking on multiprogrammed shared
memory multiprocessors,” Journal of Parallel and Distributed
Computing, vol. 51, no. 1, pp. 1-26, 1998.

[12] M. M. Michael, “Hazard pointers: Safe memory reclamation
for lock-free objects,’ IEEE Transactions on Parallel and
Distributed Systems, vol. 15, no. 6, pp. 491-504, 2004.

[13] M. Herlihy, V. Luchangco, P. Martin, and M. Moir, “Nonblocking memory management support for dynamic-sized
data structures,’ ACM Transactions on Computer Systems
(TOCS), 2005.

[14] M. M. Michael, “Safe memory reclamation for dynamic lockfree objects using atomic reads and writes,” in PODC. ACM,
2002.

[15] K. Sagonas and J. Wilhelmsson, “Efficient memory management for concurrent programs that use message passing,” Sci.
Comput. Program., vol. 62, no. 2, pp. 98-121, 2006.

[16] S. Patel, R. Kalayappan, I. Mahajan, and S. R. Sarangi,
“A hardware implementation of the mcas synchronization
primitive,” in DATE, 2017.

[17] T. L. Harris, K. Fraser, and I. A. Pratt, “A practical multiword compare-and-swap operation,” in Distributed Computing, 2002.

[18] Y. Afek, M. Merritt, G. Taubenfeld, and D. Touitou, “Disentangling multi-object operations,” in PODC, 1997.

[19] G. Barnes, “A method for implementing lock-free shared-data
structures,” in SPAA, 1993.

[20] T. Brown, F Ellen, and E. Ruppert, “Pragmatic primitives for
non-blocking data structures,” in PODC, 2013.

[21] A. Kogan and E. Petrank, “Wait-free queues with multiple
enqueuers and dequeuers,” ACM SIGPLAN Notices, 2011.

[22] A. Israeli and L. Rappoport, “Efficient wait-free implementation of a concurrent priority queue,” in Distributed Algorithms. Springer, 1993, pp. 1-17.

[23] S. Timnat, A. Braginsky, A. Kogan, and E. Petrank, “Waitfree linked-lists,” in Proceedings of the 17th ACM SIGPLAN
PPoPP, 2012.

[24] P. Aggarwal and S. R. Sarangi, “Lock-free and wait-free slot
scheduling algorithms,” in JPDPS, 2013.

[25] H. Attiya and E. Hillel, “Highly concurrent multi-word synchronization,” Theoretical Computer Science, 2011.

[26] A. Kogan and E. Petrank, “A methodology for creating fast
wait-free data structures,’ in ACM SIGPLAN Notices, 2012,
pp. 141-150.

[27] J. D. Valois, “Lock-free linked lists using compare-and-swap,”
in PODC, 1995.

[28] A. Natarajan and N. Mittal, “Fast concurrent lock-free binary
search trees,” in Proceedings of the 19th ACM SIGPLAN
PPoPP, 2014.

[29] M. P. Herlihy, Y. Lev, and N. N. Shavit, “Concurrent lockfree skiplist with wait-free contains operator,’ May 3 2011,
uS Patent 7,937,378.

[30] P. Aggarwal, G. Yasa, and S. R. Sarangi, “Radir: Lockfree and wait-free resource allocation model for flash drive
bandwidth reservation,” in HiPC, 2014.