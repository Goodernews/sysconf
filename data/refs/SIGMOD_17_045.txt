
[1] Fastq file. ftp://ftp.ddbj-nig.ac.jp/ddbj_database/dra/fastq/
SRA020/SRA020125/SRX030576/SRRO072006.fastq.bz2.
[Online; accessed 19-February-2016].

[2] P. K. Agarwal, G. Cormode, Z. Huang, J. M. Phillips, Z. Wei,
and K. Yi. Mergeable summaries. ACM Transactions on
Database Systems (TODS), 38(4):26, 2013.

[3] P. S. Almeida, C. Baquero, N. Preguica, and D. Hutchison.
Scalable Bloom filters. Journal of Information Processing
Letters, 101(6):255-261, 2007.

[4] S. Alsubaiee, A. Behm, V. Borkar, Z. Heilbron, Y.-S. Kim,
M. J. Carey, M. Dreseler, and C. Li. Storage management in
AsterixDB. Proceedings of the VLDB Endowment,
7(10):841-852, 2014.

[5] M. A. Bender, M. Farach-Colton, R. Johnson, R. Kaner,

B. C. Kuszmaul, D. Medjedovic, P. Montes, P. Shetty, R. P.
Spillane, and E. Zadok. Don’t thrash: How to cache your
hash on flash. Proceedings of the VLDB Endowment, 5(11),
2012.

[6] M. A. Bender, M. Farach-Colton, R. Johnson, R. Kraner,

B. C. Kuszmaul, D. Medjedovic, P. Montes, P. Shetty, R. P.
Spillane, and E. Zadok. Don’t thrash: How to cache your
hash on flash. PVLDB, 5(11):1627-1637, 2012.

[7] B. H. Bloom. Spacetime trade-offs in hash coding with
allowable errors. Communications of the ACM,
13(7):422-426, 1970.

[8] F. Bonomi, M. Mitzenmacher, R. Panigrahy, et al. An
improved construction for counting Bloom filters. In
ECA’06, 2006.

[9] A. Broder and M. Mitzenmacher. Network applications of
Bloom filters: A survey. Internet mathematics, 1(4):485-509,
2004.

[10] M. Canim, G. A. Mihaila, B. Bhattacharjee, C. A. Lang, and
K. A. Ross. Buffered Bloom filters on solid state storage. In
ADMS@ VLDB, pages 1-8, 2010.

[11] S. Cohen and Y. Matias. Spectral Bloom filters. In Proc.
ACM SIGMOD International Conference on Management of
Data, pages 241-252, 2003.

[12] G. Cormode and S. Muthukrishnan. An improved data
stream summary: the count-min sketch and its applications.
Journal of Algorithms, 55(1):58-75, 2005.

[13] B. Corominas-Murtra and R. V. Solé. Universality of zipf’s
law. Phys. Rev. E, 82:011102, Jul 2010.

[14] B. Debnath, S. Sengupta, J. Li, D. J. Lilja, and D. H. Du.
BloomFlash: Bloom filter on flash-based storage. In Proc.
31st International Conference on Distributed Computing
Systems (ICDCS), 2011, pages 635-644, 2011.

[15] B. K. Debnath, S. Sengupta, and J. Li. Chunkstash: Speeding
up inline storage deduplication using flash memory. In Proc.
USENIX annual technical conference, 2010.

[16] B. Fan. C++ cuckoo filter.
https://github.com/efficient/cuckoofilter, 2014. [Online;
accessed 19-July-2014].

[17] B. Fan, D. G. Andersen, M. Kaminsky, and M. D.
Mitzenmacher. Cuckoo filter: Practically better than Bloom.
In Proc. 10th ACM International on Conference on emerging
Networking Experiments and Technologies, pages 75-88,
2014.

[18] L. Fan, P. Cao, J. Almeida, and A. Z. Broder. Summary
cache: a scalable wide-area web cache sharing protocol.
IEEE/ACM T. Netw., 8:281-293, June 2000.

[19] A. Geil. Quotient filters: Approximate membership queries
on the gpu, 2016.

[20] E. Georganas, A. Bulug, J. Chapman, L. Oliker, D. Rokhsar,
and K. Yelick. Parallel de Bruijn graph construction and.
traversal for de novo genome assembly. In Proc.
International Conference for High Performance Computing,
Networking, Storage and Analysis, pages 437-448, 2014.

[21] R. Gonzdlez, S. Grabowski, V. Makinen, and G. Navarro.
Practical implementation of rank and select queries. In
Poster Proceedings Volume of 4th Workshop on Efficient and
Experimental Algorithms (WEA), pages 27-38, 2005.

[22] S. P. Karl Anderson. Firehose. http://firehose.sandia.gov/,
2013. [Online; accessed 19-Dec-2015].

[23] G. Lu, B. Debnath, and D. H. Du. A forest-structured Bloom
filter with flash memory. In Proc. 27th Symposium on Mass
Storage Systems and Technologies (MSST), 2011, pages 1-6,
2011.

[24] P. Melsted and J. K. Pritchard. Efficient counting of k-mers
in dna sequences using a Bloom filter. BMC bioinformatics,
12(1):1, 2011.

[25] P. O’Neil, E. Cheng, D. Gawlic, and E. O’Neil. The
log-structured merge-tree (LSM-tree). Acta Informatica,
33(4):351-385, 1996.

[26] Partow. C++ Bloom filter library.
https://code.google.com/p/bloom/. [Online; accessed
19-July-2014].

[27] F. Putze, P. Sanders, and J. Singler. Cache-, hash-and.
space-efficient Bloom filters. In Proc. Experimental
Algorithms, pages 108-121. Springer, 2007.

[28] Y. Qiao, T. Li, and S. Chen. Fast Bloom filters and their
generalization. IEEE Transactions on Parallel and
Distributed Systems, 25(1):93-103, 2014.

[29] R. S. Roy, D. Bhattacharya, and A. Schliep. Turtle:
Identifying frequent k-mers with cache-efficient algorithms.
Bioinformatics, page btu132, 2014.

[30] S. Tarkoma, C. E. Rothenberg, and E. Lagerspetz. Theory
and practice of Bloom filters for distributed systems.
Communications Surveys & Tutorials, IEEE, 14(1):131-155,
2012.

[31] M. Vallentin. C++ counting Bloom filter.
https://github.com/mavam/libbf, 2015. [Online; accessed
19-July-2014].

[32] P. Wang, G. Sun, S. Jiang, J. Ouyang, S. Lin, C. Zhang, and
J. Cong. An efficient design and implementation of LSM-tree
based key-value store on open-channel SSD. In Proc. 9th
European Conference on Computer Systems, page 16, 2014.

[33] Q. Zhang, J. Pell, R. Canino-Koning, A. C. Howe, and C. T.
Brown. These are not the k-mers you are looking for:
efficient online k-mer counting using a probabilistic data
structure. PloS one, 9(7):e101271, 2014.

[34] B. Zhu, K. Li, and R. H. Patterson. Avoiding the disk
bottleneck in the data domain deduplication file system. In
Proc. 6th USENIX Conference on File and Storage
Technologies (FAST 08), pages 1-14, 2008.
