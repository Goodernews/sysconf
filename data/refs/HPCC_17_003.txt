[1] J. Cavazos, G. Fursin, F. Agakov, E. Bonilla, M. F. P. O’Boyle, and
O. Temam, “Rapidly Selecting Good Compiler Optimizations using
Performance Counters,” in Proceedings of the International Symposium
on Code Generation and Optimization (CGO ’07). Washington, DC,
USA: IEEE Computer Society, 2007, pp. 185–197.
[2] R. Cochran, C. Hankendi, A. K. Coskun, and S. Reda, “Pack & cap:
Adaptive DVFS and thread packing under power caps,” in MICRO, 2011,
pp. 175–185.
[3] M. Curtis-Maury, A. Shah, F. Blagojevic, D. S. Nikolopoulos, B. R.
de Supinski, and M. Schulz, “Prediction models for multi-dimensional
power-performance optimization on many cores,” in Proc. of the 17th
international conference on Parallel architectures and compilation techniques, 2008.
[4] J. Demme and S. Sethumadhavan, “Approximate graph clustering for
program characterization,” ACM Transactions on Architecture and Code
Optimization (TACO), vol. 8, no. 4, p. 21, 2012.
[5] Y. Ding, J. Ansel, K. Veeramachaneni, X. Shen, U.-M. O’Reilly, and
S. Amarasinghe, “Autotuning algorithmic choice for input sensitivity,”
in PLDI, 2015, pp. 379–390.
[6] M. K. Emani and M. O’ Boyle, “Celebrating diversity: A mixture of
experts approach for runtime mapping in dynamic environments,” in
Proceedings of the 36th ACM SIGPLAN Conference on Programming
Language Design and Implementation, ser. PLDI 2015. New
York, NY, USA: ACM, 2015, pp. 499–508. [Online]. Available:
http://doi.acm.org/10.1145/2737924.2737999
[7] G. F. et al., “Milepost GCC: Machine Learning Enabled Self-Tuning
Compiler,” International Journal of Parallel Programming, vol. 39,
2011.
[8] Y. Ge and Q. Qiu, “Dynamic thermal management for multimedia
applications using machine learning,” in Proceedings of the 48th Design
Automation Conference, ser. DAC ’11. New York, NY, USA: ACM,
2011, pp. 95–100.
[9] Intel, Intel 64 and IA-32 Architectures Optimization Reference Manual.
Intel Corp, 2016.
[10] N. Jain, A. Bhatele, M. P. Robson, T. Gamblin, and L. V. Kale,
“Predicting application performance using supervised learning on communication features,” in Proceedings of the International Conference on
High Performance Computing, Networking, Storage and Analysis, ser.
SC ’13. New York, NY, USA: ACM, 2013, pp. 95:1–95:12.
[11] S. Jayasena, S. Amarasinghe, A. Abeyweera, G. Amarasinghe,
H. De Silva, S. Rathnayake, X. Meng, and Y. Liu, “Detection of false
sharing using machine learning,” in Proceedings of the International
Conference on High Performance Computing, Networking, Storage and
Analysis, ser. SC ’13. New York, NY, USA: ACM, 2013, pp. 30:1–30:9.
[12] Y. Kashnikov, J. C. Beyler, and W. Jalby, “Compiler optimizations:
Machine learning versus O3,” in Languages and Compilers for Parallel
Computing, 25th International Workshop, LCPC 2012, Tokyo, Japan,
September 11-13, 2012, Revised Selected Papers, 2012, pp. 32–45.
[13] H. Leather, E. V. Bonilla, and M. F. P. O’Boyle, “Automatic feature
generation for machine learning-based optimising compilation,” TACO,
vol. 11, no. 1, p. 14, 2014.
[14] S.-w. Liao, T.-H. Hung, D. Nguyen, C. Chou, C. Tu, and H. Zhou,
“Machine Learning-Based Prefetch Optimization for Data Center Applications,” in Proceedings of the Conference on High Performance
Computing Networking, Storage and Analysis, ser. SC ’09, 2009, pp.
56:1–56:10.
[15] E. Park, J. Cavazos, and M. A. Alvarez, “Using graph-based program
characterization for predictive modeling,” in Proceedings of the Tenth
International Symposium on Code Generation and Optimization. ACM,
2012, pp. 196–206.
[16] K. K. Pusukuri, D. Vengerov, A. Fedorova, and V. Kalogeraki, “Fact: A
framework for adaptive contention-aware thread migrations,” in Proceedings of the 8th ACM International Conference on Computing Frontiers,
ser. CF ’11. New York, NY, USA: ACM, 2011, pp. 35:1–35:10.
[17] S. Rahman, M. Burtscher, Z. Zong, and A. Qasem, “Maximizing
hardware prefetch effectiveness with machine learning,” in 17th IEEE
International Conference on High Performance Computing and Communications (HPCC15), Aug 2015.
[18] M. Stephenson and S. Amarasinghe, “Predicting Unroll Factors Using
Supervised Classiﬁcation,” in CGO, San Jose, CA, USA, March 2005.
[19] K. Stock, L.-N. Pouchet, and P. Sadayappan, “Using Machine Learning
to Improve Automatic Vectorization,” ACM Trans. Archit. Code Optim.,
vol. 8, no. 4, pp. 50:1–50:23, Jan. 2012.
[20] R. Vuduc, J. Demmel, and J. Bilmes, “Statistical Models for Empirical Search-Based Performance Tuning,” International Journal of High
Performance Computing Applications, vol. 18, no. 1, pp. 65–94, 2004.
