[1] K. Asanović, R. Bodik, B. C. Catanzaro, J. J. Gebis,
P. Husbands, K. Keutzer, D. A. Patterson, W. L.
Plishker, J. Shalf, S. W. Williams, and K. A. Yelick.
The landscape of parallel computing research: A view
from berkeley. Technical Report
UCB/EECS-2006-183, EECS Department, University
of California, Berkeley, 2006.
[2] D. H. Bailey, R. F. Lucas, and S. W. Williams.
Performance Tuning of Scientific Applications. CRC
Press, 2011.
[3] V. R. Basili, J. C. Carver, D. Cruzes, L. M. Hochstein,
J. K. Hollingsworth, F. Shull, and M. V. Zelkowitz.
Understanding the high-performance-computing
community: A software engineer’s perspective. IEEE
Software, 25(4):29–36, 2008.
[4] P. Basu, M. Hall, M. Khan, S. Maindola,
S. Muralidharan, S. Ramalingam, A. Rivera,
M. Shantharam, and A. Venkat. Towards making
autotuning mainstream. International Journal of High
Performance Computing Applications, 27(4):379–393,
2013.
[5] A. Bessey, K. Block, B. Chelf, A. Chou, B. Fulton,
S. Hallem, C. Henri-Gros, A. Kamsky, S. McPeak, and
D. Engler. A few billion lines of code later: Using
static analysis to find bugs in the real world.
Commun. ACM, 53(2):66–75, 2010.
[6] C.-C. Chang and C.-J. Lin. Libsvm: A library for
support vector machines. ACM Trans. Intell. Syst.
Technol., 2(3):27:1–27:27, 2011.
[7] C. Collberg, G. Myles, and M. Stepp. An empirical
study of java bytecode programs. Softw. Pract. Exper.,
37(6):581–641, 2007.
[8] J. Dongarra and P. Luszczek. HPC challenge
benchmark. http://icl.cs.utk.edu/hpcc/.
[9] R. Dyer, H. A. Nguyen, H. Rajan, and T. N. Nguyen.
Boa: Ultra-large-scale software repository and
source-code mining. ACM Trans. Softw. Eng.
Methodol., 25(1):7:1–7:34, 2015.
[10] R. Dyer, H. Rajan, H. A. Nguyen, and T. N. Nguyen.
Mining billions of ast nodes to study actual and
potential usage of Java language features. In
Proceedings of the 36th International Conference on
Software Engineering (ICSE), pages 779–790, 2014.
[11] G. Fursin, Y. Kashnikov, A. W. Memon, Z. Chamski,
O. Temam, M. Namolaru, E. Yom-Tov, B. Mendelson,
A. Zaks, E. Courtois, F. Bodin, P. Barnard, E. Ashton,
E. V. Bonilla, J. Thomson, C. K. I. Williams, and
M. F. P. O’Boyle. Milepost GCC: machine learning
enabled self-tuning compiler. International Journal of
Parallel Programming, 39(3):296–327, 2011.
[12] T. Gorschek, E. Tempero, and L. Angelis. A
large-scale empirical study of practitioners’ use of
object-oriented concepts. In Proceedings of the 2010
ACM/IEEE 32nd International Conference on
Software Engineering (ICSE), volume 1, pages
115–124, 2010.
[13] M. Grechanik, C. McMillan, L. DeFerrari, M. Comi,
S. Crespi, D. Poshyvanyk, C. Fu, Q. Xie, and
C. Ghezzi. An empirical investigation into a
large-scale Java open source code repository. In
Proceedings of the 2010 ACM-IEEE International
Symposium on Empirical Software Engineering and
Measurement (ESEM), pages 11:1–11:10, 2010.
[14] M. Hashimoto, M. Terai, T. Maeda, and K. Minami.
Extracting facts from performance tuning history of
scientific applications for predicting effective
optimization patterns. In Proceedings of the 2015
IEEE/ACM 12th Working Conference on Mining
Software Repositories (MSR), pages 13–23, 2015.
[15] C.-W. Hsu, C.-C. Chang, and C.-J. Lin. A practical
guide to support vector classification. Technical
report, National Taiwan University, 2003. http:
//www.csie.ntu.edu.tw/˜cjlin/papers/guide/guide.pdf.
[16] E. Kalliamvakou, G. Gousios, K. Blincoe, L. Singer,
D. M. German, and D. Damian. The promises and
perils of mining github. In Proceedings of the 11th
Working Conference on Mining Software Repositories
(MSR), pages 92–101, 2014.
[17] D. E. Knuth. An empirical study of FORTRAN
programs. Software: Practice and Experience,
1(2):105–133, 1971.
[18] R. Lämmel, E. Pek, and J. Starek. Large-scale,
AST-based API-usage analysis of open-source Java
projects. In Proceedings of the 2011 ACM Symposium
on Applied Computing (SAC), pages 1317–1324, 2011.
[19] G. Pinto, W. Torres, B. Fernandes, F. Castor, and
R. S. Barros. A large-scale study on the usage of
Java’s concurrent programming constructs. J. Syst.
Softw., 106(C):59–81, 2015.
[20] M. Terai, H. Murai, K. Minami, M. Yokokawa, and
E. Tomiyama. K-scope: A Java-based Fortran source
code analyzer with graphical user interface for
performance improvement. In Proceedings of the 41st
International Conference on Parallel Processing
Workshops (ICPPW), pages 434–443, 2012.
[21] A. Tiwari, J. K. Hollingsworth, C. Chen, M. Hall,
C. Liao, D. J. Quinlan, and J. Chame. Auto-tuning
full applications: A case study. Int. J. High Perform.
Comput. Appl., 25(3):286–294, 2011.
[22] S. Williams, A. Waterman, and D. Patterson. Roofline:
An insightful visual performance model for multicore
architectures. Commun. ACM, 52(4):65–76, 2009.
[23] M. Yokokawa, F. Shoji, A. Uno, M. Kurokawa, and
T. Watanabe. The K computer: Japanese
next-generation supercomputer development project.
In Proceedings of the 2011 International Symposium
on Low Power Electronics and Design (ISLPED),
pages 371–372, 2011.
