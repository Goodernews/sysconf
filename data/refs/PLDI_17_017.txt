[1] https: //publish.illinois.edu/race-prediction/.

[2] M. Abadi, C. Flanagan, and S. N. Freund. Types for Safe
Locking: Static Race Detection for Java. ACM Trans. Program.
Lang. Syst., 28(2):207-255, Mar. 2006.

[3] S. M. Blackburn, R. Garner, C. Hoffmann, A. M. Khang, K. S.
McKinley, R. Bentzur, A. Diwan, D. Feinberg, D. Frampton,
S. Z. Guyer, M. Hirzel, A. Hosking, M. Jump, H. Lee, J. E. B.
Moss, A. Phansalkar, D. Stefanovié, T. VanDrunen, D. von
Dincklage, and B. Wiedermann. The DaCapo Benchmarks:
Java Benchmarking Development and Analysis. SIGPLAN
Not., 41(10):169-190, Oct. 2006.

[4] M. D. Bond, K. E. Coons, and K. S. McKinley. PACER:
Proportional Detection of Data Races. SIGPLAN Not., 45(6):
255-268, June 2010.

[5] C. Boyapati, R. Lee, and M. Rinard. Ownership Types for
Safe Programming: Preventing Data Races and Deadlocks.
SIGPLAN Not., 37(11):211-230, Nov. 2002.

[6] F. Chen, T. F. Serbanutd, and G. Rosu. jPredictor: a predictive
runtime analysis tool for Java. In ICSE ’08: Proceedings of the
30th International Conference on Software Engineering, pages
221-230, New York, NY, USA, 2008. ACM.

[7] G.-I Cheng, M. Feng, C. E. Leiserson, K. H. Randall, and
A. F. Stark. Detecting Data Races in Cilk Programs That Use
Locks. In Proceedings of the Tenth Annual ACM Symposium
on Parallel Algorithms and Architectures, SPAA ’98, pages
298-309, New York, NY, USA, 1998. ACM.

[8] M. Christiaens and K. D. Bosschere. TRaDe: Data Race Detection for Java. In Proceedings of the International Conference
on Computational Science-Part IT, 1CCS ’01, pages 761-770,
London, UK, UK, 2001. Springer-Verlag.

[9] T. Elmas, S. Qadeer, and S. Tasiran. Goldilocks: A Race and
Transaction-aware Java Runtime. SIGPLAN Not., 42(6):245255, June 2007.

[10] D. Engler and K. Ashcraft. RacerX: Effective, Static Detection
of Race Conditions and Deadlocks. SIGOPS Oper. Syst. Rev.,
37(5):237-252, Oct. 2003.

[11] E. Farchi, Y. Nir, and S. Ur. Concurrent Bug Patterns and
How to Test Them. In Proceedings of the 17th International
Symposium on Parallel and Distributed Processing, IPDPS ’03,
pages 286.2-, Washington, DC, USA, 2003. IEEE Computer
Society.

[12] M. Feng and C. E. Leiserson. Efficient Detection of Determinacy Races in Cilk Programs. In Proceedings of the Ninth
Annual ACM Symposium on Parallel Algorithms and Architectures, SPAA ’97, pages 1-11, New York, NY, USA, 1997.
ACM.

[13] C. Flanagan and S. N. Freund. Type-based Race Detection for
Java. SIGPLAN Not., 35(5):219-232, May 2000.

[14] C. Flanagan and S. N. Freund. FastTrack: Efficient and Precise
Dynamic Race Detection. SIGPLAN Not., 44(6):121-133, June
2009.

[15] C. Flanagan and S. N. Freund. The RoadRunner Dynamic
Analysis Framework for Concurrent Programs. In Proceedings
of the 9th ACM SIGPLAN-SIGSOFT Workshop on Program
Analysis for Software Tools and Engineering, PASTE ’10,
pages 1-8, New York, NY, USA, 2010. ACM.

[16] J. Huang and A. K. Rajagopalan. Precise and Maximal Race
Detection from Incomplete Traces. SIGPLAN Not., 51(10):
462-476, Oct. 2016.

[17] J. Huang and L. Rauchwerger. Finding Schedule-sensitive
Branches. In Proceedings of the 2015 10th Joint Meeting on
Foundations of Software Engineering, ESEC/FSE 2015, pages
439-449, New York, NY, USA, 2015. ACM.

[18] J. Huang, P. O. Meredith, and G. Rosu. Maximal Sound
Predictive Race Detection with Control Flow Abstraction.
SIGPLAN Not., 49(6):337-348, June 2014.

[19] J. Huang, Q. Luo, and G. Rosu. GPredict: Generic Predictive
Concurrency Analysis. In Proceedings of the 37th International Conference on Software Engineering - Volume 1, ICSE
*15, pages 847-857, Piscataway, NJ, USA, 2015. IEEE Press.

[20] B. Kasikci, C. Zamfir, and G. Candea. RaceMob: Crowdsourced Data Race Detection. In Proceedings of the TwentyFourth ACM Symposium on Operating Systems Principles,
SOSP *13, pages 406-422, New York, NY, USA, 2013. ACM.

[21] D. Kini, U. Mathur, and M. Viswanathan. Dynamic Race
Prediction in Linear Time. CoRR, abs/1704.02432, 2017. URL
http: //arxiv.org/abs/1704 .02432.

[22] A. Kinneer, M. B. Dwyer, and G. Rothermel. Sofya: Supporting Rapid Development of Dynamic Program Analyses for
Java. In Companion to the Proceedings of the 29th International Conference on Software Engineering, ICSE COMPANION ’07, pages 51-52, Washington, DC, USA, 2007. IEEE
Computer Society.

[23] L. Lamport. Time, Clocks, and the Ordering of Events in
a Distributed System. Commun. ACM, 21(7):558-565, July
1978.

[24] P. Liu, O. Tripp, and X. Zhang. Ipa: Improving predictive
analysis with pointer analysis. In Proceedings of the 25th
International Symposium on Software Testing and Analysis,
ISSTA 2016, pages 59-69, New York, NY, USA, 2016. ACM.

[25] D. Marino, M. Musuvathi, and S. Narayanasamy. LiteRace:
Effective Sampling for Lightweight Data-race Detection. SIGPLAN Not., 44(6):134-143, June 2009.

[26] F. Mattern. Virtual Time and Global States of Distributed
Systems. In Parallel and Distributed Algorithms, pages 215-—
226. North-Holland, 1988.

[27] M. Musuvathi, S. Qadeer, T. Ball, G. Basler, P. A. Nainar,
and I. Neamtiu. Finding and Reproducing Heisenbugs in
Concurrent Programs. In Proceedings of the 8th USENIX
Conference on Operating Systems Design and Implementation,
OSDI’ 08, pages 267-280, Berkeley, CA, USA, 2008. USENIX
Association.

[28] M. Naik, A. Aiken, and J. Whaley. Effective Static Race
Detection for Java. SIGPLAN Not., 41(6):308-319, June 2006.

[29] R. O’Callahan and J.-D. Choi. Hybrid Dynamic Data Race
Detection. SIGPLAN Not., 38(10):167-178, June 2003.

[30] E. Pozniansky and A. Schuster. Efficient On-the-fly Data Race
Detection in Multithreaded C++ Programs. SIGPLAN Not., 38
(10):179-190, June 2003.

[31] P. Pratikakis, J. S. Foster, and M. Hicks. LOCKSMITH:
Practical Static Race Detection for C. ACM Trans. Program.
Lang. Syst., 33(1):3:1-3:55, Jan. 2011.

[32] C. Radoi and D. Dig. Practical Static Race Detection for
Java Parallel Loops. In Proceedings of the 2013 International
Symposium on Software Testing and Analysis, ISSTA 2013,
pages 178-190, New York, NY, USA, 2013. ACM.

[33] R. Raman, J. Zhao, V. Sarkar, M. Vechev, and E. Yahav. Scalable and Precise Dynamic Datarace Detection for Structured
Parallelism. SIGPLAN Not., 47(6):531-542, June 2012.

[34] J. Roemer and B. M. D. An Online Dynamic Analysis for
Sound Predictive Data Race Detection. Technical Report
OSU-CISRC-11/16-TRO5, 2016. URL http://web.cse.
ohio-state.edu/~bond.213/raptor-tr.pdf.

[35] G. Rosu. RV-Predict, Runtime Verification. https://
runtimeverification.com/predict/. Accessed: 201611-15.

[36] M. Said, C. Wang, Z. Yang, and K. Sakallah. Generating Data
Race Witnesses by an SMT-based Analysis. In Proceedings of
the Third International Conference on NASA Formal Methods,
NFM’11, pages 313-327, Berlin, Heidelberg, 2011. SpringerVerlag.

[37] S. Savage, M. Burrows, G. Nelson, P. Sobalvarro, and T. Anderson. Eraser: A Dynamic Data Race Detector for Multi-threaded
Programs. SIGOPS Oper. Syst. Rev., 31(5):27-37, Oct. 1997.

[38] K. Sen. Race Directed Random Testing of Concurrent Programs. SIGPLAN Not., 43(6):11-21, June 2008.

[39] K. Sen, G. Rogu, and G. Agha. Detecting Errors in Multithreaded Programs by Generalized Predictive Analysis of
Executions. In Proceedings of the 7th IFIP WG 6.1 International Conference on Formal Methods for Open Object-Based
Distributed Systems, FAOODS’05, pages 211-226, Berlin,
Heidelberg, 2005. Springer-Verlag.

[40] T. F. Serbanuta, F. Chen, and G. Rosu. Maximal causal
models for sequentially consistent systems. In International
Conference on Runtime Verification, pages 136-150. Springer,
2012.

[41] K. Serebryany and T. Iskhodzhanov. ThreadSanitizer: Data
Race Detection in Practice. In Proceedings of the Workshop
on Binary Instrumentation and Applications, WBIA ’09, pages
62-71, New York, NY, USA, 2009. ACM.

[42] Y. Smaragdakis, J. Evans, C. Sadowski, J. Yi, and C. Flanagan. Sound Predictive Race Detection in Polynomial Time.
SIGPLAN Not., 47(1):387-400, Jan. 2012.

[43] L. A. Smith and J. M. Bull. A multithreaded java grande
benchmark suite. In Proceedings of the third workshop on
Java for high performance computing, 2001.

[44] R. Surendran and V. Sarkar. Dynamic determinacy race
detection for task parallelism with futures. In International

170

Conference on Runtime Verification, pages 368-385. Springer,
2016.

[45] C. von Praun and T. R. Gross. Object Race Detection. SIGPLAN Not., 36(11):70-82, Oct. 2001.

[46] J. W. Voung, R. Jhala, and S. Lerner. RELAY: Static Race
Detection on Millions of Lines of Code. In Proceedings of
the the 6th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on The
Foundations of Software Engineering, ESEC-FSE ’07, pages
205-214, New York, NY, USA, 2007. ACM.

[47] C. Wang, S. Kundu, M. Ganai, and A. Gupta. Symbolic
predictive analysis for concurrent programs. In Proceedings of
the 2Nd World Congress on Formal Methods, FM ’09, pages
256-272, Berlin, Heidelberg, 2009. Springer-Verlag.

[48] E. Yahav. Verifying Safety Properties of Concurrent Java
Programs Using 3-valued Logic. SIGPLAN Not., 36(3):27-40,
Jan. 2001.

[49] A. Yoga, S. Nagarakatte, and A. Gupta. Parallel Data Race
Detection for Task Parallel Programs with Locks. In Proceedings of the 2016 24th ACM SIGSOFT International Symposium
on Foundations of Software Engineering, FSE 2016, pages
833-845, New York, NY, USA, 2016. ACM.

[50] Y. Yu, T. Rodeheffer, and W. Chen. RaceTrack: Efficient
Detection of Data Race Conditions via Adaptive Tracking.
SIGOPS Oper. Syst. Rev., 39(5):221-234, Oct. 2005.

[51] S. Zhan and J. Huang. ECHO: Instantaneous in Situ Race
Detection in the IDE. In Proceedings of the 2016 24th
ACM SIGSOFT International Symposium on Foundations of
Software Engineering, FSE 2016, pages 775-786, New York,
NY, USA, 2016. ACM.

