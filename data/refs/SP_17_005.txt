[1] C. Collberg and J. Nagra, Surreptitious Software: Obfuscation, Water-
marking, and Tamperprooﬁng for Software Protection. Addison-Wesley
Professional, 2009.

[2] B. P. Miller and X. Meng, “Binary code is not easy,” in ISSTA 2016.

ACM, 2016.

[3] G. Bonfante, J. Fernandez, J.-Y. Marion, B. Rouxel, F. Sabatier, and
A. Thierry, “Codisasm: Medium scale concatic disassembly of self-
modifying binaries with overlapping instructions,” in CCS 2015. ACM,
2015.

[4] C. Collberg, C. Thomborson, and D. Low, “Manufacturing cheap,
resilient, and stealthy opaque constructs,” in POPL 1998. ACM, 1998.
[Online]. Available: http://doi.acm.org/10.1145/268946.268962

[5] A. Moser, C. Kruegel, and E. Kirda, “Limits of static analysis for malware

detection,” in ACSAC 2007, Dec 2007.

[6] A. Lakhotia, E. U. Kumar, and M. Venable, “A Method for Detecting
Obfuscated Calls in Malicious Binaries,” IEEE Trans. Softw. Eng., vol. 31,
no. 11, Nov. 2005.

[7] K. A. Roundy and B. P. Miller, “Binary-code obfuscations in prevalent

packer tools,” ACM Comput. Surv., vol. 46, no. 1, Jul. 2013.

[8] P. Godefroid, M. Y. Levin, and D. A. Molnar, “SAGE: whitebox fuzzing
for security testing,” Commun. ACM, vol. 55, no. 3, 2012. [Online].
Available: http://doi.acm.org/10.1145/2093548.2093564

[9] C. Cadar and K. Sen, “Symbolic execution for software testing: three
decades later,” Commun. ACM, vol. 56, no. 2, 2013. [Online]. Available:
http://doi.acm.org/10.1145/2408776.2408795

[10] B. Yadegari and S. Debray, “Symbolic execution of obfuscated code,” in

CCS 2015. ACM, 2015.

[12] J. Ming, D. Xu, L. Wang, and D. Wu, “Loop: Logic-oriented opaque
predicate detection in obfuscated binary code,” in CCS 2015. ACM,
2015.

[13] S. Bardin, P. Herrmann, and F. Védrine, “Reﬁnement- based CFG

reconstruction from unstructured programs,” in VMCAI 2011, 2011.

[14] D. Brumley, C. Hartwig, M. G. Kang, Z. Liang, J. Newsome,
P. Poosankam, and D. Song, “BitScope: Automatically dissecting
malicious binaries,” School of Computer Science, Carnegie Mellon
University, Tech. Rep. CS-07-133, Mar. 2007.

[15] G. Balakrishnan and T. W. Reps, “WYSINWYX: what you see is not
what you execute,” ACM Trans. Program. Lang. Syst., vol. 32, no. 6,
2010.

[16] J. Kinder and H. Veith, “Precise static analysis of untrusted driver

binaries,” in FMCAD 2010. Springer, 2010.

[17] A. Sepp, B. Mihaila, and A. Simon, “Precise static analysis of binaries
by extracting relational information,” in 18th Working Conference on
Reverse Engineering, WCRE 2011.
IEEE, 2011. [Online]. Available:
http://dx.doi.org/10.1109/WCRE.2011.50

[18] K. R. M. Leino, “Efﬁcient weakest preconditions,” Inf. Process. Lett.,

vol. 93, no. 6, 2005.

[19] A. Biere, A. Cimatti, E. M. Clarke, and Y. Zhu, “Symbolic model

checking without bdds,” in TACAS 1999. Springer, 1999.

[20] A. Djoudi and S. Bardin, “Binsec: Binary code analysis with low-level
regions,” in Tools and Algorithms for the Construction and Analysis of
Systems. Springer, 2015.

[21] R. David, S. Bardin, T. Thanh Dinh, J. Feist, L. Mounier, M.-L. Potet,
and J.-Y. Marion, “BINSEC/SE: A dynamic symbolic execution toolkit
for binary-level analysis,” in SANER 2016.

IEEE, 2016.

Software protection for the masses,” in SPRO 2015.

[22] J. Calvet, J. Campos, and T. Dupuy, “Visiting The Bear Den, A Journey
in the Land of (Cyber-)Espionage,” RECON 2016, Montreal, 17/06/16.
[23] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin, “Obfuscator-llvm:
IEEE Press, 2015.
[24] J. Vanegue and S. Heelan, “SMT solvers in software security,” in
WOOT 2012. Usenix Association, 2012, pp. 85–96. [Online]. Available:
http://www.usenix.org/conference/woot12/smt-solvers-software-security
[25] P. Godefroid, N. Klarlund, and K. Sen, “Dart: Directed automated random

testing,” SIGPLAN Not., vol. 40, no. 6, 2005.

[26] K. Sen, D. Marinov, and G. Agha, “Cute: A concolic unit testing engine

for C,” SIGSOFT Softw. Eng. Notes, vol. 30, no. 5, 2005.

[27] R. David, S. Bardin, J. Feist, J.-Y. Marion, L. Mounier, M.-L. Potet, and
T. D. Ta, “Speciﬁcation of concretization and symbolization policies in
symbolic execution,” in ISSTA 2016. ACM, July 2016.

[28] S. Bardin and P. Herrmann, “OSMOSE: automatic structural testing of

executables,” Softw. Test., Verif. Reliab., vol. 21, no. 1, 2011.

[29] V. Chipounov, V. Kuznetsov, and G. Candea, “The S2E platform: Design,
implementation, and applications,” ACM Trans. Comput. Syst., vol. 30,
no. 1, Feb. 2012.

[30] S. K. Cha, T. Avgerinos, A. Rebert, and D. Brumley, “Unleashing mayhem

on binary code,” in SP 2012.

IEEE, 2012.

[31] M. D. Preda, R. Giacobazzi, S. K. Debray, K. Coogan, and G. M.
Townsend, “Modelling metamorphism by abstract interpretation,” in SAS
2010. Springer, 2010.

[32] S. Bardin, P. Herrmann, J. Leroux, O. Ly, R. Tabary, and A. Vincent,
“The Bincoa Framework for Binary Code Analysis,” in CAV 2011, 2011.
[Online]. Available: http://dx.doi.org/10.1007/978-3-642-22110-1_13

[33] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz, “Sok: Automated

software diversity,” in SP 2014, May 2014.

[34] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G. Bringas, “Sok:
Deep packer inspection: A longitudinal study of the complexity
of
[Online]. Available:
http://dx.doi.org/10.1109/SP.2015.46

run-time packers,” in SP 2015, 2015.

[35] C. Collberg, S. Martin, J. Myers, and J. Nagra, “Distributed application
tamper detection via continuous software updates,” in ACSAC 2012.
ACM, 2012.

[36] Trend Micro, “Operation Pawn Storm, Using Decoys to Evade Detection,”

Tech. Rep., 2014.

[37] ESET Research, “Sednit APT Group Meets Hacking Team,” http://www.
welivesecurity.com/2015/07/10/sednit-apt-group-meets-hacking-team/,
Oct. 2015.

[38] Trend Micro, “Operation Pawn Storm Ramps Up its Activities; Targets

NATO, White House,” Apr. 2015.

[11] B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray, “A generic
approach to automatic deobfuscation of executable code,” in SP 2015,
May 2015.

[39] von Gastbeitrag, “Digital Attack on German Parliament: Investigative
Report on the Hack of the Left Party Infrastructure in Bundestag,” Jun.
2015.

[40] D. Alperovitch,

the
Democratic National Committee,”
https://www.crowdstrike.com/
blog/bears-midst-intrusion-democratic-national-committee/, Jun. 2016.
[41] N. Mehta and B. Leonard, “CVE-2016-7855: Chromium Win32k system

the Midst:

Intrusion

“Bears

into

in

call lockdown,” Tech. Rep., 2016.

[42] D. Creus, T. Halfpop, and R. Falcone, “Sofacy’s

‘Komplex’
OS X Trojan,” http://researchcenter.paloaltonetworks.com/2016/09/
unit42-sofacys-komplex-os-x-trojan/, Sep. 2016.

[43] Y. Zhou, A. Main, Y. X. Gu, and H. Johnson, “Information Hiding in
Software with Mixed Boolean-Arithmetic Transforms,” in Information
Security Applications. Berlin, Heidelberg: Springer Berlin Heidelberg,
2007, vol. 4867, pp. 61–75.

[44] N. Eyrolles, L. Goubin, and M. Videau, “Defeating mba-based obfusca-

tion,” in SPRO 2016 (CCS workshop), ACM, Ed., 2016.

[45] S. Banescu, C. S. Collberg, V. Ganesh, Z. Newsham, and A. Pretschner,
“Code obfuscation against symbolic execution attacks,” in ACSAC 2016.
ACM, 2016.

[46] N. M. Hai, M. Ogawa,

and Q. T. Tho, Foundations and
Practice of Security: 8th International Symposium, FPS 2015,
Revised Selected Papers.
Springer, 2016, ch. Obfuscation Code
Localization Based on CFG Generation of Malware. [Online]. Available:
http://dx.doi.org/10.1007/978-3-319-30303-1_14

[47] A. Finkel and P. Schnoebelen, “Well-structured transition systems

everywhere!” Theor. Comput. Sci., vol. 256, no. 1-2, 2001.

[48] F. Charreteur and A. Gotlieb, “Constraint-based test input generation for

java bytecode,” in ISSRE 2010.

IEEE, 2010.

[49] S. Bardin, M. Delahaye, R. David, N. Kosmatov, M. Papadakis, Y. L.
Traon, and J. Marion, “Sound and quasi-complete detection of infeasible
test requirements,” in ICST 2015.

IEEE, 2015.

[50] T. Reinbacher and J. Brauer, “Precise control ﬂow reconstruction using
boolean logic,” in EMSOFT 2011. ACM, 2011. [Online]. Available:
http://doi.acm.org/10.1145/2038642.2038662

[51] S. Blazy, V. Laporte, and D. Pichardie, “Veriﬁed abstract interpretation
techniques for disassembling low-level self-modifying code,” in ITP
2014. Springer, 2014.

[52] M. Dalla Preda, M. Madou, K. De Bosschere, and R. Giacobazzi,
“Opaque predicates detection by abstract interpretation,” in AMAST 2006.
Springer-Verlag, 2006. [Online]. Available: http://dx.doi.org/10.1007/
11784180_9

[53] M. H. Nguyen, T. B. Nguyen, T. T. Quan, and M. Ogawa, “A hybrid
approach for control ﬂow graph construction from binary code,” in
APSEC 2013, vol. 2, Dec 2013.

[54] G. Myles and C. Collberg, “Software watermarking via opaque
predicates: Implementation, analysis, and attacks,” Electronic Commerce
Research, vol. 6, no. 2, 2006. [Online]. Available: http://dx.doi.org/10.
1007/s10660-006-6955-z

[55] J. Palsberg, S. Krishnaswamy, M. Kwon, D. Ma, Q. Shao, and Y. Zhang,
“Experience with software watermarking,” in ACSAC 2000, 2000.
[Online]. Available: http://dx.doi.org/10.1109/ACSAC.2000.898885

[56] S. K. Udupa, S. K. Debray, and M. Madou, “Deobfuscation: Reverse

engineering obfuscated code,” in WCRE 2005, 2005.

