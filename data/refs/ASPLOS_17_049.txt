[1] Linux cgroups. http://goo.gl/tTiwSL
[2] Linux debugfs. https://goo.gl/sdBhIh.
[3] Linux CFS Scheduler. https://goo.gl/hjVjJI, [4] Understanding the Linux Kernel. http://goo.gl/8P7gJR, .
[5] NAS. https://www.nas.nasa.gov/publications/npb.html.
[6] SPEC 2006. https://www.spec.org/cpu2006/.
[7] STREAM. https://www.cs.virginia.edu/stream/.
[8] JEDEC. DDR3 SDRAM Standard, 2012.
[9] JEDEC. DDR4 SDRAM Standard, 2012.

[10] JEDEC. Low Power Double Data Rate 3 (LPDDR3), 2012.

[11] I. Bhati, Z. Chishti, and B. Jacob. Coordinated refresh: Energy
efficient techniques for DRAM refresh scheduling. In Proceedings of the 2013 International Symposium on Low Power
Electronics and Design, ISLPED, 2013.

[12] I. Bhati, Z. Chishti, $.-L. Lu, and B. Jacob. Flexible autorefresh: Enabling scalable and energy-efficient DRAM refresh
reductions. In Proceedings of the 42nd Annual International
Symposium on Computer Architecture, ISCA, 2015.

[13] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi,
A. Basu, J. Hestness, D. R. Hower, T. Krishna, S. Sardashti,
R. Sen, K. Sewell, M. Shoaib, N. Vaish, M. D. Hill, and D. A.
Wood. The gem5 simulator. SIGARCH Comput. Archit. News,
2011.

[14] J. D. Booth, J. B. Kotra, H. Zhao, M. Kandemir, and P. Raghavan. Phase detection with hidden markov models for dvfs on
many-core processors. In 20/5 IEEE 35th International Conference on Distributed Computing Systems, ICDCS, 2015.

[15] K. K. W. Chang, D. Lee, Z. Chishti, A. R. Alameldeen,
C. Wilkerson, Y. Kim, and O. Mutlu. Improving DRAM performance by parallelizing refreshes with accesses. In the 20th
International Symposium on High Performance Computer Architecture, HPCA, 2014.

[16] N. Chatterjee, N. Muralimanohar, R. Balasubramonian,
A. Davis, and N. P. Jouppi. Staged reads: Mitigating the
impact of DRAM writes on DRAM reads. In Proceedings
of the 2012 IEEE 18th International Symposium on HighPerformance Computer Architecture, HPCA, 2012.

[17] V. V. Fedorov, A. L. N. Reddy, and P. V. Gratz. Shared lastlevel caches and the case for longer timeslices. In Proceedings
of the 2015 International Symposium on Memory Systems,
MEMSYS, 2015.

[18] M. K. Jeong, D. H. Yoon, D. Sunwoo, M. Sullivan, I. Lee, and
M. Erez. Balancing DRAM locality and parallelism in shared.
memory CMP systems. In IEEE International Symposium on
High-Performance Comp Architecture, HPCA, 2012.

[19] D. Kaseridis, J. Stuecheli, and L. K. John. Minimalist openpage: A DRAM page-mode scheduling policy for the manycore era. In Proceedings of the 44th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO, 2011.

[20] O. Kislal, M. T. Kandemir, and J. B. Kotra. Cache-aware approximate computing for decision tree learning. In 2016 IEEE
International Parallel and Distributed Processing Symposium
Workshops, IPDPSW, 2016.

[21] J. B. Kotra, M. Arjomand, D. Guttman, M. T. Kandemir, and
C. R. Das. Re-NUCA: A practical nuca architecture for reram
based last-level caches. In 2016 IEEE International Parallel
and Distributed Processing Symposium, IPDPS, 2016.

[22] J. Liu, B. Jaiyen, R. Veras, and O. Mutlu. Raidr: Retentionaware intelligent DRAM refresh. In Proceedings of the 39th
Annual International Symposium on Computer Architecture,
ISCA, 2012.

[23] J. Liu, J. B. Kotra, W. Ding, and M. Kandemir. Network footprint reduction through data access and computation placement in noc-based manycores. In Proceedings of the 52Nd
Annual Design Automation Conference, DAC, 2015.

[24] L. Liu, Z. Cui, M. Xing, Y. Bao, M. Chen, and C. Wu. A
software memory partition approach for eliminating banklevel interference in multicore systems. In Proceedings of the
21st International Conference on Parallel Architectures and
Compilation Techniques, PACT, 2012.

[25] S. Liu, K. Pattabiraman, T. Moscibroda, and B. G. Zorn.
Flikker: Saving DRAM refresh-power through critical data
partitioning. In Proceedings of the Sixteenth International
Conference on Architectural Support for Programming Languages and Operating Systems, ASPLOS, 2011.

[26] J. Lozi, B. Lepers, J. R. Funston, F. Gaud, V. Qu√©ma, and
A. Fedorova. The Linux scheduler: a decade of wasted cores.
In Proceedings of the Eleventh European Conference on Computer Systems, EuroSys, 2016.

[27] J. Mukundan, H. Hunter, K.-h. Kim, J. Stuecheli, and J. F.
Martinez. Understanding and mitigating refresh overheads in
high-density DDR4 DRAM systems. In Proceedings of the
40th Annual International Symposium on Computer Architecture, ISCA, 2013.

[28] P. Nair, C. C. Chou, and M. K. Qureshi. A case for refresh
pausing in DRAM memory systems. In JEEE 19th International Symposium on High Performance Computer Architecture, HPCA, 2013.

[29] M. Poremba and Y. Xie. Nvmain: An architectural-level main
memory simulator for emerging non-volatile memories. In
IEEE Computer Society Annual Symposium on VLSI, ISVLSI,
2012.
[30] M. K. Qureshi, D. H. Kim, S. Khan, P. J. Nair, and O. Mutlu.
Avatar: A variable-retention-time (vrt) aware refresh for
DRAM systems. In IEEE/IFIP International Conference on
Dependable Systems and Networks, DSN, 2015.

[31] S. Rixner, W. J. Dally, U. J. Kapasi, P. Mattson, and J. D.
Owens. Memory access scheduling. In Proceedings of the

27th Annual International Symposium on Computer Architecture, ISCA, 2000.

[32] J. Stuecheli, D. Kaseridis, H. C. Hunter, and L. K. John. Elastic refresh: Techniques to mitigate refresh penalties in high

density memory. In the 43rd Annual International Symposium
on Microarchitecture, MICRO, 2010.

[33] K. Swaminathan, J. B. Kotra, H. Liu, J. Sampson, M. Kandemir, and V. Narayanan. Thermal-aware application scheduling on device-heterogeneous embedded architectures. 2015
28th International Conference on VLSI Design, 2015.

[34] X. Tang, M. Kandemir, P. Yedlapalli, and J. B. Kotra. Improving bank-level parallelism for irregular applications. In
2016 49th Annual IEEE/ACM International Symposium on

Microarchitecture, MICRO, 2016.

[35] R. K. Venkatesan, S. Herr, and E. Rotenberg. Retention-aware
placement in DRAM (rapid): software methods for quasi-nonvolatile DRAM. In The Twelfth International Symposium on
High-Performance Computer Architecture, HPCA, 2006.

[36] P. Yedlapalli, J. B. Kotra, E. Kultursay, M. Kandemir, C. R.
Das, and A. Sivasubramaniam. Meeting midway: Improving
CMP performance with memory-side prefetching. In Proceedings of the 22nd International Conference on Parallel Architectures and Compilation Techniques, PACT, 2013.

[37] H. Yun, R. Mancuso, Z. P. Wu, and R. Pellizzoni. PALLOC:
DRAM bank-aware memory allocator for performance isolation on multicore platforms. In 2014 IEEE 19th Real-Time and
Embedded Technology and Applications Symposium, RTAS,
2014.

[38] T. Zhang, M. Poremba, C. Xu, G. Sun, and Y. Xie. Cream:
A concurrent-refresh-aware DRAM memory architecture. In

The 20th International Symposium on High Performance
Computer Architecture, HPCA, 2014.