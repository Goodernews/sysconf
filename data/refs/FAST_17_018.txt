[1] GitHub. Quartz: A DRAM-based
performance emulator for NVM
https://github.com/HewlettPackard/quartz.
[2] M. Boehm, B. Schlegel, P. B. Volk, U. Fischer, D.
Habich, and W. Lehner. Efficient In-Memory Indexing with Generalized Prefix Trees. In Proceedings of the Database Systems for Business, Technology, and Web (BTW), 2011.
[3] S. Chen and Q. Jin. Persistent B+-Trees in NonVolatile Main Memory. In Proceedings of the
VLDB Endowment (PVLDB), 2015.
[4] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp,
R. K. Gupta, R. Jhala, and S. Swanson. NV-Heaps:
Making Persistent Objects Fast and Safe with NextGeneration, Non-Volatile Memories. In Proceedings of the 16th International Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2011.
[5] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. C.
Lee, D. Burger, and D. Coetzee. Better I/O Through
Byte-Addressable, Persistent Memory. In Proceedings of the 22nd ACM Symposium on Operating
Systems Principles (SOSP), 2009.
[6] S. R. Dulloor, S. Kumar, A. Keshavamurthy, P.
Lantz, D. Reddy, R. Sankaran, and J. Jackson. System Software for Persistent Memory. In Proceedings of the 9th ACM European Conference on Computer Systems (EuroSys), 2014.
[7] J. Huang, K. Schwan, and M. K. Qureshi.
NVRAM-aware Logging in Transaction Systems.
In Proceedings of the VLDB Endowment (PVLDB),
2014.
[8] C. Kim, J. Chhugani, N. Satish, E. Sedlar, A. D.
Nguyen, T. Kaldewey, V. W. Lee, S. A. Brandt, and
P. Dubey. Fast: Fast Architecture Sensitive Tree
Search on Modern CPUs and GPUs. In Proceedings of the 2010 ACM SIGMOD International Conference on Management of Data (SIGMOD), 2010.
[9] W. -H. Kim, J. Kim, W. Baek, B. Nam, and Y.
Won. NVWAL: Exploiting NVRAM in WriteAhead Logging. In Proceedings of the 21st International Conference on Architectural Support
for Programming Languages and Operating System
(ASPLOS), 2016.
[10] E. Lee, H. Bahn, and S. H. Noh. Unioning of
the Buffer Cache and Journaling Layers with Nonvolatile Memory. In Proceedings of the 11th
USENIX Conference on File and Storage Technologies (FAST), 2013.
[11] V. Leis, A. Kemper, and T. Neumann. The Adaptive
Radix Tree: ARTful Indexing for Main-Memory
Databases. In Proceedings of the IEEE 29th International Conference on Data Engineering (ICDE),
2013.
[12] I. Moraru, D. G. Andersen, M. Kaminsky, N. Tolia, P. Ranganathan, and N. Binkert. Consistent,
Durable, and Safe Memory Management for Byteaddressable Non Volatile Main Memory. In Proceedings of the ACM Conference on Timely Results
in Operating Systems (TRIOS), 2013.
[13] D. Narayanan and O. Hodson. Whole-System
Persistence. In Proceedings of the 17th International Conference on Architectural Support for
Programming Languages and Operating Systems
(ASPLOS), 2012.
[14] J. Ou, J. Shu, and Y. Lu. A High Performance File
System for Non-Volatile Main Memory. In Proceedings of the 11th European Conference on Computer Systems (EuroSys), 2016.
[15] I. Oukid, J. Lasperas, A. Nica, T. Willhalm, and W.
Lehner. FPTree: A Hybrid SCM-DRAM Persistent
and Concurrent B-Tree for Storage Class Memory.
In Proceedings of the 2016 ACM SIGMOD International Conference on Management of Data (SIGMOD), 2016.
[16] J. Rao and K. A. Ross. Cache Conscious Indexing
for Decision-Support in Main Memory. In Proceedings of the 25th International Conference on Very
Large Data Bases (VLDB), 1999.
[17] S. Venkataraman, N. Tolia, P. Ranganathan, and R.
H. Campbell. Consistent and Durable Data Structures for Non-Volatile Byte-Addressable Memory.
In Proceedings of the 9th USENIX Conference on
File and Storage Technologies (FAST), 2011.
[18] H. Volos, G. Magalhaes, L. Cherkasova, and J. Li.
Quartz: A Lightweight Performance Emulator for
Persistent Memory Software. In Proceedings of
the 15th Annual Middleware Conference (Middleware), 2015.
[19] H. Volos, A. J. Tack, and M. M. Swift. Mnemosyne:
Lightweight Persistent Memory. In Proceedings of
the 16th International Conference on Architectural
Support for Programming Languages and Operating Systems (ASPLOS), 2011.
[20] J. Yang, Q. Wei, C. Chen, C. Wang, and K. L.
Yong. NV-Tree: Reducing Consistency Cost for
NVM-based Single Level Systems. In Proceedings
of the 13th USENIX Conference on File and Storage Technologies (FAST), 2015.
[21] Intel Corporation Intel�R 64 and IA-32
Architectures Software Developer’s Manual. http://www.intel.com/content/www/us
/en/processors/architectures-software-developermanuals.html.
[22] MEMCACHED What is Memcached?
https://memcached.org.
[23] GitHub Memcache port of Redis benchmark.
https://github.com/antirez/mc-benchmark.
[24] Technische Universitat M ¨ unchen The Adaptive ¨
Radix Tree: ARTful Indexing for Main-Memory
Databases. https://db.in.tum.de/ leis/.
[25] J. Hyun Kim, Young Je Moon, and Sam H. Noh.
An Experimental Study on the Effect of Asymmetric Memory Latency of New Memory on Application Performance. In Proceedings of the 24th IEEE
24th International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS), 2016.
[26] J. Corbet Trees I: Radix trees. https://lwn.net/Arti
cles/175432/.
[27] D. R. Morrison PATRICIA –Practical Algorithm
To Retrieve Information Coded in Alphanumeric.
Journal of the ACM (JACM), 1968.
[28] D. E. Knuth The Art in Computer Programming:
Sorting and Searching, Vol. 3. Pearson Education,
1998.
