[1] Sarita V. Adve and Hans-J. Boehm. 2010. Memory Models: A Case for Rethinking Parallel Languages and Hardware.

Commun. ACM 53, 8 (Aug. 2010), 90-101. https://doi.org/10.1145/1787234.1787255



[2] S. V. Adve and M. D. Hill. 1990. Weak ordering—a new definition. In Proc. of the 17th Annual International Symposium on

Computer Architecture. ACM, 2-14.



[3] Wonsun Ahn, Shanxiang Qi, Jae-Woo Lee, Marios Nicolaides, Xing Fang, Josep Torrellas, David Wong, and Samuel Midkiff.

2009. BulkCompiler: High-Performance Sequential Consistency through Cooperative Compiler and Hardware Support.

In 42nd International Symposium on Microarchitecture.



[4] Jade Alglave, Daniel Kroening, Vincent Nimal, and Daniel Poetzl. 2014. Don’t Sit on the Fence - A Static Analysis Approach

to Automatic Fence Insertion. In Computer Aided Verification - 26th International Conference. 508-524.



[5] Bowen Alpern, Steve Augart, Stephen M. Blackburn, Maria A. Butrico, Anthony Cocchi, Perry Cheng, Julian Dolby, Stephen J.

Fink, David Grove, Michael Hind, Kathryn S. McKinley, Mark F. Mergen, J. Eliot B. Moss, Ton Anh Ngo, Vivek Sarkar,

and Martin Trapp. 2005. The Jikes Research Virtual Machine project: Building an open-source research community. IBM

Systems Journal 44, 2 (2005), 399-418.



[6] ARMv8 2017. ARM Cortex-A Series Programmer’s Guide for ARMv8-A Version: 1.0, Section 13.2.1. (2017). https:

//developer.arm.com/docs/den0024/latest/13-memory- ordering/132-barriers/1321-one-way-barriers Accessed July 2017.



[7] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 49, Publication date: October 2017. 49:24 Lun Liu, Todd Millstein, and Madanlal Musuvathi



[8] D. Bacon, J. Bloch, J. Bogda, C. Click, P. Haahr, D. Lea, T. May, J. W. Maessen, J. D. Mitchell, K. Nilsen, B. Pugh, and

E. S. Sirer. Accessed April 2017. The “Double-Checked Locking is Broken” Declaration. (Accessed April 2017). http:

//www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking. html



[9] S. M. Blackburn, R. Garner, C. Hoffman, A. M. Khan, K. S. McKinley, R. Bentzur, A. Diwan, D. Feinberg, D. Frampton,

S. Z. Guyer, M. Hirzel, A. Hosking, M. Jump, H. Lee, J. E. B. Moss, A. Phansalkar, D. Stefanovi¢, T. VanDrunen, D. von

Dincklage, and B. Wiedermann. 2006. The DaCapo Benchmarks: Java Benchmarking Development and Analysis. In

OOPSLA ’06: Proceedings of the 21st annual ACM SIGPLAN conference on Object-Oriented Programing, Systems, Languages,

and Applications. ACM Press, New York, NY, USA, 169-190.



[10] Hans-J. Boehm. 2011. How to Miscompile Programs with "Benign" Data Races. In Proceedings of the 3rd USENIX Conference

on Hot Topic in Parallelism (HotPar’11). USENIX Association, Berkeley, CA, USA.



[11] Hans-J. Boehm. 2012. Position Paper: Nondeterminism is Unavoidable, but Data Races Are Pure Evil. In Proceedings of the

2012 ACM Workshop on Relaxing Synchronization for Multicore and Manycore Scalability (RACES ’12). ACM, 9-14.



[12] H.J. Boehm and S. Adve. 2008. Foundations of the C++ concurrency memory model. In Proc. of the 2008 ACM SIGPLAN

Conference on Programming Language Design and Implementation. ACM, 68-78.



[13] Hans-J. Boehm and Brian Demsky. 2014. Outlawing Ghosts: Avoiding Out-of-thin-air Results. In Proceedings of the Workshop

on Memory Systems Performance and Correctness (MSPC ’14), ACM, Article 7, 6 pages.



[14] Pietro Cenciarelli, Alexander Knapp, and Eleonora Sibilio. 2007. The Java Memory Model: Operationally, Denotationally,

Axiomatically. In Programming Languages and Systems, 16th European Symposium on Programming (Lecture Notes in

Computer Science), Rocco De Nicola (Ed.), Vol. 4421. Springer, 331-346.



[15] Luis Ceze, James Tuck, Pablo Montesinos, and Josep Torrellas. 2007. BulkSC: Bulk enforcement of sequential consistency. In

Proc. of the 34th Annual International Symposium on Computer Architecture. 278-289.



[16] Delphine Demange, Vincent Laporte, Lei Zhao, Suresh Jagannathan, David Pichardie, and Jan Vitek. 2013. Plan B: A

Buffered Memory Model for Java. In Proceedings of the 40th Annual ACM SIGPLAN-SIGACT Symposium on Principles of

Programming Languages (POPL ’13). ACM, New York, NY, USA, 329-342.



[17] Cormac Flanagan and Stephen N. Freund. 2010. Adversarial Memory for Detecting Destructive Races. In Proceedings of the

31st ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’10). ACM, 244-254.



[18] Andy Georges, Dries Buytaert, and Lieven Eeckhout. 2007. Statistically Rigorous Java Performance Evaluation. In Proceedings

of the 22Nd Annual ACM SIGPLAN Conference on Object-oriented Programming Systems and Applications (OOPSLA ’07).

ACM, 57-76.



[19] K. Gharachorloo, A. Gupta, and J. Hennessy. 1991. Two Techniques to Enhance the Performance of Memory Consistency

Models. In Proc. of the International Conference on Parallel Processing. 355-364.



[20] Mohammad Majharul Islam and Abdullah Muzahid. 2016. Detecting, Exposing, and Classifying Sequential Consistency

Violations. In 27th IEEE International Symposium on Software Reliability Engineering, ISSRE 2016, Ottawa, ON, Canada,

October 23-27, 2016. IEEE Computer Society, 241-252. https://doi.org/10.1109/ISSRE.2016.48



[21] Java Virtual Machine Specification 2017. Accessed July 2017. (2017). https://docs.oracle.com/javase/specs/jvms/se8/html



[22] JSR133 2017. JSR-133 Cookbook for Compiler Writers. Accessed July 2017. (2017). http://g.oswego.edu/dl/jmm/cookbook.html



[23] Jan-Oliver Kaiser, Hoang-Hai Dang, Derek Dreyer, Ori Lahav, and Viktor Vafeiadis. 2017. Strong Logic for Weak Memory:

Reasoning About Release-Acquire Consistency in Iris. In 31st European Conference on Object-Oriented Programming

(ECOOP 2017) (Leibniz International Proceedings in Informatics (LIPIcs)), Peter Miiller (Ed.), Vol. 74. 17:1-17:29.



[24] A. Kamil, J. Su, and K. Yelick. 2005. Making sequential consistency practical in Titanium. In Proceedings of the 2005 ACM/IEEE

conference on Supercomputing. IEEE Computer Society.



[25] L. Lamport. 1979. How to make a multiprocessor computer that correctly executes multiprocess programs. IEEE transactions

on computers 100, 28 (1979), 690-691.



[26] Brandon Lucia, Luis Ceze, Karin Strauss, Shaz Qadeer, and Hans Boehm. 2010. Conflict Exceptions: Providing Simple Parallel

Language Semantics with Precise Hardware Exceptions. In Proc. of the 37th Annual International Symposium on Computer

Architecture.



[27] Sela Mador-Haim, Luc Maranget, Susmit Sarkar, Kayvan Memarian, Jade Alglave, Scott Owens, Rajeev Alur, Milo M. K.

Martin, Peter Sewell, and Derek Williams. 2012. An Axiomatic Memory Model for POWER Multiprocessors. In Computer

Aided Verification - 24th International Conference, P. Madhusudan and Sanjit A. Seshia (Eds.), Vol. 7358. Springer, 495-512.



[28] J. Manson, W. Pugh, and S. Adve. 2005. The Java memory model. In Proceedings of POPL. ACM, 378-391.



[29] Daniel Marino, Todd Millstein, Madanlal Musuvathi, Satish Narayanasamy, and Abhayendra Singh. 2015. The Silently

Shifting Semicolon. In 1st Summit on Advances in Programming Languages (SNAPL 2015) (Leibniz International Proceedings

in Informatics (LIPIcs)), Thomas Ball, Rastislav Bodik, Shriram Krishnamurthi, Benjamin S. Lerner, and Greg Morrisett

(Eds.), Vol. 32. 177-189.



[30] Daniel Marino, Abhayendra Singh, Todd Millstein, Madanlal Musuvathi, and Satish Narayanasamy. 2010. DRFx: A simple

and efficient memory model for concurrent programming languages. In PLDI ’10. ACM, 351-362.



[31] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 49, Publication date: October 2017. A Volatile-by-Default JVM for Server Applications 49:25



[32] Daniel Marino, Abhayendra Singh, Todd Millstein, Madanlal Musuvathi, and Satish Narayanasamy. 2011. A Case for

an SC-Preserving Compiler. In Proc. of the 32nd ACM SIGPLAN Conference on Programming Language Design and

Implementation.



[33] Luis Mastrangelo, Luca Ponzanelli, Andrea Mocci, Michele Lanza, Matthias Hauswirth, and Nathaniel Nystrom. 2015. Use

at Your Own Risk: The Java Unsafe API in the Wild. In Proceedings of the 2015 ACM SIGPLAN International Conference on

Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2015). ACM, 695-710.



[34] Xiangrui Meng, Joseph K. Bradley, Burak Yavuz, Evan R. Sparks, Shivaram Venkataraman, Davies Liu, Jeremy Freeman, D. B.

Tsai, Manish Amde, Sean Owen, Doris Xin, Reynold Xin, Michael J. Franklin, Reza Zadeh, Matei Zaharia, and Ameet

Talwalkar. 2015. MLlib: Machine Learning in Apache Spark. CoRR abs/1505.06807 (2015). http://arxiv.org/abs/1505.06807



[35] OpenJDK 2017. Accessed July 2017. (2017). http://openjdk.java.net



[36] Jessica Ouyang, Peter M. Chen, Jason Flinn, and Satish Narayanasamy. 2013. ..And Region Serializability for All. In 5th

USENIX Workshop on Hot Topics in Parallelism, HotPar’13, Emery D. Berger and Kim M. Hazelwood (Eds.). USENIX

Association.



[37] Scott Owens, Susmit Sarkar, and Peter Sewell. 2009. A Better x86 Memory Model: x86-TSO. In Theorem Proving in Higher

Order Logics, 22nd International Conference, TPHOLs 2009 (Lecture Notes in Computer Science), Stefan Berghofer, Tobias

Nipkow, Christian Urban, and Makarius Wenzel (Eds.), Vol. 5674. Springer, 391-407.



[38] Filip Pizlo, Lukasz Ziarek, Ethan Blanton, Petr Maj, and Jan Vitek. 2010. High-level Programming of Embedded Hard

Real-time Devices. In Proceedings of the 5th European Conference on Computer Systems (EuroSys 10). 69-82.



[39] Carl G. Ritson and Scott Owens. 2016. Benchmarking Weak Memory Models. In Proceedings of the 21st ACM SIGPLAN

Symposium on Principles and Practice of Parallel Programming (PPoPP ’16). Article 24, 11 pages.



[40] Douglas C. Schmidt and Tim Harrison. 1997. Double-checked Locking: An optimization pattern for efficiently initializing

and accessing thread-safe objects. In Pattern Languages of Program Design 3, Robert C. Martin, Dirk Riehle, and Frank

Buschmann (Eds.). Addison-Wesley Longman Publishing Co., Inc., 363-375.



[41] Aritra Sengupta, Swarnendu Biswas, Minjia Zhang, Michael D. Bond, and Milind Kulkarni. 2015a. Hybrid Static-Dynamic

Analysis for Statically Bounded Region Serializability. In Proceedings of the Twentieth International Conference on

Architectural Support for Programming Languages and Operating Systems (ASPLOS °15). 561-575.



[42] Aritra Sengupta, Man Cao, Michael D. Bond, and Milind Kulkarni. 2015b. Toward Efficient Strong Memory Model Support

for the Java Platform via Hybrid Synchronization. In Proceedings of the Principles and Practices of Programming on The

Java Platform, PPP} 2015, Ryan Stansifer and Andreas Krall (Eds.). ACM, 65-75.



[43] Jaroslav Sevcik and David Aspinall. 2008. On Validity of Program Transformations in the Java Memory Model. In ECOOP.

27-51,



[44] D. Shasha and M. Snir. 1988. Efficient and correct execution of parallel programs that share memory. ACM Transactions on

Programming Languages and Systems (TOPLAS) 10, 2 (1988), 282-312.



[45] Abhayendra Singh, Daniel Marino, Satish Narayanasamy, Todd Millstein, and Madan Musuvathi. 2011. Efficient processor

support for DRFx, a memory model with exceptions. In Proceedings of the Sixteenth International Conference on Architectural

Support for Programming Languages and Operating Systems (ASPLOS XVI). ACM, 53-66.



[46] Abhayendra Singh, S. Narayanasamy, D. Marino, T. Millstein, and M. Musuvathi. 2012. End-to-end Sequential Consistency.

In Proc. of the 39th Annual International Symposium on Computer Architecture. 524 —535.



[47] Z. Sura, X. Fang, C.L. Wong, S.P. Midkiff, J. Lee, and D. Padua. 2005. Compiler techniques for high performance sequentially

consistent Java programs. In Proceedings of the tenth ACM SIGPLAN Symposium on Principles and Practice of Parallel

Programming. 2-13.



[48] TSMO03-J 2017. TSM03-J. Do not publish partially initialized objects. Accessed July 2017. (2017). https://www.securecoding.

cert.org/confluence/display/java/TSM03-J.+Do+not+publish+ partially +initialized+ objects



[49] Michael Vollmer, Ryan G. Scott, Madanlal Musuvathi, and Ryan R. Newton. 2017. SC-Haskell: Sequential Consistency in

Languages That Minimize Mutable Shared Heap. In Proceedings of the 22Nd ACM SIGPLAN Symposium on Principles and

Practice of Parallel Programming (PPoPP ’17). ACM, 283-298.



[50] Matei Zaharia, Reynold S. Xin, Patrick Wendell, Tathagata Das, Michael Armbrust, Ankur Dave, Xiangrui Meng, Josh Rosen,

Shivaram Venkataraman, Ali Ghodsi, Joseph Gonzalez, Scott Shenker, and Ion Stoica. 2016. Apache Spark: A unified

engine for big data processing. Commun. ACM 59, 11 (2016), 56-65.



[51] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 49, Publication date: October 2017.
