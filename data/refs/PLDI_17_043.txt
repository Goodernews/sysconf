
[1] M. B. S. Ahmad and A. Cheung. Leveraging parallel data
processing frameworks with verified lifting. In Proceedings of
the Fifth Workshop on Synthesis, SYNT@ CAV 2016, Toronto,
Canada, July 17-18, 2016., pages 67-83, 2016.

[2] R. Alur, R. Bodik, G. Juniwal, M. M. K. Martin,
M. Raghothaman, S. A. Seshia, R. Singh, A. Solar-Lezama,
E. Torlak, and A. Udupa. Syntax-guided synthesis. In Formal
Methods in Computer-Aided Design, FMCAD 2013, Portland,
OR, USA, October 20-23, 2013, pages 1-8, 2013.
[3] R. Bodik and B. Jobstmann. Algorithmic program synthesis:
introduction. STTT, 15(5-6):397-411, 2013. doi: 10.1007/
s10009-013-0287-9.

[4] A. Cheung and A. Solar-Lezama. Computer-assisted query
formulation. Found. Trends Program. Lang., 3(1):1-94, June
2016. ISSN 2325-1107. doi: 10.1561/2500000018. URL
https: //doi.org/10.1561/2500000018.

[5] A. Cheung, A. Solar-Lezama, and S. Madden. Using program
synthesis for social recommendations. In 2/st ACM International Conference on Information and Knowledge Management,
CIKM’ 12, Maui, HI, USA, October 29 - November 02, 2012,
pages 1732-1736, 2012.

[6] S. Chu, C. Wang, K. Weitz, and A. Cheung. Cosette: An automated prover for SQL. In CIDR 2017, 8th Biennial Conference
on Innovative Data Systems Research, Chaminade, CA, USA,
January 8-11, 2017, Online Proceedings, 2017. URL http: //
cidrdb. org/cidr2017/papers/p51-chu-cidr17.pd£.

[7] S. Chu, K. Weitz, A. Cheung, and D. Suciu. Hottsql: Proving query rewrites with univalent SQL semantics. In ACM
SIGPLAN Conference on Programming Language Design and
Implementation, PLDI ’17 (To Appear), 2017.

[8] L. De Raedt. Inductive logic programming. In Encyclopedia
of Machine Learning, pages 529-537. Springer, 2011.

[9] J. Frankle, P.-M. Osera, D. Walker, and S. Zdancewic. Exampledirected synthesis: A type-theoretic interpretation. In Proceedings of the 43rd Annual ACM SIGPLAN-SIGACT Symposium
on Principles of Programming Languages, POPL 2016, pages
802-815, New York, NY, USA, 2016. ACM. ISBN 978-14503-3549-2. doi: 10.1145/2837614.2837629.

[10] J. Galenson, P. Reames, R. Bodik, B. Hartmann, and K. Sen.
Codehint: Dynamic and interactive synthesis of code snippets.
In Proceedings of the 36th International Conference on Software Engineering, pages 653-663. ACM, 2014.

[11] S. Gulwani. Dimensions in program synthesis. In Proceedings
of the 12th International ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, pages 13-24.
ACM, 2010.

[12] S. Gulwani. Automating string processing in spreadsheets
using input-output examples. In ACM SIGPLAN Notices,
volume 46, pages 317-330. ACM, 2011.

[13] W.R. Harris and S. Gulwani. Spreadsheet table transformations
from examples. In ACM SIGPLAN Notices, volume 46, pages
317-328. ACM, 2011.

[14] A. Kiezun, V. Ganesh, P. J. Guo, P. Hooimeijer, and M. D.
Emmst. Hampi: a solver for string constraints. In Proceedings of
the Eighteenth International Symposium on Software Testing
and Analysis, pages 105-116. ACM, 2009.

[15] D. Kini and S$. Gulwani. Flashnormalize: Programming by
examples for text normalization. In Proceedings of the 24th
International Conference on Artificial Intelligence, ICAP 15,
pages 776-783. AAAI Press, 2015. ISBN 978-1-57735-738-4.

[16] T. Lau, S. A. Wolfman, P. Domingos, and D. S. Weld. Programming by demonstration using version space algebra. Machine
Learning, 53(1-2):111-156, 2003.

[17] V. Le and S. Gulwani. Flashextract: A framework for data
extraction by examples. In ACM SIGPLAN Notices, volume 49,

465

pages 542-553. ACM, 2014.

[18] M. Lee, S. So, and H. Oh. Synthesizing regular expressions
from examples for introductory automata assignments. In
Proceedings of the 2016 ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences,
pages 70-80. ACM, 2016.

[19] F Li and H. V. Jagadish. NaLIR: an interactive natural language interface for querying relational databases. In Proceedings of the 2014 ACM SIGMOD International Conference on
Management of Data, pages 709-712. ACM, 2014.

[20] M. Mayer, G. Soares, M. Grechkin, V. Le, M. Marron, O. Polozov, R. Singh, B. Zorn, and S. Gulwani. User interaction
models for disambiguation in programming by example. In
Proceedings of the 28th Annual ACM Symposium on User
Interface Software & Technology, pages 291-301. ACM, 2015.

[21] S. Muggleton, R. Otero, and A. Tamaddoni-Nezhad. Inductive
Logic Programming, volume 38. Springer, 1992.

[22] M. Negri, G. Pelagatti, and L. Sbattella. Formal semantics of
sql queries. ACM Transactions on Database Systems (TODS),
16(3):513-534, 1991.

[23] P.-M. Osera and S. Zdancewic. Type-and-example-directed
program synthesis. In Proceedings of the 36th ACM SIGPLAN
Conference on Programming Language Design and Implementation, PLDI 2015, pages 619-630, New York, NY, USA,
2015. ACM. ISBN 978-1-4503-3468-6. doi: 10.1145/2737924.
2738007.

[24] P. M. Phothilimthana, T. Jelvis, R. Shah, N. Totla, S. Chasins,
and R. Bodik. Chlorophyll: Synthesis-aided compiler for
low-power spatial architectures. In ACM SIGPLAN Notices,
volume 49, pages 396-407. ACM, 2014.

[25] P. M. Phothilimthana, A. Thakur, R. Bodik, and D. Dhurjati.
Scaling up superoptimization. In Proceedings of the TwentyFirst International Conference on Architectural Support for
Programming Languages and Operating Systems, pages 297310. ACM, 2016.

[26] O. Polozov and S. Gulwani. Flashmeta: A framework for
inductive program synthesis. In Proceedings of the 2015
ACM SIGPLAN International Conference on Object-Oriented
Programming, Systems, Languages, and Applications, pages
107-126. ACM, 2015.

[27] E. Schkufza, R. Sharma, and A. Aiken. Stochastic superoptimization. ACM SIGPLAN Notices, 48(4):305-316, 2013.

[28] R. Singh. Blinkfill: Semi-supervised programming by example
for syntactic string transformations.

[29] R. Singh and S. Gulwani. Learning semantic string transforma
tions from examples. Proceedings of the VLDB Endowment, 5
(8):740-751, 2012.

[30] R. Singh and S. Gulwani. Synthesizing number transformations
from input-output examples. In International Conference on
Computer Aided Verification, pages 634-651. Springer, 2012.

[31] R. Singh and S. Gulwani. Predicting a correct program in
programming by example. In International Conference on
Computer Aided Verification, pages 398-414. Springer, 2015.

[32] R. Singh and S. Gulwani. Transforming spreadsheet data
types using examples. ACM SIGPLAN Notices, 51(1):343-356,
2016.

[33] C. Smith and A. Albarghouthi. Mapreduce program synthesis.
In Proceedings of the 37th ACM SIGPLAN Conference on
Programming Language Design and Implementation, pages
326-340. ACM, 2016.

[34] A. Solar-Lezama. Program Synthesis by Sketching. PhD thesis,
Berkeley, CA, USA, 2008. AAI3353225.

[35] E. Torlak and R. Bodik. A lightweight symbolic virtual
machine for solver-aided host languages. In Proceedings of the
35th ACM SIGPLAN Conference on Programming Language
Design and Implementation, PLDI 14, pages 530-541, New
York, NY, USA, 2014. ACM. ISBN 978-1-4503-2784-8. doi:
10.1145/2594291.2594340.

[36] Q. T. Tran, C.-Y. Chan, and S. Parthasarathy. Query by output.
In Proceedings of the 2009 ACM SIGMOD International
Conference on Management of data, pages 535-548. ACM,
2009.

[37] A. Udupa, A. Raghavan, J. V. Deshmukh, S. Mador-Haim,
M. M. Martin, and R. Alur. Transit: Specifying protocols with

466

concolic snippets. SIGPLAN Not., 48(6):287-296, June 2013.
ISSN 0362-1340. doi: 10.1145/2499370.2462174.

[38] X. Wang, S. Gulwani, and R. Singh. Fidex: Filtering spreadsheet data using examples. In Proceedings of the 2016 ACM
SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA
2016, pages 195-213, New York, NY, USA, 2016. ACM. ISBN
978-1-4503-4444-9. doi: 10.1145/2983990.2984030.

[39] N. Yaghmazadeh, C. Klinger, I. Dillig, and S. Chaudhuri.
Synthesizing transformations on hierarchically structured data.
In Proceedings of the 37th ACM SIGPLAN Conference on
Programming Language Design and Implementation, pages
508-521. ACM, 2016.

[40] S. Zhang and Y. Sun. Automatically synthesizing sql queries
from input-output examples. In 2013 IEEE/ACM 28th International Conference on Automated Software Engineering (ASE),
pages 224-234. IEEE, 2013.
