[1] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen, and A.-R.
Sadeghi, “Just-in-time code reuse: On the effectiveness of fine-grained
address space layout randomization,” in Security and Privacy (SP), 2013
IEEE Symposium on. IEEE, 2013, pp. 574–588.
[2] A. Bittau, A. Belay, A. Mashtizadeh, D. Mazières, and D. Boneh,
“Hacking blind,” in 2014 IEEE Symposium on Security and Privacy.
IEEE, 2014, pp. 227–242.
[3] L. V. Davi, A. Dmitrienko, S. Nürnberger, and A.-R. Sadeghi, “Gadge
me if you can: secure and efficient ad-hoc instruction-level randomization for x86 and arm,” in Proceedings of the 8th ACM SIGSAC
symposium on Information, computer and communications security.
ACM, 2013, pp. 299–310.
[4] V. Pappas, M. Polychronakis, and A. D. Keromytis, “Smashing the
gadgets: Hindering return-oriented programming using in-place code
randomization,” in 2012 IEEE Symposium on Security and Privacy.
IEEE, 2012, pp. 601–615.
[5] J. Hiser, A. Nguyen-Tuong, M. Co, M. Hall, and J. W. Davidson, “Ilr:
Where’d my gadgets go?” in 2012 IEEE Symposium on Security and
Privacy. IEEE, 2012, pp. 571–585.

[6] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning, “Address space layout
permutation (aslp): Towards fine-grained randomization of commodity
software.” in ACSAC, vol. 6, 2006, pp. 339–348.
[7] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin, “Binary stirring:
Self-randomizing instruction addresses of legacy x86 binary code,” in
Proceedings of the 2012 ACM conference on Computer and communications security. ACM, 2012, pp. 157–168.
[8] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R. Sadeghi,
S. Brunthaler, and M. Franz, “Readactor: Practical code randomization
resilient to memory disclosure,” in 2015 IEEE Symposium on Security
and Privacy. IEEE, 2015, pp. 763–780.
[9] S. J. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi,
A.-R. Sadeghi, T. Holz, B. De Sutter, and M. Franz, “It’s a trap:
Table randomization and protection against function-reuse attacks,” in
Proceedings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2015, pp. 243–255.
[10] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen, and A.R. Sadeghi, “Leakage-resilient layout randomization for mobile devices,”
in Proceedings of the 2016 Network and Distributed System Security
(NDSS) Symposium, 2016.
[11] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. Nürnberger, and J. Pewny,
“You can run but you can’t read: Preventing disclosure exploits in
executable code,” in Proceedings of the 2014 ACM SIGSAC Conference
on Computer and Communications Security. ACM, 2014, pp. 1342–
1353.
[12] D. Lie, C. Thekkath, M. Mitchell, P. Lincoln, D. Boneh, J. Mitchell,
and M. Horowitz, “Architectural support for copy and tamper resistant
software,” ACM SIGPLAN Notices, vol. 35, no. 11, pp. 168–177, 2000.
[13] A. Tang, S. Sethumadhavan, and S. Stolfo, “Heisenbyte: Thwarting
memory disclosure attacks using destructive code reads,” in Proceedings
of the 22nd ACM SIGSAC Conference on Computer and Communications Security. ACM, 2015, pp. 256–267.
[14] J. Werner, G. Baltas, R. Dallara, N. Otterness, K. Z. Snow, F. Monrose,
and M. Polychronakis, “No-execute-after-read: Preventing code disclosure in commodity software,” in Proceedings of the 11th ACM on Asia
Conference on Computer and Communications Security. ACM, 2016,
pp. 35–46.
[15] K. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Polychronakis, “Return to the zombie gadgets: Undermining destructive code
reads via code inference attacks,” in IEEE Symposium on Security and
Privacy, 2016.
[16] B. Lee, L. Lu, T. Wang, T. Kim, and W. Lee, “From zygote to morula:
Fortifying weakened aslr on android,” in 2014 IEEE Symposium on
Security and Privacy. IEEE, 2014, pp. 424–439.
[17] “El 0 execute-only memory configuration,” https://armv8-ref.
codingbelief.com/en/chapter d4/d44 1 memory access control.html.
[18] “Android executables mandatorily need to be pie,” https://source.android.
com/security/enhancements/enhancements50.html.
[19] R. Wartell, Y. Zhou, K. W. Hamlen, M. Kantarcioglu, and B. Thuraisingham, “Differentiating code from data in x86 binaries,” in Joint
European Conference on Machine Learning and Knowledge Discovery
in Databases. Springer, 2011, pp. 522–536.
[20] “Apple warn developers when the binaries are not compiled as positionindepent,” https://developer.apple.com/library/content/qa/qa1788/ index.
html.
[21] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos, “An
in-depth analysis of disassembly on full-scale x86/x64 binaries.”
[22] C. Cifuentes and M. Van Emmerik, “Recovery of jump table case
statements from binary code,” in IEEE International Workshop on
Program Comprehension, 1999.
[23] R. Qiao and R. Sekar, “Function interface analysis: A principled approach for function recognition in COTS binaries,” in The 47th IEEE/IFIP International Conference on Dependable Systems and Networks,
2017.
[24] “Exception syndrome register(esr) interpretation,” http://infocenter.arm.
com/help/topic/com.arm.doc.ddi0500e/CIHFICFI.html.

[25] “Android compatibility test suite,” https://source.android.com/
compatibility/cts/index.html.
[26] “Dwarf standards,” http://www.dwarfstd.org.
[27] D. Niemi, “Unixbench 4.1. 0.”
[28] L. Szekeres, M. Payer, T. Wei, and D. Song, “Sok: Eternal war in
memory,” in Security and Privacy (SP), 2013 IEEE Symposium on.
IEEE, 2013, pp. 48–62.
[29] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti, “Control-Flow
Integrity,” in Proceedings of the 12th ACM Conference on Computer
and Communications Security. ACM, 2005, pp. 340–353.
[30] C. Tice, T. Roeder, P. Collingbourne, S. Checkoway, Ú. Erlingsson,
L. Lozano, and G. Pike, “Enforcing forward-edge control-flow integrity
in gcc & llvm,” in 23rd USENIX Security Symposium (USENIX Security
14), 2014, pp. 941–955.
[31] B. Niu and G. Tan, “Rockjit: Securing just-in-time compilation using modular control-flow integrity,” in Proceedings of the 2014 ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2014, pp. 1317–1328.
[32] ——, “Per-input control-flow integrity,” in Proceedings of the 22nd ACM
SIGSAC Conference on Computer and Communications Security. ACM,
2015, pp. 914–926.
[33] A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Mazières, “Ccfi:
cryptographically enforced control flow integrity,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2015, pp. 941–951.
[34] V. Mohan, P. Larsen, S. Brunthaler, K. W. Hamlen, and M. Franz,
“Opaque control-flow integrity.” in NDSS, 2015.
[35] P. Team, “grsecurity: RAP is here,” 2016.
[36] M. Zhang and R. Sekar, “Control flow integrity for cots binaries,” in
Presented as part of the 22nd USENIX Security Symposium (USENIX
Security 13), 2013, pp. 337–352.
[37] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant,
D. Song, and W. Zou, “Practical Control Flow Integrity and Randomization for Binary Executables,” in Proceedings of the 2013 IEEE
Symposium on Security and Privacy, ser. SP ’13. Washington, DC,
USA: IEEE Computer Society, 2013, pp. 559–573.
[38] E. Göktas, E. Athanasopoulos, H. Bos, and G. Portokalidis, “Out of
control: Overcoming control-flow integrity,” in 2014 IEEE Symposium
on Security and Privacy. IEEE, 2014, pp. 575–589.
[39] L. Davi, A.-R. Sadeghi, D. Lehmann, and F. Monrose, “Stitching the
gadgets: On the ineffectiveness of coarse-grained control-flow integrity
protection,” in 23rd USENIX Security Symposium (USENIX Security 14),
2014, pp. 401–416.
[40] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross, “Controlflow bending: On the effectiveness of control-flow integrity,” in 24th
USENIX Security Symposium (USENIX Security 15), 2015, pp. 161–
176.
[41] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard, H. Okhravi,
and S. Sidiroglou-Douskos, “Control jujutsu: On the weaknesses of finegrained control flow integrity,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security. ACM, 2015,
pp. 901–913.
[42] P. Team, “PaX address space layout randomization (ASLR),” 2003.
[43] S. Bhatkar, D. C. DuVarney, and R. Sekar, “Efficient techniques for comprehensive protection from memory error exploits.” in Usenix Security,
2005.
[44] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose,
“Isomeron: Code randomization resilient to (just-in-time) return-oriented
programming.” in NDSS, 2015.
[45] Y. Chen, Z. Wang, D. Whalley, and L. Lu, “Remix: On-demand live
randomization,” in Proceedings of the Sixth ACM Conference on Data
and Application Security and Privacy. ACM, 2016, pp. 50–61.
[46] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi, “Timely
rerandomization for mitigating memory disclosures,” in Proceedings of
the 22nd ACM SIGSAC Conference on Computer and Communications
Security. ACM, 2015, pp. 268–279.

[47] J. Gionta, W. Enck, and P. Ning, “Hidem: Protecting the contents
of userspace memory in the face of disclosure vulnerabilities,” in
Proceedings of the 5th ACM Conference on Data and Application
Security and Privacy. ACM, 2015, pp. 325–336.
[48] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen,
M. Qunaibit, and A.-R. Sadeghi, “Losing control: On the effectiveness
of control-flow integrity under stack attacks,” in Proceedings of the 22nd
ACM SIGSAC Conference on Computer and Communications Security.
ACM, 2015, pp. 952–963.
[49] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz, “Counterfeit object-oriented programming: On the difficulty
of preventing code reuse attacks in c++ applications,” in 2015 IEEE
Symposium on Security and Privacy. IEEE, 2015, pp. 745–762.
[50] R. Rudd, R. Skowyra, D. Bigelow, V. Dedhia, T. Hobson, C. L.
Stephen Crane, P. Larsen, L. Davi, M. Franz, A.-R. Sadeghi, and
H. Okhravi, “Address-Oblivious Code Reuse: On the Effectiveness
of Leakage Resilient Diversity,” in Proceedings of the Network and
Distributed System Security Symposium (NDSS’17), 
