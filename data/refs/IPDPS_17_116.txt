[1] Y. Luo, Y. Cai, S. Ghose, J. Choi, and O. Mutlu, “WARM: improving NAND flash memory lifetime with write-hotness aware retention management,” in IEEE 31st Symposium on Mass Storage Systems and Technologies, MSST 2015, Santa Clara, CA, USA, May 30 - June 5, 2015, pp. 1–14.
[2] M. Bjørling, J. Axboe, D. Nellans, and P. Bonnet, “Linux block io: introducing multi-queue ssd access on multi-core systems,” in Proceedings of the 6th International Systems and Storage Conference. ACM, 2013, p. 22.
[3] A. M. Caulfield, T. I. Mollov, L. A. Eisner, A. De, J. Coburn, and S. Swanson, “Providing safe, user space access to fast, solid state disks,” ACM SIGPLAN Notices, vol. 47, no. 4, pp. 387–400, 2012.
[4] A. M. Caulfield, A. De, J. Coburn, T. I. Mollow, R. K. Gupta, and S. Swanson, “Moneta: A high-performance storage array architecture for next-generation, non- volatile memories,” in Proceedings of the 2010 43rd Annual IEEE/ACM International Symposium on Mi- croarchitecture. IEEE Computer Society, 2010, pp. 385–395.
[5] S. Wu, B. Mao, X. Chen, and H. Jiang, “LDM: log disk mirroring with improved performance and relia- bility for ssd-based disk arrays,” ACM Transactions on Storage, vol. 12, no. 4, pp. 22:1–22:21, 2016.
[6] S. Wu, Y. Lin, B. Mao, and H. Jiang, “Gcar: Garbage collection aware cache management with improved performance for flash-based ssds,” in Proceedings of the 2016 International Conference on Supercomputing, ICS 2016, Istanbul, Turkey, June 1-3, 2016, 2016, pp. 28:1–28:12.
[7] N. Agrawal, V. Prabhakaran, T. Wobber, J. D. Davis, M. S. Manasse, and R. Panigrahy, “Design tradeoffs for ssd performance.” in USENIX Annual Technical Conference, 2008, pp. 57–70.
[8] B. Mao and S. Wu, “Exploiting request characteristics and internal parallelism to improve SSD performance,” in 33rd IEEE International Conference on Computer Design, ICCD 2015, New York City, NY, USA, October 18-21, 2015, 2015, pp. 447–450.
[9] B. Mao, H. Jiang, S. Wu, L. Tian, D. Feng, J. Chen, and L. Zeng, “HPDA: A hybrid parity-based disk array for enhanced performance and reliability,” ACM Transactions on Storage, vol. 8, no. 1, pp. 4:1–4:20, 2012.
[10] B. Mao, H. Jiang, S. Wu, Y. Yang, and Z. Xi, “Elastic data compression with improved performance and space efficiency for flash-based storage systems,” Accepted to be appeared in Proceedings of the 31st IEEE International Parallel and Distributed Processing Symposium (IPDPS’17), Orlando, Florida USA, May 29-June, 2017.
[11] Z. Chen, N. Xiao, and F. Liu, “SAC: rethinking the cache replacement policy for ssd-based storage sys- tems,” in The 5th Annual International Systems and Storage Conference, SYSTOR ’12, Haifa, Israel, June 4-6, 2012, p. 9.
[12] C. Gao, L. Shi, M. Zhao, C. Xue, K. Wu, and E.- M. Sha, “Exploiting parallelism in I/O scheduling for access conflict minimization in flash-based solid state drives,” in IEEE 30th Symposium on Mass Storage Systems and Technologies ,MSST2014, 2014, pp. 1–11.
[13] J. Guo, Y. Hu, and B. Mao, “Enhancing I/O scheduler performance by exploiting internal parallelism of ssds,” in Algorithms and Architectures for Parallel Process- ing - 15th International Conference, ICA3PP 2015, Zhangjiajie, China, November 18-20, 2015. Proceed- ings, Part IV, pp. 118–130.
[14] D. Park and D. H. C. Du, “Hot data identification for flash-based storage systems using multiple bloom filters,” in IEEE 27th Symposium on Mass Storage Sys- tems and Technologies, MSST 2011, Denver, Colorado, USA, May 23-27, 2011, pp. 1–11.
[15] Y. Hu, H. Jiang, D. Feng, L. Tian, H. Luo, and S. Zhang, “Performance impact and interplay of ssd parallelism through advanced commands, allocation strategy and data granularity,” in Proceedings of the international conference on Supercomputing. ACM, 2011, pp. 96–107.
[16] M. Jung, W. Choi, S. Srikantaiah, J. Yoo, and M. T. Kandemir, “HIOS: A host interface I/O scheduler for solid state disks,” in ACM/IEEE 41st International Symposium on Computer Architecture, ISCA 2014, Minneapolis, MN, USA, June 14-18, 2014, pp. 289– 300.
[17] W. Wang, N. Niu, H. Liu, and Y. Wu, “Tagging in assisted tracing,” in 8th IEEE/ACM International Symposium on Software and Systems Traceability, SST 2015, Florence, Italy, May 17, 2015, pp. 8–14.
[18] P. Louridas, D. Spinellis, and V. Vlachos, “Power laws in software,” ACM Trans. Softw. Eng. Methodol., vol. 18, no. 1, 2008.
[19] A. K. Shah and M. D. Matani, “An o(1) algorithm for implementing the lfu cache eviction scheme,” in Technical report, 2010. [Online]. Available: http: //dhruvbird.com/lfu.pdf
[20] U. of Massachusetts. Storage: Umass trace repository. [Online]. Available: http://tinyurl.com/k6golon
[21] M. C. Traces. (2008). [Online]. Available: http: //iotta.snia.org/tracetypes/3
[22] F. Chen, B. Hou, and R. Lee, “Internal parallelism of flash memory-based solid-state drives,” TOS, vol. 12, no. 3, p. 13, 2016.
[23] F. Chen, R. Lee, and X. Zhang, “Essential roles of exploiting internal parallelism of flash memory based solid state drives in high-speed data processing,” in 17th International Conference on High-Performance Computer Architecture (HPCA-17), February 12-16 2011, San Antonio, Texas, USA, pages = 266–277,. 
[24] H. Wang, P. Huang, S. He, K. Zhou, C. Li, and X. He, “A novel I/O scheduler for ssd with improved performance and lifetime,” in Mass Storage Systems and Technologies (MSST), 2013 IEEE 29th Symposium on, 2013, pp. 1–5.
[25] L. Chang and T. Kuo, “An adaptive striping architec- ture for flash memory storage systems of embedded system,” in Proceedings of the 8th IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS 2002), 24-27 September 2002, San Jose, CA, USA, pp. 187–196.
[26] S. Park and K. Shen, “Fios: a fair, efficient flash i/o scheduler.” in FAST, 2012, p. 13.
[27] K. Shen and S. Park, “Flashfq: A fair queueing i/o scheduler for flash-based ssds.” in USENIX Annual Technical Conference, 2013, pp. 67–78.
[28] M. P. DUNN, “A new i/o scheduler for solid state devices,” Ph.D. dissertation, Texas A&M University, 2009.
[29] J. Kim, Y. Oh, E. Kim, J. Choi, D. Lee, and S. H. Noh, “Disk schedulers for solid state drivers,” in Proceed- ings of the seventh ACM international conference on Embedded software.  ACM, 2009, pp. 295–304.
