[1] [n. d.]. CoMD Proxy App. http://www.exmatex.org/comd.html. ([n. d.]).
[2] [n. d.]. HPCCG Mini Application. https://mantevo.org/packages.php. ([n. d.]).

SC17, November 12–17, 2017, Denver, CO, USA
[3] Fatimah Adamu-Fika and Arshad Jhumka. 2015. An Investigation of the Impact of
Double Bit-Flip Error Variants on Program Execution. In International Conference
on Algorithms and Architectures for Parallel Processing. Springer, 799–813.
[4] Rizwan A Ashraf, Roberto Gioiosa, Gokcen Kestor, Ronald F DeMara, ChenYong Cher, and Pradip Bose. 2015. Understanding the propagation of transient
errors in HPC applications. In Proceedings of the International Conference for High
Performance Computing, Networking, Storage and Analysis (SC). ACM, 72.
[5] Derek Bruening, Timothy Garnett, and Saman Amarasinghe. 2003. An infrastructure for adaptive dynamic optimization. In International Symposium on Code
Generation and Optimization (CGO 2003). IEEE, 265–275.
[6] Jon Calhoun, Luke Olson, and Marc Snir. 2014. FlipIt: An LLVM Based Fault
Injector for HPC. Springer International Publishing, Cham, 547–558. https:
//doi.org/10.1007/978-3-319-14325-5_47
[7] Franck Cappello, Al Geist, Bill Gropp, Laxmikant Kale, Bill Kramer, and Marc Snir.
2009. Toward exascale resilience. The International Journal of High Performance
Computing Applications 23, 4 (2009), 374–388.
[8] Vinay K Chippa, Srimat T Chakradhar, Kaushik Roy, and Anand Raghunathan.
2013. Analysis and characterization of inherent application resilience for approximate computing. In Proceedings of the 50th Annual Design Automation Conference.
ACM, 113.
[9] Jeffrey A Clark and Dhiraj K Pradhan. 1995. Fault injection: A method for
validating computer-system dependability. Computer 28, 6 (1995), 47–56.
[10] Leonardo Dagum and Ramesh Menon. 1998. OpenMP: an industry standard API
for shared-memory programming. IEEE computational science and engineering 5,
1 (1998), 46–55.
[11] Bo Fang, Karthik Pattabiraman, Matei Ripeanu, and Sudhanva Gurumurthi. 2014.
Gpu-qin: A methodology for evaluating the error resilience of gpgpu applications.
In 2014 IEEE International Symposium on Performance Analysis of Systems and
Software (ISPASS). IEEE, 221–230.
[12] Mei-Chen Hsueh, Timothy K Tsai, and Ravishankar K Iyer. 1997. Fault injection
techniques and tools. Computer 30, 4 (1997), 75–82.
[13] Ghani A. Kanawati, Nasser A. Kanawati, and Jacob A. Abraham. 1995. FERRARI:
A flexible software-based fault and error injection system. IEEE Transactions on
computers 44, 2 (1995), 248–260.
[14] W-I Kao, Ravishankar K. Iyer, and Dong Tang. 1993. FINE: A fault injection
and monitoring environment for tracing the UNIX system behavior under faults.
IEEE Transactions on Software Engineering 19, 11 (1993), 1105–1118.
[15] Johan Karlsson, Peter Liden, Peter Dahlgren, Rolf Johansson, and Ulf Gunneflo.
1994. Using heavy-ion radiation to validate fault-handling mechanisms. IEEE
micro 14, 1 (1994), 8–23.
[16] Maha Kooli and Giorgio Di Natale. 2014. A survey on simulation-based fault
injection tools for complex systems. In 2014 9th IEEE International Conference On
Design & Technology of Integrated Systems In Nanoscale Era (DTIS). IEEE, 1–6.
[17] Maha Kooli, Giorgio Di Natale, and Alberto Bosio. 2016. Cache-aware reliability
evaluation through LLVM-based analysis and fault injection. In 2016 IEEE 22nd
International Symposium on On-Line Testing and Robust System Design (IOLTS),.
IEEE, 19–22.
[18] Ignacio Laguna, Martin Schulz, David F Richards, Jon Calhoun, and Luke Olson.
2016. IPAS: Intelligent protection against silent output corruption in scientific applications. In Proceedings of the 2016 International Symposium on Code Generation
and Optimization. ACM, 227–238.
[19] Chris Lattner and Vikram Adve. 2004. LLVM: A compilation framework for
lifelong program analysis & transformation. In Proceedings of the international
symposium on Code generation and optimization: feedback-directed and runtime
optimization. IEEE Computer Society, 75.
[20] R. Leveugle, A. Calvez, P. Maistri, and P. Vanhauwaert. 2009. Statistical fault injection: Quantified error and confidence. In 2009 Design, Automation Test in Europe
Conference Exhibition. 502–506. https://doi.org/10.1109/DATE.2009.5090716
[21] Dong Li, Jeffrey S Vetter, and Weikuan Yu. 2012. Classifying soft error vulnerabilities in extreme-scale scientific applications using a binary instrumentation tool.
In Proceedings of the International Conference on High Performance Computing,
Networking, Storage and Analysis. IEEE Computer Society Press, 57.
[22] Man-Lap Li, Pradeep Ramachandran, Swarup Kumar Sahoo, Sarita V Adve,
Vikram S Adve, and Yuanyuan Zhou. 2008. Understanding the propagation
of hard errors to software and implications for resilient system design. In ACM
SIGARCH Computer Architecture News, Vol. 36. ACM, 265–276.
[23] Shubhendu S Mukherjee, Christopher Weaver, Joel Emer, Steven K Reinhardt,
and Todd Austin. 2003. A systematic methodology to compute the architectural
vulnerability factors for a high-performance microprocessor. In Proceedings. 36th
Annual IEEE/ACM International Symposium on Microarchitecture. IEEE, 29–40.
[24] Nicholas Nethercote and Julian Seward. 2007. Valgrind: A Framework for Heavyweight Dynamic Binary Instrumentation. In Proceedings of the 28th ACM SIGPLAN
Conference on Programming Language Design and Implementation (PLDI) (PLDI
’07). ACM, New York, NY, USA, 89–100. https://doi.org/10.1145/1250734.1250746
[25] Xiang Ni and Laxmikant V Kale. 2016. FlipBack: automatic targeted protection
against silent data corruption. RTS 1, m3 (2016), m4.
[26] K. Parasyris, G. Tziantzoulis, C. D. Antonopoulos, and N. Bellas. 2014. GemFI:
A Fault Injection Tool for Studying the Behavior of Applications on Unreliable

