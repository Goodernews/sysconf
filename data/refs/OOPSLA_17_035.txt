[1] ActorFoundry 2017. http://osl.cs.illinois.edu/software/actor-foundry/. (Retrieved July 2017).



[2] Gul Agha. 1986. Actors: a Model of Concurrent Computation in Distributed Systems. MIT Press 11, 12 (1986).



[3] Akka 2017. Akka — Scala actor library. http://akka.io. (Retrieved July 2017).



[4] Joe Armstrong. 2007. A History of Erlang. In History of Programming Languages (HOPL) Ill. DOI :http://dx.doi.org/10.1145/

1238844,1238850



[5] Joshua S. Auerbach, David F. Bacon, Rachid Guerraoui, Jesper Honig Spring, and Jan Vitek. 2008. Flexible Task Graphs: a

Unified Restricted Thread Programming Model for Java. In Conference on Languages, Compilers, and Tools for Embedded

Systems (LCTES). DOI :http://dx.doi.org/10.1145/1375657.1375659



[6] David F. Bacon, Perry Cheng, and V. T. Rajan. 2003. A Real-Time Garbage Collecor with Low Overhead and Consistent

Utilization. In Symposium on Principles of Programming Languages (POPL). DOT : http://dx.doi.org/10.1145/2502508.2502523



[7] Stephen M. Blackburn, Perry Cheng, and Kathryn S. McKinley. 2004. Myths and Realities: The Performance Impact of

Garbage Collection. SIGMETRICS Perform. Eval. Rev. (2004). DOI :http://dx.doi.org/10.1145/1012888.1005693



[8] Stephan Brandauer, Elias Castegren, Dave Clarke, Kiko Fernandez-Reyes, Einar Broch Johnsen, Ka I. Pun, S. Lizeth Tapia

Tarifa, Tobias Wrigstad, and Albert Mingkun Yang. 2015. Parallel Objects for Multicores: A Glimpse at the Parallel

Language Encore. In Formal Methods for Multicore Programming. LNCS, Vol. 9104. DOI: http://dx.doi.org/10.1007/

978-3-319-18941-3_1



[9] Denis Caromel and Ludovic Henrio. 2004. A Theory of Distributed Objects. Springer-Verlag. DOI: http://dx.doi.org/1007/

b138812



[10] Elias Castegren and Tobias Wrigstad. 2016. Kappa: Reference Capabilities for Concurrent Programming. In European

Conference on Object Oriented Programming (ECOOP). DOI: http://dx.doi.org/10.4230/LIPIcs ECOOP.2016.5



[11] Elias Castegren and Tobias Wrigstad. 2017. Relaxed Linear References for Lock-free Data Structures. In European Conference

on Object-Oriented Programming (ECOOP), DOI: http://dx.doi.org/10.4230/LIPIcs.ECOOP.2017.6



[12] Sylvan Clebsch and Sophia Drossopoulou. 2013. Fully Concurrent Garbage Collection of Actors on Many-core Machines. In

Conference on Object-Oriented Programming Languages, Applications and Systems (OOPSLA). DOT: http://dx.doi.org/10.

1145/2509136.2509557



[13] Sylvan Clebsch, Sophia Drossopoulou, Sebastian Blessing, and Andy McNeil. 2015. Deny Capabilities for Safe, Fast Actors.

In Workshop on Programming Based on Actors, Agents, and Decentralized Control (AGERE!). DOI :http://dx.doi.org/10.1145/

2824815.2824816



[14] Cliff Click, Gil Tene, and Michael Wolf. 2005. The Pauseless GC Algorithm. In International Conference on Virtual Execution

Environments (VEE). DOT: http://dx.doi.org/10.1145/1064979.1064988



[15] David Detlefs, Christine Flood, Steve Heller, and Tony Printezis. 2004. Garbage-first Garbage Collection. In International

Symposium on Memory Management (ISMM). DOI :http://dx.doi.org/10.1145/1029873.1029879



[16] Tamar Domani, Gal Goldshtein, Elliot K. Kolodner, Ethan Lewis, Erez Petrank, and Dafna Sheinwald. 2002. Thread-local

Heaps for Java. In International Symposium on Memory Management (ISMM). DOI: http://dx.doi.org/10.1145/512429.512439



[17] John Ellis, Pete Kovac, and Hans Boehm. 2017. GCBench. (Retrieved July 2017). Developed by first two authors, modified

by the third, from hitp://www.hboehm.info/ge/gce_bench.html.



[18] Roger Henriksson. 1998. Scheduling Garbage Collection in Embedded Systems. Ph.D. Dissertation. Lund University.



[19] Carl Hewitt, Peter Bishop, and Richard Steiger. 1973. A Universal Modular ACTOR Formalism for Artificial Intelligence. In

International Joint Conference on Artificial Intelligence (T}CAI). http://dl.acm.org/citation.cfm?id=1624775.1624804



[20] Aaron Hillegass. 2011. Objective-C Programming. Addison-Wesley.



[21] Shams M Imam and Vivek Sarkar. 2014. Savina — An Actor Benchmark Suite: Enabling Empirical Evaluation of Actor

Libraries. In International Workshop on Programming based on Actors Agents and Decentralized Control (AGERE!). DOI:

http://doi.acm.org/10.1145/2687357.2687368



[22] Filip Pizlo, Ethan Blanton, Anthony Hosking, Petr Maj, Jan Vitek, and Lukas Ziarek. 2010. SCHISM: FragmentationTolerant Real-Time Garbage Collection. In Programming Language Design and Implementation Conference (PLDI). DOI:

http://dx.doi.org/10.1145/1809028.1806615



[23] Filip Pizlo, Athony L. Hosking, and Jan Vitek. 2007. Hierarchical Real-time Garbage Collection. In Conference on Languages,

Compilers, and Tools for Embedded Systems (LCTES). DOI :http://dx.doi.org/10.1145/1254766.1254784



[24] Jeremy Singer, Richard E. Jones, Gavin Brown, and Mikel Lujan. 2010. The Economics of Garbage Collection. In International

Symposium on Memory Management (ISMM). DOT :http://dx.doi.org/10.1145/1806651.1806669



[25] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 72. Publication date: October 2017.

72:28 S. Clebsch, J. Franco, S. Drossopoulou, A. M. Yang, T. Wrigstad, J. Vitek



[26] Jesper Honig Spring, Filip Pizlo, Rachid Guerraoui, and Jan Vitek. 2007. Reflexes: Abstractions for Highly Responsive Systems.

In International Conference on Virtual Execution Environments (VEE). DOI :http://dx.doi.org/10.1145/1254810.1254837



[27] George Steed. 2016. A Principled Design of Capabilities in Pony. Master’s thesis. Imperial College London.



[28] SystemTap 2017. SystemTap website. (Retrieved July 2017). https://sourceware.org/systemtap/.



[29] The CAF team. 2017. https://github.com/actor-framework/benchmarks/. (Retrieved July 2017). https://github.com/

actor-framework/benchmarks/



[30] Gil Tene, Balaji Iyengar, and Michael Wolf. 2011. C4: The Continuously Concurrent Compacting Collector. In International

Symposium on Memory Management (ISMM). DOI :http://doi.acm.org/10.1145/2076022.1993491



[31] The Computer Language Benchmarks Game 2017. The Computer Language Benchmarks Game. http://benchmarksgame.

alioth.debian.org. (Retrieved July 2017).



[32] Abhay Vardhan and Gul Agha. 2002. Using passive object garbage collection algorithms for garbage collection of active

objects. In International Symposium on Memory Management (ISMM). DOI: http://dx.doi.org/10.1145/512429,512443



[33] Wei-Jen Wang. 2013. Conservative Snapshot-Based Actor Garbage Collection for Distributed Mobile Actor Systems.

Telecommunication Systems 52, 2 (2013). DOI: http://dx.doi.org/10.1007/s11235-011-9509-1



[34] Tobias Wrigstad, Filip Pizlo, Fadi Meawad, Lei Zhao, and Jan Vitek. 2009. Loci: Simple Thread-Locality for Java. In European

Conference on Object-Oriented Programming (ECOOP). DOI: https://doi.org/10.1007/978-3-642-03013-0_21



[35] Albert Mingkun Yang and Tobias Wrigstad. 2017. Type-assisted Automatic Garbage Collection for Lock-free Data Structures.

In International Symposium on Memory Management (ISMM). DOI :http://dx.doi.org/10.1145/3092255.3092274



[36] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 72. Publication date: October 2017.
