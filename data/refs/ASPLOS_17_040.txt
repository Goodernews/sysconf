[1] ApacheBench: a complete benchmarking and regression
testing suite. https://httpd.apache.org/docs/2.2/
programs/ab.html.

[2] Intel control-flow enforcement technology
(CET) preview. https: //software.intel.
com/sites/default/files/managed/4d/2a/
control-flow-enforcement-technology-preview.
pdf.

[3] pyftpdlib. https: //github.com/giampaolo/pyftpdlib.

[4] sendemail. http: //caspian.dotconf.net/menu/
Software/SendEmail.

[5] Intel 64 and IA-32 architectures software developer’s manual.
Volume 3B: System Programming Guide, Part 2, 2016.

[6] Intel 64 and IA-32 architectures software developer’s manual.
Volume 3C: System Programming Guide, Part 3, 2016.

[7] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Controlflow integrity. In Proceedings of the 12th ACM SIGSAC Conference on Computer and Communications Security (CCS),
pages 340-353. ACM, 2005.

[8] S. Andersen and V. Abella. Data Execution Prevention.
Changes to Functionality in Microsoft Windows XP Service
Pack 2, Part 3: Memory Protection Technologies, 2004.

[9] T. Bletsch, X. Jiang, and V. Freeh. Mitigating code-reuse attacks with control-flow locking. In Proceedings of the 27th
Annual Computer Security Applications Conference (ACSAC), pages 353-362. ACM, 2011.

[10] N. Carlini and D. Wagner. ROP is still dangerous: Breaking
modern defenses. In Proceedings of the 23rd USENIX Security Symposium (USENIX Security). USENIX Association,
2014.

[11] N. Carlini, A. Barresi, M. Payer, D. Wagner, and T. R. Gross.
Control-flow bending: On the effectiveness of control-flow integrity. In Proceedings of the 24th USENIX Security Symposium (USENIX Security). USENIX Association, 2015.

[12] Y. Cheng, Z. Zhou, M. Yu, X. Ding, and R. H. Deng.
ROPecker: A generic and practical approach for defending
against ROP attacks. In Proceedings of the 21th Network and
Distributed System Security Symposium (NDSS). ISOC, 2014.

[13] N. Christoulakis, G. Christou, E. Athanasopoulos, and
S. Ioannidis. HCFI: Hardware-enforced control-flow integrity.
In Proceedings of the 6th ACM Conference on Data and Application Security and Privacy (CODASPY). ACM, 2016.

[14] M. Conti, S. Crane, L. Davi, M. Franz, P. Larsen, M. Negro, C. Liebchen, M. Qunaibit, and A.-R. Sadeghi. Losing
control: On the effectiveness of control-flow integrity under
stack attacks. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS),
pages 952-963. ACM, 2015.

[15] J. Criswell, N. Dautenhahn, and V. Adve. KCoFI: Complete
control-flow integrity for commodity operating system kernels. In Proceedings of the 35th IEEE Symposium on Security
and Privacy (S&P), pages 292-307. IEEE, 2014.

[16] G. Dabah. diStorm - Powerful Disassembler Library for
x86/AMD64. https: //github.com/gdabah/distorn.

[17] T. H. Dang, P. Maniatis, and D. Wagner. The performance
cost of shadow stacks and stack canaries. In Proceedings
of the 10th ACM Symposium on Information, Computer and
Communications Security (ASIACCS), pages 555-566. ACM,
2015.

[18] L. Davi, A.-R. Sadeghi, and M. Winandy. ROPdefender: A
detection tool to defend against return-oriented programming
attacks. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (ASIACCS),
pages 40-51. ACM, 2011.

[19] L. Davi, A. Dmitrienko, M. Egele, T. Fischer, T. Holz,
R. Hund, S. Ntirnberger, and A.-R. Sadeghi. MoCFI: A framework to mitigate control-flow attacks on smartphones. In Proceedings of the 19th Network and Distributed System Security
Symposium (NDSS). ISOC, 2012.

[20] L. Davi, A.-R. Sadeghi, D. Lehmann, and F Monrose. Stitching the gadgets: On the ineffectiveness of coarse-grained
control-flow integrity protection. In Proceedings of the 23rd
USENIX Security Symposium (USENIX Security), pages 401416. USENIX Association, 2014.

[21] L. Davi, M. Hanreich, D. Paul, A.-R. Sadeghi, P. Koeberl,
D. Sullivan, O. Arias, and Y. Jin. HAFIX: Hardware-assisted
flow integrity extension. In Proceedings of the 52nd Annual
Design Automation Conference (DAC). ACM, 2015.

[22] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar,
T. Tang, H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and.
H. Okhravi. Missing the point (er): On the effectiveness of
code pointer integrity. In Proceedings of the 36th IEEE Symposium on Security and Privacy (S&P). TEEE, 2015.

[23] X. Ge, N. Talele, M. Payer, and T. Jaeger. Fine-grained
control-flow integrity for kernel software. In Proceedings of

the Ist IEEE European Symposium on Security and Privacy
(EuroS&P). TEEE, 2016.

[24] E. Goktas, E. Athanasopoulos, H. Bos, and G. Portokalidis.
Out of control: Overcoming control-flow integrity. In Proceedings of the 35th IEEE Symposium on Security and Privacy (S&P). IEEE, 2014.

[25] E. Géktas, E. Athanasopoulos, M. Polychronakis, H. Bos, and
G. Portokalidis. Size does matter: Why using gadget-chain
length to prevent code-reuse attacks is hard. In Proceedings
of the 23rd USENIX Security Symposium (USENIX Security),
pages 417-432. USENIX Association, 2014.

[26] Y. Gu, Q. Zhao, Y. Zhang, and Z. Lin. PT-CFI: Transparent
backward-edge control flow violation detection using intel
processor trace. In Proceedings of the 7th ACM Conference
on Data and Application Security and Privacy (CODASPY).
ACM, 2017.

[27] U. Hélzle, C. Chambers, and D. Ungar. Debugging optimized code with dynamic deoptimization. In Proceedings of the ACM SIGPLAN’92 Conference on Programming
Language Design and Implementation (PLDI), pages 32-43.
ACM, 1992.

[28] W. Huang, Z. Huang, D. Miyani, and D. Lie. LMP: lightweighted memory protection with hardware assistance. In
Proceedings of the 32nd Annual Conference on Computer
Security Applications (ACSAC). ACM, 2016.
[29] R. Hund, T. Holz, and F. C. Freiling. Return-oriented rootkits: Bypassing kernel code integrity protection mechanisms.
In Proceedings of the 18th USENIX Security Symposium
(USENIX Security), pages 383-398. USENIX Association,
2009.

[30] B. Kasikci, B. Schubert, C. Pereira, G. Pokam, and G. Candea.
Failure sketching: a technique for automated root cause diagnosis of in-production failures. In Proceedings of the 25th
Symposium on Operating Systems Principles (SOSP), pages
344-360. ACM, 2015.

[31] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar,
and D. Song. Code-pointer integrity. In Proceedings of the
1th USENIX Symposium on Operating Systems Design and
Implementation (OSDI). USENIX Association, 2014.

[32] J. Li, Z. Wang, X. Jiang, M. Grace, and S. Bahram. Defeating
return-oriented rootkits with return-less kernels. In Proceedings of the 5th European Conference on Computer Systems
(EuroSys), pages 195-208. ACM, 2010.

[33] Y. Liu, P. Shi, X. Wang, H. Chen, B. Zang, and H. Guan.
Transparent and efficient cfi enforcement with intel processor
trace. In Proceedings of the 23rd IEEE Symposium on High
Performance Computer Architecture (HPCA). TEEE, 2017.

[34] B. Niu and G. Tan. Modular control-flow integrity. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). ACM,
2014.

[35] B. Niu and G. Tan. RockJIT: Securing just-in-time compilation using modular control-flow integrity. In Proceedings of
the 2014 ACM SIGSAC Conference on Computer and Communications Security (CCS), pages 1317-1328. ACM, 2014.

[36] B. Niu and G. Tan. Per-input control-flow integrity. In Proceedings of the 22nd ACM SIGSAC Conference on Computer
and Communications Security (CCS), pages 914-926. ACM,
2015.

[37] V. Pappas, M. Polychronakis, and A. D. Keromytis. Transparent ROP exploit mitigation using indirect branch tracing. In Proceedings of the 22nd USENIX Security Symposium (USENIX Security), pages 447-462. USENIX Association, 2013.

[38] PaX Team. Documentation for the PaX project - overall
description. https://pax.grsecurity.net/docs/pax.
txt, 2008.

[39] M. Payer and T. R. Gross. Generating low-overhead dynamic
binary translators. In Proceedings of the 3rd Annual Haifa
Experimental Systems Conference. ACM, 2010.

[40] M. Payer, A. Barresi, and T. R. Gross. Fine-grained controlflow integrity through binary hardening. In Proceedings of
the 12th International Conference on Detection of Intrusions
and Malware, and Vulnerability Assessment (DIMVA), pages
144-164. Springer, 2015.

[41] R. Roemer, E. Buchanan, H. Shacham, and S. Savage. Returnoriented programming: Systems, languages, and applications.
ACM Transactions on Information and System Security (TISSEC), 2012.

[42] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi,
and T. Holz. Counterfeit object-oriented programming: On

the difficulty of preventing code reuse attacks in C++ applications. In Proceedings of the 36th IEEE Symposium on Security
and Privacy (S&P), pages 745-762. IEEE, 2015.

[43] C. Tice, T. Roeder, P. Collingbourne, $. Checkoway, U. Erlingsson, L. Lozano, and G. Pike. Enforcing forward-edge
control-flow integrity in gcc & Ilvm. In Proceedings of the
23rd USENIX Security Symposium (USENIX Security), 2014.

[44] V. van der Veen, D. Andriesse, E. Géktas, B. Gras, L. Sambuc,
A. Slowinska, H. Bos, and C. Giuffrida. Practical contextsensitive CFI. In Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security (CCS),
pages 927-940. ACM, 2015.

[45] V. van der Veen, E. Goktas, M. Contag, A. Pawlowski,
X. Chen, S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and.
C. Giuffrida. A tough call: Mitigating advanced code-reuse
attacks at the binary level. In Proceedings of the 37th IEEE
Symposium on Security and Privacy (S&P). TEEE, 2016.

[46] Z. Wang and X. Jiang. Hypersafe: A lightweight approach
to provide lifetime hypervisor control-flow integrity. In Proceedings of the 31st IEEE Symposium on Security and Privacy
(S&P), pages 380-395. IEEE, 2010.

[47] J. Wilander, N. Nikiforakis, Y. Younan, M. Kamkar, and
W. Joosen. RIPE: Runtime intrusion prevention evaluator. In
Proceedings of the 27th Annual Computer Security Applications Conference (ACSAC). ACM, 2011.

[48] Y. Xia, Y. Liu, H. Chen, and B. Zang. CFIMon: Detecting
violation of control flow integrity using performance counters. In Proceedings of the 42nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks
(DSN), pages 1-12. TEEE, 2012.

[49] P. Yuan, Q. Zeng, and X. Ding. Hardware-assisted finegrained code-reuse attack detection. In Proceedings of the
18th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID), pages 66-85. Springer, 2015.

[50] B. Zeng, G. Tan, and G. Morrisett. Combining control-flow integrity and static analysis for efficient and validated data sandboxing. In Proceedings of the 18th ACM SIGSAC Conference
on Computer and Communications Security (CCS), pages 2940. ACM, 2011.

[51] C. Zhang, T. Wei, Z. Chen, L. Duan, L. Szekeres, S. McCamant, D. Song, and W. Zou. Practical control flow integrity
and randomization for binary executables. In Proceedings of
the 34th IEEE Symposium on Security and Privacy (S&P),
pages 559-573. IEEE, 2013.

[52] M. Zhang and R. Sekar. Control flow integrity for COTS binaries. In Proceedings of the 22nd USENIX Security Symposium
(USENIX Security). USENIX Association, 2013.

[53] M. Zhang, R. Qiao, N. Hasabnis, and R. Sekar. A platform
for secure static binary instrumentation. In Proceedings of
the 10th ACM SIGPLAN International Conference on Virtual
Execution Environments (VEE). ACM, 2014.