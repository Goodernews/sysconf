[1] Ali Afroozeh and Anastasia Izmaylova. 2015. Faster, Practical GLL
Parsing. In Compiler Construction - 24th International Conference, CC
2015, Held as Part of the European joint Conferences on Theory and
Practice of Software, ETAPS 2015, London, UK, April 11-18, 2015. Proceedings (Lecture Notes in Computer Science), Bjrn Franke (Ed.), Vol. 9031.
Springer, 89-108. DOI : http://dx.doi.org/10.1007/978-3-662-46663-6_5

[2] Ali Afroozeh and Anastasia Izmaylova. 2016. Operator precedence for
data-dependent grammars. In Proceedings of the 2016 ACM SIGPLAN
Workshop on Partial Evaluation and Program Manipulation, PEPM 2016,
St. Petersburg, FL, USA, January 20 - 22, 2016, Martin Erwig and Tiark
Rompf (Eds.). ACM, 13-24. DOL: http://dx.doi.org/10.1145/2847538.
2847540

[3] Ali Afroozeh, Mark G. J. van den Brand, Adrian Johnstone, Elizabeth Scott, and Jurgen J. Vinju. 2013. Safe Specification of Operator
Precedence Rules. In Software Language Engineering - 6th International
Conference, SLE 2013, Indianapolis, IN, USA, October 26-28, 2013. Proceedings (Lecture Notes in Computer Science), Martin Erwig, Richard F.
Paige, and Eric Van Wyk (Eds.), Vol. 8225. Springer, 137-156. DOI:
http://dx.doi.org/10.1007/978-3-319-02654-1_8

[4] Raymond P.L. Buse and Westley R. Weimer. 2008. A Metric for Software
Readability. In Proceedings of the 2008 International Symposium on
Software Testing and Analysis (ISSTA ’08). ACM, New York, NY, USA,
121-130. DOL: http://dx.doi.org/10.1145/1390630.1390647

[5] Luis Eduardo de Souza Amorim, Timothée Haudebourg, and Eelco
Visser. 2017. Declarative Disambiguation of Deep Priority Conflicts.
Technical Report TUD-SERG-2017-014. Delft University of Technology.

[6] James Gosling, Bill Joy, Guy L. Steele Jr., Gilad Bracha, and Alex Buckley. 2013. The Java Language Specification, Java SE 7 Edition.

Luis Eduardo de Souza Amorim, Michael J. Steindorfer, and Eelco Visser

[7] James Gosling, Bill Joy, Guy Steele, Gilad Bracha, and Alex Buckley.
2014. The Java Language Specification. Java SE 8 Edition.

[8] Jan Heering, P. R. H. Hendriks, Paul Klint, and Jan Rekers. 1989. The
syntax definition formalism SDF - reference manual. SIGPLAN Notices
24, 11 (1989), 43-75. DOL : http://dx.doi.org/10.1145/7 1605.71607

[9] Jan Heering, Paul Klint, and Jan Rekers. 1989. Incremental Generation
of Parsers. In PLDI. 179-191.

[10] Mark Hills, Paul Klint, and Jurgen Vinju. 2013. An Empirical Study
of PHP Feature Usage: A Static Analysis Perspective. In Proceedings
of the 2013 International Symposium on Software Testing and Analysis
(ISSTA 2013). ACM, New York, NY, USA, 325-335. DOT: http://dx.doi.
org/10.1145/2483760.2483786

[11] Andrew Hunt and David Thomas. 1999. The Pragmatic Programmer:
From journeyman to Master. Addison-Wesley Longman Publishing
Co., Inc., Boston, MA, USA.

[12] S.C. Johnson. 1975. YACC—yet another compiler-compiler. Technical
Report CS-32. AT & T Bell Laboratories, Murray Hill, NJ.

[13] Lennart C. L. Kats, Eelco Visser, and Guido Wachsmuth. 2010. Pure and
declarative syntax definition: paradise lost and regained. In Proceedings of the 25th Annual ACM SIGPLAN Conference on Object-Oriented
Programming, Systems, Languages, and Applications, OOPSLA 2010,
William R. Cook, Siobhan Clarke, and Martin C. Rinard (Eds.). ACM,
Reno/Tahoe, Nevada, 918-932. DOI: http://dx.doi.org/10.1145/1869459.
1869535

[14] Paul Klint and Eelco Visser. 1994. Using Filters for the Disambiguation of Context-free Grammars. In Proceedings of the ASMICS Workshop on Parsing Theory. Tech. Rep. 126-1994, Dipartimento di Scienze
dell’Informazione, Universita di Milano, Milano, Italy.

[15] Ralf Lammel. 2001. Grammar Testing. In Fundamental Approaches to
Software Engineering, FASE 2001 (Lecture Notes in Computer Science),
Heinrich Hu8mann (Ed.), Vol. 2029. Springer, 201-216. DOT: http://dx.
doi.org/link/service/series/0558/bibs/2029/20290201.htm

[16] Davy Landman, Alexander Serebrenik, Eric Bouwers, and Jurgen J.
Vinju. 2016. Empirical analysis of the relationship between CC and
SLOC in a large corpus of Java methods and C functions. Journal
of Software: Evolution and Process 28, 7 (2016), 589-618. DOL: http:
//dx.doi.org/10.1002/smr.1760 JSME-15-0028.R1.

[17] Davy Landman, Alexander Serebrenik, and Jurgen J. Vinju. 2017. Challenges for Static Analysis of Java Reflection: Literature Review and
Empirical Study. In Proceedings of the 39th International Conference
on Software Engineering (ICSE ’17). IEEE Press, Piscataway, NJ, USA,
507-518. DOI: http://dx.doi.org/10.1109/ICSE.2017.53

[18] Terence John Parr, Sam Harwell, and Kathleen Fisher. 2014. Adaptive
LL(*) parsing: the power of dynamic analysis. In Proceedings of the 2014
ACM International Conference on Object Oriented Programming Systems
Languages & Applications, OOPSLA 2014, part of SPLASH 2014, Portland,
OR, USA, October 20-24, 2014, Andrew P. Black and Todd D. Millstein
(Eds.). ACM, 579-598. DOL: http://dx.doi.org/10.1145/2660193.2660202

[19] T. Sedano. 2016. Code Readability Testing, an Empirical Study. In 2016
IEEE 29th International Conference on Software Engineering Education
and Training (CSEET). 111-117. DOL : http://dx.doi.org/10.1109/CSEET.
2016.36

[20] Andreas Stefik and Susanna Siebert. 2013. An Empirical Investigation
into Programming Language Syntax. Trans. Comput. Educ. 13, 4, Article
19 (Nov. 2013), 40 pages. DOI: http://dx.doi.org/10.1145/2534973

[21] Masaru Tomita. 1985. An Efficient Context-Free Parsing Algorithm
for Natural Languages. In [JCAL 756-764.

[22] Eelco Visser. 1997. Syntax Definition for Language Prototyping. Ph.D.
Dissertation. University of Amsterdam. Advisor(s) Paul Klint.

[23] Tobi Vollebregt, Lennart C. L. Kats, and Eelco Visser. 2012. Declarative specification of template-based textual editors. In International
Workshop on Language Descriptions, Tools, and Applications, LDTA ’12,
Tallinn, Estonia, March 31 - April 1, 2012, Anthony Sloane and Suzana
Andova (Eds.), ACM. DOT : http://dx.doi.org/10.1145/2427048.2427056
