[1] G. Altekar and I. Stoica. ODR: Output-deterministic Replay for Multi-
core Debugging. In Proceedings of the ACM SIGOPS 22nd Symposium
on Operating Systems Principles, SOSP ’09, pages 193–206. ACM, 2009.
[2] T. Ball and J. R. Larus. Efficient Path Profiling. In Proceedings of the
29th Annual ACM/IEEE International Symposium on Microarchitecture,
MICRO ’96, pages 46–57. IEEE Computer Society, 1996.

[3] P. Barham, A. Donnelly, R. Isaacs, and R. Mortier. Using Magpie for
Request Extraction and Workload Modelling. In Proceedings of the 6th
Conference on Symposium on Operating Systems Design & Implementa-
tion, OSDI ’04, pages 259–272. USENIX Association, 2004.

[4] B. M. Cantrill, M. W. Shapiro, and A. H. Leventhal. Dynamic Instru-
mentation of Production Systems. In Proceedings of the 10th USENIX

Log20: Automated Log Placement under Specified Overhead Threshold

SOSP ’17, October 28, 2017, Shanghai, China

Annual Technical Conference, USENIX ATC ’04, pages 15–28. USENIX
Association, 2004.

[5] H. Cui, J. Simsa, Y.-H. Lin, H. Li, B. Blum, X. Xu, J. Yang, G. A. Gibson,
and R. E. Bryant. Parrot: A Practical Runtime for Deterministic, Stable,
and Reliable Threads. In Proceedings of the 24th ACM Symposium on
Operating Systems Principles, SOSP ’13, pages 388–405. ACM, 2013.

[6] D. Devecsery, M. Chow, X. Dou, J. Flinn, and P. M. Chen. Eidetic
Systems. In Proceedings of the 11th USENIX Conference on Operating
Systems Design and Implementation, OSDI ’14, pages 525–540. USENIX
Association, 2014.

[7] G. W. Dunlap, S. T. King, S. Cinar, M. A. Basrai, and P. M. Chen. ReVirt:
Enabling Intrusion Analysis Through Virtual-machine Logging and
Replay. In Proceedings of the 5th Symposium on Operating Systems
Design and Implementation, OSDI ’02, pages 211–224. ACM, 2002.

[8] R. Fonseca, G. Porter, R. H. Katz, S. Shenker, and I. Stoica. X-trace:
A Pervasive Network Tracing Framework. In Proceedings of the 4th
USENIX Conference on Networked Systems Design & Implementation,
NSDI ’07, pages 271–284. USENIX Association, 2007.

[9] Q. Fu, J. Zhu, W. Hu, J.-G. Lou, R. Ding, Q. Lin, D. Zhang, and T. Xie.
Where Do Developers Log? An Empirical Study on Logging Practices in
Industry. In Companion Proceedings of the 36th International Conference
on Software Engineering, ICSE Companion ’14, pages 24–33. ACM, 2014.
[10] M. Hauswirth and T. M. Chilimbi. Low-overhead Memory Leak De-
tection Using Adaptive Statistical Profiling. In Proceedings of the 11th
International Conference on Architectural Support for Programming
Languages and Operating Systems, ASPLOS ’04, pages 156–164. ACM,
2004.

[11] HDFS-12332: Logging Improvement for SampleStat Function Min-

Max.add. https://issues.apache.org/jira/browse/HDFS-12332.

[12] J. Huang, P. Liu, and C. Zhang. LEAP: Lightweight Deterministic
Multi-processor Replay of Concurrent Java Programs. In Proceedings
of the 18th ACM SIGSOFT International Symposium on Foundations of
Software Engineering, FSE ’10, pages 207–216. ACM, 2010.

[13] S. Huang, J. Huang, J. Dai, T. Xie, and B. Huang. The HiBench Bench-
mark Suite: Characterization of the MapReduce-based Data Analy-
sis. In 26th International Conference on Data Engineering Workshops,
ICDEW ’10, pages 41–51. IEEE Computer Society, 2010.

[14] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed. ZooKeeper: Wait-free
Coordination for Internet-scale Systems. In Proceedings of the 16th
USENIX Annual Technical Conference, USENIX ATC ’10, pages 145–158.
USENIX Association, 2010.

[15] JavaParser: Process Java Code Programmatically. http://javaparser.

[16] J. R. Larus. Whole Program Paths. In Proceedings of the ACM SIGPLAN
1999 Conference on Programming Language Design and Implementation,
PLDI ’99, pages 259–269. ACM, 1999.

[17] V. I. Levenshtein. Binary Codes Capable of Correcting Deletions,
Insertions, and Reversals. In Soviet Physics Doklady, 10(8), pages 707–
710, 1966.

[18] H. Li, W. Shang, Y. Zou, and A. E. Hassan. Towards Just-in-time
Suggestions for Log Changes. Empirical Software Engineering, pages
1–35, 2016.

[19] D. Lion, A. Chiu, H. Sun, X. Zhuang, N. Grcevski, and D. Yuan. Don’t
Get Caught in the Cold, Warm-up Your JVM: Understand and Elimi-
nate JVM Warm-up Overhead in Data-Parallel Systems . In Proceedings
of the 12th USENIX Symposium on Operating Systems Design and Im-
plementation, OSDI ’16, pages 383–400. USENIX Association, 2016.

[20] T. Liu, C. Curtsinger, and E. D. Berger. Dthreads: Efficient Determin-
istic Multithreading. In Proceedings of the 23rd ACM Symposium on
Operating Systems Principles, SOSP ’11, pages 327–336. ACM, 2011.

[21] Log4j - Log4j 2 Guide - Apache Log4j 2. http://logging.apache.org/

log4j/2.x/.

org/.

[22] J. Mace, R. Roelke, and R. Fonseca. Pivot Tracing: Dynamic Causal
Monitoring for Distributed Systems. In Proceedings of the 25th Sympo-
sium on Operating Systems Principles, SOSP ’15, pages 378–393. ACM,
2015.

[23] S. Narayanasamy, G. Pokam, and B. Calder. BugNet: Continuously
Recording Program Execution for Deterministic Replay Debugging. In
Proceedings of the 32nd Annual International Symposium on Computer
Architecture, ISCA ’05, pages 284–295. IEEE Computer Society, 2005.
[24] P. Ohmann, D. B. Brown, N. Neelakandan, J. Linderoth, and B. Liblit.
Optimizing Customized Program Coverage. In Proceedings of the 31st
IEEE/ACM International Conference on Automated Software Engineering,
ASE 2016, pages 27–38. ACM, 2016.

[25] S. Park, Y. Zhou, W. Xiong, Z. Yin, R. Kaushik, K. H. Lee, and S. Lu. PRES:
Probabilistic Replay with Execution Sketching on Multiprocessors. In
Proceedings of the 22nd Symposium on Operating Systems Principles,
SOSP ’09, pages 177–192. ACM, 2009.

[26] Performance of Log4j 2. https://logging.apache.org/log4j/log4j-2.2/

performance.html.

[27] C. E. Shannon. A Mathematical Theory of Communication. The Bell

System Technical Journal, 27(4):623–656, 1948.

[28] Spring Loaded. https://github.com/spring-projects/spring-loaded.
[29] D. Subhraveti and J. Nieh. Record and Transplay: Partial Checkpointing
for Replay Debugging Across Heterogeneous Systems. In Proceedings
of the ACM SIGMETRICS International Conference on Measurement and
Modeling of Computer Systems, SIGMETRICS ’11, pages 109–120. ACM,
2011.

[30] SystemTap. https://sourceware.org/systemtap/.
[31] H. Thane and H. Hansson. Using Deterministic Replay for Debugging
of Distributed Real-time Systems. In Proceedings of the 12th Euromicro
Conference on Real-Time Systems, ECRTS 2000, pages 265–272, 2000.
[32] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and V. Sundaresan.
Soot: A Java Bytecode Optimization Framework. In CASCON First
Decade High Impact Papers, CASCON ’10, pages 214–224. IBM Corp.,
2010.

[33] K. Veeraraghavan, D. Lee, B. Wester, J. Ouyang, P. M. Chen, J. Flinn,
and S. Narayanasamy. DoublePlay: Parallelizing Sequential Logging
and Replay. In Proceedings of the 16th International Conference on Ar-
chitectural Support for Programming Languages and Operating Systems,
ASPLOS ’11, pages 15–26. ACM, 2011.

[34] D. Yuan, Y. Luo, X. Zhuang, G. Rodrigues, X. Zhao, Y. Zhang, P. U.
Jain, and M. Stumm. Simple Testing Can Prevent Most Critical Fail-
ures: An Analysis of Production Failures in Distributed Data-intensive
Systems. In Proceedings of the 11th USENIX Conference on Operating
Systems Design and Implementation, OSDI ’14, pages 249–265. USENIX
Association, 2014.

[35] D. Yuan, S. Park, P. Huang, Y. Liu, M. Lee, Y. Zhou, and S. Savage. Be
Conservative: Enhancing Failure Diagnosis with Proactive Logging. In
Proceedings of the 10th USENIX Symposium on Operating System Design
and Implementation, OSDI ’12, pages 293–306. USENIX Association,
2012.

[36] D. Yuan, S. Park, and Y. Zhou. Characterising Logging Practices in
Open-Source Software. In Proceedings of the 34th International Con-
ference on Software Engineering, ICSE ’12, pages 102–112. IEEE Press,
2012.

[37] D. Yuan, J. Zheng, S. Park, Y. Zhou, and S. Savage. Improving Software
Diagnosability via Log Enhancement. In Proceedings of the 16th Interna-
tional Conference on Architectural Support for Programming Languages
and Operating Systems, ASPLOS ’11, pages 3–14. ACM, 2011.

[38] X. Zhao, K. Rodrigues, Y. Luo, M. Stumm, D. Yuan, and Y. Zhou. The
Game of Twenty Questions: Do You Know Where to Log? In Proceed-
ings of the 16th Workshop on Hot Topics in Operating Systems, HotOS ’17,
pages 125–131. ACM, 2017.

