[1] Apache Apex. https://apex.apache.org.
[2] Apache Curator. http://curator.apache.org.
[3] Apache Flink. https://flink.apache.org.
[4] Apache Gearpump. http://gearpump.apache.org.
[5] Apache Samza. http://samza.apache.org.
[6] Apache Spark. http://spark.apache.org.
[7] Apache Storm. http://storm.apache.org.
[8] Apex Application Developer Guide. https://github.com/DataTorrent/docs/blob/
master/docs/application_development.md.
[9] Common Topology Patterns. http://storm.apache.org/releases/1.0.3/
Common-patterns. html
[10] Data Plane Development Kit. http://dpdk.org.
[11] Gartner Says the Internet of Things Installed Base Will Grow to 26 Billion Units
By 2020. https://www.gartner.com/newsroom/id/2636073.
[12] Gearpump - dynamic DAG. __http://mail-archives.apache.org/mod_mbox/
incubator-gearpump-user/201609.mbox/browser. Gearpump User Mailing List.
[13] How Spotify Scales Apache Storm. _ https://labs.spotify.com/2015/01/05/
how-spotify-scales-apache-storm/.
[14] Microsft Azure SLA for Stream Analytics. https://azure.microsoft.com/support/
legal/sla/stream-analytics/.
[15] New Tweets per second record, and how! https://blog.twitter.com/engineering/
en_us/a/2013/new-tweets-per-second-record-and-how.html.
[16] Project Floodlight. http://www.projectfloodlight.org/floodlight/.
[17] STORM-634: Storm serialization changed to thrift to support rolling upgrade.
https://github.com/apache/storm/pull/414.
[18] Storm Guaranteeing Message Processing. http://storm.apache.org/releases/
current/Guaranteeing-message- processing html.
[19] Storm topology event inspector. http://storm.apache org/releases/2.0.
0-SNAPSHOT/Eventlogging html.
[20] Stream groupings. http://storm.apache.org/releases/2.0.0-SNAPSHOT/Concepts.
html.

[21] Support for Dynamic Topology. http://mail-archives.apache.org/mod_mbox/
apex-users/201608.mbox/browser. Apex Users Mailing List.

[22] Tigon. http://tigon.io.

[23] Understanding the Parallelism of a Storm Topology. http://storm.apache.org/releases/2.0.0-SNAPSHOT/
Understanding-the-parallelism- of-a-Storm-topology.html.

[24] OpenFlow Switch Specification. https://www.opennetworking.org/
images/stories/downloads/sdn-resources/onf- specifications/openflow/
openflow-switch-v1.5.0.noipr.pdf, 2014.

[25] D.J. Abadi, Y. Ahmad, M. Balazinska, U. Cetintemel, M. Cherniack, J.-H. Hwang,
W. Lindner, A. Maskey, A. Rasin, E. Ryvkina, et al. The Design of the Borealis
Stream Processing Engine. In Proc. CIDR, 2005.

[26] A. Al-Shabibi et al. OpenVirteX: Make Your Virtual SDNs Programmable. In
Proc. HotSDN, 2014.

[27] A. Botta, W. de Donato, V. Persico, and A. Pescap√©. On the Integration of Cloud
Computing and Internet of Things. In Proc. IEEE International Conference on
Future Internet of Things and Cloud, 2014.

[28] Z. Bozakov and P. Papadimitriou. AutoSlice: Automated and Scalable Slicing for
Software-Defined Networks. In Proc. ACM CoNEXT, 2012.

[29] M. Cherniack, H. Balakrishnan, M. Balazinska, D. Carney, U. Cetintemel, Y. Xing,
and S. B. Zdonik. Scalable Distributed Stream Processing. In Proc. CIDR, 2003.

[30] S. Chintapalli et al. Benchmarking Streaming Computation Engines: Storm,
Flink and Spark Streaming. In Proc, IEEE International Parallel and Distributed
Processing Symposium Workshops, 2016.

[31] L.G. D. Estrin and M. S. G. Pottie. Instrumenting the World with Wireless Sensor
Networks. In Proc. IEEE ICASSP, 2001.

[32] R. Evans. From Gust to Tempest: Scaling Storm. In Proc. Hadoop Summit, 2015.

[33] A. D. Ferguson, A. Guha, C. Liang, R. Fonseca, and S. Krishnamurthi. Participatory
Networking: An API for Application Control of SDNs. In Proc. ACM SIGCOMM,
2013.

[34] A. Floratou, A. Agrawal, B. Graham, S. Rao, and K. Ramasamy. Dhalion: SelfRegulating Stream Processing in Heron. VLDB Endowment, 10(12), 2017.

[35] D. Ford, F, Labelle, F. I. Popovici, M. Stokely, and V.-A. Truong. Availability in
Globally Distributed Storage Systems. In Proc. USENIX OSDI, 2010.

[36] A. Ghoting and S. Parthasarathy. Facilitating Interactive Distributed Data Stream
Processing and Mining. In Proc. IEEE International Parallel and Distributed Processing Symposium, 2004.

[37] S. Hendrickson, S. Sturdevant, T. Harter, V. Venkataramani, A. C. Arpaci-Dusseau,
and R. H. Arpaci-Dusseau. Serverless Computation with OpenLambda. In
Proc. 8th USENIX Workshop on HotCloud, 2016.

[38] P. Hunt, M. Konar, F. P. Junqueira, and B. Reed. ZooKeeper: Wait-free Coordination for Internet-scale Systems. In Proc. USENIX ATC, 2010.

[39] E. Jonas, Q. Pu, S. Venkataraman, I Stoica, and B. Recht. Occupy the Cloud:
Distributed Computing for the 99%. In Proc. ACM Symposium on Cloud Computing,
2017.

[40] S. Kamburugamuve, S. Ekanayake, M. Pathirage, and G. Fox. Towards High
Performance Processing of Streaming Data in Large Data Centers. In Proc. IEEE
International Parallel and Distributed Processing Symposium Workshops, 2016.

[41] V. Kawadia and P. Kumar. A Cautionary Perspective on Cross-layer Design. IEEE
Wireless Communications, 12(1), 2005.

[42] A. Khrabrov and E. de Lara. Accelerating Complex Data Transfer for Cluster
Computing. In Proc. 8th USENIX Workshop on HotCloud, 2016.

[43] S. Kulkarni, N. Bhagat, M. Fu, V. Kedigehalli, C. Kellogg, S. Mittal, J. M. Patel,
K. Ramasamy, and S. Taneja. Twitter Heron: Stream Processing at Scale. In
Proc. ACM SIGMOD, 2015.

[44] O. Michel, M. Coughlin, and E. Keller. Extending the Software-Defined Network
Boundary. ACM SIGCOMM Computer Communication Review, 44(4):381-382,
2014.

[45] R. Moore. A Universal Dynamic Trace for Linux and other Operating Systems.
In Proc. USENIX ATC, FREENIX Track, 2001.

[46] M. A. U. Nasir. Fault Tolerance for Stream Processing Engines. arXiv preprint
arXiv:1605.00928, 2016.

[47] M. A. U. Nasir, G. D. F. Morales, D. Garcia-Soriano, N. Kourtellis, and M. Serafini.
The Power of Both Choices: Practical Load Balancing for Distributed Stream
Processing Engines. In Proc. IEEE International Conference on Data Engineering,
2015.

[48] L. Neumeyer, B. Robbins, A. Nair, and A. Kesari. $4: Distributed Stream Computing
Platform. In Proc. IEEE International Conference on Data Mining Workshops, 2010.

[49] Z. Qian et al. TimeStream: Reliable Stream Computation in the Cloud. In
Proc. EuroSys, 2013.

[50] R.K. Sahoo, A. Sivasubramaniam, M. S. Squillante, and Y. Zhang. Failure Data
Analysis of a Large-Scale Heterogeneous Server Environment. In Proc, IEEE
International Conference on Dependable Systems and Networks, 2004.

[51] M. A. Shah, J. M. Hellerstein, S. Chandrasekaran, and M. J. Franklin. Flux: An
Adaptive Partitioning Operator for Continuous Query Systems. In Proc, IEEE
International Conference on Data Engineering, 2003.

[52] R. Sherwood et al. FlowVisor: A Network Virtualization Layer. In OpenFlow
Switch Consortium, 2009.

[53] M. Slee, A. Agarwal, and M. Kwiatkowski. Thrift: Scalable Cross-Language
Services Implementation. Facebook White Paper, 5(8), 2007.

[54] M. Stonebraker, U. Cetintemel, and S. Zdonik. The 8 Requirements of Real-Time
Stream Processing. ACM SIGMOD Record, 34(4), 2005.

[55] A. Toshniwal, S. Taneja, A. Shukla, K. Ramasamy, J. M. Patel, S. Kulkarni, J. Jack
son, K. Gade, M. Fu, J. Donham, et al. Storm @Twitter. In Proc. ACM SIGMOD,

2014.

[56] L. Wang. Usages and Optimizations of Spark at Tencent. In Proc. Big Data

Conference, 2015.

[57] B. White et al. An Integrated Experimental Environment for Distributed Systems

and Networks. ACM SIGOPS Operating Systems Review, 36(SD, 2002.

[58] Y. Xing, S. Zdonik, and J.-H. Hwang. Dynamic load distribution in the borealis

stream processor. In Proc, IEEE International Conference on Data Engineering,

2005.

[59] H. Zhang, G. Ananthanarayanan, P. Bodik, M. Philipose, P. Bahl, and M. J. Freed
man. Live Video Analytics at Scale with Approximation and Delay-Tolerance. In

Proc. USENIX NSDI, 2017.

[60] Q. Zhao, R. Rabbah, S. Amarasinghe, L. Rudolph, and W.-F. Wong. How to Doa

Million Watchpoints: Efficient Debugging Using Dynamic Instrumentation. In

Proc. International Conference on Compiler Construction, 2008.
