[1] “Gunrock: High-performance graph primitives on GPUs,” gunrock.
github.io.
[2] T. Ben-Nun, M. Sutton, S. Pai, and K. Pingali, “Groute: An asynchronous multi-GPU programming model for irregular computations,”
in Proceedings of the 22nd ACM SIGPLAN Symposium on Principles
and Practice of Parallel Programming. ACM, 2017, pp. 235–248.
[3] M. Bernaschi, G. Carbone, and F. Vella, “Betweenness centrality on
multi-GPU systems,” in Proceedings of the 5th Workshop on Irregular
Applications: Architectures and Algorithms. ACM, 2015, p. 12.
[4] U. Cheramangalath, R. Nasre, and Y. N. Srikant, “Falcon: A graph
manipulation language for heterogeneous systems,” ACM Trans. Archit.
Code Optim., vol. 12, no. 4, pp. 54:1–54:27, Dec. 2015. [Online].
Available: http://doi.acm.org/10.1145/2842618
[5] A. Davidson, S. Baxter, M. Garland, and J. D. Owens, “Work-efﬁcient
parallel gpu methods for single-source shortest paths,” in Parallel and
Distributed Processing Symposium, 2014 IEEE 28th International.
IEEE, 2014, pp. 349–359.
[6] I. J. Egielski, J. Huang, and E. Z. Zhang, “Massive atomics for massive parallelism on GPUs,” in Proceedings of the 2014 International
Symposium on Memory Management. ACM, 2014, pp. 93–103.
[7] Z. Fu, M. Personick, and B. Thompson, “Mapgraph: A high level api
for fast development of high performance graph analytics on gpus,” in
Proceedings of Workshop on GRAph Data management Experiences
and Systems. ACM, 2014, pp. 1–6.
[8] S. Hong, H. Chaﬁ, E. Sedlar, and K. Olukotun, “Green-Marl: A DSL
for easy and efﬁcient graph analysis,” in Proceedings of the Seventeenth
International Conference on Architectural Support for Programming
Languages and Operating Systems. ACM, 2012, pp. 349–362.
[9] S. Hong, S. K. Kim, T. Oguntebi, and K. Olukotun, “Accelerating
CUDA graph algorithms at maximum warp,” in Proceedings of the 16th
ACM Symposium on Principles and Practice of Parallel Programming.
ACM, 2011, pp. 267–276.
[10] F. Khorasani, R. Gupta, and L. N. Bhuyan, “Scalable SIMD-efﬁcient
graph processing on GPUs,” in Proceedings of the 2015 International
Conference on Parallel Architecture and Compilation (PACT). IEEE
Computer Society, 2015, pp. 39–50.
[11] F. Khorasani, K. Vora, R. Gupta, and L. N. Bhuyan, “CuSha: Vertexcentric graph processing on GPUs,” in Proceedings of the 23rd International Symposium on High-performance Parallel and Distributed
Computing. ACM, 2014, pp. 239–252.
[12] W. Liu and B. Vinter, “CSR5: an efﬁcient storage format for
cross-platform sparse matrix-vector multiplication,” CoRR, vol.
abs/1503.05032, 2015.
[13] Y. Low, J. Gonzalez, A. Kyrola, D. Bickson, C. Guestrin, and J. M.
Hellerstein, “GraphLab: A new framework for parallel machine learning,” CoRR, vol. abs/1006.4990, 2010.
[14] G. Malewicz, M. H. Austern, A. J. Bik, J. C. Dehnert, I. Horn, N. Leiser,
and G. Czajkowski, “Pregel: A system for large-scale graph processing,”
in Proceedings of the 2010 ACM SIGMOD International Conference
on Management of Data. ACM, 2010, pp. 135–146.
[15] D. Merrill and M. Garland, “Merge-based sparse matrix-vector multiplication (Spmv) using the CSR storage format,” in Proceedings of the
21st ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming. ACM, 2016, pp. 43:1–43:2.
[16] D. Merrill, M. Garland, and A. Grimshaw, “Scalable GPU graph traversal,” in ACM SIGPLAN Notices, vol. 47, no. 8. ACM, 2012, pp.
117–128.
[17] S. Pai and K. Pingali, “A compiler for throughput optimization of graph
algorithms on GPUs,” in Proceedings of the 2016 ACM SIGPLAN
International Conference on Object-Oriented Programming, Systems,
Languages, and Applications. ACM, 2016, pp. 1–19.
[18] K. Pingali, D. Nguyen, M. Kulkarni, M. Burtscher, M. A. Hassaan,
R. Kaleem, T.-H. Lee, A. Lenharth, R. Manevich, M. Méndez-Lojo,
D. Prountzos, and X. Sui, “The Tao of parallelism in algorithms,” in
Proceedings of the 32Nd ACM SIGPLAN Conference on Programming
Language Design and Implementation. ACM, 2011, pp. 12–25.
[19] X. Shi, J. Liang, X. Luo, S. Di, B. He, L. Lu, and H. Jin, “Frog:
Asynchronous graph processing on gpu with hybrid coloring model,”
Huazhong University of Science and Technology, Tech. Rep. HUSTCGCL-TR-402, 2015.
[20] Y. Tian, A. Balmin, S. A. Corsten, S. Tatikonda, and J. McPherson,
“From "Think like a vertex" to "Think like a graph",” Proc. VLDB
Endow., vol. 7, no. 3, pp. 193–204, Nov. 2013.
[21] Y. Wang, A. Davidson, Y. Pan, Y. Wu, A. Riffel, and J. D. Owens,
“Gunrock: A high-performance graph processing library on the GPU,”
SIGPLAN Not., vol. 51, no. 8, pp. 11:1–11:12, Feb. 2016.
[22] J. Zhong and B. He, “Medusa: Simpliﬁed graph processing on gpus,”
IEEE Transactions on Parallel and Distributed Systems, vol. 25, no. 6,
pp. 1543–1552, 2014.
