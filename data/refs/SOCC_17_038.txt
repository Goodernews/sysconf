
[1] Hadoop. http://hadoop.apache.org/.
[2] Spark. https://spark.apache.org/.
[3] H. Agrawal and J. R. Horgan. Dynamic program slicing. In Proceedings
of the ACM SIGPLAN 1990 Conference on Programming Language
Design and Implementation, PLDI ’90, pages 246–256, New York, NY,
USA, 1990. ACM.

[4] F. Ahmad, S. Lee, M. Thottethodi, and T. Vijaykumar. Puma: Purdue
mapreduce benchmarks suite. Technical report, School of Electrical
and Computer Engineering, Purdue University, 2012 . TRECE-12-11.
[5] E. Ainy, P. Bourhis, S. B. Davidson, D. Deutch, and T. Milo. Approxi-
mated summarization of data provenance. In CIKM, pages 483–492,
2015.

[6] M. K. Anand, S. Bowers, and B. Ludäscher. Techniques for efﬁciently
querying scientiﬁc workﬂow provenance graphs. In Proceedings of
the 13th International Conference on Extending Database Technology,
EDBT ’10, pages 287–298, New York, NY, USA, 2010. ACM.

[7] O. Biton, S. Cohen-Boulakia, S. B. Davidson, and C. S. Hara. Querying
and managing provenance through user views in scientiﬁc workﬂows.
In Proceedings of the 2008 IEEE 24th International Conference on
Data Engineering, ICDE ’08, pages 1072–1081, Washington, DC, USA,
2008. IEEE Computer Society.

532

SoCC ’17, September 24–27, 2017, Santa Clara, CA, USA

Gulzar et al.

[8] M. Carbin and M. C. Rinard. Automatically identifying critical input
regions and code in applications. In Proceedings of the 19th Interna-
tional Symposium on Software Testing and Analysis, ISSTA ’10, pages
37–48, New York, NY, USA, 2010. ACM.

[9] T. W. Chan and A. Lakhotia. Debugging program failure exhibited by

voluminous data. Journal of Software Maintenance, 1998.

[10] A. Chen, Y. Wu, A. Haeberlen, W. Zhou, and B. T. Loo. The good, the
bad, and the differences: Better network diagnostics with differential
provenance. In Proceedings of the 2016 ACM SIGCOMM Conference,
SIGCOMM ’16, pages 115–128, New York, NY, USA, 2016. ACM.

[11] J.-D. Choi and A. Zeller. Isolating failure-inducing thread schedules. In
Proceedings of the 2002 ACM SIGSOFT International Symposium on
Software Testing and Analysis, ISSTA ’02, pages 210–220, New York,
NY, USA, 2002. ACM.

[12] Z. Chothia, J. Liagouris, F. McSherry, and T. Roscoe. Explaining
outputs in modern data analytics. Proc. VLDB Endow., 9(12):1137–
1148, Aug. 2016.

[13] X. Chu, I. F. Ilyas, and P. Papotti. Discovering denial constraints. Proc.

VLDB Endow., 6(13):1498–1509, Aug. 2013.

[14] J. Clause, W. Li, and A. Orso. Dytan: A generic dynamic taint analysis
framework. In Proceedings of the 2007 International Symposium on
Software Testing and Analysis, ISSTA ’07, pages 196–206, New York,
NY, USA, 2007. ACM.

[15] J. Clause and A. Orso. Penumbra: Automatically identifying failure-
relevant inputs using dynamic tainting. In Proceedings of the Eighteenth
International Symposium on Software Testing and Analysis, ISSTA ’09,
pages 249–260, New York, NY, USA, 2009. ACM.

[16] H. Cleve and A. Zeller. Locating causes of program failures. In Pro-
ceedings of the 27th International Conference on Software Engineering,
ICSE ’05, pages 342–351, New York, NY, USA, 2005. ACM.

[17] Y. Cui and J. Widom. Lineage tracing for general data warehouse

transformations. The VLDB Journal, 12(1):41–58, May 2003.

[18] J. Dean and S. Ghemawat. Mapreduce: simpliﬁed data processing on

large clusters. Communications of the ACM, 51(1):107–113, 2008.

[19] W. Fan, J. Li, S. Ma, N. Tang, and W. Yu. Towards certain ﬁxes with
editing rules and master data. The VLDB Journal, 21(2):213–238, Apr.
2012.

[20] M. A. Gulzar, M. Interlandi, T. Condie, and M. Kim. Bigdebug: Interac-
tive debugger for big data analytics in apache spark. In Proceedings of
the 2016 24th ACM SIGSOFT International Symposium on Foundations
of Software Engineering, FSE 2016, pages 1033–1037, New York, NY,
USA, 2016. ACM.

[21] M. A. Gulzar, M. Interlandi, T. Condie, and M. Kim. Debugging big
data analytics in spark with bigdebug. In Proceedings of the 2017
ACM International Conference on Management of Data, SIGMOD ’17,
pages 1627–1630, New York, NY, USA, 2017. ACM.

[22] M. A. Gulzar, M. Interlandi, S. Yoo, S. D. Tetali, T. Condie, T. Mill-
stein, and M. Kim. Bigdebug: Debugging primitives for interactive
big data processing in spark. In Proceedings of the 38th International
Conference on Software Engineering, ICSE ’16, pages 784–795, New
York, NY, USA, 2016. ACM.

[23] N. Gupta, H. He, X. Zhang, and R. Gupta. Locating faulty code using
failure-inducing chops. In Proceedings of the 20th IEEE/ACM Interna-
tional Conference on Automated Software Engineering, ASE ’05, pages
263–272, New York, NY, USA, 2005. ACM.

[24] T. Heinis and G. Alonso. Efﬁcient lineage tracking for scientiﬁc work-
ﬂows. In Proceedings of the 2008 ACM SIGMOD International Confer-
ence on Management of Data, SIGMOD ’08, pages 1007–1018, New
York, NY, USA, 2008. ACM.

[25] R. Ikeda, J. Cho, C. Fang, S. Salihoglu, S. Torikai, and J. Widom.
Provenance-based debugging and drill-down in data-oriented work-
ﬂows. In 2012 IEEE 28th International Conference on Data Engineer-
ing, pages 1249–1252, April 2012.

[26] R. Ikeda, H. Park, and J. Widom. Provenance for generalized map and
reduce workﬂows. In In Proc. Conference on Innovative Data Systems
Research (CIDR), 2011.

[27] R. Ikeda, A. D. Sarma, and J. Widom. Logical provenance in data-
oriented workﬂows? In 2013 IEEE 29th International Conference on
Data Engineering (ICDE), pages 877–888, April 2013.

[28] M. Interlandi, K. Shah, S. D. Tetali, M. A. Gulzar, S. Yoo, M. Kim,
T. Millstein, and T. Condie. Titian: Data provenance support in spark.
Proc. VLDB Endow., 9(3):216–227, Nov. 2015.

[29] M. Interlandi and N. Tang. Proof positive and negative in data cleaning.
In 2015 IEEE 31st International Conference on Data Engineering,
pages 18–29, April 2015.

[30] M. Interlandi, S. D. Tetali, M. A. Gulzar, J. Noor, T. Condie, M. Kim,
and T. Millstein. Optimizing interactive development of data-intensive
applications. In Proceedings of the Seventh ACM Symposium on Cloud
Computing, SoCC ’16, pages 510–522, New York, NY, USA, 2016.
ACM.

[31] J. A. Jones, M. J. Harrold, and J. Stasko. Visualization of test informa-
tion to assist fault localization. In Proceedings of the 24th International
Conference on Software Engineering, ICSE ’02, pages 467–477, New
York, NY, USA, 2002. ACM.

[32] Z. Khayyat, I. F. Ilyas, A. Jindal, S. Madden, M. Ouzzani, P. Papotti, J.-
A. Quiané-Ruiz, N. Tang, and S. Yin. Bigdansing: A system for big data
cleansing. In Proceedings of the 2015 ACM SIGMOD International
Conference on Management of Data, SIGMOD ’15, pages 1215–1230,
New York, NY, USA, 2015. ACM.

[33] T. R. Leek, G. Z. Baker, R. E. Brown, M. A. Zhivich, and R. Lippmann.
Coverage maximization using dynamic taint tracing. Technical report,
DTIC Document, 2007.

[34] D. Lemire, G. Ssi-Yan-Kai, and O. Kaser. Consistently faster and
Softw. Pract. Exper.,

smaller compressed bitmaps with roaring.
46(11):1547–1569, Nov. 2016.

[35] F. Li and S. Nath. Scalable data summarization on big data. Distributed

and Parallel Databases, 32(3):313–314, 2014.

[36] D. Logothetis, S. De, and K. Yocum. Scalable lineage capture for
debugging disc analytics. In Proceedings of the 4th annual Symposium
on Cloud Computing, page 17. ACM, 2013.

[37] W. Masri, A. Podgurski, and D. Leon. Detecting and debugging inse-
cure information ﬂows. In 15th International Symposium on Software
Reliability Engineering, pages 198–209, Nov 2004.

[38] A. Meliou, W. Gatterbauer, K. F. Moore, and D. Suciu. The complexity
of causality and responsibility for query answers and non-answers.
PVLDB, 4(1):34–45, 2010.

[39] G. Misherghi and Z. Su. Hdd: Hierarchical delta debugging. In Pro-
ceedings of the 28th International Conference on Software Engineering,
ICSE ’06, pages 142–151, New York, NY, USA, 2006. ACM.

[40] D. G. Murray, F. McSherry, R. Isaacs, M. Isard, P. Barham, and
M. Abadi. Naiad: A timely dataﬂow system.
In Proceedings of
the Twenty-Fourth ACM Symposium on Operating Systems Principles,
SOSP ’13, pages 439–455, New York, NY, USA, 2013. ACM.

[41] J. Newsome and D. Song. Dynamic taint analysis: Automatic detection,
analysis, and signature generation of exploit attacks on commodity
software. In In In Proceedings of the 12th Network and Distributed
Systems Security Symposium. Citeseer, 2005.

[42] S. Roy and D. Suciu. A formal approach to ﬁnding explanations for

database queries. In SIGMOD, pages 1579–1590, 2014.

533

Automated Debugging in Data-Intensive Scalable Computing

SoCC ’17, September 24–27, 2017, Santa Clara, CA, USA

[43] J. Shafer, S. Rixner, and A. L. Cox. The hadoop distributed ﬁlesystem:
Balancing portability and performance. In Performance Analysis of
Systems & Software (ISPASS), 2010 IEEE International Symposium on,
pages 122–133. IEEE, 2010.

[44] J. D. Ullman. Principles of Database and Knowledge-Base Systems:
Volume II: The New Technologies. W. H. Freeman & Co., New York,
NY, USA, 1990.

[45] J. Wang and N. Tang. Towards dependable data repairing with ﬁxing
rules. In Proceedings of the 2014 ACM SIGMOD International Con-
ference on Management of Data, SIGMOD ’14, pages 457–468, New
York, NY, USA, 2014. ACM.

[46] X. Wang, X. L. Dong, and A. Meliou. Data x-ray: A diagnostic tool for
data errors. In Proceedings of the 2015 ACM SIGMOD International
Conference on Management of Data, SIGMOD ’15, pages 1231–1245,
New York, NY, USA, 2015. ACM.

[47] M. Weiser. Program slicing. In Proceedings of the 5th International
Conference on Software Engineering, ICSE ’81, pages 439–449, Piscat-
away, NJ, USA, 1981. IEEE Press.

[48] E. Wu and S. Madden. Scorpion: Explaining away outliers in aggregate

queries. Proc. VLDB Endow., 6(8):553–564, June 2013.

[49] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley,
M. J. Franklin, S. Shenker, and I. Stoica. Resilient distributed datasets:
A fault-tolerant abstraction for in-memory cluster computing. In Pro-
ceedings of the 9th USENIX Conference on Networked Systems Design
and Implementation, NSDI’12, pages 2–2, Berkeley, CA, USA, 2012.
USENIX Association.

[50] A. Zeller. Isolating cause-effect chains from computer programs. In
Proceedings of the 10th ACM SIGSOFT Symposium on Foundations of
Software Engineering, SIGSOFT ’02/FSE-10, pages 1–10, New York,
NY, USA, 2002. ACM.

[51] A. Zeller and R. Hildebrandt. Simplifying and isolating failure-inducing
input. Software Engineering, IEEE Transactions on, 28(2):183–200,
2002.

