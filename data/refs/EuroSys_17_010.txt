[1] T. E. Anderson. The performance of spin lock alternatives
for shared-memory multiprocessors. [EEE Trans. Parallel
Distrib. Syst., 1(1):6-16, January 1990.

[2] Alexander Barkov. ”thrlock_charset global mutex abused
by innodb”. https://bugs.mysql.com/bug. php?id=
42649, 2009.

[3] Christian Bienia and Kai Li. PARSEC 2.0: A new benchmark
suite for chip-multiprocessors. In Proceedings of the 5th Annual Workshop on Modeling, Benchmarking and Simulation,
June 2009.

[4] William J. Bolosky and Michael L. Scott. False sharing and
its effect on shared memory performance. In USENIX Systems on USENIX Experiences with Distributed and Multiprocessor Systems - Volume 4, Sedms’93, pages 3-3, Berkeley,
CA, USA, 1993. USENIX Association.

[5] Clay P. Breshears. Using intel thread profiler for
win32* threads: Philosophy and_ theory. https:
//software.intel.com/en-us/articles/usingintel-thread-profiler-for-win32-threads-—
philosophy-and-theory, February 2011.

[6] Ray Bryant and John Hawkes. Lockmeter: Highlyinformative instrumentation for spin locks in the
linux®kernel. In Proceedings of the 4th Annual Linux
Showcase & Conference - Volume 4, ALS’00, pages 17-17,
Berkeley, CA, USA, 2000. USENIX Association.

[7] Mark Callaghan. “fast mutexes in mysql 5.1 have mutex
contention when calling random()”. https: //bugs .mysql .
com/bug . php? id=38941, 2008.

[8] Guancheng Chen and Per Stenstrom. Critical lock analysis:
Diagnosing critical section bottlenecks in multithreaded ap
plications. In Proceedings of the International Conference
on High Performance Computing, Networking, Storage and
Analysis, SC’ 12, pages 71:1-71:11, Los Alamitos, CA, USA,
2012. IEEE Computer Society Press.

[9] GCC community. built-in functions for memory model
aware atomic operations”. https: //gcc.gnu.org/
onlinedocs/gcc/_005f_005fatomic-Builtins.html,
2015.

[10] Charlie Curtsinger and Emery D. Berger. Coz: Finding code
that counts with causal profiling. In Proceedings of the
25th Symposium on Operating Systems Principles, SOSP ’15,
pages 184-197, New York, NY, USA, 2015. ACM.

[11] Luiz DeRose, Bill Homer, and Dean Johnson. Detecting
application load imbalance on high end massively parallel
systems. In Anne-Marie Kermarrec, Luc Boug, and Thierry
Priol, editors, Euro-Par 2007 Parallel Processing, volume
4641 of Lecture Notes in Computer Science, pages 150-159.
Springer Berlin Heidelberg, 2007.

[12] Luiz DeRose, Bill Homer, Dean Johnson, Steve Kaufmann,
and Heidi Poxon. Cray performance analysis tools. In
Michael Resch, Rainer Keller, Valentin Himmler, Bettina
Krammer, and Alexander Schulz, editors, Tools for High Performance Computing, pages 191-199. Springer Berlin Heidelberg, 2008.

[13] David Dice, Virendra J. Marathe, and Nir Shavit. Lock
cohorting: A general technique for designing numa locks.
In Proceedings of the 17th ACM SIGPLAN Symposium on
Principles and Practice of Parallel Programming, PPoPP "12,
pages 247-256, New York, NY, USA, 2012. ACM.

[14] Pedro C. Diniz and Martin C. Rinard. Lock coarsening: Eliminating lock overhead in automatically parallelized objectbased programs. J. Parallel Distrib. Comput., 49(2):218-244,
March 1998.

[15] Kristof Du Bois, Stijn Eyerman, Jennifer B. Sartor, and
Lieven Eeckhout. Criticality stacks: Identifying critical
threads in parallel programs using synchronization behavior.
In Proceedings of the 40th Annual International Symposium
on Computer Architecture, ISCA ’13, pages 511-522, New
York, NY, USA, 2013. ACM.

[16] S.J. Eggers and T.E. Jeremiassen. Eliminating false sharing.
In International Conference on Parallel Processing, volume I,
pages 377-381, August 1991.

[17] ej-technologies GmbH. Jprofiler: The award-winning all-inone java profiler. http://www.ej-technologies.con/
products/jprofiler/overview.htm1.

[18] David Florian. “continuous and efficient lock profiling for java on multicore architectures”. http:
//waw-public.tem-tsp.eu/~thomas_g/research/
etudiants/theses/david-phd-thesis. pdf, 2015.

[19] Rui Gu, Guoliang Jin, Linhai Song, Linjie Zhu, and Shan Lu.
What change history tells us about thread synchronization. In
Proceedings of the 2015 10th Joint Meeting on Foundations
of Software Engineering, ESEC/FSE 2015, pages 426-438,
New York, NY, USA, 2015. ACM.

[20] Maurice Herlihy and J. Eliot B. Moss. Transactional memory: Architectural support for lock-free data structures. In
Proceedings of the 20th Annual International Symposium
on Computer Architecture, ISCA °93, pages 289-300, New
York, NY, USA, 1993. ACM.

[21] Yongbing Huang, Zehan Cui, Licheng Chen, Wenli Zhang,
Yungang Bao, and Mingyu Chen. Halock: Hardware-assisted
lock contention detection in multithreaded applications. In
Proceedings of the 21st International Conference on Parallel
Architectures and Compilation Techniques, PACT *12, pages
253-262, New York, NY, USA, 2012. ACM.

[22] Intel. Using the rdtsc instruction for performance monitoring. https://www.ccsl.carleton.ca/~jamuir/
rdtscpm1 .pdf, 1997.

[23] Guoliang Jin, Linhai Song, Xiaoming Shi, Joel Scherpelz,
and Shan Lu. Understanding and detecting real-world performance bugs. In Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’12, pages 77-88, New York, NY, USA, 2012.
ACM.

[24] Piotr Zalewski Jinwoo Hwang. Ibm thread and monitor dump analyze for java. https://www.ibm.com/
developerworks/community/groups/service/html1/
communityview?communityUuid=2245aa39-fabc-—
4475-b891-14¢205£7333c.

[25] Milind Kulkarni, Patrick Carribault, Keshav Pingali, Ganesh
Ramanarayanan, Bruce Walter, Kavita Bala, and L. Paul
Chew. Scheduling strategies for optimistic parallel execution
of irregular programs. In Proceedings of the Twentieth Annual Symposium on Parallelism in Algorithms and Architectures, SPAA ’08, pages 217-228, New York, NY, USA, 2008.
ACM.

[26] Ran Liu, Heng Zhang, and Haibo Chen. Scalable readmostly synchronization using passive reader-writer locks. In
Proceedings of the 2014 USENIX Conference on USENIX
Annual Technical Conference, USENIX ATC’ 14, pages 219230, Berkeley, CA, USA, 2014. USENIX Association.

[27] Tongping Liu and Emery D. Berger. Sheriff: precise detection
and automatic mitigation of false sharing. In Proceedings of
the 2011 ACM international conference on Object oriented
programming systems languages and applications, OOPSLA
*11, pages 3-18, New York, NY, USA, 2011. ACM.

[28] Xu Liu, John Mellor-Crummey, and Michael Fagan. A new
approach for performance analysis of openmp programs. In
Proceedings of the 27th International ACM Conference on
International Conference on Supercomputing, ICS *13, pages
69-80, New York, NY, USA, 2013. ACM.

[29] Chi-Keung Luk, Robert Cohn, Robert Muth, Harish Patil,
Artur Klauser, Geoff Lowney, Steven Wallace, Vijay Janapa
Reddi, and Kim Hazelwood. Pin: Building customized program analysis tools with dynamic instrumentation. In Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, PLDI ’05,
pages 190-200, New York, NY, USA, 2005. ACM.

[30] Mecki. ”’when should one use a spinlock instead of mutex?”.
http: //stackoverflow.com/questions/5869825/
when-should-one-use-a-spinlock-instead-of
mutex, 2011.

[31] Wagner Meira, Jr., Thomas J. LeBlanc, and Alexandros Poulos. Waiting time analysis and performance visualization in
carnival. In Proceedings of the SIGMETRICS Symposium on
Parallel and Distributed Tools, SPDT °96, pages 1-10, New
York, NY, USA, 1996. ACM.

[32] John M. Mellor-Crummey and Michael L. Scott. Scalable
reader-writer synchronization for shared-memory multiprocessors. In Proceedings of the Third ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming,
PPOPP ’91, pages 106-113, New York, NY, USA, 1991.
ACM.

[33] Angeles Navarro, Rafael Asenjo, Siham Tabik, and Calin
Cascaval. Analytical modeling of pipeline parallelism. In
Proceedings of the 2009 18th International Conference on
Parallel Architectures and Compilation Techniques, PACT
09, pages 281-290, Washington, DC, USA, 2009. IEEE
Computer Society.

[34] Notlikethat. atomic operations on floats”. http:
//stackoverflow.com/questions/20981007 /atomic—
operations-on-floats, 2014.

[35] Oracle. Hprof: A heap/cpu profiling tool. http:
//docs.oracle.com/javase/7/docs/technotes/
samples/hprof .html1.

[36] Oracle. Solaris Performance Analyzer. http:
//waw.oracle.com/technetwork/serverstorage/solarisstudio/documentation/o11-151perf-analyzer-brief- 1405338. pdf.

[37] James Rapp. “diagnosing lock contention with the
concurrency visualizer’. http: //blogs.msdn.
con/b/visualizeparallel/archive/2010/07/
30/diagnosing-lock-contention-with-theconcurrency-visualizer.aspx, 2010.

[38] Michael L. Scott. Non-blocking timeout in scalable queuebased spin locks. In Proceedings of the Twenty-first Annual
Symposium on Principles of Distributed Computing, PODC
*02, pages 31-40, New York, NY, USA, 2002. ACM.

[39] M. Aater Suleman, Moinuddin K. Qureshi, Khubaib, and
Yale N. Patt. Feedback-directed pipeline parallelism. In
Proceedings of the 19th International Conference on Parallel
Architectures and Compilation Techniques, PACT *10, pages
147-156, New York, NY, USA, 2010. ACM.

[40] Nathan R. Tallent, Laksono Adhianto, and John M. MellorCrummey. Scalable identification of load imbalance in parallel executions using call path profiles. In Proceedings of
the 2010 ACMAEEE International Conference for High Performance Computing, Networking, Storage and Analysis, SC
"10, pages 1-11, Washington, DC, USA, 2010.

[41] Nathan R. Tallent, John M. Mellor-Crummey, and Allan
Porterfield. Analyzing lock contention in multithreaded applications. In Proceedings of the 15th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming,
PPoPP °10, pages 269-280, New York, NY, USA, 2010.
ACM.

[42] Weiwei Xiong, Soyeon Park, Jiaqi Zhang, Yuanyuan Zhou,
and Zhigiang Ma. Ad hoc synchronization considered harmful. In Proceedings of the 9th USENIX Conference on Operating Systems Design and Implementation, OSDY 10, pages
1-8, Berkeley, CA, USA, 2010. USENIX Association.

[43] Tingting Yu and Michael Pradel. Syncprof: Detecting, localizing, and optimizing synchronization bottlenecks, 2016.

[44] Long Zheng, Xiaofei Liao, Bingsheng He, Song Wu, and Hai
Jin. On performance debugging of unnecessary lock contentions on multicore processors: A replay-based approach.
In Proceedings of the 13th Annual IEEE/ACM International
Symposium on Code Generation and Optimization, CGO ’15,
pages 56-67, Washington, DC, USA, 2015. IEEE Computer
Society.