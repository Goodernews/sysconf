[1] S. Borkar and A. A. Chien, “The future of microprocessors,” Communications of the ACM, vol. 54, no. 5, 2011.
[2] J. Shalf, S. S. Dosanjh, and J. Morrison, “Exascale computing
technology challenges,” ser. VECPAR, vol. 6449. Springer, 2010.
[3] J. Torrellas, “How to build a useful thousand-core manycore system?”
International Parallel and Distributed Processing Symposium, 2009.
[4] V. Agarwal et al., “Clock rate versus IPC: the end of the road for
conventional microarchitectures,” ser. ISCA, 2000.
[5] M. Horowitz and W. Dally, “How scaling will change processor
architecture,” ser. ISSCC, 2004.
[6] S. Borkar, “Thousand core chips: a technology perspective,” ser.
DAC, 2007.
[7] K. Sudan et al., “Micro-ignorepages: increasing DRAM efﬁciency
with locality-aware data placement,” ser. ASPLOS, 2010.
[8] K. Datta et al., “Stencil computation optimization and auto-tuning on
state-of-the-art multicore architectures,” ser. SC, 2008.
[9] J. Holewinski, L.-N. Pouchet, and P. Sadayappan, “High-performance
code generation for stencil computations on GPU architectures,” ser.
ICS, 2012.
[10] L. Peng et al., “High-order stencil computations on multicore clusters,” ser. IPDPS, 2009.
[11] A. Vega et al., “Breaking the bandwidth wall in chip multiprocessors,”
ser. SAMOS, 2011.
[12] S. Rixner, “A bandwidth-efﬁcient architecture for a streaming media
processor,” Ph.D. dissertation, MIT, 2001.
[13] B. M. Rogers et al., “Scaling the bandwidth wall: challenges in and
avenues for CMP scaling,” ser. ISCA, 2009.
[14] D. Jevdjic et al., “Unison cache: A scalable and effective die-stacked
dram cache,” ser. MICRO, 2014.
[15] Y.-K. Chen et al., “Convergence of recognition, mining, and synthesis
workloads and its implications,” Proceedings of the IEEE, vol. 96,
no. 5, 2008.
[16] E. Ebrahimi et al., “Parallel application memory scheduling,” ser.
MICRO, 2011.
[17] J. Huh, D. Burger, and S. W. Keckler, “Exploring the design space
of future CMPs,” ser. PACT, 2001.
[18] R. Murphy, “On the effects of memory latency and bandwidth on
supercomputer application performance,” ser. IISWC, Sept 2007.
[19] L. Subramanian et al., “MISE: Providing performance predictability
and improving fairness in shared main memory systems,” ser. HPCA,
2013.
[20] J. Lee, H. Kim, and R. Vuduc, “When prefetching works, when it
doesn’t, and why,” ACM Trans. Archit. Code Optim., vol. 9, no. 1,
2012.
[21] S. Byna, Y. Chen, and X.-H. Sun, “A taxonomy of data prefetching
mechanisms,” ser. I-SPAN, May 2008.
[22] A. Flores, J. Aragon, and M. Acacio, “Energy-efﬁcient hardware
prefetching for CMPs using heterogeneous interconnects,” ser. PDP,
Feb 2010.
[23] J. Meng, J. W. Sheaffer, and K. Skadron, “Exploiting inter-thread
temporal locality for chip multithreading,” ser. IPDPS, April 2010.
[24] J. Weinberg et al., “Quantifying locality in the memory access
patterns of HPC applications,” ser. SC, 2005.
[25] A. Bhattacharjee, D. Lustig, and M. Martonosi, “Shared last-level
TLBs for chip multiprocessors,” ser. HPCA, 2011.
[26] J. W. C. Fu, J. H. Patel, and B. L. Janssens, “Stride directed
prefetching in scalar processors,” ser. MICRO, 1992.
[27] G. Michelogiannakis et al., “Collective memory transfers for multicore chips,” ser. ICS, 2014.
[28] A. N. Udipi et al., “Rethinking DRAM design and organization for
energy-constrained multi-cores,” ser. ISCA, 2010.
[29] S. Rixner et al., “Memory access scheduling,” ser. ISCA, 2000.
[30] J. H. Ahn et al., “Future scaling of processor-memory interfaces,”
ser. SC, 2009.
[31] D. T. Wang, “Memory DRAM memory systems: performance analysis and a high performance, power-constrained DRAM scheduling
algorithm,” Ph.D. dissertation, University of Maryland, 2005.
[32] S. Somogyi et al., “Spatial memory streaming,” ser. ISCA ’06, 2006.
[33] K. J. Nesbit and J. E. Smith, “Data cache prefetching using a global
history buffer,” ser. HPCA, 2004.
[34] S. M. F. Rahman, Q. Yi, and A. Qasem, “Understanding stencil code
performance on multicore architectures,” ser. CF, 2011.
[35] G. L. Yuan, A. Bakhoda, and T. M. Aamodt, “Complexity effective
memory access scheduling for many-core accelerator architectures,”
ser. MICRO, 2009.
[36] A. Mazouz, S.-A.-A. Touati, and D. Barthou, “Study of variations
of native program execution times on multi-core architectures,” ser.
CISIS, 2010.
[37] D. Xu, C. Wu, and P.-C. Yew, “On mitigating memory bandwidth
contention through bandwidth-aware scheduling,” ser. PACT, 2010.
[38] Y. Ishii, M. Inaba, and K. Hiraki, “Uniﬁed memory optimizing
architecture: memory subsystem control with a uniﬁed predictor,”
ser. ICS, 2012.
[39] M. Kandemir, Y. Zhang, and O. Ozturk, “Adaptive prefetching for
shared cache based chip multiprocessors,” ser. DATE, 2009.
[40] S. Subha, “A set associative cache architecture,” ser. ITNG, 2010.
[41] T. Henretty et al., “Data layout transformation for stencil computations on short-vector SIMD architectures,” ser. CC/ETAPS, 2011.
[42] N. Binkert et al., “The Gem5 simulator,” SIGARCH Comput. Archit.
News, vol. 39, no. 2, 2011.
[43] C. Bienia, “Benchmarking modern multiprocessors,” Ph.D. dissertation, Princeton University, January 2011.
[44] S. Che et al., “Rodinia: A benchmark suite for heterogeneous
computing,” ser. IISWC, 2009.
[45] J. A. Stratton et al., “Parboil: A revised benchmark suite for scientiﬁc
and commercial throughput computing,” University of Illinois at
Urbana-Champaign, Urbana, Tech. Rep. IMPACT-12-01, Mar. 2012.
[46] H. Luo, X. Xiang, and C. Ding, “Characterizing active data sharing
in threaded applications using shared footprint,” 2013.
[47] M. Dimitrov and H. Zhou, “Combining local and global history for
high performance data prefetching,” 2009.
[48] M. Ferdman, S. Somogyi, and B. Falsaﬁ, “Spatial memory streaming
with rotated patterns,” in In 1st JILP Data Prefetching Championship,
2009.
[49] S. Li et al., “CACTI-P: Architecture-level modeling for SRAM-based
structures with advanced leakage reduction techniques,” ser. ICCAD,
2011.
[50] R. Komuravelli, S. V. Adve, and C.-T. Chou, “Revisiting the complexity of hardware cache coherence and some implications,” ACM
Trans. Archit. Code Optim., vol. 11, no. 4, 2014.
[51] S. Khan et al., “Improving cache performance by exploiting readwrite disparity,” ser. HPCA, 2014.
[52] S. Ghose, H. Lee, and J. F. Martı́nez, “Improving memory scheduling
via processor-side load criticality information,” ser. ISCA, 2013.
[53] T. Sherwood, S. Sair, and B. Calder, “Predictor-directed stream
buffers,” ser. MICRO, 2000.
[54] C. F. Chen et al., “Accurate and complexity-effective spatial pattern
prediction,” ser. HPCA ’04, 2004.
[55] D. Joseph and D. Grunwald, “Prefetching using markov predictors,”
ser. ISCA ’97, 1997.
[56] A. Fuchs et al., “Loop-aware memory prefetching using code block
working sets,” ser. MICRO, 2014.
[57] M. Shevgoor et al., “Efﬁciently prefetching complex address patterns,” ser. MICRO, 2015.
[58] S. Pugsley et al., “Sandbox prefetching: Safe run-time evaluation of
aggressive prefetchers,” ser. HPCA, Feb 2014.

[59] A. Jain and C. Lin, “Linearizing irregular memory accesses for
improved correlated prefetching,” ser. MICRO, 2013.
[60] X. Yu et al., “IMP: Indirect memory prefetcher,” ser. MICRO, 2015.
[61] R. Cooksey, S. Jourdan, and D. Grunwald, “A stateless, contentdirected data prefetching mechanism,” ser. ASPLOS, 2002.
[62] I. Hur and C. Lin, “Memory prefetching using adaptive stream
detection,” ser. MICRO, 2006.
[63] R. Panda et al., “Prefetching techniques for near-memory throughput
processors,” ser. ICS, 2016.
[64] A. Jog et al., “OWL: Cooperative thread array aware scheduling
techniques for improving GPGPU performance,” ser. ASPLOS, 2013.
[65] L. M. Ramos et al., “Multi-level adaptive prefetching based on performance gradient tracking,” Journal of Instruction-Level Parallelism,
vol. 13, 2011.
[66] J. F. Cantin, M. H. Lipasti, and J. E. Smith, “Stealth prefetching,”
ser. ASPLOS, 2006.
[67] K. Nesbit, A. Dhodapkar, and J. Smith, “AC/DC: an adaptive data
cache prefetcher,” ser. PACT, 2004.
[68] Z. Hu, M. Martonosi, and S. Kaxiras, “TCP: Tag correlating prefetchers,” ser. HPCA, 2003.
[69] A. Alameldeen and D. Wood, “Interactions between compression and
prefetching in chip multiprocessors,” ser. HPCA, Feb 2007.
[70] C.-J. Wu et al., “PACMan: Prefetch-aware cache management for
high performance caching,” ser. MICRO, 2011.
[71] A. Bhattacharjee and M. Martonosi, “Inter-core cooperative TLB for
chip multiprocessors,” ser. ASPLOS, 2010.
[72] S. W. Son et al., “A compiler-directed data prefetching scheme for
chip multiprocessors,” ser. PPoPP, 2009.
[73] Z. Wang et al., “Guided region prefetching: A cooperative hardware/software approach,” ser. ISCA, 2003.
[74] V. Papaefstathiou et al., “Prefetching and cache management using
task lifetimes,” ser. ICS, 2013.
[75] V. Jimenez et al., “Increasing multicore system efﬁciency through
intelligent bandwidth shifting,” ser. HPCA, Feb 2015.
[76] L. Alvarez et al., “Runtime-guided management of scratchpad memories in multicore architectures,” ser. PACT, 2015.
[77] M. Manivannan et al., “RADAR: Runtime-assisted dead region
management for last-level caches,” ser. HPCA, 2016.
[78] S. Ainsworth and T. M. Jones, “Graph prefetching using data structure
knowledge,” ser. ICS, 2016.
[79] D. Zucker, R. Lee, and M. Flynn, “Hardware and software cache
prefetching techniques for MPEG benchmarks,” Circuits and Systems
for Video Technology, IEEE Transactions on, vol. 10, no. 5, Aug
2000.
[80] S. Saidi et al., “Optimizing explicit data transfers for data parallel
applications on the cell architecture,” ACM Trans. Archit. Code
Optim., vol. 8, no. 4, Jan. 2012.
[81] S. Mehta et al., “Multi-stage coordinated prefetching for present-day
processors,” ser. ICS, 2014.
[82] A. Sethia et al., “APOGEE: Adaptive prefetching on GPUs for energy
efﬁciency,” ser. PACT, 2013.
[83] J. Lee et al., “Many-thread aware prefetching mechanisms for
GPGPU applications,” ser. MICRO, Dec 2010.
[84] A. Jog et al., “Orchestrated scheduling and prefetching for GPGPUs,”
ser. ISCA, 2013.
[85] L. Soares, D. Tam, and M. Stumm, “Reducing the harmful effects
of last-level cache polluters with an os-level, software-only pollute
buffer,” ser. MICRO, 2008.
[86] N. Enright Jerger, E. Hill, and M. Lipasti, “Friendly ﬁre: understanding the effects of multiprocessor prefetches,” ser. ISPASS, 2006.
[87] F. Liu and Y. Solihin, “Studying the impact of hardware prefetching
and bandwidth partitioning in chip-multiprocessors,” ser. SIGMETRICS, 2011.
[88] M. H. Lipasti, C. B. Wilkerson, and J. P. Shen, “Value locality and
load value prediction,” SIGOPS Oper. Syst. Rev., vol. 30, no. 5, 1996.
[89] J. S. Miguel, M. Badr, and N. E. Jerger, “Load value approximation,”
ser. MICRO, 2014.
[90] I. Atta et al., “Self-contained, accurate precomputation prefetching,”
ser. MICRO, 2015.
[91] M. Müller, D. Charypar, and M. Gross, “Particle-based ﬂuid simulation for interactive applications,” ser. SCA, 2003.