[1] R. Andonov, S. Balev, S. Rajopadhye, and N. Yanev. 2001. Optimal Semi-oblique
Tiling. In Proceedings of the Thirteenth Annual ACM Symposium on Parallel
Algorithms and Architectures (SPAA ’01). 153–162.
[2] R. Andonov, S. Balev, S. Rajopadhye, and N. Yanev. 2003. Optimal semi-oblique
tiling. IEEE Transactions on Parallel and Distributed Systems 14, 9 (2003), 944–960.
[3] V. Bandishti, I. Pananilath, and U. Bondhugula. 2012. Tiling stencil computations
to maximize parallelism (SC ’12). 1–11.
[4] Muthu Manikandan Baskaran, Albert Hartono, Sanket Tavarageri, Thomas Henretty, J. Ramanujam, and P. Sadayappan. 2010. Parameterized Tiling Revisited
(CGO ’10). 200–209.
[5] Ian J. Bertolacci, Catherine Olschanowsky, Ben Harshbarger, Bradford L. Chamberlain, David G. Wonnacott, and Michelle Mills Strout. 2015. Parameterized
Diamond Tiling for Stencil Computations with Chapel Parallel Iterators (ICS ’15).
197–206.
[6] W. Bielecki and P. Skotnicki. 2015. Concurrent Start Tiling of Stencil Computations based on the Transitive Closure of a Data Dependence Graph. Przeglad
Elektrotechniczny R. 91, nr 11 (2015), 167–170.
[7] Uday Bondhugula, Albert Hartono, J. Ramanujam, and P. Sadayappan. 2008. A
Practical Automatic Polyhedral Parallelizer and Locality Optimizer (PLDI ’08).
101–113.
[8] M. Christen, O. Schenk, and H. Burkhart. 2011. PATUS: A Code Generation and
Autotuning Framework for Parallel Iterative Stencil Computations on Modern
Microarchitectures (IPDPS ’11). 676–687.
[9] M. Christen, O. Schenk, E. Neufeld, P. Messmer, and H. Burkhart. 2009. Parallel
data-locality aware stencil computations on modern micro-architectures (IPDPS
’09). 1–10.
[10] Hui-Min Cui, Lei Wang, Dong-Rui Fan, and Xiao-Bing Feng. 2010. Landing
Stencil Code on Godson-T. J. Comput. Sci. Technol. 25, 4 (July 2010), 886–894.
[11] Kaushik Datta, Mark Murphy, Vasily Volkov, Samuel Williams, Jonathan Carter,
Leonid Oliker, David Patterson, John Shalf, and Katherine Yelick. 2008. Stencil Computation Optimization and Auto-tuning on State-of-the-art Multicore
Architectures (SC ’08). Article 4, 12 pages.
[12] Chris Ding and Yun He. 2001. A Ghost Cell Expansion Method for Reducing
Communications in Solving PDE Problems (SC ’01). 50–50.
[13] Matteo Frigo and Volker Strumpen. 2005. Cache oblivious stencil computations
(ICS ’05). 361–366.
[14] Matteo Frigo and Volker Strumpen. 2006. The cache complexity of multithreaded
cache oblivious algorithms (SPAA ’06). 271–280.
[15] Kazushige Goto and Robert A. van de Geijn. 2008. Anatomy of high-performance
matrix multiplication. ACM Trans. Math. Softw. (May 2008), 1–25.
[16] Tobias Grosser, Albert Cohen, Justin Holewinski, P. Sadayappan, and Sven Verdoolaege. 2014. Hybrid Hexagonal/Classical Tiling for GPUs (CGO ’14). 66–75.
[17] Tobias Grosser, Albert Cohen, Paul H. J. Kelly, J. Ramanujam, P. Sadayappan,
and Sven Verdoolaege. 2013. Split Tiling for GPUs: Automatic Parallelization
Using Trapezoidal Tiles (GPGPU-6). 24–31.
[18] Tobias Grosser, Sven Verdoolaege, Albert Cohen, and P. Sadayappan. 2014. The
Relation Between Diamond Tiling and Hexagonal Tiling. Parallel Processing
Letters 24, 03 (2014).
[19] Tobias Gysi, Tobias Grosser, and Torsten Hoefler. 2015. MODESTO: Data-centric
Analytic Optimization of Complex Stencil Programs on Heterogeneous Architectures (ICS ’15). 177–186.
[20] Albert Hartono, Muthu Manikandan Baskaran, Cédric Bastoul, Albert Cohen,
Sriram Krishnamoorthy, Boyana Norris, J. Ramanujam, and P. Sadayappan. 2009.
Parametric Multi-level Tiling of Imperfectly Nested Loops (ICS ’09). 147–157.
[21] A. Hartono, M. M. Baskaran, J. Ramanujam, and P. Sadayappan. 2010. DynTile:
Parametric tiled loop generation for parallel execution on multicore processors
(IPDPS ’10). 1–12.
[22] Tom Henretty, Richard Veras, Franz Franchetti, Louis-Noël Pouchet, J. Ramanujam, and P. Sadayappan. 2013. A Stencil Compiler for Short-vector SIMD Architectures (ICS ’13). 13–24.
[23] S. Heybrock, B. JoÃş, D. D. Kalamkar, M. Smelyanskiy, K. Vaidyanathan, T. Wettig,
and P. Dubey. 2014. Lattice QCD with Domain Decomposition on Intel Xeon Phi
Co-Processors (SC ’14). 69–80.
[24] Justin Holewinski, Louis-Noël Pouchet, and P. Sadayappan. 2012. Highperformance Code Generation for Stencil Computations on GPU Architectures
(ICS ’12). 311–320.
[25] Guillaume Iooss, Sanjay Rajopadhye, Christophe Alias, and Yun Zou. 2015. Monoparametric Tiling is a Polyhedral Transformation. Research Report.
[26] F. Irigoin and R. Triolet. 1988. Supernode Partitioning (POPL ’88). 319–329.
[27] Guohua Jin, John Mellor-Crummey, and Robert Fowler. 2001. Increasing Temporal Locality with Skewing and Recursive Blocking (SC ’01). 43–43.
[28] Tian Jin, Nirmal Prajapati, Waruna Ranasinghe, Guillaume Iooss, Yun Zou, Sanjay
Rajopadhye, and David G. Wonnacott. 2016. Hybrid Static/Dynamic Schedules
for Tiled Polyhedral Programs. CoRR abs/1610.07236 (2016).
[29] S. Kamil, C. Chan, L. Oliker, J. Shalf, and S. Williams. 2010. An auto-tuning
framework for parallel multicore stencil computations (IPDPS ’10). 1–12.
[30] Shoaib Kamil, Kaushik Datta, Samuel Williams, Leonid Oliker, John Shalf, and
Katherine Yelick. 2006. Implicit and Explicit Optimizations for Stencil Computations (MSPC ’06). 51–60.
[31] DaeGon Kim, Lakshminarayanan Renganarayanan, Dave Rostron, Sanjay Rajopadhye, and Michelle Mills Strout. 2007. Multi-level Tiling: M for the Price of
One (SC ’07). Article 51, 12 pages.
[32] Sriram Krishnamoorthy, Muthu Baskaran, Uday Bondhugula, J. Ramanujam,
Atanas Rountev, and P Sadayappan. 2007. Effective Automatic Parallelization of
Stencil Computations (PLDI ’07). 235–244.
[33] Marcin Krotkiewski and Marcin Dabrowski. 2013. Efficient 3D Stencil Computations Using CUDA. Parallel Comput. 39, 10 (Oct. 2013), 533–548.
[34] Monica D. Lam, Edward E. Rothberg, and Michael E. Wolf. 1991. The Cache
Performance and Optimizations of Blocked Algorithms (ASPLOS IV). 63–74.
[35] Yulong Luo, Guangming Tan, Zeyao Mo, and Ninghui Sun. 2015. FAST: A Fast
Stencil Autotuning Framework Based On An Optimal-solution Space Model (ICS
’15). 187–196.
[36] Thibaut Lutz, Christian Fensch, and Murray Cole. 2013. PARTANS: An Autotuning Framework for Stencil Computation on multi-GPU Systems. ACM Trans.
Archit. Code Optim. 9, 4, Article 59 (Jan. 2013), 24 pages.
[37] T. Malas, G. Hager, H. Ltaief, H. Stengel, G. Wellein, and D. Keyes. 2015. MulticoreOptimized Wavefront Diamond Blocking for Optimizing Stencil Updates. SIAM
Journal on Scientific Computing 37, 4 (2015), C439–C464.
[38] Tareq M. Malas, Georg Hager, Hatem Ltaief, and David E. Keyes. 2015. Multidimensional intra-tile parallelization for memory-starved stencil computations.
CoRR abs/1510.04995 (2015). http://arxiv.org/abs/1510.04995
[39] Azamat Mametjanov, Daniel Lowell, Ching-Chen Ma, and Boyana Norris. 2012.
Autotuning Stencil-Based Computations on GPUs (CLUSTER ’12). 266–274.
[40] N. Maruyama, T. Nomura, K. Sato, and S. Matsuoka. 2011. Physis: An implicitly parallel programming model for stencil computations on large-scale GPUaccelerated supercomputers (SC ’11). 1–12.
[41] A. C. McKellar and E. G. Coffman, Jr. 1969. Organizing Matrices and Matrix
Operations for Paged Memory Systems. Commun. ACM 12, 3 (1969), 153–165.
[42] Jiayuan Meng and Kevin Skadron. 2009. Performance modeling and automatic
ghost zone optimization for iterative stencil loops on GPUs (ICS ’09). 256–265.
[43] A. Nguyen, N. Satish, J. Chhugani, C. Kim, and P. Dubey. 2010. 3.5-D Blocking
Optimization for Stencil Computations on Modern CPUs and GPUs (SC ’10).
1–13.
[44] Catherine Olschanowsky, Michelle Mills Strout, Stephen Guzik, John Loffeld,
and Jeffrey Hittinger. 2014. A Study on Balancing Parallelism, Data Locality, and
Recomputation in Existing PDE Solvers (SC ’14). 793–804.
[45] Irshad Pananilath, Aravind Acharya, Vinay Vasista, and Uday Bondhugula. 2015.
An Optimizing Code Generator for a Class of Lattice-Boltzmann Computations.
ACM Trans. Archit. Code Optim. 12, 2, Article 14 (May 2015), 23 pages.
[46] E. H. Phillips and M. Fatica. 2010. Implementing the Himeno benchmark with
CUDA on GPU clusters (IPDPS ’10). 1–10.
[47] Manuel Prieto, Ignacio M. Llorente, and Francisco Tirado. 2000. Data Locality
Exploitation in the Decomposition of Regular Domain Problems. IEEE Trans.
Parallel Distrib. Syst. 11, 11 (Nov. 2000), 1141–1150.
[48] Fabrice Rastello and Thierry Dauxois. 2002. Efficient Tiling for an ODE Discrete Integration Program: Redundant Tasks Instead of Trapezoidal Shaped-Tiles
(IPDPS ’02). 138–.
[49] Prashant Singh Rawat, Changwan Hong, Mahesh Ravishankar, Vinod Grover,
Louis-Noël Pouchet, and P. Sadayappan. Effective Resource Management for
Enhancing Performance of 2D and 3D Stencils on GPUs (GPGPU ’16). 92–102.
[50] Lakshminarayanan Renganarayanan, DaeGon Kim, Sanjay Rajopadhye, and
Michelle Mills Strout. Parameterized Tiled Loops for Free (PLDI ’07). 405–414.
[51] Lakshminarayanan Renganarayanan, Daegon Kim, Michelle Mills Strout, and
Sanjay Rajopadhye. 2012. Parameterized Loop Tiling. ACM Trans. Program. Lang.
Syst. 34, 1, Article 3 (May 2012), 41 pages.
[52] Gabriel Rivera and Chau-Wen Tseng. 2000. Tiling Optimizations for 3D Scientific
Computations (SC ’00). Article 32.
[53] Rodrigo C. O. Rocha, Alyson D. Pereira, Luiz Ramos, and LuÃŋs F. W. GÃşes.
2017. TOAST: Automatic tiling for iterative stencil computations on GPUs.
Concurrency and Computation: Practice and Experience (2017).
[54] Yonghong Song and Zhiyuan Li. 1999. New Tiling Techniques to Improve Cache
Temporal Locality (PLDI ’99). 215–228.
[55] Robert Strzodka, Mohammed Shaheen, Dawid Pajak, and Hans-Peter Seidel. 2010.
Cache oblivious parallelograms in iterative stencil computations (ICS ’01). ACM,
49–59.
[56] Robert Strzodka, Mohammed Shaheen, Dawid Pajak, and Hans-Peter Seidel.
2011. Cache Accurate Time Skewing in Iterative Stencil Computations (ICPP
’11). 571–581.
[57] Yuan Tang, Rezaul Alam Chowdhury, Bradley C. Kuszmaul, Chi-Keung Luk, and
Charles E. Leiserson. 2011. The Pochoir Stencil Compiler (SPAA ’11). 117–128.
[58] Yuan Tang, Ronghui You, Haibin Kan, Jesmin Jahan Tithi, Pramod Ganapathi,
and Rezaul A. Chowdhury. 2014. Improving Parallelism of Recursive Stencil
Computations Without Sacrificing Cache Performance (WOSC ’14). 1–7.
[59] Yuan Tang, Ronghui You, Haibin Kan, Jesmin Jahan Tithi, Pramod Ganapathi,
and Rezaul A. Chowdhury. 2015. Cache-oblivious Wavefront: Improving Parallelism of Recursive Dynamic Programming Algorithms Without Losing Cacheefficiency (PPoPP 2015). 205–214.
[60] Didem Unat, Xing Cai, and Scott B. Baden. 2011. Mint: Realizing CUDA Performance in 3D Stencil Methods with Annotated C (ICS ’11). 214–224.
[61] Sundaresan Venkatasubramanian, Richard W. Vuduc, and none none. 2009. Tuned
and Wildly Asynchronous Stencil Kernels for Hybrid CPU/GPU Systems (ICS
’09). 244–255.
[62] Qian Wang, Xianyi Zhang, Yunquan Zhang, and Qing Yi. 2013. AUGEM: Automatically Generate High Performance Dense Linear Algebra Kernels on x86
CPUs (SC ’13). Article 25, 12 pages.
[63] R. Clint Whaley, Antoine Petitet, and Jack J. Dongarra. 2001. Automated empirical
optimizations of software and the ATLAS project. Parallel Comput. 27, 12 (2001),
3 – 35. New Trends in High Performance Computing.
[64] Samuel Williams, Leonid Oliker, Jonathan Carter, and John Shalf. 2011. Extracting
Ultra-scale Lattice Boltzmann Performance via Hierarchical and Distributed
Auto-tuning (SC ’11). Article 55, 12 pages.
[65] Michael E. Wolf and Monica S. Lam. 1991. A Data Locality Optimizing Algorithm
(PLDI ’91). 30–44.
[66] M. Wolfe. 1989. More Iteration Space Tiling (Supercomputing ’89). 655–664.
[67] D. Wonnacott. 2000. Using time skewing to eliminate idle time due to memory
bandwidth and network limitations (IPDPS ’00). 171–180.
[68] David Wonnacott. 2002. Achieving Scalable Locality with Time Skewing. Int. J.
Parallel Program. 30, 3 (June 2002), 181–221.
[69] David G Wonnacott and Michelle Mills Strout. 2013. On the scalability of loop
tiling techniques. IMPACT 2013 (2013).
[70] Zhang Xianyi, Wang Qian, and Zhang Yunquan. Model-driven Level 3 BLAS
Performance Optimization on Loongson 3A Processor (ICPADS ’12). 684–691.
[71] C. Yount and A. Duran. Effective Use of Large High-Bandwidth Memory Caches
in HPC Stencil Computation via Temporal Wave-Front Tiling. In (PMBS ’16).
65–75.
[72] Yongpeng Zhang and Frank Mueller. 2012. Auto-generation and Auto-tuning of
3D Stencil Codes on GPU Clusters (CGO ’12). 155–164.
[73] Xing Zhou, Jean-Pierre Giacalone, María Jesús Garzarán, Robert H. Kuhn, Yang
Ni, and David Padua. 2012. Hierarchical Overlapped Tiling (CGO ’12). 207–218.
