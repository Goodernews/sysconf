[1] Intel Corporation and Micron. Intel and Micron Produce
Breakthrough
Memory
Technology.
http://newsroom.
intel.com/community/intel newsroom/blog/2015/07/28/
intel-and-micron-produce-breakthrough-memory-technology.
[2] B. C. Lee, E. Ipek, O. Mutlu, and D. Burger, “Architecting Phase
Change Memory As a Scalable Dram Alternative,” in ISCA 2009.
[3] E. Kultursay, M. T. Kandemir, A. Sivasubramaniam, and O. Mutlu,
“Evaluating STT-RAM as an energy-efficient main memory alternative,” in ISPASS 2013.
[4] C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and P. Schwarz,
“ARIES: A Transaction Recovery Method Supporting Finegranularity Locking and Partial Rollbacks Using Write-ahead Logging,” ACM Trans. Database Syst., vol. 17, no. 1, 1992.
[5] D. R. Chakrabarti, H.-J. Boehm, and K. Bhandari, “Atlas: Leveraging
locks for non-volatile memory consistency,” in OOPSLA 2014.
[6] A. Chatzistergiou, M. Cintra, and S. D. Viglas, “Rewind: Recovery
write-ahead system for in-memory non-volatile data-structures,” Proceedings of VLDB Endowment, vol. 8, no. 5, 2015.
[7] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp, R. K. Gupta,
R. Jhala, and S. Swanson, “Nv-heaps: Making persistent objects fast
and safe with next-generation, non-volatile memories,” in ASPLOS
2011.
[8] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne: Lightweight
persistent memory,” in ASPLOS 2011.
[9] X. Wu and A. L. N. Reddy, “Scmfs: A file system for storage class
memory,” in SC 2011.
[10] S. R. Dulloor, S. Kumar, A. Keshavamurthy, P. Lantz, D. Reddy,
R. Sankaran, and J. Jackson, “System software for persistent memory,” in EuroSys 2014.
[11] Intel Corporation. Persistent Memory Programming. http://pmem.io/.
[12] ——, Intel R Architecture Instruction Set Extensions Programming
Reference.
[13] J. Gray, P. McJones, M. Blasgen, B. Lindsay, R. Lorie, T. Price,
F. Putzolu, and I. Traiger, “The Recovery Manager of the System R
Database Manager,” ACM Comput. Surv., vol. 13, no. 2, 1981.

[14] K. Doshi, E. Giles, and P. Varman, “Atomic Persistence for SCM
with a Non-intrusive Backend Controller,” in HPCA 2016.
[15] K. E. Moore, J. Bobba, M. J. Moravan, M. D. Hill, and D. A. Wood,
“LogTM: log-based transactional memory,” in HPCA 2006.
[16] Intel Corporation. Platform brief Intel Xeon Processor C5500/C3500
Series and Intel 3420 Chipset. http://download.intel.com/design/
intarch/prodbref/323306.pdf.
[17] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt, A. Saidi,
A. Basu, J. Hestness, D. R. Hower, T. Krishna, S. Sardashti, R. Sen,
K. Sewell, M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood, “The
Gem5 Simulator,” SIGARCH Comput. Archit. News, vol. 39, no. 2,
2011.
[18] N. Agarwal, T. Krishna, L.-S. Peh, and N. Jha, “GARNET: A detailed
on-chip network model inside a full-system simulator,” in ISPASS
2009.
[19] S. Pelley, P. M. Chen, and T. F. Wenisch, “Memory persistency,” in
ISCA 2014.
[20] X. Dong, N. Muralimanohar, N. Jouppi, R. Kaufmann, and Y. Xie,
“Leveraging 3D PCRAM Technologies to Reduce Checkpoint Overhead for Future Exascale Systems,” in SC 2009.
[21] A. Joshi, V. Nagarajan, M. Cintra, and S. Viglas, “Efficient Persist
Barriers for Multicores,” in MICRO 2015.
[22] J. Ren, J. Zhao, S. Khan, J. Choi, Y. Wu, and O. Mutlu, “ThyNVM:
Enabling Software-transparent Crash Consistency in Persistent Memory Systems,” in MICRO 2015.
[23] S. Pelley, T. F. Wenisch, B. T. Gold, and B. Bridge, “Storage Management in the NVRAM Era,” Proceedings of VLDB Endowment,
vol. 7, no. 2, 2013.
[24] T. Wang and R. Johnson, “Scalable Logging Through Emerging Nonvolatile Memory,” Proc. VLDB Endow., vol. 7, no. 10, 2014.
[25] J. Huang, K. Schwan, and M. K. Qureshi, “NVRAM-aware Logging
in Transaction Systems,” Proc. VLDB Endow., vol. 8, no. 4, 2014.
[26] J. DeBrabant, J. Arulraj, A. Pavlo, M. Stonebraker, S. Zdonik, and
S. Dulloor, “A prolegomenon on oltp database systems for nonvolatile memory,” in ADMS@VLDB, 2014.
[27] E. Giles, K. Doshi, and P. Varman, “Bridging the programming gap
between persistent and volatile memory using WrAP,” in CF 2013.
[28] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, B. Lee, D. Burger,
and D. Coetzee, “Better I/O Through Byte-addressable, Persistent
Memory,” in SOSP 2009.
[29] Y. Lu, J. Shu, and L. Sun, “Blurred Persistence: Efficient Transactions
in Persistent Memory,” Trans. Storage, vol. 12, no. 1, 2016.
[30] A. Kolli, J. Rosen, S. Diestelhorst, A. Saidi, S. Pelley, S. Liu, P. M.
Chen, and T. F. Wenisch, “Delegated Persist Ordering,” in MICRO
2016.
[31] Y. Lu, J. Shu, L. Sun, and O. Mutlu, “Loose-ordering consistency
for persistent memory,” in ICCD 2014.
[32] J. Zhao, S. Li, D. H. Yoon, Y. Xie, and N. P. Jouppi, “Kiln: Closing
the Performance Gap Between Systems With and Without Persistence
Support,” in MICRO 2013.
[33] J. Zhao, O. Mutlu, and Y. Xie, “FIRM: Fair and High-Performance
Memory Control for Persistent Memory Systems,” in MICRO 2014.
[34] R.-S. Liu, D.-Y. Shen, C.-L. Yang, S.-C. Yu, and C.-Y. M. Wang,
“NVM Duet: Unified Working Memory and Persistent Store Architecture,” in ASPLOS 2014.
[35] L. Sun, Y. Lu, and J. Shu, “DP2: Reducing Transaction Overhead
with Differential and Dual Persistency in Persistent Memory,” in CF
2015.
[36] A. Kolli, S. Pelley, A. Saidi, P. M. Chen, and T. F. Wenisch, “HighPerformance Transactions for Persistent Memories,” in ASPLOS
2016.
[37] J. Meza, Y. Luo, S. Khan, J. Zhao, Y. Xie, and O. Mutlu, “A Case
for Efficient Hardware-Software Cooperative Management of Storage
and Memory,” in WEED 2013.