[1] J. Adamek and V. Trnkova. Automata and Algebras in Categories. Kluwer Academic Publishers, 1990.

[2] A. V. Aho, M. S. Lam, R. Sethi, and J. D. Ullman. Compilers:
Principles, Techniques, and Tools (2Nd Edition). AddisonWesley, Boston, MA, USA, 2006.

[3] K. Ali and O. Lhoték. Averroes: Whole-program analysis
without the whole program. ECOOP, pages 378-400, 2013.

[4] L. Andersen. Program analysis and specialization for the
C programming language. PhD thesis, DIKU, University of
Copenhagen, 1994.

[5] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. FlowDroid: Precise
context, flow, field, object-sensitive and lifecycle-aware taint
analysis for Android apps. PLDI, pages 259-269, 2014.

[6] S. Blackshear, B.-Y. E. Chang, and M. Sridharan. Selective
control-flow abstraction via jumping. OOPSLA, pages 163182, 2015.

[7] S. Blackshear, A. Gendreau, and B.-Y. E. Chang. Droidel:
A general approach to Android framework modeling. SOAP,
pages 19-25, 2015.

[8] E. Bodden, A. Sewe, J. Sinschek, H. Oueslati, and M. Mezini.
Taming reflection: Aiding static analysis in the presence of
reflection and custom class loaders. ICSE, pages 241-250,
2011.

[9] M. Bravenboer and Y. Smaragdakis. Strictly declarative specification of sophisticated points-to analyses. OOPSLA, pages
243-262, 2009.

[10] Chord. A program analysis platform for Java. http://www.
cis.upenn. edu/~mhnaik/chord.html.

[11] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.
Introduction to Algorithms. The MIT Press, 2009.

[12] DaCapo. Java benchmark. http: //www.dacapobench. org.
[13] J. Dean, D. Grove, and C. Chambers. Optimization of
object-oriented programs using static class hierarchy analysis.
ECOOP, pages 77-101, 1995.

[14] DOOP. A sophisticated framework for Java pointer analysis.
http: //doop.program- analysis. org.

[15] Y. Feng, X. Wang, I. Dillig, and T. Dillig. Bottom-up contextsensitive pointer analysis for Java. APLAS, pages 465-484,
2015.

[16] S. J. Fink, E. Yahav, N. Dor, G. Ramalingam, and E. Geay.
Effective typestate verification in the presence of aliasing.
ACM Trans. Softw. Eng. Methodol., 17(2), 2008.

[17] M. Hind. Pointer analysis: Haven’t we solved this problem
yet? PASTE, pages 54-61, 2001.

[18] J. E. Hopcroft and R. M. Karp. A linear algorithm for testing
equivalence of finite automata. Technical Report 71-114,
Cornell University, 1971.

[19] V. Kanvar and U. P. Khedker. Heap abstractions for static
analysis. ACM Comput. Surv., 49(2):29:1-29:47, 2016.

[20] G. Kastrinis and Y. Smaragdakis. Hybrid context-sensitivity
for points-to analysis. PLDI, pages 423-434, 2013.

[21] O. Lhoték and L. Hendren. Scaling Java points-to analysis
using Spark. CC, pages 153-169, 2003.

[22] O. Lhotak and L. Hendren. Context-sensitive points-to analysis: is it worth it? CC, pages 47-64, 2006.

[23] O. Lhotak and L. Hendren. Evaluating the benefits of contextsensitive points-to analysis using a bdd-based implementation. ACM TOSEM., 18(1):3:1-3:53, 2008.

[24] Y. Li, T. Tan, Y. Sui, and J. Xue. Self-inferencing reflection
resolution for Java. ECOOP, pages 27-53, 2014.

[25] Y. Li, T. Tan, and J. Xue. Effective soundness-guided reflection analysis. SAS, pages 162-180, 2015.

[26] Y. Li, T. Tan, Y. Zhang, and J. Xue. Program tailoring: Slicing
by sequential criteria. ECOOP, pages 15:1-15:27, 2016.

[27] P. Liang and M. Naik. Scaling abstraction refinement via
pruning. PLDI, pages 590-601, 2011.

[28] A. Marino. Analysis and Enumeration: Algorithms for Biological Graphs. Atlantis Publishing Corporation, 2015.

[29] A. Milanova, A. Rountev, and B. G. Ryder. Parameterized.
object sensitivity for points-to and side-effect analyses for
Java. ISSTA, pages 1-11, 2002.

[30] A. Milanova, A. Rountev, and B. G. Ryder. Parameterized
object sensitivity for points-to analysis for Java. ACM Trans.
Softw. Eng. Methodol., 14(1):1-41, 2005.

[31] M. Naik, A. Aiken, and J. Whaley. Effective static race
detection for Java. PLDI, pages 308-319, 2006.

[32] M. Naik, C. Park, K. Sen, and D. Gay. Effective static deadlock detection. ICSE, pages 386-396, 2009.

[33] H. Oh, W. Lee, K. Heo, H. Yang, and K. Yi. Selective contextsensitivity guided by impact pre-analysis. PLDI, pages 475484, 2014.

[34] R. C. Read and R. E. Tarjan. Bounds on backtrack algorithms
for listing cycles, paths, and spanning trees. Networks, 5(3):
237-252, 1975.

[35] B. G. Ryder. Dimensions of precision in reference analysis of
object-oriented programming languages. CC, pages 126-137,
2003.

[36] L. Shang, X. Xie, and J. Xue. On-demand dynamic summarybased points-to analysis. In CGO, pages 264-274, 2012.

[37] O. G. Shivers. Control-flow Analysis of Higher-order Languages of Taming Lambda. PhD thesis, 1991.

[38] Y. Smaragdakis and G. Balatsouras. Pointer analysis. Found.
Trends Program. Lang., pages 1-69, 2015.

[39] Y. Smaragdakis, M. Bravenboer, and O. Lhoték. Pick your
contexts well: understanding object-sensitivity. POPL, pages
17-30, 2011.

[40] Y. Smaragdakis, G. Kastrinis, and G. Balatsouras. Introspective analysis: Context-sensitivity, across the board. PLDI,
pages 485-495, 2014.

[41] J. Spath, L. N. Q. Do, K. Ali, and E. Bodden. Boomerang:
Demand-driven flow- and context-sensitive pointer analysis
for Java. ECOOP, pages 22:1-22:26, 2016.

[42] M. Sridharan and R. Bodfk. Refinement-based contextsensitive points-to analysis for Java. PLDI, pages 387-400,
2006.

[43] M. Sridharan, S. J. Fink, and R. Bodik. Thin slicing. PLDI,
pages 112-122, 2007.

[44] M. Sridharan, S. Chandra, J. Dolby, S. J. Fink, and E. Yahav.
Aliasing in object-oriented programming. chapter Alias Analysis for Object-oriented Programs, pages 196-232. 2013.

[45] Y. Sui and J. Xue. On-demand strong update analysis via
value-flow refinement. In FSE, pages 460-473, 2016.

[46] Y. Sui, Y. Li, and J. Xue. Query-directed adaptive heap
cloning for optimizing compilers. CGO, pages 1-11, 2013.

[47] V. Sundaresan, L. Hendren, C. Razafimahefa, R. Vallée-Rai,
P. Lam, E. Gagnon, and C. Godin. Practical virtual method.
call resolution for java. OOPSLA, pages 264-280, 2000.

[48] T. Tan, Y. Li, and J. Xue. Making k-object-sensitive pointer
analysis more precise with still k-limiting. SAS, pages 489510, 2016.

[49] R. Vallée-Rai, P. Co, E. Gagnon, L. Hendren, P. Lam, and
V. Sundaresan. Soot - a Java bytecode optimization framework. CASCON, pages 1-13, 1999.

[50] WALA. Watson libraries for analysis. wala.sf.net.

[51] J. Whaley and M. S. Lam. Cloning-based context-sensitive
pointer alias analysis using binary decision diagrams. PLDI,
pages 131-144, 2004.

[52] H. Yu, J. Xue, W. Huo, X. Feng, and Z. Zhang. Level by level:
making flow- and context-sensitive pointer analysis scalable
for millions of lines of code. CGO, pages 218-229, 2010.

[53] Q. Zhang and Z. Su. Context-sensitive data-dependence analysis via linear conjunctive language reachability. POPL, pages
344-358, 2017.

[54] X. Zhang, R. Mangal, R. Grigore, M. Naik, and H. Yang.
On abstraction refinement for program analyses in Datalog.
PLDI, pages 239-248, 2014.

[55] Y. Zhang, T. Tan, Y. Li, and J. Xue. Ripple: Reflection analysis for android apps in incomplete information environments.
2017.
