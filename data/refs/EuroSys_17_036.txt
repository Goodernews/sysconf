[1] System Support for NVMs in Linux. http: //nvdimm.
wiki.kernel.org.

[2] Amazon Web Services, Inc. AWS Total Cost of Ownership (TCO) Calculator, May 2016. Available at https:
//awstcocalculator.com.

[3] D. G. Andersen, J. Franklin, M. Kaminsky, A. Phanishayee,
L. Tan, and V. Vasudevan. FAWN: A Fast Array of Wimpy
Nodes. In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles, SOSP’09, pages 1-14.
ACM, 2009.

[4] J. Arulraj, A. Pavlo, and S$. R. Dulloor. Let’s Talk About
Storage and Recovery Methods for Non-volatile Memory
Database Systems. In Proceedings of ACM SIGMOD 2015,
2015.

[5] K. Bhandari, D. R. Chakrabarti, and H. Boehm. Implications
of CPU Caching on Byte-addressable Non-volatile Memory
Programming, 2012.

[6] B. Bridge. NVM Support for C Applications, 2015. Available at http: //www.snia.org/sites/default/
files/BillBridgeNVMSummit2015Slides.pdf.

[7] B. Calder, J. Wang, A. Ogus, N. Nilakantan, A. Skjolsvold,
S. McKelvie, Y. Xu, S. Srivastav, J. Wu, H. Simitci, J. Haridas,
C. Uddaraju, H. Khatri, A. Edwards, V. Bedekar, S. Mainali,
R. Abbasi, A. Agarwal, M. F. u. Haq, M. I. u. Haq, D. Bhardwaj, S. Dayanand, A. Adusumilli, M. McNett, S. Sankaran,
K. Manivannan, and L. Rigas. Windows Azure Storage: A
Highly Available Cloud Storage Service with Strong Consistency. In Proceedings of the Twenty-Third ACM Symposium
on Operating Systems Principles, SOSP’ 11, pages 143-157,
New York, NY, USA, 2011. ACM.

[8] J. Coburn, A. M. Caulfield, A. Akel, L. M. Grupp, R. K.
Gupta, R. Jhala, and S. Swanson. NV-Heaps: Making Persistent Objects Fast and Safe with Next-generation, Non-volatile
Memories. In Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages
and Operating Systems, ASPLOS XVI, pages 105-118, New
York, NY, USA, 2011. ACM.

[9] J. Condit, E. B. Nightingale, C. Frost, E. Ipek, D. Burger,
B. Lee, and D. Coetzee. Better I/O Through Byte-addressable,
Persistent Memory. In Proceedings of ACM SOSP 2009,
2009.

[10] B. F Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and.
R. Sears. Benchmarking Cloud Serving Systems with YCSB.
In Proceedings of the Ist ACM Symposium on Cloud Computing, SoCC’10, pages 143-154, New York, NY, USA, 2010.
ACM.

[11] A. Dragojevi¢, D. Narayanan, E. B. Nightingale, M. Renzelmann, A. Shamis, A. Badam, and M. Castro. No Compromises: Distributed Transactions with Consistency, Availability, and Performance. In Proceedings of the 25th Symposium on Operating Systems Principles, SOSP’15, pages 54—
70, New York, NY, USA, 2015. ACM.

[12] S. R. Duloor, S. Kumar, A. Keshavamurthy, D. Reddy,
R. Sankaran, and J. Jackson. System Software for Persistent
Memory. In Proceedings of the Ninth European Conference
of Computer Systems, 2014.

[13] B. Fan, D. G. Andersen, and M. Kaminsky. _MemC3:
Compact and Concurrent MemCache with Dumber Caching
and Smarter Hashing. In Presented as part of the 10th
USENIX Symposium on Networked Systems Design and Implementation (NSDI’ 13), pages 371-384, Lombard, IL, 2013.
USENIX.

[14] R. Fang, H.-I. Hsiao, B. He, C. Mohan, and Y. Wang. High
Performance Database Logging Using Storage Class Memory.
In Proc. 27th IEEE ICDE’11, Hanover, Germany, 2011.

[15] M. J. Franklin. Concurrency Control and Recovery. The
Computer Science and Engineering Handbook, pages 10581077, 1997.

[16] S. Ghemawat, H. Gobioff, and S.-T. Leung. The Google File
System. In Proc. 19th ACM Symposium on Operating Systems
Principles (SOSP), Lake George, NY, Oct. 2003.

[17] E. Giles, K. Doshi, and P. Varman. Bridging the Programming
Gap Between Persistent and Volatile Memory Using WrAP.
In Proceedings of the ACM International Conference on Computing Frontiers, CF’ 13, pages 30:1-30:10, New York, NY,
USA, 2013. ACM.

[18] J. Gray, P. McJones, M. Blasgen, B. Lindsay, R. Lorie,
T. Price, F. Putzolu, and I. Traiger. The Recovery Manager
of the System R Database Manager. ACM Comput. Surv., 13
(2):223-242, June 1981.

[19] J. Huang, K. Schwan, and M. K. Qureshi. NVRAM-aware
Logging in Transaction Systems. In Proceedings of the Forty
First International Conference on Very Large Data Bases,
Aug. 2015.

[20] Intel Corporation. Persistent Memory Programming, 2015.
Available at http: //pmem.io/nvml1/.

[21] A. Kalia, M. Kaminsky, and D. G. Andersen. FaSST: Fast,
Scalable and Simple Distributed Transactions with Two-sided
(RDMA) Datagram RPCs. In Proc. USENIX OSDI’16, Savannah, GA, 2016.

[22] E. Lee, H. Bahn, and S. H. Noh. Unioning of the Buffer Cache
and Journaling Layers with Non-volatile Memory. In Proc.
FAST’ 13, San Jose, CA, Feb. 2013.

[23] C. Mohan, D. Haderle, B. Lindsay, H. Pirahesh, and
P. Schwarz. ARIES: A Transaction Recovery Method Supporting Fine-granularity Locking and Partial Rollbacks Using
Write-ahead Logging. ACM Trans. Database Syst., 17(1):94162, Mar. 1992.

[24] MongoDB. http://mongodb.com.

[25] D. Narayanan and O. Hodson. Whole-system Persistence. In
Proceedings of the Seventeenth International Conference on
Architectural Support for Programming Languages and Operating Systems, ASPLOS XVII, pages 401-410, New York,
NY, USA, 2012. ACM.

[26] Oracle Corporation. The InnoDB Recovery Process,
2016. Available at https: //dev.mysql.com/doc/
refman/5.1/en/innodb-recovery.html.

[27] S. Park, T. Kelly, and K. Shen. Failure-atomic Msync(): A
Simple and Efficient Mechanism for Preserving the Integrity
of Durable Data. In Proceedings of the 8th ACM European
Conference on Computer Systems, EuroSys’13, pages 225238, New York, NY, USA, 2013. ACM.

[28] A. Phanishayee, D. G. Andersen, H. Pucha, A. Povzner, and.
W. Belluomini. Flex-KV: Enabling High-performance and
Flexible KV Systems. In Proceedings of the 2012 Workshop
on Management of Big Data Systems, MBDS’ 12, pages 1924, New York, NY, USA, 2012. ACM.

[29] J. Terrace and M. J. Freedman. Object Storage on CRAQ:
High-throughput Chain Replication for Read-mostly Workloads. In Proceedings of the 2009 Conference on USENIX Annual Technical Conference, USENIX’ 09, Berkeley, CA, USA,
2009. USENIX Association.

[30] R. van Renesse and F. B. Schneider. Chain Replication for
Supporting High Throughput and Availability. In Proceedings
of the 6th Conference on Symposium on Operating Systems
Design & Implementation - Volume 6, OSDI’04, Berkeley,
CA, USA, 2004. USENIX Association.

[31] S. Venkataraman, N. Tolia, P. Ranganathan, and R. H. Campbell. Consistent and Durable Data Structures for Non-volatile
Byte-addressable Memory. In Proceedings of the Ninth
USENIX Conference on File and Storage Technologies, 2011.

[32] H. Volos, A. J. Tack, and M. M. Swift. Mnemosyne:
Lightweight Persistent Memory. In Proceedings of the Six
512

teenth International Conference on Architectural Support for
Programming Languages and Operating Systems, ASPLOS
XVI, pages 91-104, New York, NY, USA, 2011. ACM.

[33] T. Wang and R. Johnson. Scalable Logging Through Emerging Non-volatile Memory. Proceedings of the VLDB Endowment, 7(10):865-876, June 2014.

[34] J. Xu and S. Swanson. NOVA: A Log-structured File System for Hybrid Volatile/Non-volatile Main Memories. In
14th USENIX Conference on File and Storage Technologies (FAST’16), pages 323-338, Santa Clara, CA, Feb. 2016.
USENIX Association.

[35] Y. Zhang, J. Yang, A. Memaripour, and S. Swanson. Mojim:
A Reliable and Highly-available Non-volatile Memory System. In Proceedings of the Twentieth International Conference on Architectural Support for Programming Languages
and Operating Systems, ASPLOS’ 15, pages 3-18, New York,
NY, USA, 2015. ACM.

[36] J. Zhao, S. Li, D. H. Yoon, Y. Xie, and N. P. Jouppi. Kiln:
Closing the Performance Gap Between Systems with and
without Persistence Support. In Proceedings of the 46th Annual IEEE/ACM International Symposium on Microarchitecture, MICRO-46, pages 421-432, New York, NY, USA, 2013.
ACM.