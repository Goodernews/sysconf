[1] S. Yu, Q. Zhuang, and K. Salomaa, “The state complexities of
some basic operations on regular languages,” Theor. Comput.
Sci., vol. 125, no. 2, pp. 315-328, 1994.

[2] R. E. Ladner and M. J. Fischer, “Parallel prefix computation,”

J. ACM, vol. 27, no. 4, pp. 831-838, Oct. 1980.

[3] W. D. Hillis and G. L. Steele, Jr., “Data parallel algorithms,”

Commun. ACM, vol. 29, no. 12, pp. 1170-1183, Dec. 1986.

[4] J. Misra, “Derivation of a parallel string matching algorithm,”

Inf. Process. Lett., vol. 85, no. 5, pp. 255-260, Mar. 2003.

[5] D. P. Scarpazza, O. Villa, and F. Petrini, “Peak-performance

DFA-based string matching on the Cell processor,” in 2/th

International Parallel and Distributed Processing Symposium,

2007, pp. 1-8.

[6] J. Holub and S. Stekr, “On parallel implementations of
deterministic finite automata,” in Proceedings of the 14th
International Conference on Implementation and Application
of Automata, 2009, pp. 54-64.

[7] C. G. Jones, R. Liu, L. Meyerovich, K. Asanovi¢é, and
R. Bodik, “Parallelizing the web browser,” in Proceedings
of the First USENIX conference on Hot topics in parallelism,
ser. HotPar’09. Berkeley, CA, USA: USENIX Association,

2009, pp. 7-7.

[8] D. Luchaup, R. Smith, C. Estan, and S. Jha, “Multi-byte
regular expression matching with speculation,” in Proceedings
of the 12th International Symposium on Recent Advances in
Intrusion Detection. Springer, 2009, pp. 284-303.

[9] X. Wang, K. He, and B. Liu, “Parallel architecture for high

throughput DFA-based deep packet inspection,” in 2010 IEEE

International Conference on Communications, 2010, pp. 1-5.

[10] D. Luchaup, R. Smith, C. Estan, and S. Jha, “Speculative

parallel pattern matching,” IEEE Transactions on Information

Forensics and Security, vol. 6, no. 2, pp. 438-451, 2011.

[11] Y. Ko, M. Jung, Y. Han, and B. Burgstaller, “A speculative

parallel DFA membership test for multicore, SIMD and cloud

computing environments,” International Journal of Parallel

Programming, vol. 42, no. 3, pp. 456-489, 2014.

[12] T. Mytkowicz, M. Musuvathi, and W. Schulte, “Data-parallel

finite-state machines.” Architectural Support for Program
ming Languages and Operating Systems (ASPLOS), March

2014.

[13] R. Sin’ya, K. Matsuzaki, and M. Sassa, “Simultaneous finite

automata: An efficient data-parallel model for regular expres
sion matching,” in 42nd International Conference on Parallel

Processing (ICPP), Oct 2013, pp. 220-229.

[14] J. E. Hopcroft, R. Motwani, and J. D. Ullman, Introduction

to Automata Theory, Languages, and Computation, 3rd ed.

Addison-Wesley, 2006.

[15] PROSITE protein database, version 20.114, “http://prosite.

expasy.org,” retrieved Jan. 2017.

[16] A. Gattiker, E. Gasteiger, and A. Bairoch, “ScanProsite:

a reference implementation of a PROSITE scanning tool,”

Applied Bioinformatics, vol. 1, no. 2, 2002.

[17] M. O. Rabin, “Fingerprinting by random polynomials,” Center

of Research in Computer Technology, Harvard University,

Tech. Rep. TR-15-81, 1981.

[18] A. Z. Broder, “Some applications of Rabin’s fingerprinting

method,” in Sequences H: Methods in Communications, Se
curity, and Computer Science. Springer, 1993, pp. 143-152.

[19] G. Pike and J. Alakuijala, “Cityhash, a family of hash

functions for strings, https://github.com/google/cityhash,” re
trieved Oct. 2016.

[20] G. Pike, “Farmhash, a family of hash functions, https://github.

com/google/farmhash,” retrieved Oct. 2016.

[21] Intel Intrinsics Guide, “https://software.intel.com/sites/

landingpage/IntrinsicsGuide,” retrieved Oct. 2016.

[22] H. Choi and B. Burgstaller, “Non-blocking parallel subset

construction on shared-memory multicore architectures,” in

Proceedings of the Eleventh Australasian Symposium on

Parallel and Distributed Computing-Volume 140. Australian

Computer Society, Inc., 2013, pp. 13-20.

[23] Squash compression benchmark GitHub page, “https://

quixdb. github.io/squash/,” retrieved Jan. 2017.

[24] D. R. Butenhof, Programming with POSIX threads. Boston,
MA, USA: Addison-Wesley, 1997.

[25] D. Raymond and D. Wood, “Grail: A C++ library for automata and expressions,” Journal of Symbolic Computation,
vol. 17, pp. 17-341, 1995.

[26] Grail+ project web site, “http://137.149.157.5/Mirrors/www.
csd.uwo.ca/research/Grail,” retrieved Oct. 2016.

[27] PAPI project web site, “http://icl.cs.utk.edu/papi/overview/
index.html,” retrieved Oct. 2015.

[28] R. Sinya, “Regen: regular expression generator, engine,
JIT-compiler, http://sinya8282.github.com/Regen/,” retrieved
Mar. 2017.

[29] Perf C2C blog, “https://joemario.github.io/blog/2016/09/01/
c2c-blog/,” retrieved Jun. 2017.

[30] A. V. Aho and M. J. Corasick, “Efficient string matching: an
aid to bibliographic search,” Commun. ACM, vol. 18, no. 6,
pp. 333-340, 1975.

[31] R. S. Boyer and J. S. Moore, “A fast string searching
algorithm,” Commun. ACM, vol. 20, no. 10, pp. 762-772,
1977.

[32] R. M. Karp and M. O. Rabin, “Efficient randomized patternmatching algorithms,” JBM J. Res. Dev., vol. 31, no. 2, pp.
249-260, 1987.

[33] D. Brumley, J. Newsome, D. Song, H. Wang, and S. Jha,
“Towards automatic generation of vulnerability-based signatures,” in Proceedings of the 2006 IEEE Symposium on
Security and Privacy, ser. SP °06. JEEE Computer Society,
2006, pp. 2-16.

[34] R. Sommer and V. Paxson, “Enhancing byte-level network
intrusion detection signatures with context,” in Proceedings of
the 10th ACM conference on Computer and communications
security, ser. CCS ’03. ACM, 2003, pp. 262-271.

[35] M. Roesch, “Snort—lightweight intrusion detection for networks,” in Proceedings of the 13th USENIX conference on
System administration, ser. LISA ’99. USENIX Association,
1999, pp. 229-238.

[36] C. Sigrist, L. Cerutti, E. De Castro, P. Langendijk-Genevaux,
V. Bulliard, A. Bairoch, and N. Hulo, “PROSITE, a protein
domain database for functional characterization and annotation,” Nucleic acids research, vol. 38, p. D161, 2010.

[37] B. Boeckmann, A. Bairoch, R. Apweiler, M. Blatter, A. Estreicher, E. Gasteiger, M. Martin, K. Michoud, C. O’Donovan,
I. Phan et al., “The SWISS-PROT protein knowledgebase,”
Nucleic acids research, vol. 31, no. 1, p. 365, 2003.

[38] B. Ravikumar, “Parallel algorithms for finite automata problems,” in JPPS/SPDP Workshops, vol. 1388. Springer, 1998.

[39] U. Stern and D. L. Dill, “Improved probabilistic verification
by hash compaction,” in In Advanced Research Working
Conference on Correct Hardware Design and Verification
Methods. Springer-Verlag, 1995, pp. 206-224.
