[1] Rick Boivie. SecureBlue++: CPU Support for Secure Execution. http: //researcher .watson.ibm.com/researcher/
view_group . php?id=7253, 2012.

[2] Intel Corporation. Intel Software Guard Extensions Programming Reference, 2014.

[3] Intel Corporation. Intel Trusted Execution Technology Software Development Guide, 2015.

[4] Intel Corporation. Intel Xeon Processor E7-8800/4800/2800
Product Families: Specification Update, 2015.

[5] Victor Costan, Ilia Lebedev, and Srinivas Devadas. Sanctum:
Minimal Hardware Extensions for Strong Software Isolation.
In USENIX Security Symposium, 2016.

[6] Leonardo De Moura and Nikolaj Bjgrner. Z3: An Efficient SMT
Solver. In International Conferance on Tools and Algorithms
jor the Construction and Analysis of Systems (TCAS), 2008.

[7] Dorothy E. Denning. A Lattice Model of Secure Information
Flow. In Communications of the ACM, 1976.

[8] Advanced Micro Devices. Revision Guide for AMD Athlon 64
and AMD Opteron Processors, 2005.

[9] Dmitry Evtyushkin, Jesse Elwell, Meltem Ozsoy, Dmitry Ponomarev, Nael Abu Ghazaleh, and Ryan Riley. Iso-X: A Flexible
Architecture for Hardware-Managed Isolated Execution. In International Symposium on Microarchitecture (MICRO), 2014.

[10] Andrew Ferraiuolo, Rui Xi, Danfeng Zhang, Andrew C. Myers,
and G. Edward Suh. Lightweight Verification of Secure
Hardware Isolation Through Static Information Flow Analysis
(Technical Report). Technical Report http: //hd1.handle.
net/1813/45898, Cornell University, 2017.

[11] Christopher W. Fletcher, Marten van Dijk, and Srinivas Devadas. A Secure Processor Architecture for Encrypted Computation on Untrusted Programs. In ACM Workshop on Scalable
Trusted Computing (STC), 2012.

[12] J.A. Goguen and J. Meseguer. Security Policies and Security
Models. In IEEE Symposium on Security and Privacy, 1982.

[13] Anitha Gollamudi and Stephen Chong. Automatic Enforcement of Expressive Security Policies Using Enclaves. In International Conference on Object-Oriented Programming, Systems, Language & Applications (OOPSLA), 2016.

[14] Matthew Hicks, Cynthia Sturton, Samuel T. King, and
Jonathan M. Smith. SPECS: A Lightweight Runtime Mechanism for Protecting Software from Security-Critical Processor
Bugs. In International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS),
2015.

[15] Wei Hu, Dejun Mu, Jason Oberg, Baolei Mao, Mohit Tiwari,
Timothy Sherwood, and Ryan Kastner. Gate-level information
flow tracking for security lattices. In ACM Transactions on
Design Automation and Electronic Systems (DAES), 2014.

[16] Sangho Lee, Youngsok Kim, Jangwoo Kim, and Jong Kim.
Stealing Webpages Rendered on Your Browser by Exploiting
GPU Vulnerabilities. In JEEE Symposium on Security and
Privacy, 2014.

[17] Peng Li and Steve Zdancewic. Downgrading Policies and
Relaxed Noninterference. In Symposium on Principles of
Programming Languages (POPL), 2005.

[18] Xun Li, Vineeth Kashyap, Jason K. Oberg, Mohit Tiwari, Vasanth Ram Rajarathinam, Ryan Kastner, Timothy Sherwood, Ben
Hardekopf, and Frederic T. Chong. Sapper: A Language for
Hardware-level Security Policy Enforcement. In International
Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS), 2014.

[19] Xun Li, Mohit Tiwari, Jason K. Oberg, Vineeth Kashyap, Frederic T. Chong, Timothy Sherwood, and Ben Hardekopf. Caisson: A Hardware Description Language for Secure Information
Flow. In Conference on Programming Language Design and
Implementation (PLDI), 2011.

[20] Luisa Lourengo and Luis Caires. Dependent information flow
types. In Symposium on Principles of Programming Languages
(POPL), 2015.

[21] ARM Ltd. ARM Security Technology: Building a Secure
System using TrustZone Technology, 2009.

[22] Andrew C. Myers. JFlow: Practical Mostly-static Information
Flow Control. In Symposium on Principles of Programming
Languages (POPL), 1999.

[23] Aleksandar Nanevski, Anindya Banerjee, and Deepak Garg.
Verification of information flow and access control policies with
dependent types. In Symposium on Principles of Programming
Languages (SSP), 2011.

[24] Jason Oberg, Wei Hu, Ali Irturk, Mohit Tiwari, Timothy
Sherwood, and Ryan Kastner. Theoretical Analysis of Gate
Level Information Flow Tracking. In Design Automation
Conference (DAC), 2010.

[25] Jason Oberg, Wei Hu, Ali Irturk, Mohit Tiwari, Timothy
Sherwood, and Ryan Kastner. Information Flow Isolation in
T2C and USB. In Design Automation Conference (DAC), 2011.

[26] Jason Oberg, Sarah Meiklejohn, Timothy Sherwood, and Ryan
Kastner. A practical testing framework for isolating hardware
timing channels. In Conference on Design Automation and Test
in Europe (DATE), 2013.

[27] Andrei Sabelfeld and Andrew C. Myers. A Model for Delimited Information Release. In IEEE Symposium on Security and
Privacy, 2004.

[28] Andrei Sabelfeld and Andrew C. Myers. Language-based
Information-flow Security. IEEE Journal on Selected Areas
in Communications, 2006.

[29] Rohit Sinha, Manuel Costa, Akash Lal, Nuno Lopes, Sanjit
Seshia, Sriram Rajamani, and Kapil Vaswani. A Design and
Verification Methodology for Secure Isolated Regions. In ConJerence on Programming Language Design and Implementation
(PLDD, 2016.

[30] Rohit Sinha, Sriram Rajamani, Sanjit Seshia, and Kapil
Vaswani. Moat: Verifying confidentiality of enclave programs.

In ACM Conference on Computer and Communications Security (CCS), 2015.
[31] Sergei Skorobogatov and Christopher Woods. Breakthrough
Silicon Scanning Discovers Backdoor in Military Chip. In ConJerence on Cryptographic Hardware and Embedded Systems
(CHES), 2012.

[32] Steve Zdancewic and Andrew C. Myers. Observational determinism for concurrent program security. In Computer Security
Foundations Workshop (CSFW), 2003.

[33] G. Edward Suh, Jae W Lee, David Zhang, and Srinivas
Devadas. Secure program execution via dynamic information
flow tracking. In ACM Sigplan Notices, 2004.

[34] G. Edward Suh, Charles W. Oâ€™Donnell, Ishan Sachdev, and
Srinivas Devadas. Design and Implementation of the AEGIS
Single-Chip Secure Processor Using Physical Random Functions. In International Symposium on Computer Architecture
(ISCA), 2005.

[35] Jakub Szefer and Ruby B. Lee. Architectural Support for
Hypervisor-Secure Virtualization. In International Conference
on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2012.

[36] Mohit Tiwari, Xun Li, Hassan M. G. Wassel, Frederic T.
Chong, and Timothy Sherwood. Execution Leases: A HardwareSupported Mechanism for Enforcing Strong Non-Interference.
In International Symposium on Microarchitecture (MICRO),
2009.

[37] Mohit Tiwari, Jason K. Oberg, Xun Li, Jonathan Valamehr,
Timothy Levin, Ben Hardekopf, Ryan Kastner, Frederic T.
Chong, and Timothy Sherwood. Crafting a Usable Microkernel,
Processor, and I/O System with Strict and Provable Information
Flow Security. In International Symposium on Computer
Architecture (ISCA), 2011.

[38] Mohit Tiwari, Hassan M.G. Wassel, Bita Mazloom, Shashidhar Mysore, Frederic T. Chong, and Timothy Sherwood. Complete Information Flow Tracking from the Gates Up. In International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2009.

[39] Stephen Tse and Steve Zdancewic. Run-Time Principals in
Information-Flow Type Systems. In JEEE Symposium on
Security and Privacy, 2004.

[40] Rafal Wojtczuk and Joanna Rutkowska. Attacking SMM Memory via Intel CPU Cache Poisoning. invisiblethingslab.
com/resources/misc09/smm_cache_fun.pdf, 2009.

[41] Rafal Wojtczuk and Joanna Rutkowska. Following the White
Rabbit: Software Attacks Against Intel VT-d Technology.
http://theinvisiblethings. blogspot .com/2011/05/
following-white-rabbit-software-attacks.html,2011.

[42] Danfeng Zhang, Yao Wang, G. Edward Suh, and Andrew C.
Myers. A Hardware Design Language for Timing-Sensitive
Information-Flow Security. In International Conference on Architectural Support for Programming Languages and Operating
Systems (ASPLOS), 2015.

[43] Lantian Zheng and Andrew C. Myers. Dynamic security labels
and static information flow control. International Journal of
Information Security, 2007.