[1]  U.S.-Canada Power System Outage Task Force, Final Report 
on the August 14th Blackout in the United States and Cana-
da:  Causes  and  Recommendations,  Technical  report,  De-
partment of Energy, 2004. 

[2]  C.  Bienia.  Benchmarking  Modern  Multiprocessors.  Ph.D. 

Thesis, Princeton University, 2011. 

[3]  M.  D.  Bond,  K.  E.  Coons,  and  K.  S.  McKinley.  PACER: 
Proportional  detection  of  data  races.  In  Proceedings  of  the 
ACM  SIGPLAN  conference  on  Programming  language  de-
sign and implementation (PLDI), pages 255-268, 2010. 

[4]  Facebook IPO Glitch, 2012. 

http://www.cio.com.au/article/425234/nasdaq_facebook_glit
ch_came_from_race_conditions/ 
[5]  FFmpeg. http://www.ffmpeg.org/. 
[6]  C. J. Fidge. Logical time  in  distributed  computing  systems. 

IEEE Computer, 24(8):28-33, 1991. 

[7]  R. D. Finn, J. Clements, and S. R. Eddy. HMMER web serv-
er:  Interactive  sequence  similarity  searching.  Nucleic  Acids 
Research Web Server Issue 39:W29-W37, 2011. 

[8]  C. Flanagan and S. N. Freund. FastTrack: Efficient and pre-
cise  dynamic  race  detection.  In  Proceedings  of  the  ACM 
SIGPLAN conference on Programming language design and 
implementation (PLDI), pages 121-133, 2009. 

[9]  C.  Flanagan and S. N. Freund. Type-based race detection for 
Java.  In  Proceedings  of  the  ACM  SIGPLAN  conference  on 
Programming language design and implementation (PLDI), 
pages 219-232, 2000. 

[10]  J. Gilchrist, Parallel BZIP2, http://compression.ca/pbzip2/. 
[11]  Intel 

Inspector  XE  2013.  http://software.intel.com/en-

[12]  Intel Vtune Amplifier XE 2015. http://software.intel.com/en-

us/intel-inspector-xe. 

us/intel-vtune-amplifier-xe. 

[13]  B.  Kasikci,  C.  Zamfir,  and  G.Candea.  RaceMob: 
crowdsourced  data  race  detection.  In  Proceedings  of  the 
Twenty-Fourth  ACM  Symposium  on  Operating  Systems 
Principles (SOSP), pages 406-422, 2013. 

[14]  L.  Lamport.  Time,  clocks,  and  the  ordering  of  events  in  a 
distributed system. Comm. of the ACM, 21(7):558-565, 1978. 
[15]  N.  G.  Leveson  and  C.  S.  Turner.  An  Investigation  of  the 

Therac-25 Accidents. IEEE Computer, 26(7):18-41, 1993. 

[16]  C. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G, Lowney, 
S.  Wallace,  V.  J.  Reddi,  and  K.  Hazelwood.  Pin:  Building 
customized program analysis tools with dynamic instrumen-
tation. In Proceedings of the ACM SIGPLAN conference on 

Programming language design and implementation (PLDI), 
pages 190-200, 2005. 

[17]  D. Marino, M. Musuvathi, and S. Narayanasamy. LiteRace: 
Effective  sampling  for  lightweight  data-race  detection.  In 
Proceedings of the ACM SIGPLAN conference on Program-
ming  language  design  and  implementation  (PLDI),  pages 
134-143, 2009. 

[18]  K.  Pusukuri,  R.  Gupta,  and  L.  Bhuyan.  Thread  reinforcer: 
Dynamically  determining  number  of  threads  via  OS  level 
monitoring. In Proceedings of the 2011 IEEE International 
Symp.  on  Workload  Characterization  (IISWC),  pages  116-
125, 2011. 

[19]  E. Pozniansky and A. Schuster. Efficient on-the-fly data race 
detection in multithreaded C++ programs. In Proceedings of 
the ninth ACM SIGPLAN Symp. on Principles and practice 
of parallel programming (PPoPP), pages 179-190, 2003. 

[20]  P.  Pratikakis,  J.  S.  Foster,  and  M.  Hicks.  LOCKSMITH: 
Practical  static  race  detection  for  C.  ACM  Trans.  on  Pro-
gramming Languages and Sys. (TOPLAS), 33(1):1-55, 2011. 
[21]  C.  Radoi  and  D.  Dig.  Effective  Techniques  for  Static  Race 
Detection  in  Java  Parallel  Loops.  ACM  Trans.  on  Software 
Engineering and Methodology (TOSEM), 24(4):24, 2015. 

[22]  M. Ronsse and K. D. Bosschere. RecPlay: A fully integrated 
practical  record/replay  system.  ACM  Transactions  on  Com-
puter Systems (TOCS), 17(2):133-152, 1999. 

[23]  P.  Sack,  B.  E.  Bliss,  Z.  Ma,  P.  Petersen,  and  J.  Torrellas. 
Accurate  and  efficient  filtering  for  the  Intel  thread  checker 
race detector. In Proceedings of the 1st workshop on Archi-
tectural and system support for improving software depend-
ability (ASID), pages 34-41, 2006. 

[24]  S.  Savage,  M.  Burrows,  G.  Nelson,  P.  Sobalvarro,  and  T. 
Anderson.  Eraser:  A  dynamic  data  race  detector  for  multi-
threaded programs. ACM Transactions on Computer Systems 
(TOCS), 15(4):391-411, 1997. 

[25]  Y. W. Song and Y-H. Lee. Efficient Data Race Detection for 
C/C++  Programs  Using  Dynamic  Granularity.  In  Proceed-
ings of the 2014 IEEE 28th International Parallel and Dis-
tributed Processing Symp. (IPDPS), pages 679-688, 2014. 

[26]  DRD, Valgrind-3.8.1. http://valgrind.org/. 
[27]  K.  Veeraraghavan,  D.  Lee,  B.  Wester,  J.  Ouyang,  P.  M. 
Chen, J. Flinn, and S. Narayanasamy. DoublePlay: Parallel-
izing Sequential Logging and Replay. ACM Transactions on 
Computer Systems (TOCS), 30(1): Article No. 3, 2012. 

[28]  E. Vlachos, M. L. Goodstein, M. A. Kozuch, S. Chen, B. 

Falsafi, P. B. Gibbons, and T. C. Mowry. ParaLog: enabling 
and accelerating online parallel monitoring of multithreaded 
applications. In Proc. of the fifteenth international confer-
ence on Architectural support for programming languages 
and operating systems (ASPLOS), pages 271-284, 2010. 

[29]  J.  W.  Voung,  R.  Jhala,  and  S.  Lerner.  RELAY:  Static  race 
detection  on  millions  of  lines  of  code.  In  Proc.  of  the  6th 
joint meeting of the European software engineering confer-
ence and the ACM SIGSOFT symposium on the foundations 
of software engineering (ESEC-FSE), pages 205-214, 2007. 
[30]  B. Wester, D. Devecsery, P. M. Chen, J. Flinn, and S. Nara-
yanasamy.  Parallelizing  data  race  detection.  In  Proceedings 
of  the  eighteenth  international  conference  on  Architectural 
support for programming languages and  operating  systems 
(ASPLOS), pages 27-38, 2013. 

[31]  Y.  Yu,  T.  Rodeheffer,  and  W.  Chen.  RaceTrack:  Efficient 
detection  of  data  race  conditions  via  adaptive  tracking.  In 
Proceedings of the twentieth ACM symposium on Operating 
systems principles (SOSP), pages 221-234, 2005. 

