[1] D. Cociorva, J. W. Wilkins, C. Lam, G. Baumgartner, J. Ramanujam, and
P. Sadayappan, “Loop optimization for a class of memory-constrained
computations,” in ICS, 2001, pp. 103–113.
[2] K. Kennedy and J. R. Allen, Optimizing Compilers for Modern Architectures: A Dependence-based Approach. San Francisco, CA, USA:
Morgan Kaufmann Publishers Inc., 2002.
[3] D. Quinlan, “ROSE: Compiler support for object-oriented frameworks,”
Parallel Processing Letters, vol. 10, no. 02–03, pp. 215–226, 2000.
[4] J. S. Vitter, “Random sampling with a reservoir,” ACM Trans. Math.
Softw., vol. 11, no. 1, pp. 37–57, Mar. 1985.
[5] L.-N. Pouchet, “Polyopt/C: A polyhedral optimizer for the rose compiler,” http://web.cse.ohio-state.edu/∼pouchet/software/polyopt, 2011.
[6] “Xiph.Org Foundation,” https://www.xiph.org.
[7] “The Lame Project,” lame.sourceforge.net.
[8] “TwoLAME,” www.twolame.org.
[9] “libdeep,” github.com/bashrc/libdeep.
[10] “GAP,” www.gap-system.org.
[11] “mozjpeg,” github.com/mozilla/mozjpeg.
[12] M.-L. Li, R. Sasanka, S. V. Adve, Y.-K. Chen, and E. Debes, “The
ALPBench benchmark suite for complex multimedia applications,” in
IISWC, 2005, pp. 34–45.
[13] “ASC Benchmarks,” https://asc.llnl.gov/sequoia/benchmarks/.
[14] S. Thomas, C. Gohkale, E. Tanuwidjaja, T. Chong, D. Lau, S. Garcia,
and M. B. Taylor, “Cortexsuite: A synthetic brain benchmark suite,” in
IISWC, 2014, pp. 76–79.
[15] “Fhourstones benchmarks,” https://github.com/llvm-mirror/test-suite/
tree/master/MultiSource/Benchmarks.
[16] P. Rundberg and F. Warg, “The FreeBench v1. 0 benchmark suite,” URL:
http://www. freebench. org, 2002.
[17] R. F. Van der Wijngaart and T. G. Mattson, “The parallel research
kernels.” in HPEC, 2014, pp. 1–6.
[18] “Livermoore loops,” http://www.roylongbottom.org.uk/livermore%
20loops%20results.htm.
[19] “Media Bench II,” http://mathstat.slu.edu/∼fritts/mediabench.
[20] S. Browne, J. Dongarra, E. Grosse, and T. Rowan, “The Netlib mathematical software repository,” D-Lib Magazine, Sep, 1995.
[21] D. H. Bailey, E. Barszcz, J. T. Barton, D. S. Browning, R. L. Carter,
L. Dagum, R. A. Fatoohi, P. O. Frederickson, T. A. Lasinski, R. S.
Schreiber et al., “The NAS parallel benchmarks,” International Journal
of High Performance Computing Applications, vol. 5, no. 3, pp. 63–73,
1991.
[22] L.-N. Pouchet, “Polybench: The polyhedral benchmark suite,” URL:
http://www. cs. ucla. edu/pouchet/software/polybench, 2012.
[23] “SciMark 2.0,” http://math.nist.gov/scimark2.
[24] “SPEC benchmarks,” http://www.spec.org.
[25] “Extended test suite for vectorizing compilers,” http://polaris.cs.uiuc.
edu/∼maleki1/TSVC.tar.gz.
[26] “Intel R 64 and IA-32 Architectures Software Developer’s Manual,”
http://www.intel.com/content/dam/www/public/us/en/documents/
manuals/64-ia-32-architectures-software-developer-vol-3b-part-2manual.pdf.
[27] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: Building customized
program analysis tools with dynamic instrumentation,” in PLDI, 2005,
pp. 190–200.
[28] G. Fursin, “Collective knowledge,” http://github.com/ctuning/ck/wiki.
[29] C. Liao, D. J. Quinlan, R. Vuduc, and T. Panas, “Effective source-tosource outlining to support whole program empirical optimization,” in
LCPC, 2010, pp. 308–322.
[30] C. Akel, Y. Kashnikov, P. d. O. Castro, and W. Jalby, “Is source-code
isolation viable for performance characterization?” in ICPP, 2013, pp.
977–984.
[31] Y. Lee and M. Hall., “A code isolator: Isolating code fragments from
large programs,” in LCPC, 2005, pp. 164–178.
[32] P. D. O. Castro, C. Akel, E. Petit, M. Popov, and W. Jalby, “Cere:
Llvm-based codelet extractor and replayer for piecewise benchmarking
and optimization,” ACM TACO, vol. 12, pp. 6:1–6:24, 2015.
[33] M. Wolfe, “Experiences with data dependence abstractions,” in ICS,
1991, pp. 321–329.
[34] L.-N. Pouchet, C. Bastoul, A. Cohen, and J. Cavazos, “Iterative optimization in the polyhedral model: Part ii, multidimensional time,” in
ACM SIGPLAN Notices, vol. 43, no. 6. ACM, 2008, pp. 90–100.
