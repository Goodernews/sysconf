[1] R. D. Blumofe, C. F. Joerg, B. C. Kuszmaul, C. E. Leiserson, K. H. Randall, and Y. Zhou. Cilk: An efficient multithreaded runtime system. In Proceedings of the Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming, PPOPP ’95, pages 207–216, New York, NY, USA, 1995. ACM.
[2] R.L.Bocchino,Jr.,V.S.Adve,S.V.Adve,andM.Snir.Parallelprogrammingmust be deterministic by default. In Proceedings of the First USENIX Conference on Hot Topics in Parallelism, HotPar’09, pages 4–4, Berkeley, CA, USA, 2009. USENIX Association.
[3] N. G. Bronson, J. Casper, H. Chafi, and K. Olukotun. Transactional predication: High-performance concurrent sets and maps for stm. In Proceedings of the 29th ACM SIGACT-SIGOPS Symposium on Principles of Distributed Computing, PODC ’10, pages 6–15, New York, NY, USA, 2010. ACM.
[4] C. Cachin, S. Schubert, and M. Vukolic. Non-Determinism in Byzantine Fault- Tolerant Replication. In P. Fatourou, E. Jiménez, and F. Pedone, editors, 20th Inter- national Conference on Principles of Distributed Systems (OPODIS 2016), volume 70 of Leibniz International Proceedings in Informatics (LIPIcs), pages 24:1–24:16, Dagstuhl, Germany, 2017. Schloss Dagstuhl–Leibniz-Zentrum fuer Informatik.
[5] M. Castro and B. Liskov. Practical byzantine fault tolerance. In Proceedings of the Third Symposium on Operating Systems Design and Implementation, OSDI ’99, pages 173–186, Berkeley, CA, USA, 1999. USENIX Association.
[6] DAO. Thedao smart contract. Retrieved 8 February 2017.
[7] K. Delmolino, M. Arnett, A. Kosba, A. Miller, and E. Shi. Step by Step Towards
Creating a Safe Smart Contract: Lessons and Insights from a Cryptocurrency Lab,
pages 79–94. Springer Berlin Heidelberg, Berlin, Heidelberg, 2016.
[8] Ethereum. https://github.com/ethereum/.
[9] Ethereum design Rationale. http://github.com/ethereum/wiki/wiki/
Design- Rationale#gas- and- fees.
[10] R. Guerraoui and M. Kapalka. On the correctness of transactional memory. In
Proceedings of the 13th ACM SIGPLAN Symposium on Principles and practice of
parallel programming (PPoPP’08), pages 175–184, New York, NY, USA, 2008. ACM.
[11] M. Herlihy and E. Koskinen. Transactional boosting: A methodology for highly- concurrent transactional objects. In Proceedings of the 13th ACM SIGPLAN Sympo- sium on Principles and Practice of Parallel Programming, PPoPP ’08, pages 207–216,
New York, NY, USA, 2008. ACM.
[12] M. Herlihy, V. Luchangco, M. Moir, and W. N. Scherer, III. Software transactional memory for dynamic-sized data structures. In Proceedings of the twenty-second annual symposium on Principles of distributed computing, PODC ’03, pages 92–101, New York, NY, USA, 2003. ACM.
[13] N. Herman, J. P. Inala, Y. Huang, L. Tsai, E. Kohler, B. Liskov, and L. Shrira. Type- aware transactions for faster concurrent code. In Proceedings of the Eleventh European Conference on Computer Systems, EuroSys ’16, pages 31:1–31:16, New York, NY, USA, 2016. ACM.
[14] Hyperledger white paper. http://www.the-blockchain.com/docs/Hyperledger% 20Whitepaper.pdf .
[15] A.E.Kosba,A.Miller,E.Shi,Z.Wen,andC.Papamanthou.Hawk:Theblockchain model of cryptography and privacy-preserving smart contracts. In IEEE Sympo- sium on Security and Privacy, 2015.
[16] E. Koskinen and M. J. Parkinson. The push/pull model of transactions. In
Proceedings of the 36th ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI’15), Portland, OR, USA. ACM, 2015.
[17] E. Koskinen, M. J. Parkinson, and M. Herlihy. Coarse-grained transactions. In Proceedings of the 37th ACM SIGPLAN-SIGACT Symposium on Principles of
Programming Languages (POPL’10), pages 19–30. ACM, 2010.
[18] L. Luu, D. Chu, H. Olickel, P. Saxena, and A. Hobor. Making smart contracts smarter. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, Vienna, Austria, October 24-28, 2016, pages 254–269,
2016.
[19] L. Luu, J. Teutsch, R. Kulkarni, and P. Saxena. Demystifying incentives in the
consensus computer. In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security, CCS ’15, pages 706–719, New York, NY, USA, 2015. ACM.
[20] S. Nakamoto. Bitcoin: A peer-to-peer electronic cash system. May 2009.
[21] Scala STM Expert Group. Scalastm. web. Retrieved from http://nbronson.github.
com/scala-stm/, 20 November 2011.
[22] Solidity documentation. http://solidity.readthedocs.io/en/latest/index.html.
[23] Solidity documentation: Solidity by example. http://solidity.readthedocs.io/en/
develop/solidity- by- example.html.
[24] N. Szabo. Formalizing and securing relationships on public networks. First
Monday, 2(9), 1997.
[25] G. Wood. Ethereum: A secure decentralised generalised transaction ledger.
