[1] HiBench. https://github.com/intel-hadoop/HiBench.
[2] F. Ahmad, S. T. Chakradhar, A. Raghunathan, and T. N. Vijaykumar.
Tarazu: Optimizing mapreduce on heterogeneous clusters. In 17th
International Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2012.
[3] F. Ahmad, S. T. Chakradhar, A. Raghunathan, and T. N. Vijaykumar.
ShuffleWatcher: Shuffle-aware scheduling in multi-tenant MapReduce
clusters. In USENIX Annual Technical Conference, 2014.
[4] R. Appuswamy, C. Gkantsidis, D. Narayana, O. Hodson, and A. Rowstron. Scale-up vs scale-out for Hadoop: Time to rethink? In 4th annual
Symposium on Cloud Computing (SOCC), 2013.
[5] M. D. Beynon, R. Ferreira, T. Kurc, A. Sussman, and J. Saltz. DataCutter: Middleware for filtering very large scientific datasets on archival
storage systems. In Proceedings of the Eighth Goddard Conference on
Mass Storage Systems and Technologies/17th IEEE Symposium on Mass
Storage Systems, pages 119–133, Mar. 2000.
[6] T. Condie, N. Conway, P. Alvaro, and J. M. Hellerstein. MapReduce
Online. In the 7th USENIX symposium on Networked Systems Design
and Implementation (NSDI), 2010.
[7] J. Dean and S. Ghemawat. MapReduce: Simplified data processing
on large clusters. In Proceedings of the 4th USENIX conference on
Operating Systems Design and Implementation (OSDI), 2004.
[8] I. Elghandour and A. Aboulnaga. ReStore: Reusing results of MapReduce jobs. Proceedings of the VLDB Endowment (PVLDB), 5(6):586–
597, 2012.
[9] K. Elmeleegy. Piranha: Optimizing short jobs in Hadoop. Proceedings
of the VLDB Endowment (PVLDB), 6(11):985–996, 2013.
[10] S. Ghemawat, H. Gobioff, and S.-T. Leung. The Google File System.
In Proceedings of the 19th ACM Symposium on Operating Systems
Principles (SOSP), 2003.
[11] P. K. Gunda, L. Ravindranath, C. A. Thekkath, Y. Yu, and L. Zhuang.
Nectar: Automatic management of data and computation in datacenters.
In 9th USENIX Symposium on Operating Systems Design and Implementation, (OSDI), pages 75–88, 2010.
[12] Y. Guo, J. Rao, and X. Zhou. iShuffle: Improving hadoop performance
with shuffle-on-write. In 10th USENIX International Conference on
Autonomic Computing (ICAC), pages 107–117, 2013.
[13] A. Gupta, B. Liskov, and R. Rodrigues. One hop lookups for peer-topeer overlays. In Ninth Workshop on Hot Topics in Operating Systems
(HotOS), pages 7–12, Lihue, Hawaii, May 2003.
[14] B. He, M. Lu, K. Yang, R. Fang, N. K. Govindaraju, Q. Luo, and P. V.
Sander. Relational query co-processing on graphics processors. ACM
Transactions on Database Systems, 34(4):21–39, 2009.
[15] M. Isard, M. Budiu, Y. Yu, A. Birrell, and D. Fetterly. Dryad: Distributed
data-parallel programs from sequential building blocks. In 2nd ACM
SIGOPS/Eurosys European Conference on Computer Systems (EuroSys),
2007.
[16] W. Kim, Y. ri Choi, and B. Nam. Coalescing HDFS blocks to avoid
recurring yarn container overhead. In 10th International Conference on
Cloud Computing (IEEE Cloud), 2017.
[17] W. Kim, Y. ri Choi, and B. Nam. Mitigating YARN container overhead
with input splits. In 17th International Symposium on Cluster, Cloud
and Grid Computing (CCGrid), 2017.
[18] T. Kurc, C. Chang, R. Ferreira, A. Sussman, and J. Saltz. Querying
very large multi-dimensional datasets in ADR. In Proceedings of the
ACM/IEEE SC1999 Conference, 1999.
[19] J. Kwak, E. Hwang, T. kyung Yoo, B. Nam, and Y. ri Choi. Inmemory caching orchestration for Hadoop. In Proceedings of the
16th International Symposium on Cluster, Cloud and Grid Computing
(CCGrid), 2016.
[20] Y. Kwon, M. Balaziniska, B. Howe, and J. Rolia. SkewTune: mitigating
skew in mapreduce applications. In Proceedings of 2012 ACM SIGMOD
International Conference on Management of Data (SIGMOD), pages
25–36, 2012.
[21] Y. A. Liu, S. D. Stoller, and T. Teitelbaum. Static caching for incremental
computation. ACM Transactions on Programming Languages and
Systems (TOPLAS), 20(3):546–585, 1998.
[22] T. Nykiel, M. Potamias, C. Mishra, G. Kollios, and N. Koudas. Sharing
across multiple MapReduce jobs. ACM Transactions on Database
Systems, 39(2):12:1–12:46, 2014.

[23] L. Popa, M. Budiu, Y. Yu, and M. Isard. Dryadinc: Reusing work
in large-scale computations. In Proceedings of the 2009 USENIX
Conference on Hot Topics in Cloud Computing (HotCloud), 2009.
[24] W. Pugh and T. Teitelbaum. Incremental computation via function
caching. In the 16th ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages (POPL), 1989.
[25] M. W. Rahman, X. Lu, N. S. Islam, and D. K. Panda. HOMR: A
hybrid approach to exploit maximum overlapping in MapReduce over
high performnace interconnects. In Proceedings of the 28th ACM
International Conference on Supercomputing (ICS), 2014.
[26] S. R. Ramakrishnan, G. Swart, and A. Urmanov. Balancing reducer skew
in MapReduce workloads using progressive sampling. In Proceedings
of the Third ACM Symposium on Cloud Computing (SOCC), 2012.
[27] S. Sakr, A. Liu, and A. G. Fayoumi. The family of MapReduce
and large-scale data processing systems. ACM Computing Surveys,
46(1):11:1–11:44, 2013.
[28] A. Shinnar, D. Cunningham, B. Herta, and V. Saraswat. M3R: Increased
performance for in-memory Hadoop jobs. Proceedings of the VLDB
Endowment (PVLDB), 5(12):1736–1747, 2012.
[29] I. Stoica, R. Morris, D. Karger, F. Kaashoek, and H. Balakrishnan.
Chord: A scalable Peer-To-Peer lookup service for internet applications.
In Proceedings of the 2001 ACM SIGCOMM Conference, pages 149–
160, 2001.
[30] D. Tiwari and Y. Solihin. MapReuse: Reusing computation in an inmemory MapReduce system. In 28th IEEE International Parallel and
Distributed Processing Symposium (IPDPS), 2014.
[31] V. K. Vavilapalli, A. C. Murthy, C. Douglas, S. Agarwal, M. Konar,
R. Evans, T. Graves, J. Lowe, H. Shah, S. Seth, B. Saha, C. Curino,
O. O’Malley, S. Radia, B. Reed, and E. Baldeschwieler. Apache Hadoop
YARN: yet another resource negotiator. In Proceedings of the Third
ACM Symposium on Cloud Computing (SOCC), 2013.
[32] Y. Wang, X. Que, W. Yu, D. Goldenberg, and D. Sehgal. Hadoop
acceleration through network levitated merge. In Proceedings of the
ACM/IEEE SC2011 Conference, 2011.
[33] M. Zaharia, D. Borthakur, J. S. Sarma, K. Elmeleegy, S. Shenker, and
I. Stoica. Delay scheduling: A simple technique for achieving locality
and fairness in cluster scheduling. In Proceedings of the 5th European
Conference on Computer Systems (EuroSys), 2010.
[34] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley, M. J.
Franklin, S. Shenker, and I. Stoica. Resilient distributed datasets: A faulttolerant abstraction for in-memory cluster computing. In Proceedings
of the 9th USENIX Symposium on Networked Systems Design and
Implementation (NSDI), 2012.
[35] M. Zaharia, M. Chowdhury, M. J. Franklin, S. Shenker, and I. Stoica.
Spark: Cluster computing with working sets. In Proceedings of the 2010
USENIX Conference on Hot Topics in Cloud Computing (HotCloud),
2010.
[36] Y. Zhao and J. Wu. Dache: A data aware caching for big-data applications using the MapReduce framework. In Proceedings of INFOCOM,
pages 271–282, 2013.