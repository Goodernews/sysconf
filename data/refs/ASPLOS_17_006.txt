[1] Angry Birds. https://www.angrybirds.com/games/.

[2] Arduino Yun.
https://www.arduino.cc/en/Main/ArduinoBoard Yun.

[3] Intel Edison.
https://software.intel.com/en-us/iot/hardware/edison.

[4] Espruino. http://www.espruino.com.

[5] Intel Galileo.
https://software.intel.com/en-us/iot/hardware/galileo.

[6] Introduction to Intel Memory Protection extensions.
http://software.intel.com/en-us/articles/introduction-to-intel-
memory-protection-extensions.

[7] JavaScript.
https://developer.mozilla.org/en/docs/Web/JavaScript.

[8] TI LaunchPad.
http://www.ti.com/ww/en/launchpad/launchpad.html.

[9] LowRISC. http://www.lowrisc.org.
[10] Matlab. http://www.mathworks.com/products/matlab/.

[11] Node.js—open-source, cross-platform runtime environment
for developing server-side web applications.
https://nodejs.org/.

[12] Perl. https://www.perl.org.

[13] Adobe’s Photoshop Lightroom Developer Center.
http://www.adobe.com/devnet/photoshoplightroom.html.

[14] Python. https://www.python.org.

[15] The R Project for Statistical Computing.
http://www.t-project.org.

[16] Raspberry Pi. https://Awww.raspberrypi.org/.
[17] Rocket Core. http://riscv.org/download.html.

[18] Raspberry Pi. Usage documentation of Python.
https://www.raspberrypi.org/documentation/usage/python/.

[19] Ruby. https://www.ruby-lang.org/en/.

[20] SAMAS5D3 Series Datasheet.
http://www.atmel.com/Images/Atmel-11121-32-bit-Cortex-
A5-Microcontroller-SAMA5D3-_Datasheet.pdf.

[21] SpiderMonkey 17. https://developer.mozilla.org/en-
US/docs/Mozilla/Projects/SpiderMonkey/Releases/17.

[22] World of Warcraft interface AddOn Kits.
https://us.battle.net/support/en/article/download-the-world-
of-warcraft-interface-addon-kit.

[23] Intel XDK. https://software.intel.com/en-us/intel-xdk.

[24] Arduino. an open-source electronics platform based on
easy-to-use hardware and software. https://www.arduino.cc.

[25] Computer Language Benchmarks Game.
http://benchmarksgame.alioth.debian.org/.

[26] Duktape. http://duktape.org.

[27] FTL: WebKit’s LLVM based JIT.
http://blog.Ilvm.org/2014/07/ftl-webkits-llvm-based-jit.html.

[28] The Programming Language Lua. http://lua.org.
[29] ARM mbed. https://www.mbed.com/en/.

[30] O. Anderson, E. Fortuna, L. Ceze, and S. Eggers. Checked
Load: Architectural Support for JavaScript Type-checking on

Mobile Processors. In Proceedings of the 17th IEEE
International Symposium on High Performance Computer
Architecture (HPCA), 2011.

[31] P. W. Bosshart, C. R. Hewes, M. D. Ales, M. C. Chang, K. K.
Chau, K. Fasham, C. C. Hoac, T. W. Houston, V. Kalyan,
S. L. Lasky, S. S$. Mahant-Shetti, D. J. Matzke, K. N.
Ruparel, J. F. Sexton, C. H. Shaw, T. Shridhar, D. Stark, and
A. L. Lee. A 553 k-transistor lisp processor chip. IEEE
Journal of Solid-State Circuits (JSSC), 1987.

[32] S. Chen, J. Xu, N. Nakka, Z. Kalbarczyk, and R. K. Iyer.
Defeating memory corruption attacks via pointer taintedness
detection. In Proceedings of the International Conference on
Dependable Systems and Networks (DSN), 2005.

[33] C. J. Corley and J. A. Statz. LISP workstation brings AI
power to a user’s desk. In Computer Design, January, 1985.

[34] J. R. Crandall, S. F. Wu, and F, T. Chong. Minos:
Architectural support for protecting control data. ACM
Trans. Archit. Code Optim. (TACO), 2006.

[35] M. Dalton, H. Kannan, and C. Kozyrakis. Raksha: A flexible
information flow architecture for software security. In
Proceedings of the 34th Annual International Symposium on
Computer Architecture (ISCA), 2007.

[36] D. Y. Deng and G. E. Suh. High-performance parallel
accelerator for flexible and efficient run-time monitoring. In
Proceedings of the International Conference on Dependable
Systems and Networks (DSN), 2012.

[37] J. Devietti, C. Blundell, M. M. K. Martin, and S. Zdancewic.
Hardbound: Architectural Support for Spatial Safety of the C
Programming Language. In Proceedings of the 13th
International Conference on Architectural Support for
Programming Languages and Operating Systems (ASPLOS),
2008.

[38] U. Dhawan, C. Hritcu, R. Rubin, N. Vasilakis, $. Chiricescu,
J. M. Smith, T. F. Knight, Jr, B. C. Pierce, and A. DeHon.
Architectural Support for Software-Defined Metadata
Processing. In Proceedings of the 20th International
Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2015.

[39] G. Dot, A. Martinez, and A. Gonzdélez. Analysis and
optimization of engines for dynamically typed languages. In
Proceedings of the 27th International Symposium on
Computer Architecture and High Performance Computing
(SBAC-PAD), 2015.

[40] B. Hackett and S.-y. Guo. Fast and Precise Hybrid Type
Inference for JavaScript. In Proceedings of the 33rd ACM
SIGPLAN Conference on Programming Language Design
and Implementation (PLDI), 2012.

[41] M. E. Houdek, F. G. Soltis, and R. L. Hoffman. Ibm
system/38 support for capability-based addressing. In
Proceedings of the 8th Annual Symposium on Computer
Architecture (ISCA), 1981.

[42] M. N. Kedlaya, J. Roesch, B. Robatmili, M. Reshadi, and
B. Hardekopf. Improved Type Specialization for Dynamic
Scripting Languages. In Proceedings of the 9th Dynamic
Languages Symposium (DLS), 2013.
[43] C. Kim, S. Kim, H. G. Cho, D. Kim, J. Kim, Y. H. Oh,
H. Jang, and J. W. Lee. Short-circuit dispatch: Accelerating
virtual machine interpreters on embedded processors. In
Proceedings of the 43rd Annual International Symposium on
Computer Architecture (ISCA), 2016.

[44] A. Kwon, U. Dhawan, J. M. Smith, T. F Knight, Jr., and
A. DeHon. Low-fat pointers: Compact encoding and efficient
gate-level implementation of fat pointers for spatial safety
and capability-based security. In Proceedings of the 2013
ACM SIGSAC Conference on Computer and
Communications Security (CCS), 2013.

[45] F. McKeen, I. Alexandrovich, A. Berenzon, C. V. Rozas,
H. Shafi, V. Shanbhogue, and U. R. Savagaonkar. Innovative
instructions and software model for isolated execution. In
Proceedings of the 2nd International Workshop on Hardware
and Architectural Support for Security and Privacy (HASP),
2013.

[46] D. A. Moon. Architecture of the symbolics 3600. In
Proceedings of the 12nd Annual International Symposium on
Computer Architecture (ISCA), 1985.

[47] T. Oh, H. Kim, N. P. Johnson, J. W. Lee, and D. I. August.
Practical Automatic Loop Specialization. In Proceedings of
the 18th International Conference on Architectural Support
for Programming Languages and Operating Systems
(ASPLOS), 2013.

[48] F. J. Pollack, G. W. Cox, D. W. Hammerstrom, K. C. Kahn,
K. K. Lai, and J. R. Rattner. Supporting ada memory
management in the iapx-432. In Proceedings of the Ist
International Symposium on Architectural Support for
Programming Languages and Operating Systems (ASPLOS),
1982.

[49] P. Ratanaworabhan, B. Livshits, and B. G. Zorn. JSMeter:
Comparing the behavior of JavaScript benchmarks with real
web applications. In Proceedings of the 2010 USENIX
Conference on Web Application Development (WebApps),
2010.

[50] P. Steenkiste and J. Hennessy. Tags and Type Checking in
LISP: Hardware and Software Approaches. In Proceedings
of the 2nd International Conference on Architectual Support
for Programming Languages and Operating Systems
(ASPLOS), 1987.

[51] G. E. Suh, J. W. Lee, D. Zhang, and S. Devadas. Secure
Program Execution via Dynamic Information Flow Tracking.
In Proceedings of the 11th International Conference on
Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2004.

[52] G. S. Taylor, P. N. Hilfinger, J. R. Larus, D. A. Patterson, and
B. G. Zorn. Evaluation of the SPUR Lisp Architecture. In
Proceedings of the 13rd Annual International Symposium on
Computer Architecture (ISCA), 1986.

[53] G. Venkataramani, I. Doudalis, Y. Solihin, and M. Prvulovic.
Flexitaint: A programmable accelerator for dynamic taint
propagation. In Proceedings of the 14th IEEE International
Symposium on High Performance Computer Architecture
(HPCA), 2008.

[54] J. Woodruff, R. N. Watson, D. Chisnall, S. W. Moore,
J. Anderson, B. Davis, B. Laurie, P. G. Neumann, R. Norton,
and M. Roe. The cheri capability model: Revisiting risc in an
age of risk. In Proceeding of the 41st Annual International
Symposium on Computer Architecuture (ISCA), 2014.

[55] A. Zakai. Emscripten: An LLVM-to-JavaScript Compiler. In
Proceedings of the ACM International Conference on Object
Oriented Programming Systems Languages and Applications
(OOPSLA), 2011.