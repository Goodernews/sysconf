[1] S. Arshad, A. Kharraz, and W. Robertson, “Include Me Out: In-Browser
Detection of Malicious Third-Party Content Inclusions,” in Proc. of Intl.
Conf. on Financial Cryptography, 2016.
[2] “Auditjs: Audits an NPM package.json file to identify known vulnerabilities,” GitHub, https://github.com/OSSIndex/auditjs.
[3] M. Backes, S. Bugiel, and E. Derr, “Reliable Third-Party Library
Detection in Android and its Security Applications,” in Proc. of CCS,
2016.
[4] A. Barth, C. Jackson, and J. C. Mitchell, “Robust Defenses for Cross-Site
Request Forgery,” in Proc. of CCS, 2008.
[5] M. A. Bashir, S. Arshad, W. Robertson, and C. Wilson, “Tracing
Information Flows Between Ad Exchanges Using Retargeted Ads,” in
Proc. of USENIX Security Symposium, 2016.
[6] “Bower: A package manager for the web,” https://bower.io/.
[7] A. Cahn, S. Alfeld, P. Barford, and S. Muthukrishnan, “An Empirical
Study of Web Cookies,” in Proc. of WWW, 2016.
[8] “Chrome Debugging Protocol,” https://developer.chrome.com/devtools/
docs/debugger-protocol.
[9] “Closure Compiler Compilation Levels,” April 2015, https://developers.
google.com/closure/compiler/docs/compilation_levels.
[10] P. Gill, V. Erramilli, A. Chaintreau, B. Krishnamurthy, K. Papagiannaki,
and P. Rodriguez, “Follow the Money: Understanding Economics of
Online Aggregation and Advertising,” in Proc. of IMC, 2013.
[11] “Google Hosted Libraries,” https://developers.google.com/speed/
libraries/, July 2016.
[12] M. Heiderich, “jQuery Migrate is a Sink, too?! or How jQuery Migrate
un-fixes a nasty DOMXSS without telling us.” April 2013, http://blog.
mindedsecurity.com/2013/04/jquery-migrate-is-sink-too.html.
[13] jQuery, “Write less, do more.” 2016, https://jquery.com/.
[14] “#9521 (XSS with $(location.hash) and $(#<tag>) is needed?) – jQuery
– Bug Tracker,” https://bugs.jquery.com/ticket/9521, June 2011.
[15] “jQuery() | jQuery API Documentation,” https://api.jquery.com/jQuery/.
[16] S. Lekies and M. Johns, “Lightweight Integrity Protection for Web
Storage-driven Content Caching,” in 6th Workshop on Web 2.0 Security
and Privacy (W2SP 2012), 2012.
[17] S. Lekies, B. Stock, and M. Johns, “25 Million Flows Later – Large-scale
Detection of DOM-based XSS,” in Proc. of CCS, 2013.
[18] Z. Li, S. Alrwais, X. Wang, and E. Alowaisheq, “Hunting the Red Fox
Online: Understanding and Detection of Mass Redirect-Script Injections,”
in Proc. of IEEE Symposium on Security and Privacy, 2014.
[19] “McAfee SmartFilter,” https://www.trustedsource.org/en/feedback/url?
action=checklist.
[20] J. Michel, “Library Detector for Chrome,” GitHub, April 2016, https:
//github.com/johnmichel/Library-Detector-for-Chrome.
[21] A. Nappa, R. Johnson, L. Bilge, J. Caballero, and T. Dumitras, “The
Attack of the Clones: A Study of the Impact of Shared Code on
Vulnerability Patching,” in Proc. of IEEE Symposium on Security and
Privacy, 2015.
[22] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker, W. Joosen,
C. Kruegel, F. Piessens, and G. Vigna, “You Are What You Include:
Large-scale Evaluation of Remote JavaScript Inclusions,” in Proc. of
CCS, 2012.
[23] “NPM: The Node Package Manager,” https://www.npmjs.com/.
[24] E. Oftedal, “Scanning Alexa Top 100,000 for JavaScript libraries
with known vulerabilities,” February 2014, http://erlend.oftedal.no/blog/
?blogid=142.
[25] E. Oftedal, “Scanning Fortune 500 for JavaScript libraries with known
vulerabilities,” February 2014, http://erlend.oftedal.no/blog/?blogid=143.
[26] E. Oftedal, “Scanning Norway for JavaScript libraries,” January 2014,
http://erlend.oftedal.no/blog/?blogid=140.
[27] E. Oftedal, “Retire.js,” GitHub, April 2016, https://github.com/RetireJS/
retire.js.
[28] T. Preston-Werner, “Semantic Versioning 2.0.0,” http://semver.org/.
[29] G. Richards, C. Hammer, B. Burg, and J. Vitek, “The Eval That Men
Do,” in Proc. of ECOOP, 2011.
[30] P. Saxena, S. Hanna, P. Poosankam, and D. Song, “FLAX: Systematic Discovery of Client-side Validation Vulnerabilities in Rich Web
Applications,” in Proc of NDSS, 2010.
[31] S. Son and V. Shmatikov, “The Postman Always Rings Twice: Attacking
and Defending postMessage in HTML5 Websites,” in Proc of NDSS,
2013.
[32] Sonatype, “The 2015 State of the Software Supply Chain Report: Hidden
Speed Bumps on the Road to “Continuous”,” Sonatype.com, 2015.
[33] “SWFObject,” GitHub, https://github.com/swfobject/swfobject.
[34] Y. Takamatsu, Y. Kosuga, and K. Kono, “Automated Detection of Session
Fixation Vulnerabilities (Poster),” in Proc. of WWW, 2010.
[35] D. R. Thomas, A. R. Beresford, T. Coudray, T. Sutcliffe, and A. Taylor,
“The Lifetime of Android API Vulnerabilities: Case Study on the
JavaScript-to-Java Interface,” Lecture Notes in Computer Science, vol.
9379, 2015.
[36] P. Vogt, F. Nentwich, N. Jovanovic, C. Kruegel, E. Kirda, and G. Vigna,
“Cross-Site Scripting Prevention with Dynamic Data Tainting and Static
Analysis,” in Proc of NDSS, 2007.
[37] W3C, “Subresource Integrity,” https://www.w3.org/TR/SRI/, May 2016.
[38] Wappalyzer, “Sites using JavaScript Frameworks,” https://wappalyzer.
com/categories/javascript-frameworks.
[39] C. Yue and H. Wang, “A Measurement Study of Insecure JavaScript
Practices on the Web,” in ACM Transactions on the Web, 2013.
