[1] Francois Bancilhon, David Maier, Yehoshua Sagiv, and Jeffrey D Ullman. Magic sets and other strange ways to implement
logic programs (extended abstract). In Proceedings of the Fifth
ACM SIGACT-SIGMOD Symposium on Principles of Database
Systems, PODS ’86, pages 1-15, New York, NY, USA, 1986.
ACM.

[2] Stephen M. Blackburn, Robin Garner, Chris Hoffmann, Asjad M. Khang, Kathryn S. McKinley, Rotem Bentzur, Amer Diwan, Daniel Feinberg, Daniel Frampton, Samuel Z. Guyer, Martin Hirzel, Antony Hosking, Maria Jump, Han Lee, J. Eliot B.
Moss, Aashish Phansalkar, Darko Stefanovié, Thomas VanDrunen, Daniel von Dincklage, and Ben Wiedermann. The
DaCapo benchmarks: Java benchmarking development and
analysis. In Proceedings of the 21st Annual ACM SIGPLAN
Conference on Object-oriented Programming Systems, Languages, and Applications, OOPSLA ’06, pages 169-190, New
York, NY, USA, 2006. ACM.

[3] Martin Bravenboer and Yannis Smaragdakis. Strictly declarative specification of sophisticated points-to analyses. In Proceedings of the 24th ACM SIGPLAN Conference on Object
Oriented Programming Systems Languages and Applications,
OOPSLA ’09, pages 243-262, New York, NY, USA, 2009.
ACM.

[4] S. Ceri, G. Gottlob, and L. Tanca. What you always wanted
to know about Datalog (and never dared to ask). JEEE
Transactions on Knowledge and Data Engineering, 1(1):146166, March 1989.

[5] Todd J. Green, Molham Aref, and Grigoris Karvounarakis.
LogicBlox, platform and language: A tutorial. In Proceedings of the Second International Conference on Datalog in
Academia and Industry, Datalog 2.0’12, pages 1-8, Berlin,
Heidelberg, 2012. Springer-Verlag.

[6] George Kastrinis and Yannis Smaragdakis. Hybrid contextsensitivity for points-to analysis. In Proceedings of the 34th
ACM SIGPLAN Conference on Programming Language Design
and Implementation, PLDI’ 13, pages 423-434, New York, NY,
USA, 2013. ACM.

[7] Chris Lattner and Vikram Adve. LLVM: A compilation framework for lifelong program analysis & transformation. In Proceedings of the International Symposium on Code Generation
and Optimization: Feedback-directed and Runtime Optimization, CGO ’04, pages 75—, Washington, DC, USA, 2004. IEEE
Computer Society.

[8] Ondéej Lhoték and Laurie Hendren. Evaluating the benefits
of context-sensitive points-to analysis using a BDD-based
implementation. ACM Transactions on Software Engineering
and Methodology, 18(1):3:1-3:53, October 2008.

[9] Percy Liang and Mayur Naik. Scaling abstraction refinement
via pruning. In Proceedings of the 32Nd ACM SIGPLAN
Conference on Programming Language Design and Implementation, PLDI 11, pages 590-601, New York, NY, USA, 2011.
ACM.

[10] Percy Liang, Omer Tripp, and Mayur Naik. Learning minimal abstractions. In Proceedings of the 38th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming
Languages, POPL 11, pages 3142, New York, NY, USA,
2011. ACM.

[11] Ana Milanova, Atanas Rountev, and Barbara G. Ryder. Parameterized object sensitivity for points-to analysis for Java.
ACM Transactions on Software Engineering and Methodology,
14(1):1-41, January 2005.

[12] Thomas Reps. Program analysis via graph reachability. Information and Software Technology, 40(11--12):701-726, 1998.

[13] Thomas Reps. Undecidability of context-sensitive datadependence analysis. ACM Transactions on Programming
Languages and Systems, 22(1):162-186, January 2000.

[14] Olin Shivers. Control-flow analysis of higher-order languages.
PhD thesis, Citeseer, 1991.

[15] Yannis Smaragdakis, Martin Bravenboer, and Ondiej Lhotdk.
Pick your contexts well: Understanding object-sensitivity. In
Proceedings of the 38th Annual ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages, POPL
"11, pages 17-30, New York, NY, USA, 2011. ACM.

[16] Yannis Smaragdakis, George Kastrinis, and George Balatsouras. Introspective analysis: Context-sensitivity, across the
board. In Proceedings of the 35th ACM SIGPLAN Conference
on Programming Language Design and Implementation, PLDI
14, pages 485-495, New York, NY, USA, 2014. ACM.

[17] Manu Sridharan and Rastislav Bodik. Refinement-based
context-sensitive points-to analysis for Java. In Proceedings
of the 27th ACM SIGPLAN Conference on Programming
Language Design and Implementation, PLDI ’06, pages 387-—
400, New York, NY, USA, 2006. ACM.

[18] Manu Sridharan, Denis Gopan, Lexin Shan, and Rastislav
Bodik. Demand-driven points-to analysis for Java. In Proceedings of the 20th Annual ACM SIGPLAN Conference on
Object-oriented Programming, Systems, Languages, and Applications, OOPSLA ’05, pages 59-76, New York, NY, USA,
2005. ACM.

[19] Tian Tan, Yue Li, and Jingling Xue. Making k-object-sensitive
pointer analysis more precise with still k-limiting. In International Static Analysis Symposium, pages 489-510. Springer,
2016.

[20] Raja Vallée-Rai, Phong Co, Etienne Gagnon, Laurie Hendren,
Patrick Lam, and Vijay Sundaresan. Soot - a Java bytecode optimization framework. In Proceedings of the 1999 Conference
of the Centre for Advanced Studies on Collaborative Research,
CASCON ’99, pages 13-. IBM Press, 1999.

[21] John Whaley and Monica S. Lam. Cloning-based contextsensitive pointer alias analysis using binary decision diagrams.
In Proceedings of the ACM SIGPLAN 2004 Conference on
Programming Language Design and Implementation, PLDI
°04, pages 131-144, New York, NY, USA, 2004. ACM.

[22] Guoqing Xu and Atanas Rountev. Merging equivalent contexts
for scalable heap-cloning-based context-sensitive points-to
analysis. In Proceedings of the 2008 International Symposium
on Software Testing and Analysis, ISSTA ’08, pages 225-236,
New York, NY, USA, 2008. ACM.

[23] Xin Zhang, Ravi Mangal, Radu Grigore, Mayur Naik, and
Hongseok Yang. On abstraction refinement for program analyses in Datalog. In Proceedings of the 35th ACM SIGPLAN
Conference on Programming Language Design and Implementation, PLDI ’14, pages 239-248, New York, NY, USA, 2014.
ACM.

[24] Xin Zheng and Radu Rugina. Demand-driven alias analysis for
C. In Proceedings of the 35th Annual ACM SIGPLAN-SIGACT
Symposium on Principles of Programming Languages, POPL
°08, pages 197-208, New York, NY, USA, 2008. ACM.

[25] Jianwen Zhu and Silvian Calman. Symbolic pointer analysis
revisited. In Proceedings of the ACM SIGPLAN 2004 Conference on Programming Language Design and Implementation,
PLDI ’04, pages 145-157, New York, NY, USA, 2004. ACM.

