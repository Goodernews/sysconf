[1] Guillaume Aupy, Anne Benoit, Thomas Hérault, Yves Robert, Frédéric Vivien,
and Dounia Zaidouni. 2013. On the Combination of Silent Error Detection
and Checkpointing. In Proceedings of the 2013 IEEE 19th Pacific Rim International Symposium on Dependable Computing (PRDC ’13). IEEE Computer Society,
Washington, DC, USA, 11–20. DOI:https://doi.org/10.1109/PRDC.2013.10
[2] A. Avizienis, J. C. Laprie, B. Randell, and C. Landwehr. 2004. Basic concepts and
taxonomy of dependable and secure computing. IEEE Transactions on Dependable
and Secure Computing (2004). DOI:https://doi.org/10.1109/TDSC.2004.2
[3] Wahid Bhimji, Debbie Bard, Melissa Romanus, David Paul, Andrey Ovsyannikov,
Brian Friesen, Matt Bryson, Joaquin Correa, Glenn K Lockwood, Vakho Tsulaia, and others. 2016. Accelerating science with the nersc burst buffer early
user program. Proceedings of Cray Users Group.[Online]. Available: https://cug.
org/proceedings/cug2016 proceedings/includes/files/pap162. pdf (2016).
[4] Shekhar Borkar. 2005. Designing Reliable Systems from Unreliable Components:
The Challenges of Transistor Variability and Degradation. IEEE Micro 25, 6 (Nov.
2005), 10–16.
[5] George et al. Bosilca. 2013. Unified Model for Assessing Checkpointing Protocols
at Extreme-scale. Concurr. Comput. : Pract. Exper. (2013), 2772–2791.
[6] Michael Carbin, Sasa Misailovic, Michael Kling, and Martin C. Rinard. 2011. Detecting and Escaping Infinite Loops with Jolt. In Proceedings of the 25th European
Conference on Object-oriented Programming (ECOOP’11).
[7] Marc Casas, Bronis R. de Supinski, Greg Bronevetsky, and Martin Schulz. Fault
Resilience of the Algebraic Multi-grid Solver. In Proceedings of the 26th ACM
International Conference on Supercomputing (ICS ’12). 91–100.
[8] Suresh Cheemalavagu, Pinar Korkmaz, Krishna V. Palem, Bilge E. S. Akgul, and
Lakshmi N. Chakrapani. 2005. A probabilistic CMOS switch and its realization
by exploiting noise. In the Proceedings of the IFIP international.
[9] V. K. Chippa, S. T. Chakradhar, K. Roy, and A. Raghunathan. Analysis and
characterization of inherent application resilience for approximate computing.
In Design Automation Conference (DAC), 2013.
[10] P. Cicotti, S. M. Mniszewski, and L. Carrington. An Evaluation of Threaded
Models for a Classical MD Proxy Application. In Hardware-Software Co-Design
for High Performance Computing (Co-HPC), 2014.
[11] P. Cicotti, S. M. Mniszewski, and L. Carrington. 2013. CoMD: A Classical Molecular Dynamics Mini-app. (2013). http://exmatex.github.io/CoMD/doxygen-mpi/
index.html
[12] J. J. Cook and C. Zilles. A characterization of instruction-level error derating and
its implications for error detection. In 2008 DSN. DOI:https://doi.org/10.1109/
DSN.2008.4630119
[13] J. T. Daly. 2006. A Higher Order Estimate of the Optimum Checkpoint Interval
for Restart Dumps. Future Gener. Comput. Syst. 22, 3 (Feb. 2006), 303–312. DOI:
https://doi.org/10.1016/j.future.2004.11.016
[14] Teresa Davies and Zizhong Chen. 2013. Correcting Soft Errors Online in LU
Factorization. In Proceedings of the 22Nd International Symposium on Highperformance Parallel and Distributed Computing (HPDC ’13). ACM, New York,
NY, USA, 167–178. DOI:https://doi.org/10.1145/2462902.2462920
[15] N DeBardeleben, J Laros, JT Daly, SL Scott, C Engelmann, and B Harrod. 2009.
High-end computing resilience: Analysis of issues facing the HEC community
and path-forward for research and development. Whitepaper, Dec (2009).
[16] James W. Demmel. 1997. Applied Numerical Linear Algebra. Society for Industrial
and Applied Mathematics, Philadelphia, PA, USA.
[17] Nosayba El-Sayed and Bianca Schroeder. 2014. Checkpoint/restart in practice:
When âĂŸsimple is betterâĂŹ. In 2014 IEEE International Conference on Cluster
Computing (CLUSTER). IEEE, 84–92.
[18] A. Chien et al. 2015. Versioned Distributed Arrays for Resilience in Scientific
Applications: Global View Resilience. Procedia Computer Science 51 (2015), 29 –
38. DOI:https://doi.org/10.1016/j.procs.2015.05.187
[19] G. Bosilca et al. MPICH-V: Toward a Scalable Fault Tolerant MPI for Volatile
Nodes. In Supercomputing, ACM/IEEE 2002 Conference.
[20] Ian Karlin et al. 2012. LULESH Programming Model and Performance Ports
Overview. Technical Report LLNL-TR-608824. 1–17 pages.
[21] Bo Fang, Qining Lu, Karthik Pattabiraman, Matei Ripeanu, and Sudhanva Gurumurthi. 2016. ePVF: An Enhanced Program Vulnerability Factor Methodology
for Cross-layer Resilience Analysis. In DSN.
[22] Shuguang Feng, Shantanu Gupta, Amin Ansari, and Scott Mahlke. 2010.
Shoestring: Probabilistic Soft Error Reliability on the Cheap. SIGPLAN Not.
45, 3 (March 2010), 385–396. DOI:https://doi.org/10.1145/1735971.1736063
[23] Marc Gamell, Keita Teranishi, Michael A. Heroux, Jackson Mayo, Hemanth
Kolla, Jacqueline Chen, and Manish Parashar. 2015. Local Recovery and Failure
Masking for Stencil-based Applications at Extreme Scales. In Proceedings of the
International Conference for High Performance Computing, Networking, Storage
and Analysis (SC ’15). ACM, New York, NY, USA, Article 70, 12 pages. DOI:
https://doi.org/10.1145/2807591.2807672
[24] B. Grigorian and G. Reinman. Accelerating divergent applications on SIMD
architectures using neural networks. In 2014 IEEE 32nd International Conference
on Computer Design (ICCD).
[25] Weining Gu, Z. Kalbarczyk, and R. K. Iyer. Error sensitivity of the Linux kernel
executing on PowerPC G4 and Pentium 4 processors. In Dependable Systems and
Networks, 2004 International Conference on.

[26] V. Gupta, D. Mohapatra, A. Raghunathan, and K. Roy. 2013. Low-Power Digital
Signal Processing Using Approximate Adders. IEEE Transactions on ComputerAided Design of Integrated Circuits and Systems 32, 1 (Jan 2013), 124–137.
[27] J. Han and M. Orshansky. Approximate computing: An emerging paradigm for
energy-efficient design. In 2013 18th IEEE European Test Symposium (ETS).
[28] Siva Kumar Sastry Hari, Sarita V. Adve, Helia Naeimi, and Pradeep Ramachandran. 2012. Relyzer: Exploiting Application-level Fault Equivalence to Analyze
Application Resiliency to Transient Faults. SIGPLAN Not. 47, 4 (March 2012),
123–134. DOI:https://doi.org/10.1145/2248487.2150990
[29] Nicholas J. Higham. Accuracy and Stability of Numerical Algorithms (second ed.).
Society for Industrial and Applied Mathematics, Philadelphia, PA, USA. xxx+680
pages.
[30] Chung hsing Hsu and Wu chun Feng. 2005. A Power-Aware Run-Time System
for High-Performance Computing. In Supercomputing, 2005. Proceedings of the
ACM/IEEE SC 2005 Conference. 1–1. DOI:https://doi.org/10.1109/SC.2005.3
[31] I.Karlin. 2012. LULESH Programming Model and Performance Ports Overview.
(2012). https://codesign.llnl.gov/pdfs/lulesh_Ports.pdf
[32] Los Alamos National Laboratory. 2016. APEX 2020. (2016). http://www.lanl.gov/
projects/apex/_assets/docs/2.4-RFP-Technical-Requirements-Document.doc
[33] Los Alamos National Laboratory. 2016. The PENNANT Mini-App v0.9. (2016).
https://github.com/losalamos/PENNANT
[34] Los Alamos National Laboratory. 2016. SNAP - SN Application Proxy Summary.
(2016). https://asc.llnl.gov/CORAL-benchmarks/Summaries/SNAP_Summary_
v1.3.pdf
[35] Los Alamos National Laboratory. 2016. SNAP: SN (Discrete Ordinates) Application Proxy v107. (2016). https://github.com/losalamos/SNAP
[36] G. Li, Q. Lu, and K. Pattabiraman. 2015. Fine-Grained Characterization of Faults
Causing Long Latency Crashes in Programs. In DSN. 450–461. DOI:https://doi.
org/10.1109/DSN.2015.36
[37] Don Libes. 1990. expect: Curing Those Uncontrollable Fits of Interaction. In
PROCEEDINGS OF THE SUMMER 1990 USENIX CONFERENCE. 183–192.
[38] Fan Long, Stelios Sidiroglou-Douskos, and Martin Rinard. 2014. Automatic
Runtime Error Repair and Containment via Recovery Shepherding. SIGPLAN
Not. (2014).
[39] Qining Lu, Karthik Pattabiraman, Meeta S. Gupta, and Jude A. Rivers. 2014.
SDCTune: A Model for Predicting the SDC Proneness of an Application for
Configurable Protection. In Proceedings of the 2014 International Conference on
Compilers, Architecture and Synthesis for Embedded Systems (CASES ’14). ACM,
New York, NY, USA, Article 23, 10 pages. DOI:https://doi.org/10.1145/2656106.
2656127
[40] C. D. Martino, Z. Kalbarczyk, R. K. Iyer, F. Baccanico, J. Fullop, and W. Kramer.
2014. Lessons Learned from the Analysis of System Failures at Petascale: The
Case of Blue Waters. In 2014 44th Annual IEEE/IFIP International Conference on
Dependable Systems and Networks. 610–621. DOI:https://doi.org/10.1109/DSN.
2014.62
[41] Sarah E. Michalak, William N. Rust, John T. Daly, Andrew J. DuBois, and David H.
DuBois. 2014. Correctness Field Testing of Production and Decommissioned
High Performance Computing Platforms at Los Alamos National Laboratory (SC
’14). Piscataway, NJ, USA, 609–619.
[42] Sparsh Mittal. 2016. A Survey of Techniques for Approximate Computing. ACM
Comput. Surv. (2016). DOI:https://doi.org/10.1145/2893356
[43] D. Nicholaeff, N. Davis, D. Trujillo, and R. W. Robey. 2012. Cell-Based Adaptive
Mesh Refinement Implemented with General Purpose Graphics Processing Units.
(2012).
[44] K. Palem and A. Lingamneni. What to do about the end of Moore’s law, probably!. In Design Automation Conference (DAC), 2012. DOI:https://doi.org/10.1145/
2228360.2228525
[45] H. et al. Patil. Pinpointing Representative Portions of Large Intel Itanium Programs with Dynamic Instrumentation. In MICRO-37.
[46] A. Petitet, R. C. Whaley, J. Dongarra, and A. Cleary. 2008. HPL - a portable
implementation of the high-performance linpack benchmark for distributedmemory computers. (2008). http://www.netlib.org/benchmark/hpl
[47] A. Rahimi, L. Benini, and R. K. Gupta. 2013. Spatial Memorization: Concurrent Instruction Reuse to Correct Timing Errors in SIMD Architectures. IEEE
Transactions on Circuits and Systems II: Express Briefs (Dec 2013).
[48] L. Rashid, K. Pattabiraman, and S. Gopalakrishnan. 2015. Characterizing the
Impact of Intermittent Hardware Faults on Programs. IEEE Transactions on
Reliability 64, 1 (March 2015), 297–310. DOI:https://doi.org/10.1109/TR.2014.
2363152
[49] Martin Rinard, Cristian Cadar, Daniel Dumitran, Daniel M Roy, and Tudor Leu.
2004. A dynamic technique for eliminating buffer overflow vulnerabilities (and
other memory errors). In Computer Security Applications Conference, 2004. 20th
Annual. IEEE, 82–90.
[50] Martin Rinard, Cristian Cadar, Daniel Dumitran, Daniel M. Roy, Tudor Leu,
and William S. Beebee, Jr. Enhancing Server Availability and Security Through
Failure-oblivious Computing (OSDI’04). USENIX Association. http://dl.acm.org/
citation.cfm?id=1251254.1251275

[51] Marc et al. Snir. 2014. Addressing failures in exascale computing. International
Journal of High Performance Computing Applications (2014).
[52] Noah Spurrier and contributors. 2013. Pexpect is a Pure Python Expect-like
module. (2013). https://pexpect.readthedocs.io/en/stable/index.html
[53] V. Sridharan, N. DeBardeleben, and K. Ferreira S. Blanchard, J. Stearley, J. Shalf,
and S. Gurumurthi. 2015. Memory Errors in Modern Systems: The Good, The
Bad, and the Ugly. In Proceedings of International Conference on Architectural
Support for Programming Languages and Operating Systems.
[54] C. Wang, F. Mueller, C. Engelmann, and S. L. Scott. 2010. Hybrid Checkpointing
for MPI Jobs in HPC Environments. In Parallel and Distributed Systems (ICPADS),
2010 IEEE 16th International Conference on. 524–533. DOI:https://doi.org/10.1109/
ICPADS.2010.48
[55] L. Wang, Z. Kalbarczyk, R. K. Iyer, and A. Iyengar. 2015. VM-ÎĳCheckpoint: Design, Modeling, and Assessment of Lightweight In-Memory VM Checkpointing.
IEEE Transactions on Dependable and Secure Computing (March 2015).
[56] Panruo Wu, Qiang Guan, Nathan DeBardeleben, Sean Blanchard, Dingwen Tao,
Xin Liang, Jieyang Chen, and Zizhong Chen. 2016. Towards Practical Algorithm
Based Fault Tolerance in Dense Linear Algebra. In Proceedings of the 25th ACM
International Symposium on High-Performance Parallel and Distributed Computing
(HPDC ’16). ACM, New York, NY, USA, 31–42. DOI:https://doi.org/10.1145/
2907294.2907315
[57] Z. Yang, A. Jain, J. Liang, J. Han, and F. Lombardi. 2013. Approximate XOR/XNORbased adders for inexact computing. In Nanotechnology (IEEE-NANO). DOI:
https://doi.org/10.1109/NANO.2013.6720793
[58] John W. Young. 1974. A First Order Approximation to the Optimum Checkpoint
Interval. Commun. ACM 17, 9 (Sept. 1974), 530–531. DOI:https://doi.org/10.1145/
361147.361115