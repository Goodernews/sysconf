[1] Apache benchmark. http://httpd.apache.org/docs/2.0/programs/ab.html.

[2] IDAPython. https://github.com/idapython.

[3] Itanium C++ ABI. https://mentorembedded. github.io/cxx-abi/abi.html.
[4] SysBench. http://sysbench.sourceforge.net.

[5] Valgrind. http://www.valgrind.org/.

[6] C++ ABI for the ARM Architecture. http://infocenter.arm.com/help/
topic/com.arm.doc.ihi004 1e/IH10041E_cppabi.pdf, 2015.

[7] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Control-Flow
Integrity. In ACM Conference on Computer and Communications
Security (CCS), 2005.

[8] P. Akritidis. Cling: A Memory Allocator to Mitigate Dangling Pointers.
In USENIX Security Symposium, 2010.

[9] D. Andriesse, X. Chen, V. van der Veen, A. Slowinska, and H. Bos.
An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries.
In USENIX Security Symposium, 2016.

[10] A. R. Bernat and B. P. Miller. Anywhere, Any-Time Binary Instrumentation. In ACM SIGPLAN-SIGSOFT Workshop on Program Analysis
for Software Tools and Engineering (PASTE), 2011.

[11] 8. J. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen, L. Davi,
A.-R. Sadeghi, T. Holz, B. De Sutter, and M. Franz. It’s a TRaP: Table
Randomization and Protection against Function-Reuse Attacks. In ACM
Conference on Computer and Communications Security (CCS), 2015.

[12] A. Fokin, K. Troshina, and A. Chernov. Reconstruction of Class Hierarchies for Decompilation of C++ Programs. In European Conference
on Software Maintenance and Reengineering (CSMR), 2010.

[13] R. Gawlik and T. Holz. Towards Automated Integrity Protection of
C++ Virtual Function Tables in Binary Programs. In Annual Computer
Security Applications Conference (ACSAC).

[14] J. Gray. C++: Under the Hood. http:/Avww.opentce.org/articles/files/
jangrayhood.pdf, 1994.

[15] I. Haller, E. Gdktas, E. Athanasopoulos, G. Portokalidis, and H. Bos.
Shrinkwrap: VTable protection without loose ends. In Annual Computer
Security Applications Conference (ACSAC), 2015.

[16] C. Isen and L. John. On the Object Orientedness of C++ programs in
SPEC CPU 2006. In SPEC Benchmark Workshop. Citeseer, 2008.

[17] W. Jin, C. Cohen, J. Gennari, C. Hines, §. Chaki, A. Gurfinkel,
J. Havrilla, and P. Narasimhan. Recovering C++ Objects From Binaries
Using Inter-Procedural Data-Flow Analysis. In ACM SIGPLAN Program Protection and Reverse Engineering Workshop (PPREW), 2014.

[18] O. Katz, R. El-Yaniv, and E. Yahav. Estimating Types in Binaries using
Predictive Modeling. ACM Symposium on Principles of Programming
Languages (POPL), 2016.

[19] J. Lettner, B. Kollenda, A. Homescu, P. Larsen, F, Schuster, L. Davi,
A.-R. Sadeghi, T. Holz, and M. Franz. Subversive-C: Abusing and
Protecting Dynamic Message Dispatch. In USENIX Annual Technical
Conference, 2016.

[20] Y. Liu, T. Zhou, K. Chen, H. Chen, and Y. Xia. Thwarting Memory
Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation.
In ACM Conference on Computer and Communications Security (CCS),
2015.

[21] A. Prakash, X. Hu, and H. Yin. vfGuard: Strict Protection for Virtual
Function Calls in COTS C++ Binaries. In Symposium on Network and
Distributed System Security (NDSS), 2015.

[22] P. Sarbinowski, V. P. Kemerlis, C. Giuffrida, and E. Athanasopoulos.
VTPin: Practical VTable Hijacking Protection for Binaries. In Annual
Computer Security Applications Conference (ACSAC), 2016.

[23] FE. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi, and
T. Holz. Counterfeit Object-oriented Programming: On the Difficulty
of Preventing Code Reuse Attacks in C++ Applications. In JEEE
Symposium on Security and Privacy (S&P), 2015.

[24] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino,
A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna.
(State of) The Art of War: Offensive Techniques in Binary Analysis.
In IEEE Symposium on Security and Privacy (S&P), 2016.

[25] B. Stroustrup. http://www.stroustrup.com/
applications.html.

C++ Applications.

[27] C. Tice, T. Roeder, P. Collingbourne, §. Checkoway, G. Erlingsson,
L. Lozano, and G. Pike. Enforcing Forward-Edge Control-Flow Integrity in GCC & LLVM. In USENIX Security Symposium, 2014.

[28] V. van der Veen, D. Andriesse, E. Géktas, B. Gras, L. Sambuc,
A. Slowinska, H. Bos, and C. Giuffrida. Practical Context-Sensitive
CFI. In ACM Conference on Computer and Communications Security
(CCS), 2015.

[29] V. van der Veen, E. Géktas, M. Contag, A. Pawlowski, X. Chen,
S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and C. Giuffrida) A
Tough call: Mitigating Advanced Code-Reuse Attacks At The Binary
Level. In IEEE Symposium on Security and Privacy (S&P), 2016.

[30] C. Zhang, S. A. Cart, T. Li, Y. Ding, C. Song, M. Payer, and D. Song.
VTrust: Regaining Trust on Virtual Calls. In Symposium on Network
and Distributed System Security (NDSS), 2016.