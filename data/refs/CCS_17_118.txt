
[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control- flow Integrity. In Proceedings of the 12th ACM Conference on Computer and Communications Security (CCS). 340–353.
[2] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2009. Control-flow Integrity Principles, Implementations, and Applications. ACM Transactions on Information and System Security (TISSEC) 13, 1 (2009).
[3] Tigist Abera, N. Asokan, Lucas Davi, Jan-Erik Ekberg, Thomas Nyman, Andrew Paverd, Ahmad-Reza Sadeghi, and Gene Tsudik. 2016. C-FLAT: Control-Flow Attestation for Embedded Systems Software. In Proceedings of the 23rd ACM Conference on Computer and Communications and Security (CCS).
[4] Periklis Akritidis, Cristian Cadar, Costin Raiciu, Manuel Costa, and Miguel Castro. 2008. Preventing Memory Error Exploits with WIT. In Proceedings of the 29th IEEE Symposium on Security and Privacy (S&P). 263–277.
[5] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump- oriented Programming: A New Class of Code-reuse Attacks. In Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (ASIACCS). 30–40.
[6] Dimitar Bounov, Rami Gökhan Kici, and Sorin Lerner. 2016. Protecting C++ Dy- namic Dispatch Through VTable Interleaving. In Proceedings of the 23rd Network and Distributed System Security Symposium (NDSS).
[7] Nathan Burow, Scott A. Carr, Stefan Brunthaler, Mathias Payer, Joseph Nash, Per Larsen, and Michael Franz. 2016. Control-Flow Integrity: Precision, Security, and Performance. CoRR abs/1602.04056 (2016).
[8] Matúš Chochlík and Axel Naumann. 2016. Static Reflection (revision 4). C++ Standards Committee Paper P0194R0. (2016).
[9] Mauro Conti, Stephen J. Crane, Michael Franz, Per Larsen, Marco Negro, Christo- pher Liebchen, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Effectiveness of Control-Flow Integrity under Stack Attacks. In Proceedings of the 22nd ACM Conference on Computer and Communications and Security (CCS). 952–963.
[10] Stephen J. Crane, Per Larsen, Stefan Brunthaler, and Michael Franz. 2013. Booby Trapping Software. In Proceedings of the 2013 on New Security Paradigms Workshop (NSPW). 95–106.
[11] Stephen J. Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen, Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function-Reuse Attacks. In Proceedings of the 22nd ACM Conference on Computer and Communications and Security (CCS). 243–255.
[12] Karl Crary, Robert Harper, and Sidd Puri. 1999. What is a Recursive Module?. In Proceedings of the 20th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 50–63.
[13] John Criswell, Nathan Dautenhahn, and Vikram Adve. 2014. KCoFI: Complete Control-Flow Integrity for Commodity Operating System Kernels. In Proceedings of the 35th IEEE Symposium on Security and Privacy (S&P). 292–307.
[14] Lucas Davi, Ra Dmitrienko, Manuel Egele, Thomas Fischer, Thorsten Holz, Ralf Hund, Stefan Nürnberger, and Ahmad-Reza Sadeghi. 2012. MoCFI: A Framework to Mitigate Control-flow Attacks on Smartphones. In Proceedings of the 19th Network and Distributed System Security Symposium (NDSS).
[15] Lucas Davi, Matthias Hanreich, Debayan Paul, Ahmad-Reza Sadeghi, Patrick Koeberl, Dean Sullivan, Orlando Arias, and Yier Jin. 2015. HAFIX: Hardware- Assisted Flow Integrity eXtension. In Proceedings of the 52th ACM/EDAC/IEEE Design Automation Conference (DAC). 1–6.
[16] Lucas Davi, Patrick Koeberl, and Ahmad-Reza Sadeghi. 2014. Hardware- assisted Fine-grained Control-flow Integrity: Towards Efficient Protection of Embedded Systems Against Software Exploitation. In Proceedings of the 51th ACM/EDAC/IEEE Design Automation Conference (DAC). 1–6.
[17] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In Proceedings of the 23rd USENIX Security Symposium. 401–416.
[18] Ruan de Clercq, Ronald De Keulenaer, Bart Coppens, Bohan Yang, Pieter Maene, Koen De Bosschere, Bart Preneel, Bjorn De Sutter, and Ingrid Verbauwhede. 2016. SOFIA: Software and Control Flow Integrity Architecture. In Design, Automation & Test in Europe Conference & Exhibition (DATE). 1172–1177.
[19] Joe Duffy. 2008. Concurrent Programming on Windows. Addison-Wesley.
[20] Úlfar Erlingsson, Martín Abadi, Michael Vrable, Mihai Budiu, and George C. Necula. 2006. XFI: Software Guards for System Address Spaces. In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation
(OSDI). 75–88.
[21] Chris Exton, Damien Watkins, and Dean Thompson. 1997. Comparisons Between
CORBA IDL & COM/DCOM MIDL: Interfaces for Distributed Computing. In
Proceedings of the 25th Technology of Object-Oriented Languages and Systems
Conference (TOOLS). 15–32.
[22] Robert Bruce Findler and Matthias Felleisen. 2002. Contracts for Higher-Order
Functions. In Proceedings of the 7th ACM SIGPLAN International Conference on
Functional Programming (ICFP). 48–59.
[23] Robert Gawlik and Thorsten Holz. 2014. Towards Automated Integrity Protection
of C++ Virtual Function Tables in Binary Programs. In Proceedings of the 30th
Annual Computer Security Applications Conference (ACSAC). 396–405.
[24] Xinyang Ge, Weidong Cui, and Trent Jaeger. 2017. GRIFFIN: Guarding Control Flows Using Intel Processor Trace. In Proceedings of the 22nd ACM International Conference on Architectural Support for Programming Languages and Operating
Systems (ASPLOS). 585–598.
[25] Xinyang Ge, Nirupama Talele, Mathias Payer, and Trent Jaeger. 2016. Fine-
Grained Control-Flow Integrity for Kernel Software. In Proceedings of the 1st
IEEE European Symposium on Security and Privacy (EuroS&P). 179–194.
[26] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014. Out of Control: Overcoming Control-Flow Integrity. In Proceedings of the 35th
IEEE Symposium on Security and Privacy (S&P). 575–589.
[27] David N. Gray, John Hotchkiss, Seth LaForge, Andrew Shalit, and Toby Weinberg.
1998. Modern Languages and Microsoft’s Component Object Model. Communi- cations of the ACM (CACM) 41, 5 (1998), 55–65.
[28] Yufei Gu, Qingchuan Zhao, Yinqian Zhang, and Zhiqiang Lin. 2017. PT-CFI: Transparent Backward-Edge Control Flow Violation Detection Using Intel Pro- cessor Trace. In Proceedings of the 7th ACM Conference on Data and Application Security and Privacy (CODASPY). 173–184.
[29] István Haller, Enes Göktas, Elias Athanasopoulos, Georgios Portokalidis, and Herbert Bos. 2015. ShrinkWrap: VTable Protection without Loose Ends. In Pro- ceedings of the 31th Annual Computer Security Applications Conference (ACSAC). 341–350.
[30] Kevin W. Hamlen, Greg Morrisett, and Fred B. Schneider. 2006. Computabil- ity Classes for Enforcement Mechanisms. ACM Transactions on Programming Languages and Systems (TOPLAS) 28, 1 (2006), 175–205.
[31] Norm Hardy. 1988. The Confused Deputy: (Or Why Capabilities Might Have Been Invented). ACM SIGOPS Operating Systems Review 22, 4 (1988), 36–38.
[32] Dongseok Jang, Zachary Tatlock, and Sorin Lerner. 2014. SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks. In Proceedings of the 21st Network and Distributed System Security Symposium (NDSS).
[33] Vasileios P. Kemerlis, Georgios Portokalidis, and Angelos D. Keromytis. 2012. kGuard: Lightweight Kernel Protection against Return-to-user Attacks. In Pro- ceedings of the 21st USENIX Security Symposium. 459–474.
[34] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George Candea, R. Sekar, and Dawn Song. 2014. Code-pointer Integrity. In Proceedings of the USENIX Symposium on Operating Systems Design and Implementation (OSDI). 147–163.
[35] Jay Ligatti, Lujo Bauer, and David Walker. 2009. Run-time Enforcement of Nonsafety Policies. ACM Transactions on Information and Systems Security (TISSEC) 12, 3 (2009).
[36] Ali José Mashtizadeh, Andrea Bittau, Dan Boneh, and David Mazières. 2015. CCFI: Cryptographically Enforced Control Flow Integrity. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS). 941–951.
[37] Stephen McCamant and Greg Morrisett. 2006. Evaluating SFI for a CISC Archi- tecture. In Proceedings of the 15st USENIX Security Symposium.
[38] M.D. McIlroy. 1968. Mass Produced Software Components. In Proceedings of the NATO Software Engineering Conference, Peter Naur and Brian Randell (Eds.). 138–156.
[39] Castro Miguel, Costa Manuel, Martin Jean-Philippe, Peinado Marcus, Akritidis Periklis, Donnelly Austin, Barham Paul, and Black Richard. 2009. Fast Byte- granularity Software Fault Isolation. In Proceedings of the 22nd ACM Symposium on Operating Systems Principles (SOSP). 45–58.
[40] Vishwath Mohan, Per Larsen, Stefan Brunthaler, Kevin W. Hamlen, and Michael Franz. 2015. Opaque Control-Flow Integrity. In Proceedings of the 22nd Network and Distributed System Security Symposium (NDSS).
[41] Santosh Nagarakatte, Jianzhou Zhao, Milo M. K. Martin, and Steve Zdancewic. 2010. CETS: Compiler-Enforced Temporal Safety for C. In Proceedings of the 9th International Symposium on Memory Management (ISMM). 31–40.
[42] Christoulakis Nick, Christou George, Athanasopoulos Elias, and Ioannidis Sotiris. 2016. HCFI: Hardware-enforced Control-Flow Integrity. In Proceedings of the 6th ACM Conference on Data and Application Security and Privacy (CODASPY). 38–49.
[43] Ben Niu and Gang Tan. 2013. Monitor Integrity Protection with Space Efficiency and Separate Compilation. In Proceedings of the 21st ACM Conference on Computer and Communications Security (CCS). 199–210.
[44] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In Proceedings of the 35th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI). 577–587.
[45] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-in-time Compilation Using Modular Control-flow Integrity. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS). 1317–1328.
[46] Ben Niu and Gang Tan. 2015. Per-Input Control-flow Integrity. In Proceedings of the 22nd ACM Conference on Computer and Communications Security (CCS). 914–926.
[47] M.K. Pawar, Ravindra Patel, and N.S. Chaudhari. 2013. Interoperability Between .Net Framework and Python in Component Way. International J. of Computer Science Issues (IJCSI) 10, 1 (2013), 165–170.
[48] Mathias Payer, Antonio Barresi, and Thomas R. Gross. 2015. Fine-Grained Control-Flow Integrity Through Binary Hardening. In Proceedings of the 12th International Conference on Detection of Intrusions and Malware, and Vulnerability Assessment (DIMVA). 144–164.
[49] Jannik Pewny and Thorsten Holz. 2013. Control-flow Restrictor: Compiler-based CFI for iOS. In Proceedings of the 29th Annual Computer Security Applications Conference (ACSAC). 309–318.
[50] Aravind Prakash, Xunchao Hu, and Heng Yin. 2015. vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries. In Proceedings of the 22nd Network and Distributed System Security Symposium (NDSS).
[51] Ryan Roemer, Erik Buchanan, Hovav Shacham, and Stefan Savage. 2012. Return- Oriented Programming: Systems, Languages, and Applications. ACM Transac- tions on Information and System Security (TISSEC) 15, 1 (2012).
[52] Ahmad-Reza Sadeghi, Lucas Davi, and Per Larsen. 2015. Securing Legacy Soft- ware against Real-World Code-Reuse Exploits: Utopia, Alchemy, or Possible
Future?. In Proceedings of the 10th ACM Symposium on Information, Computer
and Communications Security (ASIACCS). 55–61.
[53] Fred B. Schneider. 2000. Enforceable Security Policies. ACM Transactions on
Information and Systems Security (TISSEC) 3, 1 (2000), 30–50.
[54] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming. In
Proceedings of the 36th IEEE Symposium on Security and Privacy (S&P). 745–762.
[55] Jack Tang. 2015. Exploring Control Flow Guard in Windows 10. Technical Report.
Trend Micro Threat Solution Team.
[56] Caroline Tice. 2012. Improving Function Pointer Security for Virtual Method
Dispatches. In GNU Cauldron Work.
[57] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar
Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control- Flow Integrity in GCC & LLVM. In Proceedings of the 23rd USENIX Security Symposium. 941–955.
[58] Victor van der Veen, Enes Göktas, Moritz Contag, Andre Pawlowski, Xi Chen, Sanjay Rawat, Herbert Bos, Thorsten Holz, Elias Athanasopoulos, and Cristiano Giuffrida. 2016. A Tough Call: Mitigating Advanced Code-Reuse Attacks at the Binary Level. In Proceedings of the 37th IEEE Symposium on Security and Privacy (S&P). 934–953.
[59] David Vandevoorde and Nicolai M. Josuttis. 2002. C++ Templates: The Complete Guide. Addison-Wesley.
[60] Steve Vinoski. 1997. CORBA: Integrating Diverse Applications Within Dis- tributed Heterogeneous Environments. IEEE Communications Magazine 35, 2 (1997), 46–55.
[61] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and Susan L. Graham. 1993. Efficient Software-based Fault Isolation. In Proceedings of the 14th ACM Sympo- sium on Operating Systems Principles (SOSP). 203–216.
[62] Minghua Wang, Heng Yin, Abhishek Vasisht Bhaskar, Purui Su, and Dengguo Feng. 2015. Binary Code Continent: Finer-Grained Control Flow Integrity for Stripped Binaries. In Proceedings of the 31st Annual Computer Security Applications Conference (ACSAC). 331–340.
[63] Zhi Wang and Xuxian Jiang. 2010. HyperSafe: A Lightweight Approach to Provide Lifetime Hypervisor Control-Flow Integrity. In Proceedings of the 31st IEEE Symposium on Security and Privacy (S&P). 380–395.
[64] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012. Bi- nary Stirring: Self-randomizing Instruction Addresses of Legacy x86 Binary Code. In Proceedings of the 19th ACM Conference on Computer and Communications Security (CCS). 157–168.
[65] Richard Wartell, Vishwath Mohan, Kevin W. Hamlen, and Zhiqiang Lin. 2012. Securing Untrusted Code via Compiler-Agnostic Binary Rewriting. In Proceedings of the 28th Annual Computer Security Applications Conference (ACSAC). 299–308.
[66] Richard Wartell, Yan Zhou, Kevin W. Hamlen, and Murat Kantarcioglu. 2014. Shingled Graph Disassembly: Finding the Undecidable Path. In Proceedings of the 18th Pacific-Asia Conference on Knowledge Discovery and Data Mining (PAKDD). 273–285.
[67] Patrick Wollgast, Robert Gawlik, Behrad Garmany, Benjamin Kollenda, and Thorsten Holz. 2016. Automated Multi-architectural Discovery of CFI-Resistant Code Gadgets. In Proceedings of the 21st European Symposium on Research in Computer Security (ESORICS). 602–620.
[68] Yubin Xia, Yutao Liu, Haibo Chen, and Binyu Zang. 2012. CFIMon: Detecting Violation of Control Flow Integrity Using Performance Counters. In Proceedings of the 42nd Annual IEEE/IFIP International Conference on Dependable Systems and Networks(DSN). 1–12.
[69] Bennet Yee, David Sehr, Greg Dardyk, Brad Chen, Robert Muth, Tavis Ormandy, Shiki Okasaka, Neha Narula, and Nicholas Fullagar. 2009. Native Client: A Sandbox for Portable, Untrusted x86 Native Code. In Proceedings of the 30th IEEE Symposium on Security and Privacy (S&P). 79–93.
[70] Pinghai Yuan, Qingkai Zeng, and Xuhua Ding. 2015. Hardware-assisted Fine- grained Code-reuse Attack Detection. In Proceedings of the 18th International Symposium on Research in Attacks, Intrusions, and Defenses (RAID). 66–85.
[71] Chao Zhang, Scott A. Carr, Tongxin Li, Yu Ding, Chengyu Song, Mathias Payer, and Dawn Song. 2016. VTrust: Regaining Trust on Virtual Calls. In Proceedings of the 23rd Network and Distributed System Security Symposium (NDSS).
[72] Chao Zhang, Chengyu Song, Kevin Zhijie Chen, Zhaofeng Chen, and Dawn Song. 2015. VTint: Protecting Virtual Function Tables’ Integrity. In Proceedings of the 22nd Network and Distributed System Security Symposium (NDSS).
[73] Chao Zhang, Tao Wei, Zhaofeng Chen, Lei Duan, Laszlo Szekeres, Stephen McCamant, Dawn Song, and Wei Zo. 2013. Practical Control Flow Integrity and Randomization for Binary Executables. In Proceedings of the 34th IEEE Symposium on Security and Privacy (S&P). 559–573.
[74] Mingwei Zhang and R. Sekar. 2013. Control Flow Integrity for COTS Binaries. In Proceedings of the 22nd USENIX Conference on Security (USENIX). 337–352.

