[1] D. H. Albonesi. Selective cache ways: On-demand cache resource
allocation. In Intl. Symp. on Microarchitecture (MICRO), 1999.
[2] AnandTech.
ARM Challenging Intel in the Server Market: An
Overview. http://www.anandtech.com/show/8776/arm-challinging-intelin-the-server-market-an-overview/4, 2014.
[3] L. A. Barroso and U. Hölzle. The datacenter as a computer: An
introduction to the design of warehouse-scale machines. Synthesis
lectures on computer architecture, 4(1):1–108, 2009.
[4] N. Beckmann and D. Sanchez. Jigsaw: scalable software-defined caches.
In Intl. Conf. on Parallel Architectures and Compilation Techniques
(PACT), 2013.
[5] D. J. Bernstein. Cache-timing attacks on AES, 2005.
[6] Cavium Inc. ThunderX Family of Workload Optimized Processors.
http://www.cavium.com/pdfFiles/ThunderX PB p12 Rev1.pdf, 2013.
[7] Cloudsuite. Cloudsuite.
http://cloudsuite.ch/datacaching/.
[8] C. Delimitrou and C. Kozyrakis. The Netflix challenge: Datacenter
edition. Computer Architecture Letters (CAL), 2013.
[9] C. Delimitrou and C. Kozyrakis. Paragon: QoS-aware scheduling for
heterogeneous datacenters. In Intl. Conf. on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), 2013.
[10] C. Delimitrou and C. Kozyrakis. Quasar: Resource-efficient and QoSaware cluster management. In Intl. Conf. on Architectural Support for
Programming Languages and Operating Systems (ASPLOS), 2014.
[11] DigitalOcean.
Transparent huge pages and alternative memory
allocators: A cautionary tale.
https://www.digitalocean.com/company/blog/transparent-huge-pagesand-alternative-memory-allocators/.
[12] M. Dillon. Page coloring optimizations.
http://www.freebsd.org/doc/en US.ISO8859-1/articles/vm-design/pagecoloring-optimizations.html.
[13] S. Eyerman and L. Eeckhout. System-level performance metrics for
multiprogram workloads. IEEE MICRO, 28(3):42–53, 2008.
[14] M. Ferdman, A. Adileh, O. Kocberber, S. Volos, M. Alisafaee, D. Jevdjic, C. Kaynak, A. D. Popescu, A. Ailamaki, and B. Falsafi. Clearing the
clouds: a study of emerging scale-out workloads on modern hardware.
In Intl. Conf. on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2012.
[15] A. Herdrich, E. Verplanke, P. Autee, R. Illikkal, C. Gianos, R. Singhal,
and R. Iyer. Cache QoS: from concept to reality in the Intel Xeon processor E5-2600 v3 product family. In Intl. Symp. on High Performance
Computer Architecture (HPCA), 2016.
[16] IBM Inc. 64KB pages on Linux for Power systems.
https://www.ibm.com/developerworks/community/wikis/home?lang=
en#!/wiki/Welcome+to+High+Performance+Computing+(HPC)
+Central/page/64KB+pages+on+Linux+for+Power+systems, 2012.
[17] R. H. Inc. Huge pages and transparent huge pages.
https://access.redhat.com/documentation/en-US/Red Hat Enterprise
Linux/6/html/Performance Tuning Guide/s-memory-transhuge.html.
[18] V. Karakostas, O. S. Unsal, M. Nemirovsky, A. Cristal, and M. Swift.
Performance analysis of the memory management unit under scale-out
workloads. In IEEE Intl. Symp. on Workload Characterization (IISWC),
2014.
[19] R. E. Kessler and M. D. Hill. Page placement algorithms for large
real-indexed caches. ACM Trans. Comput. Syst., 1992.
[20] K. Kirkconnell. Often overlooked linux os tweaks.
http://blog.couchbase.com/often-overlooked-linux-os-tweaks.
[21] H. Lee, S. Cho, and B. R. Childers. Cloudcache: Expanding and
shrinking private caches. In Intl. Symp. on High Performance Computer
Architecture (HPCA), 2011.

[22] J. Lin, Q. Lu, X. Ding, Z. Zhang, X. Zhang, and P. Sadayappan. Gaining
insights into multicore cache partitioning: Bridging the gap between
simulation and real systems. In Intl. Symp. on High Performance
Computer Architecture (HPCA), 2008.
[23] L. Liu, Z. Cui, M. Xing, Y. Bao, M. Chen, and C. Wu. A software
memory partition approach for eliminating bank-level interference in
multicore systems. In Intl. Conf. on Parallel Architectures and Compilation Techniques (PACT), 2012.
[24] L. Liu, Y. Li, Z. Cui, Y. Bao, M. Chen, and C. Wu. Going vertical
in memory management: Handling multiplicity by multi-policy. In Intl.
Symp. on Computer Architecture (ISCA), 2014.
[25] D. Lo, L. Cheng, R. Govindaraju, P. Ranganathan, and C. Kozyrakis.
Heracles: Improving resource efficiency at scale. In Intl. Symp. on
Computer Architecture (ISCA), 2015.
[26] R. Manikantan, K. Rajan, and R. Govindarajan. Probabilistic shared
cache management (PriSM). In Intl. Symp. on Computer Architecture
(ISCA), 2012.
[27] MongoDB. Disable transparent huge pages (thp).
https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/.
[28] N. Muralimanohar, R. Balasubramonian, and N. P. Jouppi. Cacti 6.0: A
tool to model large caches. HP Laboratories, 2009.
[29] B. Pham, J. Veselỳ, G. H. Loh, and A. Bhattacharjee. Large pages and
lightweight memory management in virtualized environments: can you
have it both ways? In Intl. Symp. on Microarchitecture (MICRO), 2015.
[30] M. K. Qureshi and Y. N. Patt. Utility-based cache partitioning: A
low-overhead, high-performance, runtime mechanism to partition shared
caches. In Intl. Symp. on Microarchitecture (MICRO), 2006.
[31] J. Renau, B. Fraguela, J. Tuck, W. Liu, M. Prvulovic, L. Ceze,
S. Sarangi, P. Sack, K. Strauss, and P. Montesinos. SESC simulator,
January 2005. http://sesc.sourceforge.net.
[32] R. H. Saavedra, R. S. Gaines, and M. J. Carlton. Micro benchmark
analysis of the KSR1. In ACM/IEEE Conf. on Supercomputing, 1993.
[33] D. Sanchez and C. Kozyrakis. The zcache: Decoupling ways and
associativity. In Intl. Symp. on Microarchitecture (MICRO), 2010.
[34] D. Sanchez and C. Kozyrakis. Vantage: scalable and efficient fine-grain
cache partitioning. In Intl. Symp. on Computer Architecture (ISCA),
2011.
[35] T. Sherwood, B. Calder, and J. Emer. Reducing cache misses using
hardware and software page placement. In Intl. Conf. on Supercomputing
(ICS), 1999.
[36] Standard Performance Evaluation Corporation.
SPEC CPU2000.
http://www.spec.org/cpu2000/, 2000.
[37] Standard Performance Evaluation Corporation.
SPEC CPU2006.
http://www.spec.org/cpu2006/, 2006.
[38] G. E. Suh, S. Devadas, and L. Rudolph. A new memory monitoring
scheme for memory-aware scheduling and partitioning. In Intl. Symp.
on High Performance Computer Architecture (HPCA), 2002.
[39] The OVH group labs. ARM Cloud.
https://www.runabove.com/armcloud.xml, 2016.
[40] D. M. Tullsen and J. A. Brown. Handling long-latency loads in a simultaneous multithreading processor. In Intl. Symp. on Microarchitecture
(MICRO), 2001.
[41] R. Wang and L. Chen. Futility scaling: High-associativity cache
partitioning. In Intl. Symp. on Microarchitecture (MICRO), 2014.
[42] X. Wang and J. F. Martı́nez. Xchange: A market-based approach to
scalable dynamic multi-resource allocation in multicore architectures.
In Intl. Symp. on High Performance Computer Architecture (HPCA),
2015.
[43] X. Wang and J. F. Martı́nez. ReBudget: Trading off efficiency vs. fairness in market-based multicore resource allocation via runtime budget
reassignment. In Intl. Conf. on Architectural Support for Programming
Languages and Operating Systems (ASPLOS), 2016.
[44] S. Yang, M. D. Powell, B. Falsafi, K. Roy, and T. Vijaykumar. An
integrated circuit/architecture approach to reducing leakage in deepsubmicron high-performance i-caches. In Intl. Symp. on High Performance Computer Architecture (HPCA), 2001.
[45] S.-H. Yang, M. D. Powell, B. Falsafi, and T. Vijaykumar. Exploiting
choice in resizable cache design to optimize deep-submicron processor
energy-delay. In Intl. Symp. on High Performance Computer Architecture
(HPCA), 2002.
[46] Y. Ye, R. West, Z. Cheng, and Y. Li. Coloris: a dynamic cache
partitioning system using page coloring. In Intl. Conf. on Parallel
Architectures and Compilation Techniques (PACT), 2014.
[47] H. Yun, R. Mancuso, Z.-P. Wu, and R. Pellizzoni. PALLOC: Dram
bank-aware memory allocator for performance isolation on multicore
platforms. In IEEE Real-Time and Embedded Technology and Applications Symposium, 2014.
[48] X. Zhang, S. Dwarkadas, and K. Shen. Towards practical page
coloring-based multicore cache management. In European conference
on Computer systems (EuroSys), 2009.