[1] 2012. Dynamic Parallelism in CUDA. http://developer.download.nvidia.com/
assets/cuda/docs/TechBrief_Dynamic_Parallelism_in_CUDA_v2.pdf. (2012).

[2] 2016. CUDA Programming Guide. https://docs.nvidia.com/cuda/
cuda-c-programming-guide/. (2016). Accessed: 09-27-2016.

[3] 2017. CUDA 9 Features Revealed: Volta, Cooperative Groups and More. https:
//devblogs.nvidia.com/parallelforall/cuda-9-features-revealed/. (2017).

[4] Itai Avron and Ran Ginosar. [n. d.]. Hardware Scheduler Performance on the
Plural Many-Core Architecture. In Proceedings of the 3rd International Workshop
on Many-core Embedded Systems (MES ’15). ACM, New York, NY, USA, 48-51.

[5] Ali Bakhoda, George L Yuan, Wilson WL Fung, Henry Wong, and Tor M Aamodt.

2009. Analyzing CUDA workloads using a detailed GPU simulator. In Perfor
mance Analysis of Systems and Software, 2009. ISPASS 2009, IEEE International

Symposium on, TEEE, 163-174.

[6] Mehmet E. Belviranli, Chih-Hsun Chou, Laxmi N Bhuyan, and Rajiv Gupta. 2014,

A paradigm shift in GP-GPU computing: task based execution of applications with

dynamic data dependencies. In Proceedings of the sixth international workshop

on Data intensive distributed computing. ACM, 29-34.

[7] Mehmet E. Belviranli, Peng Deng, Laxmi N. Bhuyan, Rajiv Gupta, and Qi Zhu.
2015. PeerWave: Exploiting Wavefront Parallelism on GPUs with Peer-SM
Synchronization. In Proceedings of the 29th ACM on International Conference on
Supercomputing (ICS ’15). ACM, New York, NY, USA, 25-35.

[8] Lars Bergstrom and John Reppy. 2012. Nested data-parallelism on the GPU. In
ACM SIGPLAN Notices, Vol. 47. ACM, 247-258.

[9] Berkin Bilgic, Berthold KP Horn, and Ichiro Masaki. 2010. Efficient integral
image computation on the GPU. In Intelligent Vehicles Symposium (IV), 2010
IEEE, TEEE, 528-533.

[10] Guoyang Chen and Xipeng Shen. 2015. Free launch: optimizing GPU dynamic
kernel launches through thread reuse. In Microarchitecture (MICRO), 2015 48th
Annual IEEE/ACM International Symposium on. TEEE, 407-419.

[11] Long Chen, Oreste Villa, Sriram Krishnamoorthy, and Guang R Gao. 2010. Dynamic load balancing on single-and multi-GPU systems. In Parallel & Distributed
Processing (IPDPS), 2010 IEEE International Symposium on. TEEE, 1-12.

[12] Peng Di, Hui Wu, Jingling Xue, Feng Wang, and Canqun Yang. 2012. Parallelizing
SOR for GPGPUs using alternate loop tiling. Parallel Comput. 38, 6 (2012), 310—
328.

[13] Izzat El Hajj et al. 2016. KLAP: Kernel Launch Aggregation and Promotion for
Optimizing Dynamic Parallelism. In MICRO’16.

[14] Yoav Etsion, Felipe Cabarcas, Alejandro Rico, Alex Ramirez, Rosa M Badia,
Eduard Ayguade, Jesus Labarta, and Mateo Valero. 2010. Task superscalar: An
out-of-order task pipeline. In Proceedings of the 2010 43rd Annual IEEE/ACM
International Symposium on Microarchitecture. EEE Computer Society, 89-100.

[15] Alcides Fonseca, Bruno Cabral, Jo%o Rafael, and Ivo Correia. 2016. Automatic
Parallelization: Executing Sequential Programs on a Task-Based Parallel Runtime.
International Journal of Parallel Programming 44, 6 (2016), 1337-1358.

[16] Priyanka Ghosh, Yonghong Yan, and Barbara Chapman. 2012. Support for
dependency driven executions among openmp tasks, TEEE.

[17] Priyanka Ghosh, Yonghong Yan, Deepak Eachempati, and Barbara Chapman.
2013. A prototype implementation of OpenMP task dependency support. In
International Workshop on OpenMP. Springer, 128-140.

[18] Gagan Gupta and Gurindar § Sohi. 2011. Dataflow execution of sequential
imperative programs on multicore architectures. In Proceedings of the 44th Annual
IEEE/ACM International Symposium on Microarchitecture. ACM, 59-70.

[19] Kshitij Gupta, Jeff A Stuart, and John D Owens. 2012. A study of persistent
threads style GPU programming for GPGPU workloads. In Innovative Parallel
Computing (InPar), 2012, TEEE, 1-14.

[20] Adwait Jog et al. 2013. OWL: Cooperative Thread Array Aware Scheduling
Techniques for Improving GPGPU Performance. In Proceedings of the 18th
International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS ’13). ACM, New York, NY, USA, 395-406.

[21] Leslie Lamport. 1974, The parallel execution of DO loops. Commun. ACM 17, 2
(1974), 83-93.

[22] Meinard Miller. 2007. Dynamic Time Warping. Springer Berlin Heidelberg,
69-84,

[23] Mahdieh Poostchi, Kannappan Palaniappan, Filiz Bunyak, Michela Becchi, and
Guna Seetharaman. 2012. Efficient GPU implementation of the integral histogram.
In Asian Conference on Computer Vision. Springer, 266-278.

[24] Timothy G Rogers, Mike O’Connor, and Tor M Aamodt. 2012. Cache-conscious
wavefront scheduling. In Proceedings of the 2012 45th Annual IEEE/ACM International Symposium on Microarchitecture. IEEE Computer Society, 72-83.

[25] Jason Sanders and Edward Kandrot. 2010. CUDA by example: an introduction to
general-purpose GPU programming. Addison-Wesley Professional.

[26] Edans Flavius de O Sandes and Alba Cristina MA de Melo. 2013. Retrieving
smith-waterman alignments with optimizations for megabase biological sequences
using GPU. JEEE Transactions on Parallel and Distributed Systems 24, 5 (2013),
1009-1021.

[27] Maria A Serrano, Alessandra Melani, Roberto Vargas, Andrea Marongiu, Marko
Bertogna, and Eduardo Quinones. 2015. Timing characterization of OpenMP4
tasking model. In Proceedings of the 2015 International Conference on Compilers,
Architecture and Synthesis for Embedded Systems. TEEE Press, 157-166.

[28] Xulong Tang, Ashutosh Pattnaik, Huaipan Jiang, Onur Kayiran, Adwait Jog,
Sreepathi Pai, Mohamed Ibrahim, Mahmut T. Kandemir, and Chita R. Das. 2017.
Controlled Kernel Launch for Dynamic Parallelism in GPUs. In 2017 IEEE 23rd
International Symposium on High Performance Computer Architecture (HPCA).

[29] David Tarjan, Kevin Skadron, and Paulius Micikevicius. [n. d.]. The art of
performance tuning for CUDA and manycore architectures. ([n. d.]).

[30] Stanley Tzeng, Brandon Lloyd, and John D Owens. 2012. A GPU Task-Parallel
Model with Dependency Resolution. Computer 45, 8 (2012), 0034-41.

[31] Philippe Virouleau, Pierrick Brunet, Francois Broquedis, Nathalie Furmento,
Samuel Thibault, Olivier Aumage, and Thierry Gautier. 2014. Evaluation of
OpenMP dependent tasks with the KASTORS benchmark suite. In International
Workshop on OpenMP. Springer, 16-29.

[32] Chao Wang, Junneng Zhang, Xi Li, Aili Wang, and Xuehai Zhou. 2016. Hardware
Implementation on FPGA for Task-Level Parallel Dataflow Execution Engine.
JEEE Transactions on Parallel and Distributed Systems 27, 8 (2016), 2303-2315.

[33] Jin Wang et al. 2016. LaPerm: Locality Aware Scheduler for Dynamic Parallelism
on GPUs.. In International Symposium of Computer Architecture (ISCA).

[34] Jin Wang, Norm Rubin, Albert Sidelnik, and Sudhakar Yalamanchili. 2016. Dynamic thread block launch: A lightweight execution mechanism to support irregular applications on gpus. ACM SIGARCH Computer Architecture News 43, 3,
528-540.

[35] Michael Wolfe. 1986. Loops skewing: The wavefront method revisited. International Journal of Parallel Programming 15, 4 (1986), 279-293.

[36] Shucai Xiao and Wu-chun Feng. 2010. Inter-block GPU communication via fast
barrier synchronization. In Parallel & Distributed Processing (IPDPS), 2010 IEEE
International Symposium on, TEEE, 1-12.

[37] Shengen Yan, Guoping Long, and Yunquan Zhang. 2013. StreamScan: Fast Scan
Algorithms for GPUs Without Global Barrier Synchronization. In Proceedings
of the 18th ACM SIGPLAN Symposium on Principles and Practice of Parallel
Programming (PPoPP ’13). ACM, New York, NY, USA, 229-238.

[38] Yi Yang and Huiyang Zhou. 2014. CUDA-NP: realizing nested thread-level
parallelism in GPGPU applications. In ACM SIGPLAN Notices, Vol. 49. ACM,
93-106.