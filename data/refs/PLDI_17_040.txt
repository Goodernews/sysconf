[1] Asynchronous programming model (APM). https:
//msdn.microsoft.com/en-us/library/ms228963(v=vs.
110). aspx.

[2] Event-based asynchronous pattern (EAP). https:
//msdn.microsoft.com/en-us/library/ms228969 (v=
vs.110).aspx.

[3] Sharefile. https://github.com/citrix/ShareFile-NET.

[4] Tweetinvi. https: //github.com/linvi/tweetinvi.

[5] Amgpnetlite. https: //github.com/Azure/amqpnet lite.

[6] Autorest. https://github.com/Azure/autorest.

[7] azure-sdk-for-net. https://github.com/Azure/

azure-sdk-for-net.

[8] Walkthrough: Accessing the web by using async and
await. https://msdn.microsoft.com/en-us/library/
hh3@0224. aspx.

[9] Dinero. https: //github.com/DineroRegnskab/

dinero-csharp-sdk.

[10] Dotnetty. https: //github.com/Azure/dotnetty.

[11] APIs, SDKs and open source projects from Microsoft Azure.
https: //github.com/azure.

[12] Hbase. https: //github.com/hdinsight/
hbase- sdk- for-net.

[13] Async functions for ECMAScript. https://github.com/
tc39/ecmascript-asyncawait.

[14] Numerousapp. https: //github.com/ebezine/

numerousapp-net.

[15] 0365rwsclient. https: //github.com/Microsoft/

o365rwsclient.

[16] Async: Introduction. https: //docs.hhvm. com/hack/
async.

[17] Deadlocks reported and fixed. http://www. iisc-seal.net/
deadwait.

[18] R. Agarwal, L. Wang, and S. D. Stoller. Detecting potential
deadlocks with static analysis and run-time monitoring. In
Proceedings of the First Haifa International Conference on
Hardware and Software Verification and Testing, pages 191207. Springer-Verlag, 2006.

[19] R. Agarwal, S. Bensalem, E. Farchi, K. Havelund, Y. NirBuchbinder, S. D. Stoller, S. Ur, and L. Wang. Detection of
deadlock potentials in multithreaded programs. IBM J. Res.
Dev., 54(5):520-534, Sept. 2010.

[20] E. Albert, A. Flores-Montoya, S. Genaim, and E. MartinMartin. May-happen-in-parallel analysis for actor-based concurrency. ACM Trans. Comput. Logic, 17(2):11:1-11:39, Dec.
2015.

[21] M. Arnold, M. Vechev, and E. Yahav. QVM: An efficient runtime for detecting defects in deployed systems. In OOPSLA,
pages 143-162. ACM, 2008.

[22] M. F Atig, A. Bouajjani, and T. Touili. Analyzing Asynchronous Programs with Preemption. volume 2 of FSTTCS,
pages 37-48. Schloss Dagstuhl—-Leibniz-Zentrum fuer Informatik, 2008.

[23] S. Bensalem and K. Havelund. Dynamic deadlock analysis
of multi-threaded programs. In Proceedings of the First Haifa
International Conference on Hardware and Software Verification and Testing, pages 208-223. Springer-Verlag, 2006.

[24] G. Bierman, C. Russo, G. Mainland, E. Meijer, and M. Torgersen. Pause ’N’ Play: Formalizing asynchronous C#. In
ECOOP, pages 233-257. Springer-Verlag, 2012.

[25] C. Boyapati, R. Lee, and M. Rinard. Ownership types for
safe programming: Preventing data races and deadlocks. In
OOPSLA, pages 211-230. ACM, 2002.

[26] G. Bracha. Dart language asynchrony support: Phase 1.
https: //www.dartlang.org/articles/await-async/.

[27] Y. Cai, S. Wu, and W. K. Chan. ConLock: A constraint-based
approach to dynamic checking on deadlocks in multithreaded
programs. In ICSE, pages 491-502. ACM, 2014.

[28] S. Chaki, E. Clarke, J. OQuaknine, N. Sharygina, and N. Sinha.
Concurrent software verification with states, events, and deadlocks. Formal Aspects of Computing, 17(4):461-483, 2005.

[29] F. de Boer, M. Bravetti, I. Grabe, M. Lee, M. Steffen, and
G. Zavattaro. A Petri Net based analysis of deadlocks for
active objects and futures. In Formal Aspects of Component
Software, volume 7684 of Lecture Notes in Computer Science,
pages 110-127. Springer Berlin Heidelberg, 2013.

[30] P. Deligiannis, A. F. Donaldson, J. Ketema, A. Lal, and
P. Thomson. Asynchronous programming, analysis and testing with state machines. In PLDI, pages 154-164. ACM,
2015.

[31] C. DeMartini, R. Iosif, and R. Sisto. A deadlock detection
tool for concurrent Java programs. Softw. Pract. Exper., 29
(7):577-603, June 1999.

[32] A. Desai, V. Gupta, E. Jackson, S. Qadeer, S. Rajamani, and
D. Zufferey. P: Safe asynchronous event-driven programming.
In PLDI, pages 321-332. ACM, 2013.

[33] D. Engler and K. Ashcraft. RacerX: Effective, static detection
of race conditions and deadlocks. In SOSP, pages 237-252.
ACM, 2003.

[34] M. Eslamimehr and J. Palsberg. Sherlock: Scalable deadlock
detection for concurrent programs. In FSE, pages 353-365.
ACM, 2014.

[35] A. Flores-Montoya, E. Albert, and S. Genaim. May-happenin-parallel based deadlock analysis for concurrent objects. In
Formal Techniques for Distributed Systems, volume 7892 of
Lecture Notes in Computer Science, pages 273-288. Springer
Berlin Heidelberg, 2013.

[36] P. Ganty and R. Majumdar. Algorithmic verification of asynchronous programs. ACM Trans. Program. Lang. Syst., 34(1):
6:1-6:48, May 2012.

[37] I. Gavran, F. Niksic, A. Kanade, R. Majumdar, and
V. Vafeiadis. Rely/guarantee reasoning for asynchronous programs. In CONCUR, pages 483-496, 2015.

[38] P. Godefroid. Model checking for programming languages
using VeriSoft. In POPL, pages 174-186. ACM, 1997.

[39] N. Gustafsson, D. Brewis, and H. Sutter. Resumable functions. http: //ww..open-std. org/jtc1/sc22/wg21/docs/
papers/2014/n3858. pdf.
[40] P. Haller and J. Zaugg. Scala Improvement Process
- Async. http://docs.scala-lang.org/sips/pending/
async. html.

[41] R. H. Halstead, Jr. MULTILISP: A language for concurrent
symbolic computation. ACM Trans. Program. Lang. Syst., 7
(4):501-538, Oct. 1985.

[42] K. Havelund. Using runtime analysis to guide model checking of Java programs. In Proceedings of the 7th International
SPIN Workshop on SPIN Model Checking and Software Verification, pages 245-264. Springer-Verlag, 2000.

[43] J. Huang, C. Zhang, and J. Dolby. CLAP: Recording local
executions to reproduce concurrency failures. In PLDI, pages
141-152. ACM, 2013.

[44] R. Jhala and R. Majumdar. Interprocedural analysis of asynchronous programs. In POPL, pages 339-350. ACM, 2007.

[45] E. B. Johnsen, O. Owe, and I. C. Yu. Creol: A typesafe object-oriented model for distributed concurrent systems.
Theor. Comput. Sci., 365(1):23-66, Nov. 2006.

[46] E. B. Johnsen, R. Hahnle, J. Schafer, R. Schlatte, and M. Steffen. ABS: A core language for abstract behavioral specification. In Proceedings of the 9th International Conference
on Formal Methods for Components and Objects, pages 142164. Springer-Verlag, 2011.

[47] P. Joshi, C.-S. Park, K. Sen, and M. Naik. A randomized
dynamic program analysis technique for detecting real deadlocks. In PLDI, pages 110-120. ACM, 2009.

[48] V. Kahlon, F. Ivanéié, and A. Gupta. Reasoning about threads
communicating via locks. In CAV, pages 505-518. SpringerVerlag, 2005.

[49] V. Kahlon, N. Sinha, E. Kruus, and Y. Zhang. Static data race
detection for concurrent programs with asynchronous calls. In
FSE, pages 13-22. ACM, 2009.

[50] D. Leijen, W. Schulte, and S. Burckhardt. The design of
a task parallel library. In OOPSLA, pages 227-242. ACM,
September 2009.

[51] T. Li, C. S. Ellis, A. R. Lebeck, and D. J. Sorin. Pulse:
A dynamic deadlock detection mechanism using speculative

305

execution. In Proceedings of the USENIX Annual Technical
Conference, pages 3-3. USENIX Association, 2005.

[52] B. Liskov and L. Shrira. Promises: Linguistic support for
efficient asynchronous procedure calls in distributed systems.
In PLDI, pages 260-267. ACM, 1988.

[53] R. Madhavan, G. Ramalingam, and K. Vaswani. Modular heap
analysis for higher-order programs. In SAS, pages 370-387.
Springer-Verlag, 2012.

[54] M. Madsen, F. Tip, and O. Lhotak. Static analysis of eventdriven node.js JavaScript applications. In OOPSLA, pages
505-519. ACM, 2015.

[55] M. Naik, A. Aiken, and J. Whaley. Effective static race
detection for Java. In PLDI, pages 308-319. ACM, 2006.

[56] M. Naik, C.-S. Park, K. Sen, and D. Gay. Effective static
deadlock detection. In ICSE, pages 386-396. IEEE Computer
Society, 2009.

[57] S. Okur, D. L. Hartveld, D. Dig, and A. v. Deursen. A study
and toolkit for asynchronous programming in C#. In ICSE,
pages 1117-1127. ACM, 2014.

[58] A. Santhiar and A. Kanade. Semantics of Asynchronous C!. http://www. iisc-seal.net/publications/
asyncsemantics. pdf.

[59] Y. Selivanov. Pep 492 —- coroutines with async and await
syntax. https://www.python.org/dev/peps/pep-0492/
#id27.

[60] K. Sen and M. Viswanathan. Model checking multithreaded
programs with asynchronous atomic methods. In CAV, pages
300-314. Springer-Verlag, 2006.

[61] D. Syme, T. Petricek, and D. Lomov. The F# Asynchronous
Programming Model. In PADL, 2011.

[62] R. Tarjan. Depth-first search and linear graph algorithms.
SIAM Journal on Computing, 1(2):146-160, 1972.

[63] S. Toub. Await, and UI, and deadlocks! Oh my!
http: //blogs.msdn. com/b/pfxteam/archive/2011/
01/13/await-and-ui-and-deadlocks-oh-my. aspx.

[64] A. Williams, W. Thies, and M. D. Ernst. Static deadlock detection for Java libraries. In ECOOP, pages 602-629. SpringerVerlag, 2005.

