
[1] S. V. Adve and M. D. Hill. Weak ordering - a new definition.
In ISCA, 1990.

[2] J. Alglave. A formal hierarchy of weak memory models. Form.
Methods Syst. Des., 41(2), 2012.

[3] J. Alglave. Modeling of Architectures. In Advanced Lectures
of the 15th International School on Formal Methods, 2015.

[4] J. Alglave and L. Maranget. The Phat Experiment. http:
//diy.inria. fr/phat/, 2010.

[5] J. Alglave, A. Fox, S. Ishtiag, M. O. Myreen, S. Sarkar,
P. Sewell, and F. Zappa Nardelli. The semantics of Power
and ARM multiprocessor machine code. In DAMP, 2009.

[6] J. Alglave, L. Maranget, S. Sarkar, and P. Sewell. Fences in
weak memory models. In CAV, 2010.

[7] J. Alglave, L. Maranget, S. Sarkar, and P. Sewell. Litmus:
Running tests against hardware. In TACAS, 2011.

[8] J. Alglave, L. Maranget, and M. Tautschnig. Herding cats:
Modelling, simulation, testing, and data mining for weak
memory. ACM Trans. Program. Lang. Syst., 36(2), 2014.

[9] J. Alglave, M. Batty, A. F Donaldson, G. Gopalakrishnan,
J. Ketema, D. Poetzl, T. Sorensen, and J. Wickerson. GPU
concurrency: Weak behaviors and programming assumptions.
In ASPLOS, 2015.

[10] R. Alur and M. M. K. Martin. Personal communication, July
2016.

[11] M. Batty, S. Owens, S. Sarkar, P. Sewell, and W. Weber.
Mathematizing C++ concurrency. In POPL, 2011.

[12] M. Batty, A. F Donaldson, and J. Wickerson. Overhauling SC
atomics in C11 and OpenCL. In POPE, 2016.

[13] J. Bornholt, E. Torlak, D. Grossman, and L. Ceze. Optimizing
synthesis with metasketches. In POPL, 2016.

[14] S. Burckhardt and M. Musuvathi. Effective program verification for relaxed memory models. In CAV, 2008.

[15] J. Burnim, K. Sen, and C. Stergiou. Sound and complete
monitoring of sequential consistency for relaxed memory
models. In TACAS, 2011.

[16] Compaq. Alpha Architecture Reference Manual. 4th edition,
2002.

[17] J. Crawford, M. Ginsberg, E. Luks, and A. Roy. Symmetrybreaking predicates for search problems. In KR, 1996.

[18] A. Dan, Y. Meshman, M. Vechev, and E. Yahav. Effective
ABSTRACT
---
ions for verification under relaxed memory models. In
VMCAI, 2015.
[19] L. De Moura and N. Bjgrner. Z3: An efficient SMT solver. In
TACAS, 2008.

[20] B. Demsky and P. Lam. SATCheck: SAT-directed stateless
model checking for SC and TSO. In OOPSLA, 2015.

[21] M. Flatt and PLT. Reference: Racket. Technical Report PLTTR-2010-1, PLT Design Inc., 2010.

[22] IBM. Power ISA Version 2.06 Revision B. IBM, 2010.

[23] Intel Corporation. Intel 64 and IA-32 Architectures Software
Developer’s Manual. Intel Corporation, 2015. Revision 53.

[24] D. Jackson. Software Abstractions: logic, language, and
analysis. MIT Press, 2nd edition, 2009.

[25] L. Lamport. Time, clocks, and the ordering of events in a
distributed system. Commun. ACM, 21(7), 1978.

[26] D. Lustig, M. Pellauer, and M. Martonosi. PipeCheck: Specifying and verifying microarchitectural enforcement of memory
consistency models. In MICRO, 2014.

[27] D. Lustig, A. Wright, A. Papakonstantinou, and O. Giroux.
Automated synthesis of comprehensive memory model litmus
test suites. In ASPLOS, 2017.

[28] S. Mador-Haim, R. Alur, and M. M. K. Martin. Generating
litmus tests for contrasting memory consistency models. In
CAV, 2010.

[29] S. Mador-Haim, R. Alur, and M. M. K. Martin. Litmus tests
for comparing memory consistency models: How long do they
need to be? In DAC, 2011.

[30] S. Mador-Haim, L. Maranget, S. Sarkar, K. Memarian, J. Alglave, S. Owens, R. Alur, M. M. K. Martin, P. Sewell, and
D. Williams. An axiomatic memory model for POWER multiprocessors. In CAV, 2012.

[31] J. Manson, W. Pugh, and S. V. Adve. The Java memory model.
In POPL, 2005.

[32] P. E. McKenney. A Formal Model of Linux-Kernel Memory
Ordering. Linux Plumbers Conference, 2016.

[33] A. Milicevic, J. P. Near, E. Kang, and D. Jackson. Alloy*: A
general-purpose higher-order relational constraint solver. In
ICSE, 2015.

[34] S. Owens, S. Sarkar, and P. Sewell. A better x86 memory
model: x86-TSO (extended version). Technical Report UCAMCL-TR-745, University of Cambridge, 2009.

481

[35] S. Owens, S. Sarkar, and P. Sewell. A better x86 memory
model: x86-TSO. In TPHOLs, 2009.

[36] S. Park and D. L. Dill. An executable specification, analyzer
and verifier for RMO (Relaxed Memory Order). In SPAA,
1995.

[37] Racket. The Racket programming language. http://racketlang.org.

[38] S. Sarkar, P. Sewell, F Zappa Nardelli, S. Owens, T. Ridge,
T. Braibant, M. O. Myreen, and J. Alglave. The semantics of
x86-CC multiprocessor machine code. In POPL, 2009.

[39] S. Sarkar, P. Sewell, J. Alglave, L. Maranget, and D. Williams.
Understanding POWER multiprocessors. In PLDI, 2011.

[40] P. Sewell, S. Sarkar, S. Owens, F. Zappa Nardelli, and M. O.

Myreen. x86-TSO: A rigorous and usable programmer’s model
for x86 multiprocessors. Commun. ACM, 53(7):89-97, July

2010.

[41] A. Solar-Lezama, L. Tancau, R. Bodik, V. Saraswat, and
S. Seshia. Combinatorial sketching for finite programs. In
ASPLOS, 2006.

[42] E. Torlak and R. Bodik. Growing solver-aided languages with
Rosette. In Onward!, 2013.

[43] E. Torlak and R. Bodik. A lightweight symbolic virtual
machine for solver-aided host languages. In PLDI, 2014.

[44] E. Torlak and D. Jackson. Kodkod: A relational model finder.
In TACAS, 2007.

[45] E. Torlak, M. Vaziri, and J. Dolby. MemSAT: Checking
axiomatic specifications of memory models. In PLDI, 2010.

[46] D. L. Weaver and T. Germond. The SPARC architecture manual
(version 9). SPARC International, 1994,

[47] J. Wickerson, M. Batty, T. Sorensen, and G. A. Constantinides.
Automatically comparing memory consistency models. In
POPL, 2017.

[48] Y. Yang, G. Gopalakrishnan, G. Lindstrom, and K. Slind.
Nemos: A framework for axiomatic and executable specifications of memory consistency models. In JPDPS, 2004.

[49] F. Zappa Nardelli, P. Sewell, J. Sevéik, S. Sarkar, S. Owens,
L. Maranget, M. Batty, and J. Alglave. Relaxed memory
models must be rigorous. In EC”, 2009.
