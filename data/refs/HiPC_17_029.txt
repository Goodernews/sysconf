[1] M. Bridges, N. Vachharajani, Y. Zhang, T. Jablin, and D. August,
“Revisiting the sequential programming model for multi-core,” in Proceedings of the 40th Annual IEEE/ACM International Symposium on
Microarchitecture, 2007.
[2] D. A. Connors, “Memory profiling for directing data speculative optimizations and scheduling,” Master’s thesis, Department of Electrical and
Computer Engineering, University of Illinois, Urbana, IL, 1997.
[3] N. P. Johnson, H. Kim, P. Prabhu, A. Zaks, and D. I. August, “Speculative separation for privatization and reductions,” in Proceedings of the
33rd ACM SIGPLAN Conference on Programming Language Design
and Implementation, 2012.
[4] W. Liu, J. Tuck, L. Ceze, W. Ahn, K. Strauss, J. Renau, and J. Torrellas,
“POSH: a TLS compiler that exploits program structure,” in Proceedings
of the 11th ACM SIGPLAN Symposium on Principles and Practice of
Parallel Programming, 2006.
[5] J. G. Steffan, C. B. Colohan, A. Zhai, and T. C. Mowry, “A scalable
approach to thread-level speculation,” in Proceedings of the 27th International Symposium on Computer Architecture, 2000.
[6] W. Thies, V. Chandrasekhar, and S. Amarasinghe, “A practical approach
to exploiting coarse-grained pipeline parallelism in c programs,” in
Proceedings of the 40th Annual IEEE/ACM International Symposium
on Microarchitecture, 2007.
[7] P. Wu, A. Kejariwal, and C. Caşcaval, “Languages and compilers for
parallel computing,” 2008, ch. Compiler-Driven Dependence Profiling
to Guide Program Parallelization.
[8] X. Zhang and S. Jagannathan, “Alchemist: A transparent dependence
distance profiling infrastructure,” in Proceedings of the 2009 International Symposium on Code Generation and Optimization, 2009.
[9] M. Mehrara, J. Hao, P.-C. Hsu, and S. Mahlke, “Parallelizing sequential
applications on commodity hardware using a low-cost software transactional memory,” in Proceedings of the 2009 ACM SIGPLAN Conference
on Programming Language Design and Implementation, 2009.
[10] C. G. Quiñones, C. Madriles, J. Sánchez, P. Marcuello, A. González,
and D. M. Tullsen, “Mitosis compiler: An infrastructure for speculative
threading based on pre-computation slices,” in Proceedings of the 2005
ACM SIGPLAN Conference on Programming Language Design and
Implementation, 2005.

[11] L. Rauchwerger and D. A. Padua, “The LRPD test: Speculative run-time
parallelization of loops with privatization and reduction parallelization,”
IEEE Transactions on Parallel Distributed Systems, 1999.
[12] J. G. Steffan, C. Colohan, A. Zhai, and T. C. Mowry, “The STAMPede
approach to thread-level speculation,” ACM Transactions on Computer
Systems, 2005.
[13] H. Zhong, M. Mehrara, S. Lieberman, and S. Mahlke, “Uncovering
hidden loop level parallelism in sequential applications,” in IEEE 14th
International Symposium on High Performance Computer Architecture,
2008.
[14] C. Zilles and G. Sohi, “Master/slave speculative parallelization,” in
Proceedings of the 35th Annual ACM/IEEE International Symposium
on Microarchitecture, 2002.
[15] J. R. Larus, “Loop-level parallelism in numeric and symbolic programs,”
IEEE Transactions on Parallel and Distributed Systems, July 1993.
[16] A. Ketterlin and P. Clauss, “Profiling data-dependence to assist parallelization: Framework, scope, and optimization,” in Proceedings of the
2012 45th Annual IEEE/ACM International Symposium on Microarchitecture, 2012.
[17] M. Kim, H. Kim, and C.-K. Luk, “SD3 : A scalable approach to
dynamic data-dependence profiling,” in Proceedings of the 43rd Annual
IEEE/ACM International Symposium on Microarchitecture, 2010.
[18] R. Vanka and J. Tuck, “Efficient and accurate data dependence profiling
using software signatures,” in Proceedings of the Tenth International
Symposium on Code Generation and Optimization, 2012.
[19] H. Yu and Z. Li, “Fast loop-level data dependence profiling,” in Proceedings of the 26th ACM International Conference on Supercomputing,
2012.
[20] T. Chen, J. Lin, X. Dai, W.-C. Hsu, and P.-C. Yew, “Data dependence
profiling for speculative optimizations,” in Compiler Construction, 2004.
[21] Y. Sato, Y. Inoguchi, and T. Nakamura, “Whole program data dependence profiling to unveil parallel regions in the dynamic execution,” in
IEEE International Symposium on Workload Characterization, 2012.
[22] C. Lattner and V. Adve, “Llvm: A compilation framework for lifelong
program analysis & transformation,” in Proceedings of the International
Symposium on Code Generation and Optimization, 2004.
[23] H. Kim, N. P. Johnson, J. W. Lee, S. A. Mahlke, and D. I. August,
“Automatic speculative DOALL for clusters,” in Proceedings of the
Tenth International Symposium on Code Generation and Optimization,
2012.
[24] “Standard Performance Evaluation Corporation,” http://www.spec.org,
SPEC.
[25] H. Kim, A. Raman, F. Liu, J. W. Lee, and D. I. August, “Scalable
speculative parallelization on commodity clusters,” in Proceedings of the
43rd Annual IEEE/ACM International Symposium on Microarchitecture,
2010.
[26] N. Vachharajani, R. Rangan, E. Raman, M. J. Bridges, G. Ottoni, and
D. I. August, “Speculative decoupled software pipelining,” in Proceedings of the 16th International Conference on Parallel Architecture and
Compilation Techniques, 2007.
[27] Y. Sato, Y. Inoguchi, and T. Nakamura, “On-the-fly detection of precise
loop nests across procedures on a dynamic binary translation system,”
in Proceedings of the 8th ACM International Conference on Computing
Frontiers, 2011.
[28] G. Ammons, T. Ball, and J. R. Larus, “Exploiting hardware performance
counters with flow and context sensitive profiling,” in Proceedings of the
ACM SIGPLAN 1997 Conference on Programming Language Design
and Implementation, 1997.
[29] N. Froyd, J. Mellor-Crummey, and R. Fowler, “Low-overhead call path
profiling of unmodified, optimized code,” in Proceedings of the 19th
Annual International Conference on Supercomputing, 2005.
[30] X. Zhuang, M. J. Serrano, H. W. Cain, and J.-D. Choi, “Accurate,
efficient, and adaptive calling context profiling,” in ACM SIGPLAN 2006
Conference on Programming Language Design and Implementation,
2006.
[31] W. N. Sumner, Y. Zheng, D. Weeratunge, and X. Zhang, “Precise calling
context encoding,” in Proceedings of the 32Nd ACM/IEEE International
Conference on Software Engineering - Volume 1, 2010.
[32] Q. Zeng, J. Rhee, H. Zhang, N. Arora, G. Jiang, and P. Liu, “DeltaPath: Precise and scalable calling context encoding,” in Proceedings of
Annual IEEE/ACM International Symposium on Code Generation and
Optimization, 2014.