
[1] Apache Spark: Lightning-Fast Cluster Computing. http://spark.apache.
org/.
[2] Common Crawl. http://commoncrawl.org/.
[3] OpenBLAS: An optimized BLAS library. http://www.openblas.net/.
[4] M. K. Aguilera, J. C. Mogul, J. L. Wiener, P. Reynolds, and A. Muthitacharoen. Performance Debugging for Distributed Systems of Black
Boxes. In Proc. SOSP, 2003.
[5] O. Alipourfard, H. H. Liu, J. Chen, S. Venkataraman, M. Yu, and
M. Zhang. CherryPick: Adaptively Unearthing the Best Cloud Configurations for Big Data Analytics. In Proc. NSDI, 2017.

Monotasks: Architecting for Performance Clarity
[6] Apache Software Foundation. Apache Hadoop. http://hadoop.apache.
org/.
[7] P. Barham, A. Donnelly, R. Isaacs, and R. Mortier. Using Magpie for
request extraction and workload modelling. In Proc. SOSP, 2004.
[8] B. Burns, K. Grimaldi, A. Kostadinov, E. D. Berger, , and M. D. Corner.
Flux: A Language for Programming High-Performance Servers. In
Proc. Usenix ATC, 2006.
[9] Cloudera. Cloudera Impala: Open Source, Interactive SQL for Hadoop.
http://www.cloudera.com/content/cloudera/en/products-and-services/
cdh/impala.html.
[10] A. Crotty, A. Galakatos, K. Dursun, T. Kraska, U. Çetintemel, and S. B.
Zdonik. Tupleware: Redefining modern analytics. CoRR, 2014.
[11] C. Curtsinger and E. D. Berger. COZ: Finding Code that Counts with
Causal Profiling. In Proc. SOSP, 2015.
[12] J. Dean and S. Ghemawat. MapReduce: Simplified Data Processing on
Large Clusters. In Proc. OSDI, 2004.
[13] P. Gao, A. Narayan, G. Kumar, R. Agarwal, S. Ratnasamy, and
S. Shenker. pHost: Distributed Near-optimal Datacenter Transport
Over Commodity Network Fabric. In Proc. CoNext, 2015.
[14] A. Ghodsi, M. Zaharia, B. Hindman, A. Konwinski, S. Shenker, and
I. Stoica. Dominant Resource Fairness: Fair Allocation of Multiple
Resource Types. In Proc. NSDI, 2011.
[15] G. Graefe. Encapsulation of Parallelism in the Volcano Query Processing System. In Proc. SIGMOD, 1990.
[16] R. Grandl, G. Ananthanarayanan, S. Kandula, S. Rao, and A. Akella.
Multi-Resource Packing for Cluster Schedulers. In Proc. SIGCOMM,
2014.
[17] H. Herodotou. Hadoop performance models. CoRR, 2011.
[18] M. Isard, M. Budiu, Y. Yu, A. Birrell, and D. Fetterly. Dryad: Distributed Data-Parallel Programs From Sequential Building Blocks. In
Proc. EuroSys, 2007.
[19] V. Leis, P. Boncz, A. Kemper, and T. Neumann. Morsel-Driven Parallelism: A NUMA-Aware Query Evaluation Framework for the ManyCore Age. In Proc. SIGMOD, 2014.
[20] N. McKeown. The iSLIP Scheduling Algorithm for Input-queued
Switches. IEEE/ACM Trans. Netw., 7(2), 1999.
[21] F. McSherry, M. Isard, and D. G. Murray. Scalability! But at What
Cost? In Proc. Hot OS, 2015.
[22] F. McSherry and M. Schwarzkopf. The impact of fast networks on
graph analytics, part 1. http://tinyurl.com/qaw9lla.
[23] F. McSherry and M. Schwarzkopf. The impact of fast networks on
graph analytics, part 2. http://tinyurl.com/q7aeajb, 2015.
[24] K. Ousterhout, A. Panda, J. Rosen, S. Venkataraman, R. Xin, S. Ratnasamy, S. Shenker, and I. Stoica. The Case for Tiny Tasks in Compute
Clusters. In Proc. HotOS, 2013.
[25] K. Ousterhout, R. Rasti, S. Ratnasamy, S. Shenker, and B.-G. Chun.
Making Sense of Performance in Data Analytics Frameworks. In Proc.
NSDI, 2015.
[26] S. Padmanabhan, T. Malkemus, A. Jhingran, and R. Agarwal. Block
oriented processing of Relational Database operations in modern Computer Architectures. In Proc. ICDE, 2001.
[27] A. Pavlo, E. Paulson, A. Rasin, D. J. Abadi, D. J. DeWitt, S. Madden,
and M. Stonebraker. A Comparison of Approaches to Large-scale Data
Analysis. In Proc. SIGMOD, 2009.
[28] A. Rasmussen, V. T. Lam, M. Conley, G. Porter, R. Kapoor, and A. Vahdat. Themis: An I/O-efficient MapReduce. In Proc. SoCC, 2012.
[29] S. Ryza. How-to: Tune Your Apache Spark Jobs (Part 2). goo.gl/
7gjmyfcontent_copyCopyshortURL, 2015.
[30] A. Trivedi, P. Stuedi, J. Pfefferle, R. Stoica, B. Metzler, I. Koltsidas,
and N. Ioannou. On The [Ir]relevance of Network Performance for
Data Processing. In HotCloud, 2016.

SOSP ’17, October 28, 2017, Shanghai, China
[31] UC Berkeley AmpLab. Big Data Benchmark. https://amplab.cs.
berkeley.edu/benchmark/, February 2014.
[32] S. Venkataraman, Z. Yang, M. Franklin, B. Recht, and I. Stoica. Ernest:
Efficient Performance Prediction for Large-Scale Advanced Analytics.
In NSDI, 2016.
[33] R. Xin and J. Rosen.
Project Tungsten: Bringing Spark
Closer to Bare Metal. https://www.databricks.com/blog/2015/04/28/
project-tungsten-bringing-spark-closer-to-bare-metal.html, 2015.
[34] R. S. Xin, J. Rosen, M. Zaharia, M. J. Franklin, S. Shenker, and I. Stoica.
Shark: SQL and Rich Analytics at Scale. In Proc. SIGMOD, 2013.
[35] L. Yi, K. Wei, S. Huang, and J. Dai. Hadoop Benchmark Suite (HiBench). https://github.com/intel-hadoop/HiBench, 2012.
[36] M. Zaharia, M. Chowdhury, T. Das, A. Dave, J. Ma, M. McCauley,
M. J. Franklin, S. Shenker, and I. Stoica. Resilient Distributed Datasets:
A Fault-Tolerant Abstraction for In-Memory Cluster Computing. In
Proc. NSDI, 2012.
[37] P. Åke Larson, C. Clinciu, E. N. Hanson, A. Oks, S. L. Price, S. Rangarajan, A. Surna, and Q. Zhou. SQL Server Column Store Indexes. In
Proc. SIGMOD, 2010.

