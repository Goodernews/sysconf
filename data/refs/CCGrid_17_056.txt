[1] HiBD. http://hibd.cse.ohio-state.edu/.

[2] Memcached. https://memcached.org/downloads.

[3] PGAS Forum. http://www.pgas.org/.

[4] Redis. http://redis.io/.

[5] Titan Supercomputer. https://www.olcf.ornl.gov/titan/.

[6] D. G. Andersen, J. Franklin, M. Kaminsky, A. Phanishayee, L. Tan, and
V. Vasudevan. FAWN: A fast array of wimpy nodes. In Proceedings
of the ACM SIGOPS 22nd symposium on Operating systems principles,
pages 1-14. ACM, 2009.

[7] C. Aniszczyk. Caching with twemcache, 2012.

[8] J. Appavoo, A. Waterland, D. Da Silva, V. Uhlig, B. Rosenburg,
E. Van Hensbergen, J. Stoess, R. Wisniewski, and U. Steinberg. Providing a cloud network infrastructure on a supercomputer. In Proceedings
of the 19th ACM International Symposium on High Performance Distributed Computing, pages 385-394. ACM, 2010.

[9] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and M. Paleczny. Workload analysis of a large-scale key-value store. In ACM SIGMETRICS

[10] Performance Evaluation Review, volume 40, pages 53-64. ACM, 2012.

[11] B. Chapman, T. Curtis, S. Pophale, S. Poole, J. Kuehn, C. Koelbel,
and L. Smith. Introducing OpenSHMEM: SHMEM for the PGAS
community. In Proceedings of the Fourth Conference on Partitioned
Global Address Space Programming Model, page 2. ACM, 2010.

[12] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and R. Sears.
Benchmarking cloud serving systems with YCSB. In Proceedings of the
Ist ACM symposium on Cloud computing, pages 143-154. ACM, 2010.
J[13] . Diaz, C. Munoz-Caro, and A. Nino. A survey of parallel programming
models and tools in the multi and many-core era. [EEE Transactions
on parallel and distributed systems, 23(8):1369-1386, 2012.

[14] A. Dragojevi¢, D. Narayanan, M. Castro, and O. Hodson. FaRM: Fast
remote memory. In //th USENIX Symposium on Networked Systems
Design and Implementation (NSDI 14), pages 401-414, 2014.

[15] B. Fan, D. G. Andersen, and M. Kaminsky. MemC3: Compact and
Concurrent MemCache with Dumber Caching and Smarter Hashing. In
NSDI, volume 13, pages 385-398, 2013.

[16] H. Fu, K. Singharoy, M. Gorentla Venkata, Y. Zhu, and W. Yu. SHMemCache: Enabling Memcached on the OpenSHMEM Global Address
Model. In Workshop on OpenSHMEM and Related Technologies.
Springer, 2016.

[17] H. Greenberg, J. Bent, and G. Grider. MDHIM: a parallel key/value
framework for HPC. In 7th USENIX Workshop on Hot Topics in Storage
and File Systems (HotStorage 15), 2015.

[18] J. Jose, K. Hamidouche, X. Lu, S. Potluri, J. Zhang, K. Tomko, and
D. K. Panda. High performance OpenSHMEM for Xeon Phi clusters:
Extensions, runtime designs and application co-design. In 2014 IEEE
International Conference on Cluster Computing (CLUSTER), pages 1018. TEEE, 2014.

[19] J. Jose, S. Potluri, K. Tomko, and D. K. Panda. Designing scalable
graphS00 benchmark with hybrid MPI+ OpenSHMEM programming
models. In International Supercomputing Conference, pages 109-124.
Springer, 2013.

[20] J. Jose, H. Subramoni, K. Kandalla, M. Wasi-ur Rahman, H. Wang,
S. Narravula, and D. K. Panda. Scalable Memcached design for
Infiniband clusters using hybrid transports. In Cluster, Cloud and Grid
Computing (CCGrid), 2012 12th IEEE/ACM International Symposium
on, pages 236-243. IEEE, 2012.

[21] J. Jose, H. Subramoni, M. Luo, M. Zhang, J. Huang, M. Wasi-ur
Rahman, N. S. Islam, X. Ouyang, H. Wang, S. Sur, et al. Memcached
design on high performance rdma capable interconnects. In Parallel
Processing (ICPP), 2011 International Conference on, 2011.

[22] A. Kalia, M. Kaminsky, and D. G. Andersen. Using RDMA efficiently
for key-value services. In ACM SIGCOMM Computer Communication
Review, volume 44, pages 295-306. ACM, 2014.

[23] A. Kalia, M. Kaminsky, and D. G. Andersen. Design Guidelines for
High Performance RDMA Systems. In 2016 USENIX Annual Technical
Conference (USENIX ATC 16), 2016.

[24] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky. Mica: a holistic
approach to fast in-memory key-value storage. In 11th USENIX
Symposium on Networked Systems Design and Implementation (NSDI
14), pages 429-444, 2014.

[25] J. Liu, J. Wu, and D. K. Panda. High performance RDMA-based
MPI implementation over InfiniBand. International Journal of Parallel
Programming, 32(3):167-198, 2004.

[26] C. Mitchell, Y. Geng, and J. Li. Using One-Sided RDMA Reads to Build
a Fast, CPU-Efficient Key-Value Store. In USENIX Annual Technical
Conference, pages 103-114, 2013.

[27] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski, H. Lee, H. C. Li,
R. McElroy, M. Paleczny, D. Peek, P. Saab, et al. Scaling Memcache
at Facebook. In nsdi, volume 13, pages 385-398, 2013.

[28] S. Pophale, R. Nanjegowda, T. Curtis, B. Chapman, H. Jin, S. Poole,
and J. Kuehn. OpenSHMEM performance and potential: A NPB
experimental study. In The 6th Conference on Partitioned Global
Address Space Programming Models (PGAS12). Citeseer, 2012.

[29] S. Potluri, D. Bureddy, H. Wang, H. Subramoni, and D. K. Panda.
Extending OpenSHMEM for GPU computing. In Parallel & Distributed
Processing (IPDPS), 2013 IEEE 27th International Symposium on,
pages 1001-1012. IEEE, 2013.

[30] Y. Wang, X. Meng, L. Zhang, and J. Tan. C-hint: An effective and
reliable cache management for rdma-accelerated key-value stores. In
Proceedings of the ACM Symposium on Cloud Computing, pages 1-13.
ACM, 2014.

[31] Y. Wang, L. Zhang, J. Tan, M. Li, Y. Gao, X. Guerin, X. Meng, and
S. Meng. HydraDB: a resilient RDMA-driven key-value middleware for
in-memory cluster computing. In SC’/5, page 22. ACM.