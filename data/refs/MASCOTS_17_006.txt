
[1] jemalloc. http://www.canonware.com/jemalloc/index.html.
[2] Memcached. http://memcached.org/.
[3] MongoDB. http://docs.mongodb.org/manual.
[4] RDMA Consortium. http://www.rdmaconsortium.org/.
[5] Redis. http://redis.io/.
[6] Intel DPDK. http://www.intel.com/go/dpdk, 2014.
[7] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and
M. Paleczny. Workload analysis of a large-scale key-value
store. SIGMETRICS’12.
[8] C. Barthels, S. Loesing, G. Alonso, and D. Kossmann. Rackscale in-memory join processing using rdma. SIGMOD’15.
[9] J. Bonwick. The slab allocator: An object-caching kernel
memory allocator. USTC’94.
[10] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and
R. Sears. Benchmarking cloud serving systems with ycsb.
SoCC’10.
[11] G. DeCandia, D. Hastorun, M. Jampani, G. Kakulapati,
A. Lakshman, A. Pilchin, S. Sivasubramanian, P. Vosshall,
and W. Vogels. Dynamo: Amazon’s highly available keyvalue store. SOSP’07.
[12] A. Dragojević, D. Narayanan, O. Hodson, and M. Castro.
Farm: Fast remote memory. NSDI’14.
[13] B. Fan, D. G. Andersen, and M. Kaminsky. Memc3: Compact
and concurrent memcache with dumber caching and smarter
hashing. NSDI’13.
[14] S. Ghemawat, H. Gobioff, and S.-T. Leung. The google ﬁle
system. SOSP’03.
[15] L. Hyeontaek, H. Dongsu, D. G. Andersen, and M. Kaminsky. Mica: A holistic approach to fast in-memory key-value
storage. NSDI’14.
[16] A. Kalia, M. Kaminsky, and D. G. Andersen. Using rdma
efﬁciently for key-value services. SIGCOMM’14.
[17] S. Li, H. Lim, V. W. Lee, J. H. Ahn, A. Kalia, M. Kaminsky,
D. G. Andersen, O. Seongil, S. Lee, and P. Dubey. Architecting to achieve a billion requests per second throughput on a
single key-value store server platform. In ISCA 2015.
[18] X. Lu, M. Rahman, N. Islam, D. Shankar, and D. Panda.
Accelerating spark with rdma for big data processing: Early
experiences. In HotI 2014.
[19] M. M. Michael. Scalable lock-free dynamic memory allocation. In PLDI 2004.
[20] C. Mitchell, Y. Geng, and J. Li. Using one-sided rdma reads
to build a fast, cpu-efﬁcient key-value store. ATC’13.
[21] J. Nelson, B. Holt, B. Myers, P. Briggs, L. Ceze, S. Kahan,
and M. Oskin. Latency-tolerant software distributed shared
memory. USENIX ATC’15.
[22] D. Ongaro, S. M. Rumble, R. Stutsman, J. Ousterhout, and
M. Rosenblum. Fast crash recovery in ramcloud. SOSP’11.
[23] J. Ousterhout, A. Gopalan, A. Gupta, A. Kejriwal, C. Lee,
B. Montazeri, D. Ongaro, S. J. Park, H. Qin, M. Rosenblum,
S. Rumble, R. Stutsman, and S. Yang. The ramcloud storage
system. ACM Trans. Comput. Syst., 2015.
[24] R. van Renesse and F. B. Schneider. Chain replication for
supporting high throughput and availability. OSDI’04.
[25] Y. Wang, H. Fu, and W. Yu. Cracking down mapreduce
failure ampliﬁcation through analytics logging and migration.
IPDPS’15.
[26] Y. Wang, X. Meng, L. Zhang, and J. Tan. C-hint: An effective
and reliable cache management for rdma-accelerated keyvalue stores. SOCC’14.
[27] Y. Wang, L. Zhang, J. Tan, M. Li, Y. Gao, X. Guerin,
X. Meng, and S. Meng. Hydradb: A resilient rdma-driven keyvalue middleware for in-memory cluster computing. SC’15.
[28] K. Zhang, K. Wang, Y. Yuan, L. Guo, R. Lee, and X. Zhang.
Mega-kv: A case for gpus to maximize the throughput of
in-memory key-value stores. Proc. VLDB Endow., 2015.
[29] Y. Zhang, J. Yang, A. Memaripour, and S. Swanson. Mojim:
A reliable and highly-available non-volatile memory system.
ASPLOS’15.
