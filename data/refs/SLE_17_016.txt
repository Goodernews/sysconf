[1] 1989. .ZIP Application Note. https://www.pkware.com/support/zipapp-note/, (1989).

[2] 1990. GRAPHICS INTERCHANGE FORMAT Version 89a.
http://www.w3.org/Graphics/GIF/spec-gif89a.txt. (1990).

[3] 1996. Wavefront OBJ File Format Summary.
http://www. fileformat.info/format/wavefrontobj/egff.htm. (1996).

[4] 2017. CVE Common Vulnerabilities and Exposures.
http://cve.mitre.org/. (2017).

[5] 2017. SLE 2017 RIFL Artifact. http://people.csail.mit.edu/jiasi/sle2017_
rifl_artifact/ and https://people.csail.mit.edu/rinard/paper/sle17.rifl.
artifact. (2017).

[6] 2017. Wireshark. https://www.wireshark.org/. (2017).

[7] T. Anderson and R. Kerr. 1976. Recovery Blocks in Action: A System
Supporting High Reliability. In Proceedings of the 2Nd International
Conference on Software Engineering (ICSE ’76). 447-457.

[8] A. Avizienis. 1985. The N-Version Approach to Fault-Tolerant Software.
IEEE Trans, Softw. Eng. 11, 12 (Dec. 1985), 1491-1501.

[9] P. Bhattacharya and I. Neamtiu. 2011. Assessing Programming Language Impact on Development and Maintenance: A Study on C and
C++. In Proceedings of the 33rd International Conference on Software
Engineering (ICSE ’11). 171-180.

[10] S. Biswas, J. Huang, A. Sengupta, and M. D. Bond. 2014. DoubleChecker:
Efficient Sound and Precise Atomicity Checking. In Proceedings of the
35th ACM SIGPLAN Conference on Programming Language Design and
Implementation (PLDI ’14). 28-39.

[11] T. Boutell. 1997. PNG (Portable Network Graphics) Specification Version 1.0. (1997).
SLE’17, October 23-24, 2017, Vancouver, Canada

[12] T Bray. 2014. JavaScript Object Notation (JSON) Data Interchange
Format. http://www.rfc-editor.org/rfc/rfc7159.txt. (March 2014). RFC
7159,

[13] J. Burnim, G. Necula, and K. Sen. 2011. Specifying and Checking Semantic Atomicity for Multithreaded Programs. In Proceedings of the
Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS XVI). 79-90.

[14] M. Carbin, S. Misailovic, M. Kling, and M. C. Rinard. 2011. Detecting and Escaping Infinite Loops with Jolt. In Proceedings of the 25th
European Conference on Object-oriented Programming (ECOOP’ 11). 609633,

[15] K.M. Chandy and C.V. Ramamoorthy. 1972. Rollback and Recovery
Strategies for Computer Programs. Computers, IEEE Transactions on
C-21, 6 (June 1972), 546-556.

[16] L. Degioanni, F. Risso, and G. Varenni. 2004. PCAP Next Generation Dump File Format. https://www.winpcap.org/ntar/draft/PCAPDumpFileFormat.html. (March 2004).

[17] B. Demsky and A. Dash. 2008. Bristlecone: A Language for Robust
Software Systems. In Proceedings of the 22Nd European Conference on
Object-Oriented Programming (ECOOP 08). 490-515.

[18] R. Fielding and J. Reschke. 2014. Hypertext transfer protocol
(HTTP/1.1): Semantics and content. (2014).

[19] J. B. Goodenough. 1975. Exception Handling: Issues and a Proposed
Notation. Commun. ACM 18, 12 (Dec. 1975), 683-696.

[20] J. Gray and A. Reuter. 1992. Transaction Processing: Concepts and
Techniques (1st ed.).

[21] E. Hamilton. 1992. JPEG File Interchange Format. (1992).

[22] S. Hanenberg. 2010. An Experiment About Static and Dynamic Type
Systems: Doubts About the Positive Impact of Static Type Systems on
Development Time. In Proceedings of the ACM International Conference
on Object Oriented Programming Systems Languages and Applications
(OOPSLA ’10), 22-35.

[23] K. Huang and J. Wu E. B. Fernandez. 1998. A Generalized Forward
Recovery Checkpointing Scheme. In IPPS/SPDP Workshops. 623-643.

[24] J.F. Kurose and K.W. Ross. 2010. Computer Networking: A Top-down
Approach,

[25] B. Liskov, A. Snyder, R. Atkinson, and C. Schaffert. 1977. Abstraction
Mechanisms in CLU. Commun. ACM 20, 8 (Aug. 1977), 564-576.

[26] F. Long, V. Ganesh, M. Carbin, S. Sidiroglou, and M. Rinard. 2012.
Automatic Input Rectification. In Proceedings of the 34th International
Conference on Software Engineering (ICSE ’12). 80-90.

[27] F. Long, S. Sidiroglou-Douskos, and M. Rinard. 2014. Automatic Runtime Error Repair and Containment via Recovery Shepherding. In
Proceedings of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation (PLDI ’14). 227-238.

[28] T.J. McCabe. 1976. A Complexity Measure. IEEE Trans. Softw. Eng. 2,
4 (July 1976), 308-320.

[29] A. McKenna, M. Hanna, E. Banks, A. Sivachenko, K. Cibulskis, A.
Kernytsky, K. Garimella, D. Altshuler, S. Gabriel, M. Daly, et al. 2010.
The Genome Analysis Toolkit: a MapReduce framework for analyzing
next-generation DNA sequencing data. Genome research 20, 9 (2010),
1297-1303.

[30] B. P. Miller, L. Fredriksen, and B. So. 1990. An Empirical Study of the
Reliability of UNIX Utilities. Commun. ACM 33, 12 (Dec. 1990), 32-44.

[31] S. Nagarakatte, J. Zhao, M. MK. Martin, and S. Zdancewic. 2010. CETS:
Compiler Enforced Temporal Safety for C. In Proceedings of the 2010
International Symposium on Memory Management (ISMM ’10). 31-40.

[32] S. Nanz and C. A. Furia. 2015. A Comparative Study of Programming
Languages in Rosetta Code. In Proceedings of the 37th International
Conference on Software Engineering - Volume 1 (ICSE *15). 778-788.

[33] G. C. Necula, S. McPeak, and W. Weimer. 2002. CCured: Type-safe
Retrofitting of Legacy Code. In Proceedings of the 29th ACM SIGPLANSIGACT Symposium on Principles of Programming Languages (POPL
02), 128-139,

255

Jiasi Shen and Martin Rinard

[34] V. Pankratius, F. Schmidt, and G. GarretAgn. 2012. Combining functional and imperative programming for multicore software: An empirical study evaluating Scala and Java. In 2012 34th International
Conference on Software Engineering (ICSE). 123-133.

[35] F. Qin, J. Tucek, J. Sundaresan, and Y. Zhou. 2005. Rx: Treating Bugs
As Allergies—a Safe Method to Survive Software Failures. SIGOPS
Oper. Syst. Rev. 39, 5 (Oct. 2005), 235-248.

[36] R Core Team. 2015. R: A Language and Environment for Statistical
Computing. R Foundation for Statistical Computing, Vienna, Austria.
https://www.R- project.org

[37] B. Ray, D. Posnett, V. Filkov, and P. Devanbu. 2014. A Large Scale
Study of Programming Languages and Code Quality in Github. In
Proceedings of the 22Nd ACM SIGSOFT International Symposium on
Foundations of Software Engineering (FSE 2014). 155-165.

[38] M. Rinard, C. Cadar, D. Dumitran, D. M. Roy, T. Leu, and W. S. Beebee, Jr. 2004. Enhancing Server Availability and Security Through
Failure-oblivious Computing. In Proceedings of the 6th Conference on
Symposium on Opearting Systems Design & Implementation - Volume 6
(OSDT’04). 21-21.

[39] O. Ruwase and M.S Lam. 2004. A Practical Dynamic Buffer Overflow
Detector.. In NDSS, Vol. 2004. 159-169.

[40] Y. Shafranovich. 2005. Common Format and MIME Type for CommaSeparated Values (CSV) Files. https://tools.ietf.org/html/rfc4 180. (Oct.
2005). RFC 4180.

[41] N. Shavit and D. Touitou. 1995. Software transactional memory. In
Proceedings of the fourteenth annual ACM symposium on Principles of
distributed computing (PODC 95). 204-213.

[42] J. Shen and M. Rinard. 2015. Filtered Iterators for Safe and Robust
Programs in RIFL. http://hdl.handle.net/1721.1/100542. (2015). http:
//hdl.handle.net/1721.1/100542 MIT-CSAIL-TR-2015-036.

[43] A. Shinnar, D. Tarditi, M. Plesko, and B. Steensgaard. 2004. Integrating
support for undo with exception handling. Technical Report. Microsoft
Research. MSR-TR-2004-140.

[44] S. Sidiroglou and A. D. Keromytis. 2004. Using Execution Transactions
To Recover From Buffer Overflow Attacks. Technical Report. Columbia
University Computer Science Department. http://academiccommons.
columbia.edu/item/ac:109823 CUCS-031-04.

[45] S. Sidiroglou-Douskos, E. Lahtinen, F. Long, and M. Rinard. 2015. Automatic Error Elimination by Horizontal Code Transfer Across Multiple
Applications. In Proceedings of the 36th ACM SIGPLAN Conference on
Programming Language Design and Implementation (PLDI 2015). 43-54.

[46] S. Siegel. 1956. Nonparametric statistics for the behavioral sciences.

[47] P. Stanley-Marbell and M. Rinard. 2015. Lax: Driver Interfaces for Approximate Sensor Device Access. In 15th Workshop
on Hot Topics in Operating Systems (HotOS XV). Kartause Ittingen, Switzerland. https://www.usenix.org/conference/hotos15/
workshop-program/presentation/stanley-marbell

[48] G.L. Steele, Jr. 1990. Common LISP: The Language (2Nd Ed.).

[49] A. Stefik and S. Siebert. 2013. An Empirical Investigation into Programming Language Syntax. Trans. Comput. Educ. 13, 4, Article 19
(Nov. 2013), 40 pages.

[50] Symantec Inc. 2005. Symantec Internet security threat report: Vol. VIL.
Technical Report.

[51] A. Warth, Y. Ohshima, T. Kaehler, and A. Kay. 2011. Worlds: Controlling
the Scope of Side Effects. In Proceedings of the 25th European Conference
on Object-oriented Programming (ECOOP’11). 179-203.

[52] T. Wiegand, G. J. Sullivan, G. Bjontegaard, and A. Luthra. 2003.
Overview of the H.264/AVC Video Coding Standard. IEEE Trans. Cir.
and Sys. for Video Technol. 13, 7 (July 2003), 560-576.

[53] F. Wilcoxon. [n. d.]. Biometrics Bulletin 6 ([n. d.]), 80-83.

[54] C. Wohlin, P. Runeson, M. Hést, M. C. Ohlsson, B. Regnell, and A.
Wesslén. 2000. Experimentation in Software Engineering: An Introduction.

