[1] Y. Afek, H. Kaplan, B. Korenfeld, A. Morrison, and R. E.
Tarjan. Cbtree: A practical concurrent self-adjusting search
tree. In Proceedings of the 26th International Conference on Distributed Computing, DISC’12, pages 1-15,
Berlin, Heidelberg, 2012. Springer-Verlag. ISBN 978-3642-33650-8. URL http://dx.doi.org/10.1007/
978-3-642-33651-5_1.

[2] D. Alistarh, P. Eugster, M. Herlihy, A. Matveev, and N. Shavit.
Stacktrack: An automated transactional approach to concurrent memory reclamation. In Proceedings of the Ninth European Conference on Computer Systems, EuroSys ’14, pages
25:1-25:14, New York, NY, USA, 2014. ACM. ISBN 9781-4503-2704-6. . URL http://doi.acm.org/10.1145/
2592798 . 2592808.

[3] D. Alistarh, J. Kopinsky, J. Li, and N. Shavit. The spraylist: A
scalable relaxed priority queue. In 20th ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming,
PPoPP 2015, San Francisco, CA, USA, 2015. ACM.

[4] D. Alistarh, W. M. Leiserson, A. Matveev, and N. Shavit.
Threadscan: Automatic and scalable memory reclamation.
In Proceedings of the 27th ACM on Symposium on Parallelism in Algorithms and Architectures, SPAA ’15, pages 123—
132, New York, NY, USA, 2015. ACM. ISBN 978-1-45033588-1. . URL http: //doi.acm.org/10.1145/2755573.
2755600.

[5] H. Avni, N. Shavit, and A. Suissa. Leaplist: Lessons learned
in designing tm-supported range queries. In Proceedings
of the 2013 ACM Symposium on Principles of Distributed
Computing, PODC ’ 13, pages 299-308, New York, NY, USA,
2013. ACM. ISBN 978-1-4503-2065-8. URL http:
//doi.acm.org/10.1145/2484239 . 2484254.

[6] O. Balmau, R. Guerraoui, M. Herlihy, and I. Zablotchi. Fast
and robust memory reclamation for concurrent data structures. In Proceedings of the 28th ACM Symposium on Parallelism in Algorithms and Architectures, SPAA ’ 16, pages 349359, New York, NY, USA, 2016. ACM. ISBN 978-1-45034210-0... URL http: //doi.acm. org/10.1145/2935764.
2935790.

[7] H.-J. Boehm. Bounding space usage of conservative garbage
collectors. In Proceedings of the 29th ACM SIGPLANSIGACT Symposium on Principles of Programming Languages, POPL ’02, pages 93-100, New York, NY, USA, 2002.
ACM. ISBN 1-58113-450-9. .

[8] H. J. Boehm. Space efficient conservative garbage collection.
ACM SIGPLAN Notices, 39(4):490-501, 2004.

[9] H.-J. Boehm. Boehmge, 2015.
http://www. hboehm.info/gc/.

[10] H.-J. Boehm, A. J. Demers, and S. Shenker. Mostly parallel garbage collection. In Proceedings of the ACM SIGPLAN 1991 Conference on Programming Language Design
and Implementation, PLDI ’91, pages 157-164, New York,
NY, USA, 1991. ACM. ISBN 0-89791-428-7. URL
http: //doi.acm. org/10.1145/113445 . 113459.

[11] A. Braginsky, A. Kogan, and E. Petrank. Drop the anchor:
lightweight memory management for non-blocking data structures. In Proceedings of the 25th ACM symposium on Parallelism in algorithms and architectures, SPAA ’13, pages 3342, New York, NY, USA, 2013. ACM.

Available at

[12] T. A. Brown. Reclaiming memory for lock-free data structures: There has to be a better way. In Proceedings of the
2015 ACM Symposium on Principles of Distributed Computing, PODC ’15, pages 261-270, New York, NY, USA, 2015.
ACM. ISBN 978-1-4503-3617-8. . URL http://doi.acm.
org/10.1145/2767386 . 2767436

[13] N. Cohen and E. Petrank. Automatic memory reclamation for
lock-free data structures. In Proceedings of the 2015 ACM
SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications, OOPSLA
2015, pages 260-279, New York, NY, USA, 2015. ACM.
ISBN 978-1-4503-3689-5. . URL http://doi.acm.org/
10.1145/2814270 . 2814298.

[14] N. Cohen and E. Petrank. Data structure aware garbage collector. In Proceedings of the 2015 International Symposium on
Memory Management, ISMM °15, pages 28-40, New York,
NY, USA, 2015. ACM. ISBN 978-1-4503-3589-8. . URL
http: //doi.acm.org/10.1145/2754169 .2754176.

[15] L. Community. Linux 3.13, 2014. Available at
http://kernelnewbies.org/Linux_3.13.

A497

[16] C. Cutler. Reducing Pause Times With Clustered Collection.
PhD thesis, Massachusetts Institute of Technology, 2014.

[17] A. Demers, M. Weiser, B. Hayes, H. Boehm, D. Bobrow, and
S. Shenker. Combining generational and conservative garbage
collection: Framework and implementations. In Proceedings
of the 17th ACM SIGPLAN-SIGACT Symposium on Principles
of Programming Languages, POPL ’90, pages 261-269, New
York, NY, USA, 1990. ACM. ISBN 0-89791-343-4. .

[18] D. Detlefs, P. A. Martin, M. Moir, and G. L. S. Jr. Lock-free
reference counting. Distributed Computing, 15(4):255-271,
2002.

[19] A. Dragojevic, M. Herlihy, Y. Lev, and M. Moir. On the power
of hardware transactional memory to simplify memory management. In C. Gavoille and P. Fraigniaud, editors, Proceedings of the 30th Annual ACM Symposium on Principles of Distributed Computing, PODC 2011, San Jose, CA, USA, June
6-8, 2011, pages 99-108. ACM, 2011. ISBN 978-1-45030719-2... URL http: //doi.acm.org/10.1145/1993806.
1993821.

[20] T. Endo and K. Taura. Reducing pause time of conservative
collectors. In Proceedings of the 3rd International Symposium
on Memory Management, ISMM ’02, pages 119-131, New
York, NY, USA, 2002. ACM. ISBN 1-58113-539-4. . URL
http: //doi.acm.org/10.1145/512429 . 512432.

[21] T. Endo, K. Taura, and A. Yonezawa. A scalable mark-sweep
garbage collector on large-scale shared-memory machines. In
Supercomputing, ACM/IEEE 1997 Conference, pages 48-48.
TEEE, 1997.

[22] J. Evans. Jemalloc, 2015.
http://www.canonware.com/jemalloc/.

[23] Fitzpatrick. Distributed caching with memcached. Linux
Journal, 124:5, Aug. 2004. URL http://dl.acm.org/
citation.cfm?id=1012894.

[24] M. Fomitchev and E. Ruppert. Lock-free linked lists and skip
lists. In Proceedings of the 23rd annual ACM symposium on
Principles of Distributed Computing (PODC’ 04), pages 5059, New York, NY, USA, 2004. ACM Press. ISBN 1-58113802-4.

[25] K. Fraser. Practical lock-freedom. Technical Report UCAMCL-TR-579, University of Cambridge, Computer Laboratory,
Feb. 2004.

[26] K. Fraser and T. L. Harris. Concurrent programming without
locks. ACM Trans. Comput. Syst., 25(2), 2007.

[27] S. Ghemawat and P. Menage.
Retrieved 2015. Available at
perftools.sourceforge.net/doc/tcmalloc.html.

[28] A. Gidenstam, M. Papatriantafilou, H. Sundell, and P. Tsigas.
Efficient and reliable lock-free memory reclamation based on
reference counting. IEEE Trans. Parallel Distrib. Syst., 20(8):
1173-1187, 2009.

[29] V. Gramoli. More than you ever wanted to know about synchronization: Synchrobench. In Proceedings of the 20th Annual ACM SIGPLAN Symposium on Principles and Practice
of Parallel Programming (PPoPP), 2015.

[30] S. Hanke.
algorithms.

Available at

Tcmalloc,
http://goog
The performance of concurrent red-black tree
In J. Vitter and C. Zaroliagis, editors, Algorithm Engineering, volume 1668 of Lecture Notes in Computer Science, pages 286-300. Springer Berlin / Heidelberg,
1999. ISBN 978-3-540-66427-7. http://citeseer.ist.
psu. edu/viewdoc/summary?doi=10.1.1.25.6504.

[31] T. L. Harris. A pragmatic implementation of non-blocking
linked-lists. In Proceedings of the International Conference
on Distributed Computing (DISC), pages 300-314, 2001.

[32] T. E. Hart, P. E. McKenney, A. D. Brown, and J. Walpole. Performance of memory reclamation for lockless synchronization. J. Parallel Distrib. Comput., 67(12):1270-1285, 2007.

[33] M. Herlihy and N. Shavit. The Art of Multiprocessor Programming. Morgan Kaufmann Publishers Inc., San Francisco,
CA, USA, 2008. ISBN 0123705916, 9780123705914.

[34] M. Herlihy, V. Luchangco, and M. Moir. The repeat offender
problem: A mechanism for supporting dynamic-sized, lockfree data structures. In Proceedings of the 16th International
Conference on Distributed Computing (DISC), pages 339353, 2002.

[35] M. Herlihy, Y. Lev, V. Luchangco, and N. Shavit. A simple optimistic skiplist algorithm. In Proceedings of the
14th international conference on Structural information and
communication complexity, SIROCCO’07, pages 124-138,
Berlin, Heidelberg, 2007. Springer-Verlag. ISBN 978-3540-72918-1. URL http://dl.acm.org/citation. cfm?
id=1760631.1760646. http://dl.acm.org/citation.
cfm?id=1760631. 1760646.

[36] M. Herlihy, N. Shavit, and M. Tzafrir. Hopscotch hashing. In Proceedings of the 22nd international symposium on Distributed Computing, DISC ’08, pages 350-364,
Berlin, Heidelberg, 2008. Springer-Verlag. ISBN 978-3540-87778-3. URL http://dl.acm.org/citation. cfm?
id=1432316. http://dl.acm.org/citation.cfm?id=
1432316.

[37] H. Kermany and E. Petrank. The compressor: concurrent,
incremental, and parallel compaction. In Proceedings of the
ACM SIGPLAN 2006 Conference on Programming Language
Design and Implementation, Ottawa, Ontario, Canada, June
11-14, 2006, pages 354-363, 2006. . URL http://doi.
acm.org/10.1145/1133981 . 1134023.

[38] D. Lea, 2007. http: //java.sun.com/
javase/6/docs/api/java/util/concurrent/
ConcurrentSkipListMap .htm1.

[39] D. Lea, 2007. http://g.oswego.edu/d1/jsr1i66/dist/
docs/java/util/concurrent /ConcurrentHashMap.
html.

[40] R. L. Ltd. Memtier benchmark, Retrieved 2016. Available at
https://github.com/RedisLabs/memtier_benchmark.

[41] A. Matveev, N. Shavit, P. Felber, and P. Marlier. Read-logupdate: A lightweight synchronization mechanism for concurrent programming. In SOSP, 2015.

[42] P. E. McKenney, J. Appavoo, A. Kleen, O. Krieger, R. Russell,
D. Sarma, , and M. Soni. Read-copy update. In In Proc. of the
Ottawa Linux Symposium, page 3387367, 2001.

[43] M. M. Michael. High performance dynamic lock-free hash
tables and list-based sets. In Proceedings of the fourteenth

498

annual ACM symposium on Parallel algorithms and architectures, pages 73-82. ACM, 2002.

[44] M. M. Michael. Hazard pointers: Safe memory reclamation
for lock-free objects. IEEE Trans. Parallel Distrib. Syst., 15
(6):491-504, 2004.

[45] Microsoft. Windows virtual memory functions.
https: //msdn.microsoft.com/en-us/library/
windows/desktop/aa366781(v=vs.85) .aspx#
virtual_memory_functions, Accessed: 2017-02-28.

[46] F Pizlo, E. Petrank, and B. Steensgaard. A study of concurrent
real-time garbage collectors. SIGPLAN Not., 43(6):33-44,
June 2008. ISSN 0362-1340. . URL http://doi.acm.
org/10.1145/1379022. 1375587.

[47] J. Rafkind, A. Wick, J. Regehr, and M. Flatt. Precise garbage
collection for c. In Proceedings of the 2009 international symposium on Memory management, pages 39-48. ACM, 2009.

[48] G. Rodriguez-Rivera and V. F. Russo. Nonintrusive cloning
garbage collection with stock operating system support.
Softw., Pract. Exper., 27(8):885-904, 1997.

[49] R. Schuetze. Concurrent garbage collection in D.
http: //rainers.github.io/visuald/druntime/
concurrentgc .html1, Accessed: 2017-02-28.

[50] R. Shahriyar, S. M. Blackburn, and K. S. McKinley. Fast conservative garbage collection. In Proceedings of the 2014 ACM
International Conference on Object Oriented Programming
Systems Languages & Applications, pages 121-139. ACM,
2014.

[51] R. Shahriyar, S. M. Blackburn, and K. S. McKinley. Fast
conservative garbage collection. In Proceedings of the 2014
ACM International Conference on Object Oriented Programming Systems Languages & Applications, OOPSLA 2014, part
of SPLASH 2014, Portland, OR, USA, October 20-24, 2014,
pages 121-139, 2014. . URL http://doi.acm.org/10.
1145/2660193 . 2660198.

[52] O. Shalev and N. Shavit.
free extensible hash tables. J. ACM, 53:379-405, May
2006. ISSN 0004-5411. URL http: //doi.acm.org/
10.1145/1147954.1147958. http://doi.acm.org/10.
1145/1147954.1147958.

[53] N. Shavit and I. Lotan. Skiplist-based concurrent priority
queues. In Parallel and Distributed Processing Symposium,
2000. IPDPS 2000. Proceedings. 14th International, pages
263-268. IEEE, 2000.