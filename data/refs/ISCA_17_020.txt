[1] “DRAMPower Source Code,” https://github.com/ravenrd/DRAMPower.
[2] “Ramulator Source Code,” https://github.com/CMU-SAFARI/ramulator.
[3] “Standard Performance Evaluation Corporation,” http://www.spec.org/cpu2006.
[4] “SAS SSDs for Enterprise: High Performance with Extreme Reliability,” 2012.
[5] A. Agrawal et al., “Refrint: Intelligent Refresh to Minimize Power in On-chip
Multiprocessor Cache Hierarchies,” in HPCA, 2013.

[6] S. Baek et al., “Refresh Now and Then,” in TC, 2014.

[7] I, Bhati et al., “DRAM Refresh Mechanisms, Penalties, and Trade-Offs,” in TC,
2016.

[8] I Bhati et ai., “Coordinated Refresh: Energy Efficient Techniques for DRAM
Refresh Scheduling,” in JSPLED, 2013.

[9] Y. Cai et al, “Vulnerabilities in MLC NAND Flash Memory Programming:
Experimental Analysis, Exploits, and Mitigation Techniques,” in HPCA, 2017.
[10] Y. Cai et al., “FPGA-Based Solid-State Drive Prototyping Platform,” in FCCM,
2011.

[11] Y. Cai et al., “Error Patterns in MLC NAND Flash Memory: Measurement,
Characterization, and Analysis,” in DATE, 2012.

[12] Y. Cai et al., “Threshold Voltage Distribution in MLC NAND Flash Memory:
Characterization, Analysis, and Modeling,” in DATE, 2013.

[13] Y. Cai et al., “Read Disturb Errors in MLC NAND Flash Memory: Characterization, Mitigation, and Recovery,” in DSN, 2015.

[14] Y. Cai et al., “Data Retention in MLC NAND Flash Memory: Characterization,
Optimization, and Recovery,” in HPCA, 2015.

[15] Y. Cai et al., “Program Interference in MLC NAND Flash Memory: Characterization, Modeling, and Mitigation,” in ICCD, 2013.

[16] Y. Cai et al., “Flash Memory SSD Errors, Mitigation, and Recovery,” in Proceedings of the IEEE, to appear in 2017.

[17] Y. Cai et al., “Flash Correct-and-Refresh: Retention-Aware Error Management
for Increased Flash Memory Lifetime,” in ICCD, 2012.

[18] Y. Cai et al., “Error Analysis and Retention-Aware Error Management for NAND
Flash Memory,” in ITJ, 2013.

[19] Y. Cai et al., “Neighbor-Cell Assisted Error Correction for MLC NAND Flash
Memories,” in SIGMETRICS, 2014.

[20] K. Chandrasekar et al., “Exploiting Expendable Process-margins in DRAMs for
Run-time Performance Optimization,” in DATE, 2014.

[21] K. K. Chang, “Understanding and Improving Latency of DRAM-Based Memory
Systems,” Ph.D. dissertation, Carnegie Mellon University, 2017.

[22] K. K. Chang et ai., “Understanding Latency Variation in Modern DRAM Chips:
Experimental Characterization, Analysis, and Optimization,” in SIGMETRICS,
2016.

[23] K. K. Chang e# al, “Improving DRAM Performance by Parallelizing Refreshes
with Accesses,” in HPCA, 2014.

[24] K. K. Chang et al., “Low-cost Inter-linked Subarrays (LISA): Enabling Fast
Inter-subarray Data Movement in DRAM,” in HPCA, 2016.

[25] K. K. Chang et al., “Understanding Reduced-Voltage Operation in Modern
DRAM Devices: Experimental Characterization, Analysis, and Mechanisms,” in
SIGMETRICS, 2017.

[26] Z, Cui et al., “DTail: A Flexible Approach to DRAM Refresh Management,” in
SC, 2014.

[27] P. G. Emma et al., “Rethinking Refresh: Increasing Availability and Reducing
Power in DRAM for Cache Applications,” in MICRO, 2008.

[28] 8. Eyerman and L. Eeckhout, “System-level Performance Metrics for Multiprogram Workloads,” in IEEE Micro, 2008.

[29] A. Fukami et al., “Improving the Reliability of Chip-Off Forensic Analysis of
NAND Flash Memory Devices,” in Digital Investigation, 2017.

[30] M. Ghosh and H.-H. S. Lee, “Smart Refresh: An Enhanced Memory Controller
Design for Reducing Energy in Conventional and 3D Die-stacked DRAMs,” in
MICRO, 2007.

[31] T. Hamamoto et al., “On the Retention Time Distribution of Dynamic Random
Access Memory (DRAM),” in TED, 1998.

[32] H. Hassan et al., “ChargeCache: Reducing DRAM Latency by Exploiting Row
Access Locality,” in HPCA, 2016.

[33] H. Hassan et al., “SoftMC: A Flexible and Practical Open-source Infrastructure
for Enabling Experimental DRAM Studies,” in HPCA, 2017.

[34] C.-S. Hou et al., “An FPGA-based Test Platform for Analyzing Data Retention
Time Distribution of DRAMs,” in VLSI-DAT, 2013.

[35] C. Isen and L. John, “ESKIMO: Energy Savings Using Semantic Knowledge of
Inconsequential Memory Occupancy for DRAM Subsystem,” in MICRO, 2009.
[36] TTRS, “International Technology Roadmap for Semiconductors Executive Summary,” 2013, http://Awww.itrs2.net/2013-itrs. html.

[37] JEDEC, “Low Power Double Data Rate 4 (LPDDR4) SDRAM Specification,”
JEDEC Solid State Technology Association, 2014.

[38] M. Jung et al., “Reverse Engineering of DRAMs: Row Hammer with Crosshair,”
in MEMSYS, 2016.

[39] M. Jung et al., “Optimized Active and Power-down Mode Refresh Control in
3D-DRAMs,” in VLSI-SoC, 2014.

[40] M. Jung et al., “Omitting Refresh: A Case Study for Commodity and Wide I/O
DRAMs,” in MEMSYS, 2015.

[41] U. Kang et al., “Co-architecting Controllers and DRAM to Enhance DRAM
Process Scaling,” in The Memory Forum, 2014.

[42] S. Khan et al., “The Efficacy of Error Mitigation Techniques for DRAM Retention Failures: A Comparative Experimental Study,” in SIGMETRICS, 2014.

[43] S. Khan et al., “PARBOR: An Efficient System-Level Technique to Detect
Data-Dependent Failures in DRAM,” in DSN, 2016.

[44] S. Khan ez al, “A Case for Memory Content-Based Detection and Mitigation of
Data-Dependent Failures in DRAM,” in CAL, 2016.

[45] J. Kim and M. C. Papaefthymiou, “Dynamic Memory Design for Low Dataretention Power,” in PATMOS, 2000.

[46] J. Kim and M. C. Papaefthymiou, “Block-based Multiperiod Dynamic Memory
Design for Low Data-retention Power,” in TVLSI, 2003.

[47] K. Kim and J. Lee, “A New Investigation of Data Retention Time in Truly
Nanoscaled DRAMs,” in EDL, 2009.

[48] Y. Kim, “Architectural Techniques to Enhance DRAM Scaling,” Ph.D. dissertation, Carnegie Mellon University, 2015.

[49] Y. Kim et al., “Flipping Bits in Memory Without Accessing Them: An Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.

[50] Y. Kim et al., “ATLAS: A Scalable and High-Performance Scheduling Algorithm
for Multiple Memory Controllers,” in HPCA, 2010.

[51] Y. Kim et al., “Thread Cluster Memory Scheduling: Exploiting Differences in
Memory Access Behavior,” in MICRO, 2010.

[52] Y. Kim et al., “A Case for Exploiting Subarray-level Parallelism (SALP) in
DRAM,” in ISCA, 2012.

[53] Y. Kim et al, “Ramulator: A Fast and Extensible DRAM Simulator,” in CAL,
2015.

[54] D. Lee et al., “Adaptive-latency DRAM: Optimizing DRAM Timing for the
Common-case,” in HPCA, 2015.

[55] D. Lee, “Reducing DRAM Latency at Low Cost by Exploiting Heterogeneity,”
Ph.D. dissertation, Carnegie Mellon University, 2016.

[56] D. Lee et al., “Design-Induced Latency Variation in Modern DRAM Chips: Characterization, Analysis, and Latency Reduction Mechanisms,” in SIGMETRICS,
2017.

[57] D. Lee et al, “Tiered-latency DRAM: A Low Latency and Low Cost DRAM
Architecture,” in HPCA, 2013.

[58] D. Lee et al., “Decoupled Direct Memory Access: Isolating CPU and IO Traffic
by Leveraging a Dual-Data-Port DRAM,” in PACT, 2015.

[59] M. J. Lee and K. W. Park, “A Mechanism for Dependence of Refresh Time on
Data Pattern in DRAM,” in EDL, 2010.

[60] Y. Li et al., “DRAM Yield Analysis and Optimization by a Statistical Design
Approach,” in CS7, 2011.

[61] C.-H. Lin et al., “SECRET: Selective Error Correction for Refresh Energy
Reduction in DRAMs,” in ICCD, 2012.

[62] J. Liu et al., “An Experimental Study of Data Retention Behavior in Modern
DRAM Devices: Implications for Retention Time Profiling Mechanisms,” in
ISCA, 2013.

[63] J. Liu et al., “RAIDR: Retention-Aware Intelligent DRAM Refresh,” in [SCA,
2012.

[64] S. Liu et al., “Flikker: Saving DRAM Refresh-power Through Critical Data
Partitioning,” in ASPLOS, 2012.

[65] Y. Luo et al., “WARM: Improving NAND Flash Memory Lifetime with WriteHotness Aware Retention Management,” in MSST, 2015.

[66] Y. Luo et al., “Enabling Accurate and Practical Online Flash Channel Modeling
for Modern MLC NAND Flash Memory,” in JSAC, 2016.

[67] Y. Luo et al., “Characterizing Application Memory Error Vulnerability to Optimize Datacenter Cost via Heterogeneous-reliability Memory,” in DSN, 2014.

[68] J. A. Mandelman et al., “Challenges and Future Directions for the Scaling of
Dynamic Random-access Memory (DRAM),” in IBM JRD, 2002.

[69] J. Meza et al., “A Large-scale Study of Flash Memory Errors in the Field,” in
SIGMETRICS, 2015.

[70] J. Meza et al., “Revisiting Memory Errors in Large-scale Production Data
Centers: Analysis and Modeling of New Trends from the Field,” in DSN, 2015.
[71] R. Micheloni et al., “Apparatus and Method Based on LDPC Codes for Adjusting
a Correctable Raw Bit Error Rate Limit in a Memory System,” US Patent
9,092,353. 2015.

[72] Y. Mori et al., “The Origin of Variable Retention Time in DRAM,” in JEDM,
2005.

[73] J, Mukundan et al., “Understanding and Mitigating Refresh Overheads in Highdensity DDR4 DRAM Systems,” in [SCA, 2013.

[74] P. Nair et al., “A Case for Refresh Pausing in DRAM Memory Systems,” in
HPCA, 2013.

[75] P. J. Nair et al., “Refresh Pausing in DRAM Memory Systems,” in TACO, 2014.
[76] P. J. Nair et al., “ArchShield: Architectural Framework for Assisting DRAM
Scaling by Tolerating High Error Rates,” in JSCA, 2013.

[77] Y. Nakagome et al., “The Impact of Data-line Interference Noise on DRAM
Scaling,” in JSSC, 1988.

[78] I Narayanan et ai., “SSD Failures in Datacenters: What, When and Why?” in
SIGMETRICS, 2016.

[79] T. Ohsawa et al. “Optimizing the DRAM Refresh Count for Merged
DRAM/logic LSIs,” in ISLPED, 1998.

[80] K. Patel et al., “Energy-Efficient Value-based Selective Refresh for Embedded
DRAMs,” in PATMOS, 2005.

[81] M. K. Qureshi et al., “AVATAR: A Variable-retention-time (VRT) Aware Refresh
for DRAM Systems,” in DSN, 2015.

[82] P. J. Restle et al., “DRAM Variable Retention Time,” in IEDM, 1992.

[83] S. Rixner et al., “Memory Access Scheduling,” in ISCA, 2000.

[84] K. Saino et al., “Impact of Gate-induced Drain Leakage Current on the Tail
Distribution of DRAM Data Retention Time,” in JEDM, 2000.

[85] B. Schroeder et al., “Flash Reliability in Production: The Expected and the
Unexpected.” in FAST, 2016.

[86] B. Schroeder et al., “DRAM Errors in the Wild: a Large-scale Field Study,” in
SIGMETRICS, 2009.

[87] V. Seshadri, “Simple DRAM and Virtual Memory Abstractions to Enable Highly
Efficient Memory Systems,” Ph.D. dissertation, Carnegie Mellon University,
2016.

[88] V. Seshadri et al., “RowClone: Fast and Energy-Efficient In-DRAM Bulk Data
Copy and Initialization,” in MICRO, 2013.

[89] V. Seshadri et al., “Buddy-RAM: Improving the Performance and Efficiency of
Bulk Bitwise Operations Using DRAM,” in arXiv, 2016.

[90] V. Seshadri et al., “Gather-scatter DRAM: In-DRAM Address Translation to
Improve the Spatial Locality of Non-unit Strided Accesses,” in MICRO, 2015.
[91] A, Snavely and D. M. Tullsen, “Symbiotic Jobscheduling for a Simultaneous
Mutlithreading Processor,” in ASPLOS, 2000.

[92] V. Sridharan et al., “Memory Errors in Modern Systems: The Good, the Bad,
and the Ugly,” in ASPLOS, 2015.

[93] V. Sridharan and D. Liberty, “A Study of DRAM Failures in the Field,” in SC,
2012.

[94] J. Stuecheli et al., “Elastic Refresh: Techniques to Mitigate Refresh Penalties in
High Density Memory,” in MICRO, 2010.

[95] R. K. Venkatesan et al., “Retention-aware Placement in DRAM (RAPID): Software Methods for Quasi-non-volatile DRAM,” in HPCA, 2006.

[96] J. Wang et al., “ProactiveDRAM: A DRAM-initiated Retention Management
Scheme,” in ICCD, 2014.

[97] Y. Wang et al., “RADAR: A Case for Retention-aware DRAM Assembly and
Repair in Future FER DRAM Memory,” in DAC, 2015.

[98] C. Weis et al., “Retention Time Measurements and Modelling of Bit Error Rates
of Wide I/O DRAM in MPSoCs,” in DATE, 2015.

[99] C. Weis et al., “Thermal Aspects and High-Level Explorations of 3D Stacked
DRAMs,” in JSVLST, 2015.

[100] B. Wicht et ai., “Yield and Speed Optimization of a Latch-type Voltage Sense
Amplifier,” in JSSC, 2004.

[101] D. S. Yaney et al., “A Meta-stable Leakage Phenomenon in DRAM Charge
Storage-Variable Hold Time,” in JEDM, 1987.

[102] W. K. Zuravleff and T. Robinson, “Controller for a Synchronous DRAM that
Maximizes Throughput by Allowing Memory Requests and Commands to be
Issued Out of Order,” US Patent 5,630,096. 1997.
