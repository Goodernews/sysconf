[1] L. Greengard and V. Rokhlin, “A fast algorithm for particle
simulations,” Journal of Computational Physics, vol. 73, no. 2,

[2] L. Ying, G. Biros, and D. Zorin, “A kernel independent adaptive
fast multipole algorithm in two and three dimensions,” Journal
of Computational Physics, vol. 196, no. 2, pp. 591-626, 2004.
[3] S. Ambikasaran and E. Darve, “The inverse fast multipole
method,” arXiv preprint arXiv: 1407.1572, 2014.

[4] W. Hackbusch, B. Khoromskij, and E. Tyrtyshnikov, “Hierarchical kronecker tensor-product approximations,” Journal of
Numerical Mathematics jnma, vol. 13, no. 2, pp. 119-156, 2005.
[5] S. Boérm, “Construction of data-sparse H? -matrices by hierarchical compression,” SIAM Journal on Scientific Computing,
vol. 31, no. 3, pp. 1820-1839, 2009.

[6] P. G. Martinsson, “A fast randomized algorithm for computing a
hierarchically semiseparable representation of a matrix,’ SIAM

[7] J. Matrix Anal. Appl., vol. 32, no. 4, pp. 1251-1274, Nov.
2011. [Online]. Available: http://dx.doi.org/10.1137/100786617
[8] S. Ambikasaran and E. Darve, “An O(NlogN) fast direct
solver for partial hierarchically semi-separable matrices,” Journal of Scientific Computing, vol. 57, no. 3, pp. 477-501, 2013.
[9] F. A. Cruz, M. G. Knepley, and L. A. Barba, “PetFMM-—
a dynamically load-balancing parallel fast multipole library,”
International Journal for Numerical Methods in Engineering,
vol. 85, no. 4, pp. 403-428, 2011.

[10] R. Yokota and L. A. Barba, “A tuned and scalable fast multipole
method as a preeminent algorithm for exascale systems,” International Journal of High Performance Computing Applications,
vol. 26, no. 4, pp. 337-346, 2012.

[11] D. Malhotra and G. Biros, “PVFMM: A parallel kernel independent FMM for particle and volume potentials,” Communications
in Computational Physics, vol. 18, no. 03, pp. 808-830, 2015.
[12] B. Pierre, B. Bramas, O. Coulaud, E. Darve, L. Dupuy,
A. Etcheverry, and G. SYLVAND, “ScalFMM: A generic
parallel fast multipole library,’ in Computational Science and
Engineering (CSE), 2015.

[13] M. Bebendorf and R. Kriemann, “Fast parallel solution of
boundary integral equations and related problems,” Computing
and Visualization in Science, vol. 8, no. 3-4, pp. 121-135, 2005.
[14] S. Wang, X. S. Li, J. Xia, Y. Situ, and M. V. De Hoop,
“Efficient scalable algorithms for solving dense linear systems
with hierarchically semiseparable structures,” SIAM Journal on
Scientific Computing, vol. 35, no. 6, pp. C519-C544, 2013.

[15] S. Wang, V. Maarten, J. Xia, and X. S. Li, “Massively parallel
structured multifrontal solver for time-harmonic elastic waves
in 3-d anisotropic media,” Geophysical Journal International,
vol. 191, no. 1, pp. 346-366, 2012.

[16] P. Ghysels, X. S. Li, F-H. Rouet, S. Williams, and A. Napov,
“An efficient multicore implementation of a novel HSSstructured multifrontal solver using randomized sampling,”
SIAM Journal on Scientific Computing, vol. 38, no. 5, pp. S358$384, 2016.

[17] F.-H. Rouet, X. S. Li, P. Ghysels, and A. Napov, “A distributedmemory package for dense hierarchically semi-separable matrix computations using randomization,” ACM Transactions on
Mathematical Software (TOMS), vol. 42, no. 4, p. 27, 2016.
[18] N. Halko, P. Martinsson, and J. Tropp, “Finding structure with
randomness: Probabilistic algorithms for constructing approximate matrix decompositions,” SIAM review, vol. 53, no. 2, pp.
217-288, 2011.

[19] H. Sundar, R. S. Sampath, S. S. Adavani, C. Davatzikos, and
G. Biros, “Low-constant parallel algorithms for finite element
simulations using linear octrees,” in SC’07: Proceedings of
the International Conference for High Performance Computing,
Networking, Storage, and Analysis. ACM/IEEE, 2007.

[20] H. Sundar, R. Sampath, and G. Biros, “Bottom-up construction
and 2:1 balance refinement of linear octrees in parallel,’ SIAM
Journal on Scientific Computing, vol. 30, no. 5, pp. 2675-2708,
2008.

[21] R. Sampath, H. Sundar, S. S. Adavani, I.
and G. Biros, “Dendro home page,”
http://www.seas.upenn.edu/csela/dendro.

[22] C. Burstedde, L. C. Wilcox, and O. Ghattas, “p4est: Scalable
algorithms for parallel adaptive mesh refinement on forests of
octrees,” SIAM Journal on Scientific Computing, vol. 33, no. 3,
pp. 1103-1133, 2011.

[23] J. Nickolls, I. Buck, M. Garland, and K. Skadron, “Scalable
parallel programming with cuda,” Queue, vol. 6, no. 2, pp.
40-53, Mar. 2008. [Online]. Available: http://doi.acm.org/10.
1145/1365490.1365500

[24] NVIDIA, CUDA CURAND Library, NVIDIA Corporation,
Santa Clara, CA, USA, Aug. 2010.

[25] nVidia, CUBLAS Library User Guide, v5.0 ed.,
http://docs.nvidia.com/cublas/index.html, nVidia, Oct. 2012.
[Online]. Available: http://docs.nvidia.com/cublas/index.html
[26] W. Gropp, “MPICH2: A new start for mpi implementations,”
in Proceedings of the 9th European PVM/MPI Users’
Group Meeting on Recent Advances in Parallel Virtual
Machine and Message Passing Interface. London, UK,
UK: Springer-Verlag, 2002, pp. 7-. [Online]. Available:
http://dl.acm.org/citation.cfm?id=648 139.749473
