
[1] Flexcoin.
https://web.archive.org/web/20160408190656/http://www.flexcoin.com/ (2014).
[2] Michael Stonebraker Turing Award, 2014.
http://amturing.acm.org/award_winners/stonebraker_1172121.cfm.
[3] Broadleaf Commerce, 2016.
https://github.com/BroadleafCommerce/BroadleafCommerce.
[4] builtwith, 2016. https://builtwith.com/.
[5] Lightning Fast Shop, 2016. https://github.com/diefenbach/django-lfs.
[6] Magento2, 2016. https://github.com/magento/magento2.
[7] OpenCart, 2016. https://github.com/opencart/opencart.
[8] Oscar, 2016. https://github.com/django-oscar/django-oscar.
[9] PHP Session Basics, 2016.
http://php.net/manual/en/session.examples.basic.php.
[10] PrestaShop, 2016. https://github.com/PrestaShop/PrestaShop.
[11] ROR Ecommerce, 2016. https://github.com/drhenner/ror_ecommerce.
[12] Saleor, 2016. https://github.com/mirumee/saleor.
[13] Shopizer, 2016. https://github.com/shopizer-ecommerce/shopizer.
[14] Shoppe, 2016. https://github.com/tryshoppe/shoppe.
[15] Spree Commerce, 2016. https://github.com/spree/spree.

[16] WooCommerce, 2016. https://github.com/woocommerce/woocommerce.
[17] A. Adya. Weak consistency: a generalized theory and optimistic
implementations for distributed transactions. PhD thesis, MIT, 1999.
[18] P. Bailis. Coordination Avoidance in Distributed Databases. PhD thesis, 2015.
[19] P. Bailis, A. Davidson, A. Fekete, A. Ghodsi, J. M. Hellerstein, and I. Stoica.
Highly Available Transactions: Virtues and limitations. In VLDB, 2014.
[20] P. Bailis, A. Fekete, M. J. Franklin, A. Ghodsi, J. M. Hellerstein, and I. Stoica.
Feral Concurrency Control: An empirical investigation of modern application
integrity. In SIGMOD, 2015.
[21] P. Bailis, J. M. Hellerstein, and M. Stonebraker. Readings in database systems.
3 edition, 2015.
[22] P. Bailis, S. Venkataraman, M. J. Franklin, J. M. Hellerstein, and I. Stoica.
Probabilistically Bounded Staleness for practical partial quorums. In VLDB,
2012.
[23] H. Berenson, P. Bernstein, J. Gray, J. Melton, E. O’Neil, and P. O’Neil. A
critique of ANSI SQL isolation levels. In SIGMOD, 1995.
[24] D. Bermbach and S. Tai. Eventual consistency: How soon is eventual? An
evaluation of Amazon S3’s consistency behavior. In MW4SOC, 2011.
[25] P. Bernstein, V. Hadzilacos, and N. Goodman. Concurrency control and
recovery in database systems, volume 370. Addison-wesley New York, 1987.
[26] P. A. Bernstein, D. W. Shipman, and J. B. Rothnie, Jr. Concurrency control in a
system for distributed databases (SDD-1). ACM TODS, 5(1):18–51, Mar. 1980.
[27] C. Boyapati, R. Lee, and M. Rinard. Ownership types for safe programming:
Preventing data races and deadlocks. In OOPSLA, 2002.
[28] A. Cerone, G. Bernardi, and A. Gotsman. A framework for transactional
consistency models with atomic visibility. In LIPIcs-Leibniz International
Proceedings in Informatics, volume 42. Schloss Dagstuhl-Leibniz-Zentrum fuer
Informatik, 2015.
[29] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna. Swaddler: An approach
for the anomaly-based detection of state violations in web applications. In
International Workshop on Recent Advances in Intrusion Detection, pages
63–86. Springer, 2007.
[30] N. Crooks, Y. Pu, L. Alvisi, and A. Clement. Seeing is believing: A unified
model for consistency and isolation via states. arXiv preprint arXiv:1609.06670,
2016.
[31] D. Engler and K. Ashcraft. Racerx: effective, static detection of race conditions
and deadlocks. In ACM SIGOPS Operating Systems Review, volume 37, pages
237–252. ACM, 2003.
[32] M. D. Ernst, A. Czeisler, W. G. Griswold, and D. Notkin. Quickly detecting
relevant program invariants. In Proceedings of the 22Nd International
Conference on Software Engineering, ICSE ’00, pages 449–458, New York, NY,
USA, 2000. ACM.
[33] M. D. Ernst, J. H. Perkins, P. J. Guo, S. McCamant, C. Pacheco, M. S. Tschantz,
and C. Xiao. The daikon system for dynamic detection of likely invariants.
Science of Computer Programming, 69(1):35–45, 2007.
[34] K. P. Eswaran, J. N. Gray, R. A. Lorie, and I. L. Traiger. The notions of
consistency and predicate locks in a database system. Commun. ACM,
19(11):624–633, Nov. 1976.
[35] C. Flanagan and S. N. Freund. Fasttrack: efficient and precise dynamic race
detection. In ACM Sigplan Notices, volume 44, pages 121–133. ACM, 2009.
[36] F. Freitas, R. Rodrigues, et al. Characterizing the consistency of online services
(practical experience report). In DSN, 2016.
[37] J. T. Giffin, S. Jha, and B. P. Miller. Efficient context-sensitive intrusion
detection. In NDSS, 2004.
[38] W. Golab, X. Li, and M. A. Shah. Analyzing consistency properties for fun and
profit. In PODC, 2011.
[39] J. Gray. The transaction concept: Virtues and limitations. In VLDB, 1981.
[40] J. Gray. What next? a dozen information-technology research goals. page 24,
June 1999.
[41] J. Gray, R. Lorie, G. Putzolu, and I. Traiger. Granularity of locks and degrees of
consistency in a shared data base. Technical report, IBM, 1976.
[42] J. Gray and A. Reuter. Transaction processing. Kaufmann, 1993.
[43] T. Haerder and A. Reuter. Principles of transaction-oriented database recovery.
ACM CSUR, 15(4):287–317, 1983.
[44] S. Jorwekar, A. Fekete, K. Ramamritham, and S. Sudarshan. Automating the
detection of snapshot isolation anomalies. In VLDB, 2007.
[45] H.-T. Kung and C. H. Papadimitriou. An optimality theory of concurrency
control for databases. In SIGMOD, 1979.
[46] L. Lamport. Time, clocks, and the ordering of events in a distributed system.
CACM, 21(7):558–565, 1978.
[47] S. Y. Lee, W. L. Low, and P. Y. Wong. Learning fingerprints for a database
intrusion detection system. In ESORICS, 2002.
[48] S. Lu, A. Bernstein, and P. Lewis. Correct execution of transactions at different
isolation levels. IEEE TKDE, 2004.
[49] M. Naik, A. Aiken, and J. Whaley. Effective static race detection for Java,
volume 41. ACM, 2006.
[50] F. Nielson, H. R. Nielson, and C. Hankin. Principles of program analysis.
Springer, 2015.

[51] N. POPPER. A hacking of more than $50 million dashes hopes in the world of
virtual currency, June 2016. New York Times DealBook:
http://nyti.ms/1UdyDfx.
[52] S. Qadeer and D. Wu. Kiss: keep it simple and sequential. PLDI, 2004.
[53] S. Savage, M. Burrows, G. Nelson, P. Sobalvarro, and T. Anderson. Eraser: A
dynamic data race detector for multithreaded programs. ACM Transactions on
Computer Systems (TOCS), 15(4):391–411, 1997.
[54] D. Schonberg. On-the-fly detection of access anomalies. 1989.
[55] E. Sirer. Nosql meets bitcoin and brings down two exchanges: The story of
flexcoin and poloniex.
http://hackingdistributed.com/2014/04/06/another-one-bites-the-dust-flexcoin/,
2014.
[56] Y. Smaragdakis, J. Evans, C. Sadowski, J. Yi, and C. Flanagan. Sound
predictive race detection in polynomial time. In POPL, 2012.
[57] F. Valeur, D. Mutz, and G. Vigna. A learning-based approach to the detection of
sql attacks. In International Conference on Detection of Intrusions and
Malware, and Vulnerability Assessment, pages 123–140. Springer, 2005.
[58] C. Von Praun and T. R. Gross. Object race detection. In OOPSLA, 2001.
[59] H. Wada, A. Fekete, L. Zhao, K. Lee, and A. Liu. Data consistency properties
and the trade-offs in commercial cloud storage: the consumers’ perspective. In
CIDR, 2011.
[60] J. Yang, A. Cui, S. Stolfo, and S. Sethumadhavan. Concurrency attacks. In
HotPar, 2012.
[61] K. Zellag and B. Kemme. Real-time quantification and classification of
consistency anomalies in multi-tier architectures. In ICDE, 2011.
[62] K. Zellag and B. Kemme. How consistent is your cloud application? In ACM
SoCC, 2012.

