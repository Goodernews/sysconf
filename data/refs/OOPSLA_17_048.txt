[1] Amal Ahmed, Robert Bruce Findler, Jeremy G. Siek, and Philip Wadler. 2011. Blame for All. In POPL 2011. ACM, New York,

NY, USA, 201-214.



[2] Wonsun Ahn, Jiho Choi, Thomas Shull, Maria J. Garzaran, and Josep Torrellas. 2014. Improving JavaScript Performance by

Deconstructing the Type System. In PLDI 2014. ACM, New York, NY, USA, 496-507.



[3] Esteban Allende, Oscar Callau, Johan Fabry, Eric Tanter, and Marcus Denker. 2014. Gradual Typing for Smalltalk. Science of

Computer Programming 96 (2014), 52 — 69. Special issue on Advances in Smalltalk based Systems.



[4] Esteban Allende, Johan Fabry, and Eric Tanter. 2013. Cast Insertion Strategies for Gradually-Typed Objects. In DLS 2013.

ACM, New York, NY, USA, 27-36.



[5] Nada Amin and Ross Tate. 2016. Java and Scala’s Type Systems are Unsound: The Existential Crisis of Null Pointers. In

OOPSLA 2016. ACM, New York, NY, USA, 838-848.



[6] Christopher Anderson and Sophia Drossopoulou. 2003. BabyJ: From Object Based to Class Based Programming via Types.

In WOOD 2003. Elsevier Science Publishers B. V., Amsterdam, The Netherlands, 53 — 81.



[7] Gavin Bierman, Erik Meijer, and Mads Torgersen. 2010. Adding Dynamic Types to C#. In ECOOP 2010. Springer Berlin

Heidelberg, Berlin, Heidelberg, 76-100.



[8] Gilad Bracha. 2004. Pluggable Type Systems. (2004). In Workshop on Revival of Dynamic Languages.



[9] Matteo Cimini and Jeremy G. Siek. 2016. The Gradualizer: A Methodology and Algorithm for Generating Gradual Type

Systems. In POPL 2016. ACM, New York, NY, USA, 443-455.



[10] Alan Demers, Mark Weiser, Barry Hayes, Hans Boehm, Daniel Bobrow, and Scott Shenker. 1990. Combining Generational

and Conservative Garbage Collection: Framework and Implementations. In POPL 1990. ACM, New York, NY, USA,

261-269,



[11] L. Peter Deutsch and Allan M. Schiffman. 1984. Efficient Implementation of the Smalltalk-80 System. In POPL 1984, ACM,

New York, NY, USA, 297-302.



[12] Facebook, Inc. 2016. The Hack Language Specification, Version 1.1. (April 2016).



[13] Robert Bruce Findler and Matthias Felleisen. 2002. Contracts for Higher-Order Functions. In ICFP 2002. ACM, New York,

NY, USA, 48-59.



[14] Ronald Garcia, Alison M. Clark, and Eric Tanter. 2016. Abstracting Gradual Typing. In POPL 2016. ACM, New York, NY,

USA, 429-442,



[15] Ben Greenman, Fabian Muehlboeck, and Ross Tate. 2014. Getting F-Bounded Polymorphism into Shape. In PLDI 2014. ACM,

New York, NY, USA, 89-99,



[16] Radu Grigore. 2017. Java Generics are Turing Complete. In POPL 2017, ACM, New York, NY, USA, 73-85.



[17] Jessica Gronski, Kenneth Knowles, Aaron Tomb, Stephen N. Freund, and Cormac Flanagan. 2006. SAGE: Hybrid Checking

for Flexible Specifications. Scheme and Functional Programming Workshop 6 (2006), 93-104.



[18] Fritz Henglein. 1994. Dynamic Typing: Syntax and Proof Theory. Science of Computer Programming 22, 3 (1994), 197 — 230.



[19] Atsushi Igarashi, Benjamin C. Pierce, and Philip Wadler. 2001. Featherweight Java: A Minimal Core Calculus for Java and

GJ. TOPLAS 23, 3 (May 2001), 396-450.



[20] Lintaro Ina and Atsushi Igarashi. 2011. Gradual Typing for Generics. In OOPSLA 2011. ACM, New York, NY, USA, 609-624.



[21] Andrew Kennedy and Benjamin C. Pierce. 2007. On Decidability of Nominal Subtyping with Variance. In FOOL/WOOD 2007.

Microsoft Research, Cambridge, UK, 1-12.



[22] Jacob Matthews and Robert Bruce Findler. 2007. Operational Semantics for Multi-Language Programs. In POPL 2007. ACM,

New York, NY, USA, 3-10.



[23] Microsoft. 2012. TypeScript. (Oct. 2012).



[24] The Python Development Team. 2008. Python Benchmarks.

https://hg.python.org/benchmarks/. (Dec. 2008).



[25] Aseem Rastogi, Nikhil Swamy, Cédric Fournet, Gavin Bierman, and Panagiotis Vekris. 2015. Safe & Efficient Gradual Typing

for TypeScript. In POPL 2015. ACM, New York, NY, USA, 167-180.



[26] Gregor Richards, Francesco Zappa Nardelli, and Jan Vitek. 2015. Concrete Types for TypeScript. In ECOOP 2015, Vol. 37.

Schloss Dagstuhl—Leibniz-Zentrum fuer Informatik, Dagstuhl, Germany, 76—100.



[27] Michel Schinz. 2005. Compiling Scala for the Java Virtual Machine. Ph.D. Dissertation. EPFL.



[28] Jeremy Siek, Ronald Garcia, and Walid Taha. 2009. Exploring the Design Space of Higher-Order Casts. In ESOP 2009.

Springer-Verlag, Berlin, Heidelberg, 17-31.



[29] Jeremy Siek and Walid Taha. 2007. Gradual Typing for Objects. In ECOOP 2007. Springer-Verlag, Berlin, Heidelberg, 2-27.



[30] Jeremy G Siek and Walid Taha. 2006. Gradual Typing for Functional Languages. Scheme and Functional Programming

Workshop 6 (2006), 81-92.



[31] Jeremy G. Siek, Michael M. Vitousek, Matteo Cimini, and John Tang Boyland. 2015a. Refined Criteria for Gradual Typing. In

SNAPL 2015, Vol. 32. Schloss Dagstuhl—Leibniz-Zentrum fuer Informatik, Dagstuhl, Germany, 274-293.



[32] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 56. Publication date: October 2017.

56:30 Fabian Muehlboeck and Ross Tate



[33] Jeremy G. Siek, Michael M. Vitousek, Matteo Cimini, Sam Tobin-Hochstadt, and Ronald Garcia. 2015b. Monotonic References

for Efficient Gradual Typing. In ESOP 2015. Springer Berlin Heidelberg, Berlin, Heidelberg, 432-456.



[34] Jeremy G. Siek and Philip Wadler. 2010. Threesomes, with and without Blame. In POPL 2010. ACM, New York, NY, USA,

365-376.



[35] Daniel Smith and Robert Cartwright. 2008. Java Type Inference is Broken: Can We Fix It?. In OOPSLA 2008. ACM, New

York, NY, USA, 505-524,



[36] Nikhil Swamy, Cedric Fournet, Aseem Rastogi, Karthikeyan Bhargavan, Juan Chen, Pierre-Yves Strub, and Gavin Bierman.

2014. Gradual Typing Embedded Securely in JavaScript. In POPL 2014. ACM, New York, NY, USA, 425-437.



[37] Asumu Takikawa, Daniel Feltey, Ben Greenman, Max S. New, Jan Vitek, and Matthias Felleisen. 2016. Is Sound Gradual

Typing Dead?. In POPL 2016. ACM, New York, NY, USA, 456-468.



[38] Sam Tobin-Hochstadt and Matthias Felleisen. 2006. Interlanguage Migration: From Scripts to Programs. In OOPSLA 2006.

ACM, New York, NY, USA, 964-974.



[39] Matias Toro and Eric Tanter. 2017. A Gradual Interpretation of Union Types. In SAS 2017. Springer International Publishing,

Cham, 382-404,



[40] Michael M. Vitousek, Andrew M. Kent, Jeremy G. Siek, and Jim Baker. 2014. Design and Evaluation of Gradual Typing for

Python. In DLS 2014. ACM, New York, NY, USA, 45-56.



[41] Michael M. Vitousek, Cameron Swords, and Jeremy G. Siek. 2017. Big Types in Little Runtime: Open-World Soundness and

Collaborative Blame for Gradual Type Systems. In POPL 2017. ACM, New York, NY, USA, 762-774.



[42] Philip Wadler and Robert Bruce Findler. 2009. Well-Typed Programs Can’t Be Blamed. In ESOP 2009. Springer Berlin

Heidelberg, Berlin, Heidelberg, 1-16.



[43] Tobias Wrigstad, Francesco Zappa Nardelli, Sylvain Lebresne, Johan Ostlund, and Jan Vitek. 2010. Integrating Typed and

Untyped Code in a Scripting Language. In POPL 2010. ACM, New York, NY, USA, 377-388.



[44] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 56. Publication date: October 2017.
