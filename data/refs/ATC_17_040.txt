[1] Rolf Adams, Walter Tichy, and Annette Weinert.
“The Cost of Selective Recompilation and Environment Processing”. In: ACM Transactions on
Software Engineering and Methodology (TOSEM)
(1994). Dot: 10.1145/174634.174637.

[2] Austin Appleby. SMHasher: a testsuite for distribution, collission, and performance properties of
non-cryptographic hash function. https://github.
com/aappleby/smhasher, accessed 6 Feb. 2017.

[3] CLang: a C language family frontend for LLVM.
http://clang.llvm.org, accessed 7. Feb 2017.

[4] CMake. http://cemake.org, accessed 7. Feb 2017.

[5] Hamed Esfahani, Jonas Fietz, Qi Ke, Alexei
Kolomiets, Erica Lan, Erik Mavrinac, Wolfram
Schulte, Newton Sanches, and Srikanth Kandula.
“CloudBuild: Microsoft’s Distributed and Caching
Build Service”. In: Proceedings of the 38th International Conference on Software Engineering Companion (ICSE). 2016. ISBN: 978-1-4503-4205-6.
DOI : 10.1145/2889160.2889222.

[6] Stuart I. Feldman. “Make — A program for maintaining computer programs”. In: Software: Practice and experience 9.4 (1979), pp. 255–265.

[7] GNU Bourne Again SHell. http://www.gnu.org/
software/bash/, Git repository at http://savannah.
gnu.org/projects/bash/, accessed 7. Feb 2017.

[8] GNU Make. http://www.gnu.org/software/make,
accessed 7. Feb 2017.

[9] GNU autoconf. https://www.gnu.org/software/
autoconf/autoconf.html, accessed 7. Feb 2017.
[10] Charles M. Geschke, James H. Morris Jr., and
Edwin H. Satterthwaite. “Early Experience with
Mesa”. In: SIGSOFT Softw. Eng. Notes 2.2 (Mar.
1977), pp. 138–. ISSN: 0163-5948. DOI: 10.1145/
390019.808320.
[11] Roberto Ierusalimschy, Luiz Henrique de
Figueiredo, and Waldemar Celes Filho. “Lua—An
Extensible Extension Language”. In: Software:
Practice and Experience 26.6 (1996), pp. 635–652.
ISSN : 1097-024X.
[12] Christian Kemper. Build in the Cloud: How the
Build System works. http://google-engtools.blogsp
ot.de/2011/08/build-in-cloud-how-build-systemworks.html, accessed 7. Feb 2017. [Online; posted
18-08-2011].
[13] Tara Krishnaswamy. “Automatic Precompiled
Headers: Speeding Up C++ Application Build
Times”. In: Proceedings of the 1st Conference
on Industrial Experiences with Systems Software
(WIESS). USENIX Association, 2000.
[14] Chris Lattner and Vikram Adve. “LLVM: A Compilation Framework for Lifelong Program Analysis
& Transformation”. In: Proceedings of the 2004
International Symposium on Code Generation and
Optimization (CGO’04). (Palo Alto, CA, USA).
2004.
[15] Andy Litman. “An Implementation of Precompiled
Headers”. In: Software – Practice and Experience
23 (1993).
[16] Peter Miller. “Recursive Make Considered Harmful”. In: AUUGN Journal of AUUG Inc (1998).
[17] J. David Morgenthaler, Misha Gridnev, Raluca
Sauciuc, and Sanjay Bhansali. “Searching for
Build Debt: Experiences Managing Technical Debt
at Google”. In: Proceedings of the Third International Workshop on Managing Technical Debt.
2012.
[18] D. L. Parnas. “On the Criteria to Be Used in Decomposing Systems into Modules”. In: Commun.
ACM (1972).
[19] PostgreSQL. http://postgresql.org, Git repository
at http://github.com/postgres/postgres, accessed 7.
Feb 2017.
[20] Python. http: //python .org, Git mirror at http:/ /
github.com/python/cpython, accessed 7. Feb 2017.
[21] Wolfram Schulte. “Changing Microsoft’s Build:
Revolution or Evolution”. In: Proceedings of the
31st IEEE/ACM International Conference on Automated Software Engineering. ASE 2016. 2016.
ISBN : 978-1-4503-3845-5.
[22] Robert W. Schwanke and Gail E. Kaiser. “Smarter
Recompilation”. In: ACM Trans. Program. Lang.
Syst. 10.4 (Oct. 1988), pp. 627–632. ISSN: 01640925. DOI: 10.1145/48022.214505.
[23] Hyunmin Seo, Caitlin Sadowski, Sebastian Elbaum, Edward Aftandilian, and Robert Bowdidge. “Programmers’ build errors: a case study
(at google)”. In: Proceedings of the 36th International Conference on Software Engineering. ACM.
2014, pp. 724–734.
[24] Zhong Shao and Andrew W. Appel. “Smartest Recompilation”. In: Proceedings of the 20th ACM
SIGPLAN-SIGACT Symposium on Principles of
Programming Languages. POPL. 1993. DOI: 10.
1145/158511.158702.
[25] Toshio Suganuma, Toshiaki Yasue, and Toshio
Nakatani. “A Region-based Compilation Technique for a Java Just-in-time Compiler”. In: Proceedings of the ACM SIGPLAN 2003 Conference
on Programming Language Design and Implementation (PLDI). 2003. ISBN: 1-58113-662-5.
[26] Richard E Sweet. “The Mesa Programming Environment”. In: ACM SIGPLAN Notices. 1985.
[27] TIOBE Index for January 2017. http://www.tiobe.
com/tiobe-index/, accessed 06 Feb. 2017.
[28] Alexandru Telea and Lucian Voinea. “A Tool for
Optimizing the Build Performance of Large Software Code Bases”. In: 12th European Conference on Software Maintenance and Reengineering
(CSMR). 2008.
[29] Walter F. Tichy. “Smart Recompilation”. In: ACM
Trans. Program. Lang. Syst. 8.3 (June 1986),
pp. 273–291. ISSN: 0164-0925. DOI: 10.1145/5956.
5959. URL: http://doi.acm.org/10.1145/5956.5959.
[30] Mohsen Vakilian, Raluca Sauciuc, J. David Morgenthaler, and Vahab Mirrokni. “Automated Decomposition of Build Targets”. In: Proceedings of
the 37th International Conference on Software Engineering (ICSE). 2015. ISBN: 978-1-4799-1934-5.
[31] John Whaley. “Partial Method Compilation Using
Dynamic Profile Information”. In: Proceedings of
the 16th ACM SIGPLAN Conference on Objectoriented Programming, Systems, Languages, and
Applications (OOPSLA). 2001. ISBN: 1-58113-3359.
[32] Nathan York. Build in the Cloud: Distributing
Build Steps. http : / / google - engtools . blogspot .
de/2011/09/build- in- cloud- distributing- buildsteps.html, accessed 7. Feb 2017. [Online; posted
23-09-2011].
[33] Yijun Yu, Homy Dayani-Fard, and John Mylopoulos. “Removing False Code Dependencies
to Speedup Software Build Processes”. In: Proceedings of the 2003 Conference of the Centre for
Advanced Studies on Collaborative Research (CASCON). 2003.
[34] Ying Zhang, Yanyan Jiang, Chang Xu, Xiaoxing
Ma, and Ping Yu. “ABC: Accelerated Building of
C/C++ Projects”. In: Asia-Pacific Software Engineering Conference (APSEC). 2015.
[35] ccache – a fast C/C++ compiler cache. http : / /
ccache.samba.org/, accessed 7. Feb 2017.
[36] distcc – a free distributed C/C++ compiler system.
http://github.com/distcc/distcc, accessed 7. Feb
2017.
[37] mbedTLS. http://tls.mbed.org, accessed 7. Feb
2017.
[38] musl libc. http://www.musl-libc.org, accessed 7.
Feb 2017.
