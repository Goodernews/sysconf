[1] J. Dean and S. Ghemawat. Mapreduce: Simpliﬁed data
processing on large clusters. In OSDI 2004, pages 1–
13, 2004.

[2] Apache Hadoop website. http://hadoop.apache.org/.
[3] Hadoop Wikipedia from website.  https://en.wikipedia.org/wiki/Apache Hadoop.

[4] M. Zaharia, A. Konwinski, A. D. Joseph, R. Katz, and
I. Stoica. Improving mapreduce performance in hetero-
geneous environments. In 8th USENIX conference on
Operating systems design and implementation, pages
1–14, 2008.

[5] K. Elmeleegy.  Piranha: optimizing short jobs in
hadoop. In VLDB Endowment, pages 985–996, 2013.
[6] R. S. Xin, J. Rosen, M. Zaharia, M. J. Franklin,
S. Shenker, and I. Stoica. Shark: Sql and rich analytics
at scale. In ACM SIGMOD, pages 13–24, 2013.

[7] B. Chattopadhyay, L. Lin, W. Liu, S. Mittal,
P. Aragonda, V. Lychagina, Y. Kwon, and M. Wong.
Tenzing a sql implementation on the mapreduce frame-
work. In VLDB Endowment, pages 1318–1327, 2011.
[8] A. Ghodsi, M. Zaharia, B. Hindman, A. Konwinski,
S. Shenker, and I. Stoica. Dominant resource fairness:
fair allocation of multiple resource types.
In NSDI,
pages 323–336, 2011.

[9] Apache Spring website. http://projects.spring.io/spring-

hadoop/.

[10] Asm website. http://asm.ow2.org/.
[11] Microsoft Azure website. https://azure.microsoft.com.

[12] Y. Yao, J. Tai, B. Sheng, and N. Mi. Lsps: A job
size-based scheduler for efﬁcient task assignments in
hadoop.
In IEEE Transactions on Cloud Computing,
pages 411 – 424, 2014.

[13] J. Yan, X. Yang, R. Gu, C. Yuan, and Y. Huang. Perfor-
mance optimization for short mapreduce job execution
in hadoop. In CGC, pages 1–7, 2012.

[14] M.Hammoud and M. F. Sakr. Locality-aware reduce
In CloudCom, pages

task scheduling for mapreduce.
570–576, 2011.

[15] X. Zhang, Z. Zhong, S. Feng, B. Tul, and J. Fan.
Improving data locality of mapreduce by scheduling
in homogeneous computing environments.
In Int.
Symp. on Parallel and Distributed Processing with
Applications, pages 120–126, 2011.

[16] S. Ibrahim, H. Jin, L. Lu, B. He, G. Antoniu, and
S. Wu. Maestro: Replica-aware map scheduling for
mapreduce. In CCGRID, pages 435–442, 2012.

[17] S. Ryza, U. Laserson, S. Owen, and J. Wills. Advanced
Analytics with Spark: Patterns for Learning from Data
at Scale. O’Reilly Media, 2015.

[18] Y. Zhang. Hj-hadoop: An optimized mapreduce run-
time for multi-core systems. In SPLASH, pages 111–
112, 2013.

Jalaparti, P. Bodik,

[19] Apache Spark website. http://Spark.apache.org/.
[20] V.  I. Menache, S. Rao, K. Makarychev, and M. Caesar.  Network-aware scheduling for data-parallel jobs: Plan when you can.  In ACM SIGCOMM, pages 407–420, 2015.  
[21] H. Zhang, L. Wang, and H. Huang. Smarth: Enabling
In ICPP, pages multi-pipeline data transfer in hdfs.  1–10, 2014.

[22] J. Urbani, A. Margara, C. Jacobs, S. Voulgaris, and
H. Bal. Ajira: A lightweight distributed middleware
for mapreduce and stream processing. In ICDCS, pages
545–554, 2014.

[23] H. Zhang, Z. Sun, Z. Liu, C. Xu, and L. Wang. Dart:
A geographic information system on hadoop. In IEEE
CLOUD, pages 1–8, 2015.

[24] H. Ma, S. Diersen, L. Wang, C. Liao, D. Quinlan, and
Z. Yang. Symbolic analysis of concurrency errors in
openmp programs. In ICPP. IEEE, 2013.

[25] H. Huang, L. Wang, B. Tak, L. Wang, and C. Tang.
CAP3: A cloud auto-provisioning framework for par-
allel processing using on-demand and spot instances.
In IEEE Cloud, pages 228–235. IEEE, 2013.

[26] V. Subramanian, L. Wang, E. Lee, and P. Chen. Rapid
processing of synthetic seismograms using windows
azure cloud. In CloudCom, 2010.

[27] V. Subramanian, H. Ma, L. Wang, E. Lee, and P. Chen.
Rapid 3d seismic source inversion using windows azure
and amazon EC2. In SERVICES, pages 602–606. IEEE,
2011.

