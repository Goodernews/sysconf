[1] Apple. Apple — Rosetta, 2006. URL https:
//wew.apple.com/rosetta/. [Archived at http:
//web.archive .org/web/20060113055505/http:
//waw.apple.com/rosetta/].

[2] Cortex-A57 Software Optimization Guide. ARM, 2016.

[3] V. Bala, E. Duesterwald, and S. Banerjia. Dynamo: a transparent dynamic optimization system. In Proceedings of the
2000 ACM SIGPLAN Conference on Programming Language
Design and Implementation (PLDI), pages 1-12. ACM, 2000.
doi: 10.1145/349299,349303.

[4] L. Baraz, T. Devor, O. Etzion, S. Goldenberg, A. Skaletsky,
Y. Wang, and Y. Zemach. JA-32 execution layer: a two-phase
dynamic translator designed to support IA-32 applications on
Itanium-based systems. In Proceedings of the 36th Annual
International Symposium on Microarchitecture, pages 191-204.
ACM/IEEE Computer Society, 2003. doi: 10.1109/MICRO.
2003. 1253195.

[5] C. Bienia. Benchmarking Modern Multiprocessors. PhD thesis,
Princeton University, January 2011.

[6] D. Boggs, G. Brown, N. Tuck, and K. S. Venkatraman. Denver:
Nvidia’s first 64-bit ARM processor. IEEE Micro, 35(2):4655,
2015. doi: 10.1109/MM.2015.12.

[7] D. Bruening, V. Kiriansky, T. Garnett, and S. Banerji. Threadshared software code caches. In Fourth IEEE/ACM International Symposium on Code Generation and Optimization
(CGO 2006), pages 28-38. IEEE Computer Society, 2006. doi:
10.1109/CGO.2006.36.

[8] D. L. Bruening. Efficient, transparent, and comprehensive runtime code manipulation. PhD thesis, Massachusetts Institute
of Technology, 2004.

[9] A. Chernoff, M. Herdeg, R. Hookway, C. Reeve, N. Rubin,
T. Tye, S. B. Yadavalli, and J. Yates. FX! 32: A profile-directed
binary translator. JEEE Micro, (2):56-64, 1998.

[10] A. d’Antras, C. Gorgovan, J. D. Garside, and M. Lujan. Optimizing indirect branches in dynamic binary translators. ACM
Transactions on Architecture and Code Optimization, 13(1):7,
2016. doi: 10.1145/2866573.

[11] A. d’Antras, C. Gorgovan, J. Garside, J. Goodacre, and M. Lujan. HyperMAMBO-X6#4: Using virtualization to support highperformance transparent binary translation. In Proceedings of
the 13th ACM SIGPLAN/SIGOPS International Conference on
Virtual Execution Environments, VEE 2017, pages 228-241.
ACM, 2017. doi: 10.1145/3050748.3050756.

[12] J. C. Dehnert, B. Grant, J. P. Banning, R. Johnson, T. Kistler,
A. Klaiber, and J. Mattson. The Transmeta code morphing
software: Using speculation, recovery, and adaptive retranslation to address real-life challenges. In Ist IEEE / ACM International Symposium on Code Generation and Optimization
(CGO 2003), pages 15-24. IEEE Computer Society, 2003. doi:
10.1109/CGO.2003.1191529.

[13] E. Duesterwald and V. Bala. Software profiling for hot path
prediction: Less is more. In ASPLOS-IX Proceedings of the
9th International Conference on Architectural Support for
Programming Languages and Operating Systems, pages 202211. ACM Press, 2000. doi: 10.1145/356989.357008.

[14] R. Grisenthwaite. ARMv8 Technology Preview, 2011.

[15] K. M. Hazelwood, G. Lueck, and R. Cohn. Scalable support for
multithreaded applications on dynamic binary instrumentation
systems. In Proceedings of the 8th International Symposium
on Memory Management, ISMM 2009, pages 20-29. ACM,
2009. doi: 10.1145/1542431.1542435.

[16] J. Hiser, D. W. Williams, W. Hu, J. W. Davidson, J. Mars, and
B. R. Childers. Evaluating indirect branch handling mechanisms in software dynamic translation systems. In Fifth International Symposium on Code Generation and Optimization
(CGO 2007), pages 61-73. IEEE Computer Society, 2007. doi:
10.1109/CGO.2007.10.

[17] R. J. Hookway and M. A. Herdeg. DIGITAL fx!32: Combining
emulation and binary translation. Digital Technical Journal,
9(1), 1997. URL http: //www.hp1.hp.com/hpjournal/
dtj/vol9numi/vol9numtart1 . pdf.

[18] H. Kim and J. E. Smith. Hardware support for control transfers
in code caches. In Proceedings of the 36th Annual International
Symposium on Microarchitecture, pages 253-264. ACM/IEEE
Computer Society, 2003. doi: 10.1109/MICRO.2003.1253200.

[19] C. Luk, R. S. Cohn, R. Muth, H. Patil, A. Klauser, P. G. Lowney,
S. Wallace, V. J. Reddi, and K. M. Hazelwood. Pin: building
customized program analysis tools with dynamic instrumentation. In Proceedings of the ACM SIGPLAN 2005 Conference
on Programming Language Design and Implementation, pages
190-200. ACM, 2005. doi: 10.1145/1065010.1065034.

[20] N. Nethercote and J. Seward. Valgrind: a framework for
heavyweight dynamic binary instrumentation. In Proceedings
of the ACM SIGPLAN 2007 Conference on Programming
Language Design and Implementation, pages 89-100. ACM,
2007. doi: 10.1145/1250734. 1250746.

[21] M. Payer and T. R. Gross. Generating low-overhead dynamic
binary translators. In Proceedings of of SYSTOR 2010: The 3rd
Annual Haifa Experimental Systems Conference. ACM, 2010.
doi: 10.1145/1815695.1815724.

[22] M. Payer, E. Kravina, and T. R. Gross. Lightweight
memory tracing. In 2013 USENIX Annual Technical Conference, pages 115-126. USENIX Association,
2013. URL https://www.usenix.org/conference/
atc13/technical-sessions/presentation/payer.

[23] S. Sridhar, J. S. Shapiro, and P. P. Bungale. Hdtrans: a lowoverhead dynamic translator. SIGARCH Computer Architecture News, 35(1):135-140, 2007. doi: 10.1145/1241601.
1241602.

[24] Standard Performance Evaluation Corporation.
CPU2006. http: //www.spec.org/cpu2006/.

[25] C. Wang, S. Hu, H. Kim, S. R. Nair, M. B. Jr, Z. Ying, and
Y. Wu. StarDBT: An efficient multi-platform dynamic binary
translation system. In Advances in Computer Systems Architecture, 12th Asia-Pacific Conference, ACSAC 2007, Proceedings,
volume 4697 of Lecture Notes in Computer Science, pages
4-15. Springer, 2007. doi: 10.1007/978-3-540-74309-5_3.

[26] C. Zheng and C. L. Thompson. PA-RISC to IA-64: transparent
execution, no recompilation. EEE Computer, 33(3):47-52,
2000. doi: 10.1109/2.825695.

