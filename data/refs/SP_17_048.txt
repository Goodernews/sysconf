[1] ITU-T Recommendation X.509 (2005) — ISO/IEC 9594-8:2005, “Information technology - Open Systems Interconnection - The Directory:
Public-key and attribute certificate frameworks,” International Telecommunication Union, 2005.
[2] D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley,
and W. Polk, “Internet X.509 Public Key Infrastructure Certificate
and Certificate Revocation List (CRL) Profile,” Internet Requests
for Comments, Tech. Rep. 5280, May 2008. [Online]. Available:
http://www.ietf.org/rfc/rfc5280.txt
[3] B. Beurdouche, K. Bhargavan, A. Delignat-Lavaud, C. Fournet,
M. Kohlweiss, A. Pironti, P.-Y. Strub, and J. K. Zinzindohoue, “A
messy state of the union: Taming the composite state machines of
TLS,” in IEEE Symposium on Security and Privacy, 2015.
[4] J. De Ruiter and E. Poll, “Protocol state fuzzing of TLS implementations,” in 24th USENIX Security Symposium (USENIX Security 15),
2015, pp. 193–206.
[5] J. Somorovsky, “Systematic fuzzing and testing of tls libraries,” in
Proceedings of the 2016 ACM SIGSAC Conference on Computer and
Communications Security. ACM, 2016, pp. 1492–1504.
[6] D. Kaloper-Meršinjak, H. Mehnert, A. Madhavapeddy, and P. Sewell,
“Not-quite-so-broken TLS: lessons in re-engineering a security protocol
specification and implementation,” in 24th USENIX Security Symposium (USENIX Security 15), 2015, pp. 223–238.
[7] K. Bhargavan, C. Fournet, M. Kohlweiss, A. Pironti, and P. Strub,
“Implementing TLS with verified cryptographic security,” in Security
and Privacy (SP), 2013 IEEE Symposium on. IEEE, 2013, pp. 445–
459.

16

[8] B. Beurdouche, A. Delignat-Lavaud, N. Kobeissi, A. Pironti, and
K. Bhargavan, “FLEXTLS: A Tool for Testing TLS Implementations,”
in Proceedings of the 9th USENIX Conference on Offensive
Technologies, ser. WOOT’15. Berkeley, CA, USA: USENIX
Association, 2015, pp. 1–1. [Online]. Available: http://dl.acm.org/
citation.cfm?id=2831211.2831212
[9] “CVE-2016-1115,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-1115.
[10] “CVE-2016-5669,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-5669.
[11] “CVE-2016-5672,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-5672.
[12] “CVE-2016-2180,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-2180.
[13] “CVE-2016-5655,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-5655.
[14] “CVE-2016-3664,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-3664.
[15] “CVE-2016-2113,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-2113.
[16] “CVE-2016-1563,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-1563.
[17] “CVE-2016-2562,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-2562.
[18] “CVE-2016-2047,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-2047.
[19] “CVE-2015-5655,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2015-5655.
[20] “CVE-2014-0092,” https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-0092.
[21] “CVE-2014-1266,” https://cve.mitre.org/cgi-bin/cvename.cgi?name=
CVE-2014-1266.
[22] A. M. Turing, “On computable numbers, with an application to
the entscheidungsproblem,” Proceedings of the London Mathematical
Society, vol. 2, no. 42, pp. 230–265, 1936.
[23] C. Hawblitzel, J. Howell, M. Kapritsos, J. Lorch, B. Parno, M. Roberts,
S. Setty, and B. Zill, “Ironfleet: Proving practical distributed systems
correct,” in SOSP, 2015.
[24] K. L. McMillan, Symbolic model checking. Springer, 1993.
[25] T. Ball, R. Majumdar, T. Millstein, and S. K. Rajamani, “Automatic
predicate abstraction of c programs,” in ACM SIGPLAN Notices,
vol. 36, no. 5. ACM, 2001, pp. 203–213.
[26] T. Andrews, S. Qadeer, S. K. Rajamani, J. Rehof, and Y. Xie, “Zing:
A model checker for concurrent software,” in CAV, 2004.
[27] G. Holzmann and M. Smith, “A practical method for verifying eventdriven software,” in ICSE. ACM, 1999.
[28] R. Jhala and R. Majumdar, “Software model checking,” ACM Computing Surveys (CSUR), vol. 41, no. 4, p. 21, 2009.
[29] T. A. Henzinger, R. Jhala, R. Majumdar, and G. Sutre, “Lazy abstraction,” in ACM SIGPLAN Notices, vol. 37, no. 1. ACM, 2002, pp.
58–70.
[30] E. Clarke, O. Grumberg, S. Jha, Y. Lu, and H. Veith, “Counterexampleguided abstraction refinement,” in CAV, 2000, pp. 154–169.
[31] B. S. Gulavani, T. A. Henzinger, Y. Kannan, A. V. Nori, and S. K.
Rajamani, “Synergy: A new algorithm for property checking,” in FSE,
2006.
[32] T. Ball and S. Rajamani, “The slam project: Debugging system software
via static analysis,” SIGPLAN Not., vol. 37, no. 1, 2002.
[33] D. Beyer, T. Henzinger, R. Jhala, and R. Majumdar, “The software
model checker blast: Applications to software engineering,” Int. J.
Softw. Tools Technol. Transf., vol. 9, no. 5, 2007.
[34] S. Chaki, E. M. Clarke, A. Groce, S. Jha, and H. Veith, “Modular
verification of software components in C,” IEEE Trans. Software Eng.,
vol. 30, no. 6, pp. 388–402, 2004.
[35] E. Clarke, D. Kroening, N. Sharygina, and K. Yorav, “Satabs: Sat-based
predicate abstraction for ansi-c,” in TACAS. Springer-Verlag, 2005.
[36] J. Esparza, S. Kiefer, and S. Schwoon, “Abstraction refinement with
Craig interpolation and symbolic pushdown systems,” in TACAS.
Springer, 2006.
[37] S. Löwe, “Cpachecker with explicit-value analysis based on cegar and
interpolation,” in TACAS. Springer-Verlag, 2013.
[38] G. Brat, K. Havelund, S. Park, and W. Visser, “Model checking
programs,” in IEEE International Conference on Automated Software
Engineering (ASE). Citeseer, 2000, pp. 3–12.

[39] M. J. C. Gordon and T. F. Melham, Eds., Introduction to HOL: A
Theorem Proving Environment for Higher Order Logic. New York,
NY, USA: Cambridge University Press, 1993.
[40] J. Jaffar, V. Murali, J. Navas, and A. Santosa, “Tracer: A symbolic
execution tool for verification,” in Computer Aided Verification, ser.
Lecture Notes in Computer Science, P. Madhusudan and S. Seshia,
Eds. Springer Berlin Heidelberg, 2012, vol. 7358, pp. 758–766.
[41] E. M. Clarke, S. Jha, and W. Marrero, “Verifying security protocols
with brutus,” TOSEM, vol. 9, no. 4, 2000.
[42] P. Godefroid, “Model checking for programming languages using
verisoft,” in POPL. ACM, 1997, pp. 174–186.
[43] C. Brubaker, S. Jana, B. Ray, S. Khurshid, and V. Shmatikov, “Using
frankencerts for automated adversarial testing of certificate validation in
SSL/TLS implementations,” in Security and Privacy (SP), 2014 IEEE
Symposium on. IEEE, 2014, pp. 114–129.
[44] J. C. King, “Symbolic execution and program testing,” Communications
of the ACM, vol. 19, no. 7, pp. 385–394, 1976.
[45] C. Cadar, D. Dunbar, and D. R. Engler, “Klee: Unassisted and
automatic generation of high-coverage tests for complex systems
programs.” in OSDI, 2008, pp. 209–224.
[46] C. Cadar, P. Godefroid, S. Khurshid, C. S. Păsăreanu, K. Sen, N. Tillmann, and W. Visser, “Symbolic execution for software testing in
practice: preliminary assessment,” in ICSE, 2011, pp. 1066–1071.
[47] C. Cadar and K. Sen, “Symbolic execution for software testing: three
decades later,” Communications of the ACM, vol. 56, no. 2, pp. 82–90,
2013.
[48] V. Kuznetsov, J. Kinder, S. Bucur, and G. Candea, “Efficient
state merging in symbolic execution,” in Proceedings of the 33rd
ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’12. New York, NY, USA: ACM,
2012, pp. 193–204. [Online]. Available: http://doi.acm.org/10.1145/
2254064.2254088
[49] HTTPS client is here for the Photon!, 2015 (accessed Nov
3, 2016), https://community.particle.io/t/https-client-is-here-for-thephoton-by-the-glowfi-sh-team/15934.
[50] spark / firmware / communication / lib, 2016 (accessed Nov 3, 2016),
https://github.com/spark/firmware/tree/master/communication/lib.
[51] Arduino/libraries/ESP8266WiFi/src/include/ssl.h, 2016 (accessed Feb
2, 2017), https://github.com/esp8266/Arduino/blob/master/libraries/
ESP8266WiFi/src/include/ssl.h.
[52] micropython/extmod, 2017 (accessed Feb 2, 2017), https://github.com/
micropython/micropython/tree/master/extmod.
[53] “CVE-2016-6303,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-6303.
[54] “CVE-2016-7052,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-7052.
[55] “CVE-2016-6305,” https://web.nvd.nist.gov/view/vuln/detail?vulnId=
CVE-2016-6305.
[56] P.-H. Kamp, “Please put openssl out of its misery,” Queue,
vol. 12, no. 3, pp. 20:20–20:23, Apr. 2014. [Online]. Available:
http://doi.acm.org/10.1145/2602649.2602816
[57] how to install curl and libcurl, (accessed Nov 3, 2016), https://
curl.haxx.se/docs/install.html.
[58] ipsvd - internet protocol service daemons - installation, (accessed Feb
2, 2017), http://smarden.org/ipsvd/install.html.
[59] Package: gatling (0.12cvs20120114-4) high performance web server
and file server, (accessed Feb 2, 2017), https://packages.debian.org/
wheezy/gatling.
[60] A Python library that encapsulates wolfSSL’s wolfCrypt API., (accessed
Feb 2, 2017), https://pypi.python.org/pypi/wolfcrypt/0.2.0.
[61] mbed TLS (PolarSSL) wrapper, (accessed Feb 2, 2017), https://
pypi.python.org/pypi/python-mbedtls/0.6.
[62] W. M. McKeeman, “Differential testing for software,” DIGITAL TECHNICAL JOURNAL, vol. 10, no. 1, pp. 100–107, 1998.
[63] R. B. Evans and A. Savoia, “Differential testing: A new approach to
change detection,” in The 6th Joint Meeting on European Software
Engineering Conference and the ACM SIGSOFT Symposium on the
Foundations of Software Engineering: Companion Papers, ser. ESECFSE companion ’07. New York, NY, USA: ACM, 2007, pp. 549–552.
[Online]. Available: http://doi.acm.org/10.1145/1295014.1295038
[64] C. Barrett, R. Sebastiani, S. Seshia, and C. Tinelli, “Satisfiability
modulo theories,” in Handbook of Satisfiability, A. Biere, M. J. H.
Heule, H. van Maaren, and T. Walsh, Eds. IOS Press, February 2009,
vol. 185, ch. 26, pp. 825–885.

17

[65] V. Ganesh and D. L. Dill, “A decision procedure for bit-vectors
and arrays,” in Proceedings of the 19th International Conference
on Computer Aided Verification, ser. CAV’07. Berlin, Heidelberg:
Springer-Verlag, 2007, pp. 519–531.
[66] L. S. Huang, A. Rice, E. Ellingsen, and C. Jackson, “Analyzing Forged
SSL Certificates in the Wild,” in Security and Privacy (SP), 2014 IEEE
Symposium on. IEEE, 2014, pp. 83–97.
[67] C. Hlauschek, M. Gruber, F. Fankhauser, and C. Schanes, “Prying open
Pandora’s box: KCI attacks against TLS,” in 9th USENIX Workshop
on Offensive Technologies (WOOT 15), 2015.
[68] A. Bates, J. Pletcher, T. Nichols, B. Hollembaek, D. Tian, K. R. Butler,
and A. Alkhelaifi, “Securing ssl certificate verification through dynamic
linking,” in Proceedings of the 2014 ACM SIGSAC Conference on
Computer and Communications Security. ACM, 2014, pp. 394–405.
[69] M. Georgiev, S. Iyengar, S. Jana, R. Anubhai, D. Boneh, and
V. Shmatikov, “The most dangerous code in the world: validating SSL
certificates in non-browser software,” in Proceedings of the 2012 ACM
conference on Computer and communications security. ACM, 2012,
pp. 38–49.
[70] K. Bhargavan, A. D. Lavaud, C. Fournet, A. Pironti, and P. Y.
Strub, “Triple handshakes and cookie cutters: Breaking and fixing
authentication over TLS,” in Security and Privacy (SP), 2014 IEEE
Symposium on. IEEE, 2014, pp. 98–113.
[71] B. He, V. Rastogi, Y. Cao, Y. Chen, V. Venkatakrishnan, R. Yang, and
Z. Zhang, “Vetting ssl usage in applications with sslint,” in 2015 IEEE
Symposium on Security and Privacy. IEEE, 2015, pp. 519–534.
[72] I. Yun, C. Min, X. Si, Y. Jang, T. Kim, and M. Naik, “Apisan: Sanitizing
api usages through semantic cross-checking,” in 25th USENIX Security
Symposium (USENIX Security 16). Austin, TX: USENIX Association,
Aug. 2016, pp. 363–378. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity16/technical-sessions/presentation/yun
[73] C. Cadar, V. Ganesh, P. M. Pawlowski, D. L. Dill, and D. R. Engler,
“Exe: automatically generating inputs of death,” TISSEC, vol. 12, no. 2,
2008.
[74] K. Sen, D. Marinov, and G. Agha, “Cute: A concolic unit testing engine
for c,” in ESEC/FSE. ACM, 2005.
[75] M. Das, S. Lerner, and M. Seigle, “Esp: Path-sensitive program
verification in polynomial time,” in PLDI, 2002.
[76] P. Godefroid, M. Y. Levin, and D. Molnar, “Sage: whitebox fuzzing
for security testing,” Queue, vol. 10, no. 1, p. 20, 2012.
[77] V. Chipounov, V. Kuznetsov, and G. Candea, “S2e: a platform for invivo multi-path analysis of software systems,” in ASPLOS, 2012.
[78] P. Godefroid, N. Klarlund, and K. Sen, “DART: Directed automated
random testing,” in PLDI. ACM, 2005.
[79] P. Godefroid, P. de Halleux, A. V. Nori, S. K. Rajamani, W. Schulte,
N. Tillmann, and M. Y. Levin, “Automating software testing using
program analysis,” Software, IEEE, vol. 25, no. 5, pp. 30–37, 2008.
[80] D. A. Ramos and D. R. Engler, “Practical, low-effort equivalence
verification of real code,” in Proceedings of the 23rd International
Conference on Computer Aided Verification, ser. CAV’11. Berlin,
Heidelberg: Springer-Verlag, 2011, pp. 669–685. [Online]. Available:
http://dl.acm.org/citation.cfm?id=2032305.2032360
[81] D. A. Ramos and D. Engler, “Under-constrained symbolic execution:
Correctness checking for real code,” in 24th USENIX Security Symposium (USENIX Security 15). Washington, D.C.: USENIX Association,
Aug. 2015, pp. 49–64. [Online]. Available: https://www.usenix.org/
conference/usenixsecurity15/technical-sessions/presentation/ramos
[82] L. Pedrosa, A. Fogel, N. Kothari, R. Govindan, R. Mahajan, and
T. Millstein, “Analyzing protocol implementations for interoperability,”
in NSDI, 2015.
[83] M. Canini, D. Venzano, P. Perešı́ni, D. Kostić, and J. Rexford, “A nice
way to test openflow applications,” in NSDI, 2012.
[84] M. Kuzniar, P. Peresini, M. Canini, D. Venzano, and D. Kostic,
“A soft way for openflow switch interoperability testing,” in
Proceedings of the 8th International Conference on Emerging
Networking Experiments and Technologies, ser. CoNEXT ’12. New
York, NY, USA: ACM, 2012, pp. 265–276. [Online]. Available:
http://doi.acm.org/10.1145/2413176.2413207
[85] C. Min, S. Kashyap, B. Lee, C. Song, and T. Kim, “Cross-checking
semantic correctness: The case of finding file system bugs,” in
Proceedings of the 25th Symposium on Operating Systems Principles,
ser. SOSP ’15. New York, NY, USA: ACM, 2015, pp. 361–377.
[Online]. Available: http://doi.acm.org/10.1145/2815400.2815422

[86] L. D’Antoni and M. Veanes, “Minimization of symbolic automata,”
SIGPLAN Not., vol. 49, no. 1, pp. 541–553, Jan. 2014. [Online].
Available: http://doi.acm.org/10.1145/2578855.2535849
[87] G. Argyros, I. Stais, A. Kiayias, and A. D. Keromytis, “Back in black:
towards formal, black box analysis of sanitizers and filters,” in Security
and Privacy (SP), 2016 IEEE Symposium on. IEEE, 2016, pp. 91–109.
[88] George Argyros and Ioannis Stais and Suman Jana and Angelos
D. Keromytis and Aggelos Kiayias, “SFADiff: Automated Evasion
Attacks and Fingerprinting Using Black-box Differential Automata
Learning,” in Proceedings of the 23rd ACM Conference on Computer
and Communications Security, Vienna, Austria, Oct 2016.
[89] C. Adams and S. Lloyd, Understanding PKI: Concepts, Standards, and
Deployment Considerations, 2nd ed. Boston, MA, USA: AddisonWesley Longman Publishing Co., Inc., 2002.
[90] G. Nelson and D. C. Oppen, “Fast decision procedures based on
congruence closure,” J. ACM, vol. 27, no. 2, pp. 356–364, Apr. 1980.
[91] S. Legg, “ASN.1 Module Definition for the LDAP and X.500
Component Matching Rules,” RFC 3727, Mar. 2013. [Online].
Available: https://rfc-editor.org/rfc/rfc3727.txt
[92] C. Gardiner and C. Wallace, “ASN.1 Translation,” RFC 6025, Oct.
2015. [Online]. Available: https://rfc-editor.org/rfc/rfc6025.txt
[93] “ASN.1 JavaScript decoder,” https://lapo.it/asn1js/.
[94] wolfSSL ChangeLog, 2016 (accessed Oct 22, 2016), https://
www.wolfssl.com/wolfSSL/Docs-wolfssl-changelog.html.
[95] mbed TLS 2.2.0, 2.1.3, 1.3.15 and PolarSSL 1.2.18 released, 2015
(accessed Mar 14, 2017), https://tls.mbed.org/tech-updates/releases/
mbedtls-2.2.0-2.1.3-1.3.15-and-polarssl.1.2.18-released.
[96] Certificate Template Extensions: Application Policy, (accessed Oct
28, 2016), https://technet.microsoft.com/en-us/library/cc731792(v=
ws.11).aspx.
[97] C. Young, Flawed MatrixSSL Code Highlights Need for
Better IoT Update Practices, 2016 (accessed Feb 6, 2017),
http://www.tripwire.com/state-of-security/security-data-protection/
cyber-security/flawed-matrixssl-code-highlights-need-for-better-iotupdate-practices/.
[98] IPv6 Ready Logo Program, 2016 (accessed Sept 04, 2016), https://
www.ipv6ready.org.
[99] High Definition Logos, 2016 (accessed Sept 04, 2016), http://
www.digitaleurope.org/Services/High-Definition-Logos.
[100] T. Liang, A. Reynolds, C. Tinelli, C. Barrett, and M. Deters, A DPLL(T)
Theory Solver for a Theory of Strings and Regular Expressions.
Cham: Springer International Publishing, 2014, pp. 646–662. [Online].
Available: http://dx.doi.org/10.1007/978-3-319-08867-9 43
[101] Vulnerability Note VU#396440 - MatrixSSL contains multiple vulnerabilities, 2016 (accessed Feb 6, 2017), http://www.kb.cert.org/vuls/id/
396440.
[102] S. Chong, J. Guttman, A. Datta, A. C. Myers, B. Pierce, P. Schaumont,
T. Sherwood, and N. Zeldovich, “Report on the NSF workshop
on formal methods for security,” CoRR, vol. abs/1608.00678, 2016.
[Online]. Available: http://arxiv.org/abs/1608.00678
