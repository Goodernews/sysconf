[1] Microsoft research cambridge
http://iotta.snia.org/traces/list/BlockIO.

[2] UMass trace repository. http://traces.cs.umass.edu.

[3] Crucial bx100 ssd.  http://www.crucial.com/usa/en/storagessd-bx100.

[4] Open NAND flash interface
http://www.onfi.org/specifications.

[5] N. Agrawal, V. Prabhakaran, T. Wobber, J. D. Davis, M. Manasse, and R. Panigrahy. Design tradeoffs for SSD performance. In USENIX Annual Technical Conference, pages 57-—
70, 2008.

[6] K. Arase. Semiconductor nand type flash memory
with incremental step pulse programming, 1998. URL
http://www. google. com/patents/US5812457. US
Patent 5,812,457.

[7] A. M. Caulfield, L. M. Grupp, and S. Swanson. Gordon: using
flash memory to build fast, power-efficient clusters for dataintensive applications. In International Conference on Architectural Support for Programming Languages and Operating
Systems, pages 217-228, Mar 2009.

[8] A. M. Caulfield, J. Coburn, T. Mollov, A. De, A. Akel, J. He,
A. Jagatheesan, R. K. Gupta, A. Snavely, and S. Swanson. Understanding the impact of emerging non-volatile memories on
high-performance, IO-intensive computing. In International
Conference for High Performance Computing, Networking,
Storage and Analysis, pages 1-11, 2010.

[9] F. Chen, R. Lee, and X. Zhang. Essential roles of exploiting
internal parallelism of flash memory based solid state drives
in high-speed data processing. In International Symposium
on High-Performance Computer Architecture, pages 266-277,
2011.

[10] C. Dirik and B. Jacob. The performance of PC solid-state
disks (SSDs) as a function of bandwidth, concurrency, device
architecture, and system organization. In International Symposium on Computer Architecture, pages 279-289, 2009.

specification 3.1.

[11] D. Feitelson and L. Rudolph. Wasted resources in gang
scheduling. In 5th Jerusalem Conference on Information
Technology, pages 127-136, Oct 1990.

[12] D. G. Feitelson and L. Rudolph. Gang scheduling performance benefits for fine-grain synchronization. Journal of Parallel and Distributed Computing, 16(4):306-318, 1992.

[13] C. Gao, L. Shi, M. Zhao, C. Xue, K. Wu, and E.-M. Sha.
Exploiting parallelism in I/O scheduling for access conflict
minimization in flash-based solid state drives. In International

Conference on Mass Storage Systems and Technologies, pages
1-11, 2014.

[14] Y. Hu, H. Jiang, D. Feng, L. Tian, H. Luo, and S. Zhang.
Performance impact and interplay of SSD parallelism through
advanced commands, allocation strategy and data granularity.
In International Conference on Supercomputing, pages 96—
107, 2011.

[15] M. Huang, Y. Wang, Z. Liu, L. Qiao, and Z. Shao. A garbage
collection aware stripping method for solid-state drives. In

14

Asia and South Pacific Design Automation Conference, pages
334-339, 2015.

[16] A. Huffman. NVM _ express
http://www.nvmexpress.org, Sep 2013.

[17] M. Jette. Performance characteristics of gang scheduling in
multiprogrammed environments. In Supercomputing Conference, pages 54-54, 1997.

[18] M. Jung, E. H. Wilson, III, and M. Kandemir. Physically addressed queueing (PAQ): improving parallelism in solid state
disks. In International Symposium on Computer Architecture,
pages 404-415, Jun 2012.

[19] M. Jung, W. Choi, S. Srikantaiah, J. Yoo, and M. T. Kandemir.
HIOS: a host interface IO scheduler for solid state disks. In
International Symposium on Computer Architecuture, pages
289-300, 2014.

[20] J. Kim, Y. Oh, E. Kim, J. Choi, D. Lee, and S. H. Noh. Disk
schedulers for solid state drivers. In International Conference
on Embedded Software, pages 295-304, 2009.

[21] S. Kung. Naive PCI SSD __ controllers.
http://www.marvell.com/storage/system-solutions/nativepcie-ssd-controller/assets/Marvell-Native-PCle-SSDControllers-WP.pdf, Jan 2012.

[22] A. Lodi, S. Martello, and D. Vigo. Recent advances on
two-dimensional bin packing problems. Discrete Applied
Mathematics, 123(1-3):379-396, 2002.

[23] R. Love. Kernel korner — I/O schedulers. Linux Journal, 2004
(118):10-, 2004.

[24] Micron Technology, Inc. NAND flash memory MLC data
sheet, MT29E512GO08CMCCBH7-6 NAND flash memory.
http://www.micron.com/.

[25] E. H. Nam, B. Kim, H. Eom, and S. L. Min. Ozone (O03):
an out-of-order flash memory controller architecture. [EEE
Transactions on Computers, 60(5):653-666, 2011.

[26] J. K. Ousterhout. Scheduling techniques for concurrent systems. In International Conference on Distributed Computing
Systems, pages 22-30, 1982.

[27] C. Park, E. Seo, J.-Y. Shin, S. Maeng, and J. Lee. Exploiting
internal parallelism of flash-based SSDs. IEEE Computer
Architecture Letters, 9(1):9-12, Jan 2010.

[28] J.-¥. Shin, Z.-L. Xia, N.-Y. Xu, R. Gao, X.-F. Cai, S. Maeng,
and F.-H. Hsu. Ftl design exploration in reconfigurable highperformance ssd for server applications. In 23rd International
Conference on Supercomputing, pages 338-349, 2009.

[29] A. Tavakkol, M. Arjomand, and H. Sarbazi-Azad. Unleashing
the potentials of dynamism for page allocation strategies in
SSDs. In ACM International Conference on Measurement and
Modeling of Computer Systems, pages 551-552, 2014.

[30] G. Wu and X. He. Reducing SSD read latency via nand flash
program and erase suspension. In 10th USENIX Conference
on File and Storage Technologies, Feb 2012.

[31] Q. Zhang, D. Feng, F. Wang, and Y. Xie. An efficient, QoSaware I/O scheduler for solid state drive. In International
Conference on High Performance Computing and Communications, pages 1408-1415, 2013.