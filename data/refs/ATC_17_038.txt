[1] A. Agarwal, S. Bird, M. Cozowicz, L. Hoang,
J. Langford, S. Lee, J. Li, D. Melamed, G. Oshri,
O. Ribas, S. Sen, and A. Slivkins. A multiworld testing decision service. CoRR, abs/1606.03966, 2016.
[2] C. C. Aggarwal, J. L. Wolf, and P. S. Yu. Caching
on the world wide web. IEEE Trans. Knowledge and
Data Eng., 11(1):95–107, 1999.
[3] S. Albers, L. M. Favrholdt, and O. Giel. On paging with locality of reference. J. Comput. Syst. Sci,
70(2):145–175, 2005.
[4] Amazon ElastiCache. http://aws.amazon.
com/elasticache.
[5] T. G. Armstrong, V. Ponnekanti, D. Borthakur, and
M. Callaghan. Linkbench: a database benchmark
based on the Facebook social graph. In SIGMOD,
2013.
[6] B. Atikoglu, Y. Xu, E. Frachtenberg, S. Jiang, and
M. Paleczny. Workload analysis of a large-scale keyvalue store. In SIGMETRICS, 2012.
[7] Azure Redis Cache. https://azure.
microsoft.com/en-us/services/cache.
[8] A. Balamash and M. Krunz. An overview of web
caching replacement algorithms. IEEE Communications Surveys and Tutorials, 6(1-4):44–56, 2004.
[9] A. Borodin, S. Irani, P. Raghavan, and B. Schieber.
Competitive paging with locality of reference. J.
Comput. System Sci., 50(2):244–258, 1995.
[10] L. Breslau, P. Cao, L. Fan, G. Phillips, and
S. Shenker. Web caching and zipf-like distributions:
Evidence and implications. In INFOCOM, pages
126–134, 1999.
[11] P. Cao and S. Irani. Cost-aware WWW proxy
caching algorithms. In Proc. Symposium on Internet Technologies and Systems (USITS), 1997.
[12] Y. Cheng, F. Douglis, P. Shilane, M. Trachtman,
G. Wallace, P. Desnoyers, and K. Li. Erasing belady’s limitations: In search of flash cache offline
optimality. In USENIX ATC, 2016.
[13] L. Cherkasova and G. Ciardo. Role of aging, frequency, and size in web cache replacement policies.
In Conf. on High-Performance Computing and Net.,
2001.
[14] A. Cidon, A. Eisenman, M. Alizadeh, and S. Katti.
Cliffhanger: Scaling performance cliffs in web
memory caches. In NSDI, 2016.
[15] B. F. Cooper, A. Silberstein, E. Tam, R. Ramakrishnan, and R. Sears. Benchmarking cloud serving
systems with ycsb. In SOCC, 2010.
[16] F. J. Corbato. A paging experiment with the multics
system. In Feshbach and Ingard, editors, In Honor of
Philip M. Morse, pages 217–228. MIT Press, 1969.
[17] H. A. David and H. N. Nagaraja. Order Statistics.
Wiley Series in Probability and Statistics, 2003.
[18] Django. https://www.djangoproject.
com.
[19] G. Einziger and R. Friedman. TinyLFU: A highly
efficient cache admission policy. In Proc. Parallel,
Dist. and Net. Processing, 2014.
[20] J. B. Estoup. Gammes stenographiques., 1916.
[21] B. Fan, D. G. Andersen, and M. Kaminsky. MemC3:
Compact and concurrent MemCache with dumber
caching and smarter hashing. In NSDI, 2013.
[22] A. Fiat, R. M. Karp, M. Luby, L. A. McGeoch, D. D.
Sleator, and N. E. Young. Competitive paging algorithms. Journal of Algorithms, 12(4):685–699,
1991.
[23] B. Fitzpatrick. Distributed caching with Memcached. Linux J., 2004(124):5–5, 2004.
[24] P. A. Franaszek and T. J. Wagner. Some distributionfree aspects of paging algorithm performance. J.
ACM, 21(1):31–39, 1974.
[25] S. Goel, A. Anderson, J. M. Hofman, and D. J.
Watts. The structural virality of online diffusion.
Management Science, 62(1):180–196, 2016.
[26] Guava: Google Core Libraries for Java. https:
//github.com/google/guava.
[27] Q. Huang, K. Birman, R. van Renesse, W. Lloyd,
S. Kumar, and H. C. Li. An analysis of Facebook
photo caching. In SOSP, 2013.
[28] Hyperbolic caching. https://github.com/
kantai/hyperbolic-caching.
[29] S. Jiang and X. Zhang. LIRS: an efficient low interreference recency set replacement policy to improve
buffer cache performance. In SIGMETRICS, 2002.
[30] T. Johnson and D. Shasha. 2Q: A low overhead high
performance buffer management replacement algorithm. In VLDB, 1994.
[31] H. Kaplan, R. E. Tarjan, and K. Tsioutsiouliklis. Faster kinetic heaps and their use in broadcast
scheduling. In SODA, pages 836–844, 2001.
[32] A. R. Karlin, S. J. Phillips, and P. Raghavan. Markov
paging. SIAM J. Computing, 30(3):906–922, 2000.
[33] E. Koutsoupias and C. H. Papadimitriou. Beyond competitive analysis. SIAM J. Computing,
30(1):300–317, 2000.
[34] D. Lee, J. Choi, J.-H. Kim, S. H. Noh, S. L. Min,
Y. Cho, and C.-S. Kim. LRFU: A spectrum of
policies that subsumes the least recently used and
least frequently used policies. IEEE Trans. Comput.,
50(12):1352–1361, 2001.
[35] C. Li and A. L. Cox. GD-Wheel: A cost-aware replacement policy for key-value stores. In EUROSYS,
2015.
[36] C. Li, P. Shilane, F. Douglis, and G. Wallace. Pannier: A container-based flash cache for compound
objects. In Proc. IFIP International Conference on
Distributed Systems Platforms and Open Distributed
Processing (Middleware), 2015.
[37] N. Megiddo and D. S. Modha. ARC: A self-tuning,
low overhead replacement cache. In FAST, 2003.
[38] Memcachier. http://www.memcachier.com.
[39] Multiworld Testing Decision Service. http://
aka.ms/mwt.
[40] R. Nishtala, H. Fugal, S. Grimm, M. Kwiatkowski,
H. Lee, H. C. Li, R. McElroy, M. Paleczny, D. Peek,
P. Saab, D. Stafford, T. Tung, and V. Venkataramani.
Scaling memcache at facebook. In NSDI, 2013.
[41] E. J. O’neil, P. E. O’neil, and G. Weikum. The
LRU-K page replacement algorithm for database
disk buffering. SIGMOD Record, 22(2):297–306,
1993.
[42] K. Psounis and B. Prabhakar. Efficient randomized web-cache replacement schemes using samples
from past eviction times. IEEE/ACM Trans. Networking, 10(4):441–455, 2002.
[43] Q. Pu, H. Li, M. Zaharia, A. Ghodsi, and I. Stoica.
Fairride: Near-optimal, fair cache sharing. In NSDI,
pages 393–406, 2016.
[44] Redis Key-Value Store. http://http://
redis.io.
[45] Using Redis as an LRU Cache. https://redis.
io/topics/lru-cache#approximatedlru-algorithm.
[46] J. Shim, P. Scheuermann, and R. Vingralek. Proxy
cache algorithms: Design, implementation, and performance. IEEE Trans. Knowledge and Data Eng.,
11(4):549–562, 1999.
[47] D. D. Sleator and R. E. Tarjan. Amortized efficiency of list update and paging rules. Comm. ACM,
28(2):202–208, 1985.
[48] Storage Performance Council Trace Repository.
http://www.storageperformance.org/
specs/#traces, 2002.
[49] L. Tang, Q. Huang, W. Lloyd, S. Kumar, and K. Li.
RIPQ: Advanced photo caching on flash for Facebook. In FAST, 2015.
[50] Varnish HTTP Cache. https://www.
varnish-cache.org.
[51] ViralSearch: Identifying and Visualizing Viral Content. https://www.microsoft.com/enus/research/video/viralsearchidentifying-and-visualizing-viralcontent/.
[52] Q. Yang and H. Zhang. Taylor series prediction:
A cache replacement policy based on second-order
trend analysis. In HICSS. IEEE, 2001.
[53] N. Young. Competitive paging and dual-guided
on-line weighted caching and matching algorithms.
PhD thesis, Princeton University, 1991.
[54] N. E. Young. On-line file caching. Algorithmica,
33(3):371–383, 2002.
[55] Y. Zhou, J. Philbin, and K. Li. The multi-queue replacement algorithm for second level buffer caches.
In USENIX ATC, 2001.
[56] G. K. Zipf. Selected studies of the Principle of Relative Frequency in Language. Harvard Univ. Press,
1932.
