[1] Yehuda Afek, Hagit Attiya, Arie Fouren, Gideon Stupp, and Dan Touitou. 1999. Long-lived renaming made adaptive. In PODC
’99.
[2] Marcos K. Aguilera, Burkhard Englert, and Eli Gafni. 2003. On
Using Network Attached Disks As Shared Memory. In PODC ’03.
[3] Marcos K. Aguilera, Idit Keidar, Dahlia Malkhi, Jean-Philippe Martin, and Alexander Shraer. 2010. Reconfiguring Replicated Atomic Storage: A Tutorial. Bulletin of the EATCS 102 (2010).
[4] James Aspnes, Hagit Attiya, and Keren Censor. 2009. Max- registers, counters, and monotone circuits. In PODC ’09.
[5] Hagit Attiya, Amotz Bar-Noy, and Danny Dolev. 1995. Sharing memory robustly in message-passing systems. J. ACM 42, 1 (1995).
[6] Hagit Attiya and Faith Ellen. 2014. Impossibility Results for Distributed Computing. Synthesis Lectures on Distributed Com- puting Theory 5, 1 (2014).
[7] Hagit Attiya and Arie Fouren. 2003. Algorithms adapting to point contention. J. ACM 50, 4 (July 2003).
[8] Hagit Attiya and Jennifer Welch. 2004. Distributed Computing: Fundamentals, Simulations, and Advanced Topics (2nd ed.). Wiley, Chapter 10.4, 234.
[9] Cristina Basescu, Christian Cachin, Ittay Eyal, Robert Haas, Alessandro Sorniotti, Marko Vukolic, and Ido Zachevsky. 2012. Robust data sharing with key-value stores. In DSN ’12. 1–12.
[10] James E. Burns and Nancy A. Lynch. 1993. Bounds on Shared Memory for Mutual Exclusion. Inf. Comput. 107, 2 (1993).
[11] Viveck R. Cadambe, Nancy A. Lynch, Muriel M ́edard, and Pe-
ter M. Musial. 2017. A coded shared atomic memory algorithm for message passing architectures. Distributed Computing 30, 1 (2017), 49–73.
[12] Viveck R. Cadambe, Zhiying Wang, and Nancy A. Lynch. 2016. Information-Theoretic Lower Bounds on the Storage Cost of Shared Memory Emulation. In PODC ’16.
[13] Gregory Chockler, Rachid Guerraoui, and Idit Keidar. Amnesic Distributed Storage. In DISC ’07.
[14] Gregory Chockler and Alexander Spiegelman. 2017. Space Com- plexity of Fault-Tolerant Register Emulations. arXiv:1705.07212
[15] Brian F. Cooper et al. 2008. PNUTS: Yahoo!’s hosted data serving
platform. Proc. VLDB Endowment 1, 2 (2008).
[16] Partha Dutta, Rachid Guerraoui, Ron R. Levy, and Marko Vukolic. 2010. Fast Access to Distributed Atomic Memory. SIAM J.
Comput. 39, 8 (2010), 3752–3783.
[17] Amazon DynamoDB. http://aws.amazon.com/dynamodb/.
[18] Faith Ellen, Rati Gelashvili, Nir Shavit, and Leqi Zhu. 2016. A
Complexity-Based Hierarchy for Multiprocessor Synchronization.
In PODC ’16.
[19] Burkhard Englert and Alexander A. Shvartsman. 2000. Grace-
ful Quorum Reconfiguration in a Robust Emulation of Shared
Memory. In ICDCS ’2000.
[20] Rui Fan and Nancy Lynch. 2003. Efficient Replication of Large
Data Objects. In DISC ’03.
[21] Rati Gelashvili. 2015. On the Optimal Space Complexity of
Consensus for Anonymous Processes. In DISC ’15.
[22] Chryssis Georgiou, Nicolas C. Nicolaou, and Alexander A. Shvarts- man. 2009. Fault-tolerant semifast implementations of atomic
read/write registers. Journal of Parallel Distributed Computing
69, 1 (2009), 62–79.
[23] Seth Gilbert, Nancy A. Lynch, and Alexander A. Shvartsman.
2010. Rambo: a robust, reconfigurable atomic memory service for dynamic networks. Distributed Computing 23, 4 (2010), 225–272.
[24] Maurice Herlihy. 1991. Wait-free synchronization. ACM Trans-
actions on Programming Languages and Systems (TOPLAS)
13, 1 (1991), 124–149.

[25] Maurice Herlihy and Jeannette M. Wing. 1990. Linearizability:
A Correctness Condition for Concurrent Objects. ACM Trans.
Program. Lang. Syst. 12, 3 (1990).

[26] Patrick Hunt, Mahadev Konar, Flavio P. Junqueira, and Benjamin
Reed. 2010. ZooKeeper: wait-free coordination for internet-scale
systems. In USENIX ATC ’10.

[27] Prasad Jayanti, Tushar Chandra, and Sam Toueg. 1998. Fault-

tolerant wait-free shared objects. J. ACM 45, 3 (1998), 451–500.
[28] Prasad Jayanti, King Tan, and Sam Toueg. 2000. Time and
Space Lower Bounds for Nonblocking Implementations. SIAM J.
Comput. 30, 2 (April 2000), 438–456. https://doi.org/10.1137/
S0097539797317299

[29] Leslie Lamport. 1986. On interprocess communication: Parts I

and II. Distributed computing 1, 2 (1986).

[30] Nancy Lynch. 1996. Distributed Algorithms. Morgan Kaufman.
[31] Dahlia Malkhi and Michael K. Reiter. 1998. Byzantine Quorum

Systems. Distributed Computing 11, 4 (1998), 203–213.

[32] MongoDB. http://www.mongodb.org/.
[33] Jun Rao, Eugene J. Shekita, and Sandeep Tata. 2011. Using Paxos
to Build a Scalable, Consistent, and Highly Available Datastore.
PVLDB (2011).

[34] Riak. http://basho.com/riak.
[35] Amazon Simple Storage Service (Amazon S3). http://aws.amazon.

com/s3/.

[36] Cheng Shao, Jennifer L Welch, Evelyn Pierce, and Hyunyoung
Lee. 2011. Multiwriter consistency conditions for shared memory
registers. SIAM J. Comput. 40, 1 (2011).

[37] C. Shao, J. L. Welch, E. Pierce, and H. Lee. 2011. Multiwriter
Consistency Conditions for Shared Memory Registers. SIAM J.
Comput. 40, 1 (2011).

[38] Amazon SimpleDB. http://aws.amazon.com/simpledb/.
[39] Alexander Spiegelman, Yuval Cassuto, Gregory Chockler, and Idit
Keidar. 2016. Space Bounds for Reliable Storage: Fundamental
Limits of Coding. In PODC ’16.

[40] Microsoft Azure Storage. http://www.windowsazure.com/en-us/

manage/services/storage.

[41] Leqi Zhu. 2016. A Tight Space Bound for Consensus. In STOCC. Shao, J. L. Welch, E. Pierce, and H. Lee. 2011. Multiwriter Consistency Conditions for Shared Memory Registers. SIAM J. Comput. 40, 1 (2011).
Amazon SimpleDB. http://aws.amazon.com/simpledb/. Alexander Spiegelman, Yuval Cassuto, Gregory Chockler, and Idit Keidar. 2016. Space Bounds for Reliable Storage: Fundamental Limits of Coding. In PODC ’16.
Microsoft Azure Storage. http://www.windowsazure.com/en-us/ manage/services/storage.
Leqi Zhu. 2016. A Tight Space Bound for Consensus. In STOC
’16.
