[1] Martín Abadi, Mihai Budiu, Úlfar Erlingsson, and Jay Ligatti. 2005. Control-flow integrity. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[2] Aleph One. 2000. Smashing the Stack for Fun and Profit. Phrack Magazine 49 (2000).
[3] Jason Ansel, Petr Marchenko, Úlfar Erlingsson, Elijah Taylor, Brad Chen, Derek L. Schuff, David Sehr, Cliff Biffle, and Bennet Yee. 2011. Language-independent sand- boxing of just-in-time compilation and self-modifying code. In 32nd ACM SIG- PLAN Conference on Programming Language Design and Implementation (PLDI).
[4] Michalis Athanasakis, Elias Athanasopoulos, Michalis Polychronakis, Georgios Portokalidis, and Sotiris Ioannidis. 2015. The Devil is in the Constants: Bypassing Defenses in Browser JIT Engines. In 22nd Annual Network and Distributed System Security Symposium (NDSS).
[5] Michael Backes, Thorsten Holz, Benjamin Kollenda, Philipp Koppe, Stefan Nürn- berger, and Jannik Pewny. 2014. You Can Run but You Can’t Read: Preventing Disclosure Exploits in Executable Code. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[6] Dion Blazakis. 2010. Interpreter exploitation: Pointer inference and JIT spraying. In Blackhat DC (BH DC).
[7] Kjell Braden, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2016. Leakage-Resilient Layout Randomiza- tion for Mobile Devices. In 23rd Annual Network and Distributed System Security Symposium (NDSS).
[8] Nicolas Carlini, Antonio Barresi, Mathias Payer, David Wagner, and Thomas R. Gross. 2015. Control-Flow Bending: On the Effectiveness of Control-Flow In- tegrity. In 24th USENIX Security Symposium (USENIX Sec).
[9] Nicholas Carlini and David Wagner. 2014. ROP is Still Dangerous: Breaking Modern Defenses. In 23rd USENIX Security Symposium (USENIX Sec).
[10] Miguel Castro, Manuel Costa, and Tim Harris. 2006. Securing Software by Enforcing Data-flow Integrity. In 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI).
[11] Ping Chen, Yi Fang, Bing Mao, and Li Xie. 2011. JITDefender: A Defense against JIT Spraying Attacks. In 26th International Information Security Conference (IFIP).
[12] P. Chen, R. Wu, and B. Mao. 2013. JITSafe: a framework against Just-in-time
spraying attacks. IET Information Security 7, 4 (2013).
[13] Shuo Chen, Jun Xu, Emre Can Sezer, Prachi Gauriar, and Ravishankar K Iyer.
2005. Non-Control-Data Attacks Are Realistic Threats.. In 14th USENIX Security
Symposium (USENIX Sec).
[14] Mauro Conti, Stephen Crane, Lucas Davi, Michael Franz, Per Larsen, Christopher
Liebchen, Marco Negro, Mohaned Qunaibit, and Ahmad-Reza Sadeghi. 2015. Losing Control: On the Effectiveness of Control-Flow Integrity under Stack Attacks. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[15] Jonathan Corbet. 2012. Yet another new approach to seccomp. Articles/475043/. (2012).
https://lwn.net/
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE Symposium on Security and Privacy (S&P).
[17] Stephen Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen, Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function- Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[18] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In 22nd Annual Network and Distributed System Security Symposium (NDSS).
[19] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In 23rd USENIX Security Symposium (USENIX Sec).
[20] Isaac Evans, Samuel Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi. 2015. Missing the Point(er): On the Effectiveness of Code Pointer Integrity. In 36th IEEE Symposium on Security and Privacy (S&P).
[21] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howeard Shrobe, Martin Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[22] Roger Faulkner and Ron Gomes. 1991. The Process File System and Process
Model in UNIX System V.. In USENIX Technical Conference (ATC).
[23] Robert Gawlik, Benjamin Kollenda, Philipp Koppe, Behrad Garmany, and Thorsten Holz. 2016. Enabling client-side crash-resistance to overcome diversifi- cation and information hiding. In 23rd Annual Network and Distributed System
Security Symposium (NDSS).
[24] Jason Gionta, William Enck, and Peng Ning. 2015. HideM: Protecting the Con-
tents of Userspace Memory in the Face of Disclosure Vulnerabilities. In 5th ACM
Conference on Data and Application Security and Privacy (CODASPY).
[25] Enes Göktas, Elias Athanasopoulos, Herbert Bos, and Georgios Portokalidis. 2014. Out of Control: Overcoming Control-Flow Integrity. In 35th IEEE Symposium on
Security and Privacy (S&P).
[26] Enes Göktas, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-Chain Length to Prevent Code-Reuse Attacks is Hard. In 23rd USENIX Security Symposium (USENIX Sec).
[27] Ian Goldberg, David Wagner, Randi Thomas, and Eric A. Brewer. 1996. A Se- cure Environment for Untrusted Helper Applications. In 6th USENIX Security Symposium (USENIX Sec).
[28] Guang Gong. 2016. Pwn a Nexus Device With a Single Vulnerability. https: //cansecwest.com/slides/2016/CSW2016_Gong_Pwn_a_Nexus_device_with_a_ single_vulnerability.pdf . (2016).
[29] Andrei Homescu, Stefan Brunthaler, Per Larsen, and Michael Franz. 2013. Li- brando: transparent code randomization for just-in-time compilers. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[30] Hong Hu, Shweta Shinde, Adrian Sendroiu, Zheng Leong Chua, Prateek Saxena, and Zhenkai Liang. 2016. Data-Oriented Programming: On the Expressiveness of Non-Control Data Attacks. In 37th IEEE Symposium on Security and Privacy (S&P).
[31] Intel. 2016. Control-flow Enforcement Technology Preview. https://software. intel . com / sites / default / files / managed / 4d / 2a / control - flow - enforcement - technology- preview.pdf . (2016).
[32] Intel. 2016. Intel Software Guard Extensions (Intel SGX). https://software.intel. com/en- us/sgx. (2016).
[33] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer, George Candea, R. Sekar, and Dawn Song. 2014. Code-Pointer Integrity. In 11th USENIX Symposium on Operating Systems Design and Implementation (OSDI).
[34] Per Larsen, Andrei Homescu, Stefan Brunthaler, and Michael Franz. 2014. SoK: Automated Software Diversity. In 35th IEEE Symposium on Security and Privacy (S&P).
[35] Linux Foundation. 2014. This-CPU Operations. http://lxr.free-electrons.com/ source/Documentation/this_cpu_ops.txt. (2014).
[36] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2016. What Cannot Be Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP Defenses. In 25th USENIX Security Symposium (USENIX Sec).
[37] Microsoft. 2006. Data Execution Prevention (DEP). http://support.microsoft. com/kb/875352/EN- US/. (2006).
[38] Microsoft. 2015. ChakraCore. https://github.com/Microsoft/ChakraCore. (2015).
[39] Microsoft. 2015. Control Flow Guard. http://msdn.microsoft.com/en-
us/library/Dn919635.aspx. (2015).
[40] Matt Miller. 2017. Mitigating arbitrary native code execution in Microsoft Edge.
https://blogs.windows.com/msedgedev/2017/02/23/mitigating- arbitrary- native- code- execution/. (2017).
[41] Mozilla. 2015. W xor X JIT-code enabled in Firefox. https://jandemooij.nl/blog/ 2015/12/29/wx- jit- code- enabled- in- firefox. (2015).
[42] Mozilla. 2016. JavaScript:New to SpiderMonkey. https://wiki.mozilla.org/ JavaScript:New_to_SpiderMonkey#Benchmark_your_changes. (2016).
[43] Santosh Nagarakatte, Jianzhou Zhao, Milo M.K. Martin, and Steve Zdancewic. 2009. SoftBound: Highly Compatible and Complete Spatial Memory Safety for C. In 30th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI).
[44] Santosh Nagarakatte, Jianzhou Zhao, Milo MK Martin, and Steve Zdancewic. 2010. CETS: compiler enforced temporal safety for C. In International Symposium on Memory Management (ISMM).
[45] Nergal. 2001. The advanced return-into-lib(c) exploits: PaX case study. Phrack Magazine 11 (2001).
[46] Ben Niu and Gang Tan. 2014. Modular Control-flow Integrity. In 35th ACM SIG- PLAN Conference on Programming Language Design and Implementation (PLDI).
[47] Ben Niu and Gang Tan. 2014. RockJIT: Securing Just-In-Time Compilation Using Modular Control-Flow Integrity. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[48] PaX. 2003. PaX Address Space Layout Randomization. (2003).
[49] Felix Schuster, Thomas Tendyck, Christopher Liebchen, Lucas Davi, Ahmad-Reza Sadeghi, and Thorsten Holz. 2015. Counterfeit Object-oriented Programming: On the Difficulty of Preventing Code Reuse Attacks in C++ Applications. In 36th
IEEE Symposium on Security and Privacy (S&P).
[15] Jonathan Corbet. 2012. Yet another new approach to seccomp. Articles/475043/. (2012).
https://lwn.net/
[16] Stephen Crane, Christopher Liebchen, Andrei Homescu, Lucas Davi, Per Larsen, Ahmad-Reza Sadeghi, Stefan Brunthaler, and Michael Franz. 2015. Readactor: Practical Code Randomization Resilient to Memory Disclosure. In 36th IEEE Symposium on Security and Privacy (S&P).
[17] Stephen Crane, Stijn Volckaert, Felix Schuster, Christopher Liebchen, Per Larsen, Lucas Davi, Ahmad-Reza Sadeghi, Thorsten Holz, Bjorn De Sutter, and Michael Franz. 2015. It’s a TRaP: Table Randomization and Protection against Function- Reuse Attacks. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[18] Lucas Davi, Christopher Liebchen, Ahmad-Reza Sadeghi, Kevin Z. Snow, and Fabian Monrose. 2015. Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming. In 22nd Annual Network and Distributed System Security Symposium (NDSS).
[19] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014. Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow Integrity Protection. In 23rd USENIX Security Symposium (USENIX Sec).
[20] Isaac Evans, Samuel Fingeret, Julian Gonzalez, Ulziibayar Otgonbaatar, Tiffany Tang, Howard Shrobe, Stelios Sidiroglou-Douskos, Martin Rinard, and Hamed Okhravi. 2015. Missing the Point(er): On the Effectiveness of Code Pointer Integrity. In 36th IEEE Symposium on Security and Privacy (S&P).
[21] Isaac Evans, Fan Long, Ulziibayar Otgonbaatar, Howeard Shrobe, Martin Rinard, Hamed Okhravi, and Stelios Sidiroglou-Douskos. 2015. Control Jujutsu: On the Weaknesses of Fine-Grained Control Flow Integrity. In ACM SIGSAC Conference
[50] Fermin J. Serna. 2012. The Info Leak Era on Software Exploitation. In Blackhat USA (BH US).
[51] Hovav Shacham. 2007. The geometry of innocent flesh on the bone: return-into- libc without function calls (on the x86). In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[52] Kevin Z. Snow, Fabian Monrose, Lucas Davi, Alexandra Dmitrienko, Christopher Liebchen, and Ahmad-Reza Sadeghi. 2013. Just-In-Time Code Reuse: On the Effectiveness of Fine-Grained Address Space Layout Randomization. In 34th IEEE Symposium on Security and Privacy (S&P).
[53] K. Z. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and M. Polychronakis. 2016. Return to the Zombie Gadgets: Undermining Destructive Code Reads via Code Inference Attacks. In 37th IEEE Symposium on Security and Privacy (S&P).
[54] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David Melski. 2015. Exploiting and Protecting Dynamic Code Generation. In 22nd Annual Network and Distributed System Security Symposium (NDSS).
[55] Adrian Tang, Simha Sethumadhavan, and Salvatore Stolfo. 2015. Heisenbyte: Thwarting Memory Disclosure Attacks using Destructive Code Reads. In ACM SIGSAC Conference on Computer and Communications Security (CCS).
[56] The WebKit team. 2013. SunSpider 1.0.2. https://www.webkit.org/perf/sunspider/ sunspider.html. (2013).
[57] Theori. 2016. Chakra JIT CFG Bypass. http://theori.io/research/chakra-jit-cfg- bypass. (2016).
[58] Caroline Tice, Tom Roeder, Peter Collingbourne, Stephen Checkoway, Úlfar Erlingsson, Luis Lozano, and Geoff Pike. 2014. Enforcing Forward-Edge Control- Flow Integrity in GCC & LLVM. In 23rd USENIX Security Symposium (USENIX Sec).
[59] Jan Werner, George Baltas, Rob Dallara, Nathan Otterness, Kevin Z. Snow, Fabian Monrose, and Michalis Polychronakis. 2016. No-Execute-After-Read: Preventing Code Disclosure in Commodity Software. In 11th ACM Symposium on Information, Computer and Communications Security (ASIACCS).

