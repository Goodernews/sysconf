[1] J. Navarro, S. Iyer, P. Druschel, and A. Cox, “Practical,
Transparent Operating System Support for Superpages,” OSDI,
2002.

[2] M. Talluri and M. Hill, “Surpassing the TLB Performance of
Superpages with Less Operating System Support,’ ASPLOS,
1994,

[3] M. Talluri, S. Kong, M. Hill, and D. Patterson, “Tradeoffs in
Supporting Two Page Sizes,” ISCA, 1992.

[4] B. Pham, J. Vesely, G. Loh, and A. Bhattacharjee, “Large Pages
and Lightweight Memory Management in Virtualized Systems:
Can You Have it Both Ways?,’ MICRO, 2015.

[5] D. Fan, Z. Tang, H. Huang, and G. Gao, “An Energy Efficient
TLB Design Methodology,” ISLPED, 2005.

[6] V. Karakostas, J. Gandhi, A. Cristal, M. Hill, K. McKinley,
M. Nemirovsky, M. Swift, and O. Unsal, “Energy-Efficient
Address Translation,’ HPCA, 2016.

[7] T. Juan, T. Lang, and J. Navarro, “Reducing TLB Power
Requirements,” ISLPED, 1997.

[8] I. Kadayif, A. Sivasubramaniam, M. Kandemir, G. Kandiraju,
and G. Chen, “Generating Physical Addresses Directly for
Saving Instruction TLB Energy,” MICRO, 2002.

[9] A. Sodani, “Race to Exascale: Opportunities and Challenges,”
MICRO Keynote, 2011.

[10] M. Papadopoulou, X. Tong, A. Seznec, and A. Moshovos,
“Prediction-Based Superpage-Friendly TLB Designs,” HPCA,
2014.

[11] Intel, “Haswell,” www. 7-cpu.com/cpu/Haswell.himl, 2016.
[12] Intel, “Skylake,” www. 7-cpu.com/cpu/Skylake.himl, 2016.

[13] J. Gandhi, A. Basu, M. Hill, and M. Swift, “Efficient Memory
Virtualization,’ MICRO, 2014.

[14] J. Buell, D. Hecht, J. Heo, K. Saladi, and R. Taheri,
“Methodology for Performance Analysis of VMware vSphere
under Tier-1 Applications,” VMWare Technical Journal, 2013.

[15] A. Seznec, “Concurrent Support of Multiple Page Sizes on a
Skewed Associative TLB,” IEEE Transactions on Computers,
2004.

[16] B. Pham, V. Vaidyanathan, A. Jaleel, and A. Bhattacharjee,
“CoLT: Coalesced Large-Reach TLBs,’ MICRO, 2012.

[17] B. Pham, A. Bhattacharjee, Y. Eckert, and G. Loh, “Increasing
TLB Reach by Exploiting Clustering in Page Translations,”
HPCA, 2014.

[18] A. Basu, J. Gandhi, J. Chang, M. Hill, and M. Swift, “Efficient
Virtual Memory for Big Memory Servers,” ISCA, 2013.

[19] A. Bhattacharjee, “Large-Reach Memory Management Unit
Caches,” MICRO, 2013.

[20] R. Bhargava, B. Serebrin, F. Spadini, and S. Manne, “Accelerating Two-Dimensional Page Walks for Virtualized Systems,”
ASPLOS, 2008.

[21] B. Pichai, L. Hsu, and A. Bhattacharjee, “Architectural
Support for Address Translation on GPUs,” ASPLOS, 2014.

[22] B. Pichai, L. Hsu, and A. Bhattacharjee, “Address Translation
for Throughput Oriented Accelerators,” IEEE Micro Top Picks,
2015.

[23] J. Power, M. Hill, and D. Wood, “Supporting x86-64 Address
Translation for 100s of GPU Lanes,’ HPCA, 2014.

[24] N. Agarwal, D. Nellans, M. O’Connor, S. Keckler, and
T. Wenisch, “Unlocking Bandwidth for GPUs in CC-NUMA
Systems,” HPCA, 2015.

[25] N. Agarwal, D. Nellans, M. Stephenson, M. O’Connor,
and S. Keckler, “Page Placement Strategies for GPUs within
Heterogeneous Memory Systems,” ASPLOS, 2015.

[26] G. Kyriazis, “Heterogeneous System Architecture: A Technical Review,” Whitepaper, 2012.

[27] J. Vesely, A. Basu, M. Oskin, G. Loh, and A. Bhattacharjee,
“Observations and Opportunities in Architecting Shared Virtual
Memory for Heterogeneous Systems,” JSPASS, 2016.

[28] T. Zheng, D. Nellans, A. Zulfiqar, M. Stephenson, and
S. Keckler, “Towards a High Performance Paged Memory for
GPUs,” HPCA, 2016.

[29] V. Karakostas, J. Gandhi, F Ayar, A. Cristal, M. Hill,
K. McKinley, M. Nemirovsky, M. Swift, and O. Unsal,
“Redundant Memory Mappings for Fast Access to Large
Memories,” ISCA, 2015.

[30] Intel, “Intel 64 and IA-32 Architectures Software Developer’s
Manual,” 2016.

[31] D. Lustig, G. Sethi, M. Martonosi, and A. Bhattacharjee,
“COATCheck: Verifying Memory Ordering at the Hardware-OS
Interface,” ASPLOS, 2016.

[32] B. Romanescu, A. Lebeck, and D. Sorin, “Specifying and
Dynamically Verifying Address Translation-Aware Memory
Consistency,” ASPLOS, 2010.

[33] N. Muralimanohar, R. Balasubramonian, and N. Jouppi,
“CACTI 6.0: A Tool to Model Large Caches,” MICRO, 2007.

[34] A. Basu, M. Hill, and M. Swift, “Reducing Memory Reference Energy with Opportunistic Virtual Caching,” ISCA, 2012.

[35] A. Seznec, “A Case for Two-Way Skewed Associative
Cache,” ISCA, 1993.

[36] F. Bodin and A. Seznec, “Skewed Associativity Enhances
Performance Predictability,” ISCA, 1995.

[37] D. Sanchez and C. Kozyrakis, “The ZCache: Decoupling
Ways and Associativity,” MICRO, 2010.

[38] R. Sampson and T. Wenisch, ““Z-Cache Skewered,’ WDDD,
2011.

[39] A. Bhattacharjee, D. Lustig, and M. Martonosi, “Shared LastLevel TLBs for Chip Multiprocessors,” HPCA, 2011.

[40] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: Building Customized Program Analysis Tools with Dynamic Instrumentation,” PLDI, 2005.

[41] C. Bienia, S. Kumar, J. P. Singh, and K. Li, “The PARSEC
Benchmark Suite: Characterization and Architectural Simplications,” ZISWC, 2008.

[42] M. Ferdman, A. Adileh, O. Kocberber, S. Volos, M. Alisafaee,
D. Jevdjic, C. Kaynak, A. D. Popescu, A. Ailamaki, , and
B. Falsafi, “Clearing the Clouds: A Study of Emerging Scaleout Workloads on Modern Hardware,’ ASPLOS, 2012.

[43] S. Che, J. Sheaffer, M. Boyer, L. Szafaryn, L. Wang, and
K. Skadron, “A Characterization of the Rodinia Benchmark
Suite with Comparison to Contemporary CMP Workloads,”
TISWC, 2010.

[44] A. Arcangeli, “Transparent Hugepage Support,” KVM Forum,
2010.

[45] A. Clements, F. Kaashoek, and N. Zeldovich, “Scalable
Address Spaces Using RCU Balanced Trees,” ASPLOS, 2012.

[46] A. Bhattacharjee, “Translation-Triggered Prefetching,’ ASPLOS, 2017.

[47] B. Pham, J. Vesely, G. Loh, and A. Bhattacharjee, “Using TLB
Speculation to Overcome Page Splintering in Virtual Machines,”
Rutgers Technical Report DCS-TR-713, 2015.

[48] F. Guo, S. Kim, Y. Baskakov, and I. Banerjee, “Proactively
Breaking Large Pages to Improve Memory Overcommitment
Performance in VMware ESXi,” VEE, 2015.

[49] F. Gaud, B. Lepers, J. Decouchant, J. Funston, and A. Fedorova, “Large Pages May be Harmful on NUMA Systems,”
USENIX ATC, 2014.

[50] J. Gandhi, M. Hill, and M. Swift, “Agile Paging: Exceeding
the Best of Nested and Shadow Paging,” ISCA, 2016.