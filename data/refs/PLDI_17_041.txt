[1] Apache Flink: Scalable batch and stream data processing.
https://flink.apache.org/.

[2] Esper for Java. http: //www.espertech.com/esper/.

[3] ReactiveX: An API for asynchronous programming with observable streams. http: //reactivex.io/.

[4] D. J. Abadi, Y. Ahmad, M. Balazinska, U. Cetintemel, M. Cherniack, J.-H. Hwang, W. Lindner, A. Maskey, A. Rasin, E. Ryvkina, N. Tatbul, Y. Xing, and S. Zdonik. The design of the
Borealis stream processing engine. In Proceedings of the
2nd Biennial Conference on Innovative Data Systems Research (CIDR ’05), number 2005, pages 277-289, 2005. URL:
http://cidrdb.org/cidr2005/papers/P23. pdf.

[5] D. J. Abadi, D. Carney, U. Cetintemel, M. Cherniack, C. Convey, S. Lee, M. Stonebraker, N. Tatbul, and S. Zdonik. Aurora: A new model and architecture for data stream management. The VLDB Journal, 12(2):120-139, 2003. doi:
10. 1007/s00778-003-0095-z.

[6] S. Abiteboul, R. Hull, and V. Vianu, editors. Foundations of
Databases. Addison-Wesley, 1995.

[7] M. Ali, B. Chandramouli, J. Goldstein, and R. Schindlauer.
The extensibility framework in Microsoft StreamInsight. In
Proceedings of the 27th IEEE International Conference on
Data Engineering (ICDE ’11), pages 1242-1253, 2011. doi:
10.1109/ICDE.2011.5767878.

[8] N. Alon, Y. Matias, and M. Szegedy. The space complexity of
approximating the frequency moments. Journal of Computer
and System Sciences, 58(1):137-147, 1999. doi:10.1006/
jcss.1997.1545.

[9] R. Alur, E. Berger, A. Drobnis, L. Fix, K. Fu, G. Hager,
D. Lopresti, K. Nahrstedt, E. Mynatt, S. Patel, J. Rexford,
J. Stankovic, and B. Zorn. Systems computing challenges in
the Internet of Things. In Computing Community Consortium
Whitepaper, 2016. URL: http://arxiv.org/abs/1604.
02980.

[10] R. Alur, L. D’ Antoni, and M. Raghothaman. DReX: A declarative language for efficiently evaluating regular string transformations. In Proceedings of the 42nd Annual Symposium
on Principles of Programming Languages, POPL 15, pages
125-137, 2015. doi:10.1145/2676726 . 2676981.

[11] R. Alur, D. Fisman, and M. Raghothaman. Regular programming for quantitative properties of data streams. In Proceedings
of the 25th European Symposium on Programming (ESOP ’16),
pages 15-40, 2016. doi: 10.1007/978-3-662-49498-1_2.

[12] R. Alur and K. Mamouras. An introduction to the StreamQRE
language. http://www.seas.upenn.edu/~mamouras/
papers/StreamQRE-Intro. pdf, 2017. manuscript.

[13] R. Alur and P. Cerny. Streaming transducers for algorithmic verification of single-pass list-processing programs. In
Proceedings of the 38th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL ’11,
pages 599-610, 2011. doi: 10.1145/1926385 .1926454.

[14] A. Arasu, B. Babcock, S$. Babu, J. Cieslewicz, M. Datar, K. Ito,
R. Motwani, U. Srivastava, and J. Widom. STREAM: The
Stanford data stream management system. Technical Report
2004-20, Stanford InfoLab, 2004. URL: http://ilpubs.
stanford .edu:8090/641/.

[15] A. Arasu, S. Babu, and J. Widom. The CQL continuous
query language: Semantic foundations and query execution.
The VLDB Journal, 15(2):121-142, 2006. doi:10.1007/
s00778-004-0147-z.

[16] A. Arasu and J. Widom. Resource sharing in continuous
sliding-window aggregates. In Proceedings of the 30th International Conference on Very Large Data Bases, VLDB ’04,
pages 336-347. VLDB Endowment, 2004.

[17] S. Babu and J. Widom. Continuous queries over data streams.
ACM Sigmod Record, 30(3):109-120, 2001. doi:10.1145/
603867 . 603884.

[18] R. S. Barga, J. Goldstein, M. Ali, and M. Hong. Consistent streaming through time: A vision for event stream processing. In Proceedings of the 3rd Biennial Conference on
Innovative Data Systems Research (CIDR ’07), pages 363374, 2007. URL: http: //cidrdb. org/cidr2007/papers/
cidr07p42. pdf.

[19] R. Book, S$. Even, S. Greibach, and G. Ott. Ambiguity in
graphs and expressions. [EEE Transactions on Computers,
100(2):149-153, 1971. doi:10.1109/T-C.1971.223204.

[20] L. Brenna, A. Demers, J. Gehrke, M. Hong, J. Ossher, B. Panda,
M. Riedewald, M. Thatte, and W. White. Cayuga: A highperformance event processing engine. In Proceedings of the
2007 ACM SIGMOD International Conference on Management
of Data, SIGMOD ’07, pages 1100-1102, 2007. doi:10.
1145/1247480 . 1247620.

[21] J. Chen, D. J. DeWitt, F. Tian, and Y. Wang. NiagaraCQ:
A scalable continuous query system for internet databases.
In Proceedings of the 2000 ACM SIGMOD International
Conference on Management of Data, SIGMOD ’00, pages
379-390, 2000. doi: 10.1145/342009 .335432.

[22] S. Chintapalli, D. Dagit, B. Evans, R. Farivar, T. Graves,
M. Holderbaugh, Z. Liu, K. Nusbaum, K. Patil, B. J. Peng, and
P. Poulosky. Benchmarking streaming computation engines:
Storm, Flink and Spark Streaming. In 2016 [EEE International
Parallel and Distributed Processing Symposium Workshops
(IPDPSW), pages 1789-1792, 2016. doi: 10.1109/IPDPSW.
2016. 138.

[23] G. Cugola and A. Margara. Processing flows of information: From data stream to complex event processing. ACM
Computing Surveys (CSUR), 44@):15:1-15:62, 2012. doi:
10.1145/2187671 .2187677.

[24] L. D’ Antoni, M. Veanes, B. Livshits, and D. Molnar. Fast: A
transducer-based language for tree manipulation. In Proceedings of the 35th ACM SIGPLAN Conference on Programming
Language Design and Implementation, PLDI ’14, pages 384—
394, 2014. doi:10.1145/2594291 . 2594309.

[25] M. Datar, A. Gionis, P. Indyk, and R. Motwani. Maintaining stream statistics over sliding windows. SIAM Journal on Computing, 31(6):1794-1813, 2002. doi:10.1137/
$0097539701398363.

[26] L. De Moura and N. Bjérner. Satisfiability modulo theories:
Introduction and applications. Communications of the ACM,
54(9):69-77, 2011. doi:10.1145/1995376. 1995394.
[27] J. Dean and S. Ghemawat. MapReduce: Simplified data
processing on large clusters. In Proceedings of the 6th
Symposium on Operating System Design and Implementation (OSDI ’04), pages 137-150. USENIX Association,
2004. URL: https: //www.usenix.org/legacy/event/
osdi04/tech/dean.html.

[28] J. Dean and S. Ghemawat. MapReduce: Simplified data
processing on large clusters. Communications of the ACM,
51(1):107-113, 2008. doi: 10.1145/1327452.1327492.

[29] B. B. Grathwohl, F Henglein, U. T. Rasmussen, K. A. S¢holm,
and S. P. Tgrholm. Kleenex: Compiling nondeterministic transducers to deterministic streaming transducers. In Proceedings
of the 43rd Annual ACM SIGPLAN-SIGACT Symposium on
Principles of Programming Languages, POPL ’16, pages 284—
297, 2016. doi:10.1145/2837614 .2837647.

[30] M. B. Greenwald and S. Khanna. Quantiles and equi-depth
histograms over streams. In M. Garofalakis, J. Gehrke, and
R. Rastogi, editors, Data Stream Management: Processing
High-Speed Data Streams, pages 45-86. Springer, 2016. doi:
10. 1007/978-3-540-28608-0_3.

[31] S. Guha and A. McGregor. Approximate quantiles and the
order of the stream. In Proceedings of the 25th ACM SIGMODSIGACT-SIGART Symposium on Principles of Database Systems, PODS ’06, pages 273-279. ACM, 2006. doi:10.1145/
1142351 .1142390.

[32] D. Gyllstrom, E. Wu, H.-J. Chae, Y. Diao, P. Stahlberg, and
G. Anderson. SASE: Complex event processing over streams.
In Proceedings of the 3rd Biennial Conference on Innovative
Data Systems Research (CIDR ’07), pages 407-411, 2007.

[33] M. Hirzel. Partition and compose: Parallel complex event
processing. In Proceedings of the 6th ACM International
Conference on Distributed Event-Based Systems, DEBS ”12,
pages 191-200, 2012. doi:10.1145/2335484 . 2335506.

[34] M. Hirzel, H. Andrade, B. Gedik, G. Jacques-Silva, R. Khandekar, V. Kumar, M. Mendell, H. Nasgaard, S. Schneider,
R. Soulé, and K. L. Wu. IBM Streams Processing Language:
Analyzing big data in motion. IBM Journal of Research and
Development, 57(/4):7:1-7:11, 2013. doi:10.1147/JRD.
2013. 2243535.

[35] P. Hooimeijer, B. Livshits, D. Molnar, P. Saxena, and
M. Veanes. Fast and precise sanitizer analysis with
BEK. In Proceedings of the 20th USENIX Conference
on Security, SEC °11, pages 1-16. USENIX Association,
2011. URL: https: //www.usenix.org/legacy/events/
secii/tech/full_papers/Hooimeijer .pdf.

[36] J. Li, D. Maier, K. Tufte, V. Papadimos, and P. A. Tucker.
Semantics and evaluation techniques for window aggregates
in data streams. In Proceedings of the 2005 ACM SIGMOD
International Conference on Management of Data, SIGMOD
’05, pages 311-322. ACM, 2005. doi:10.1145/1066157.
1066193.

[37] B. Litt and Z. Ives. The international epilepsy electrophysiology database. In Proceedings of the Fifth International Workshop on Seizure Prediction, 2011.

[38] B. Mozafari, K. Zeng, and C. Zaniolo. High-performance

complex event processing over XML streams. In Proceedings of the 2012 ACM SIGMOD International Conference on

Management of Data, SIGMOD ’12, pages 253-264, 2012.
doi:10.1145/2213836 . 2213866.

[39] S. Muthukrishnan. Data streams: Algorithms and applications.
Foundations and Trends® in Theoretical Computer Science,
1(2):117-236, 2005. doi: 10.1561/0400000002.

[40] R. E. Stearns and H. B. Hunt TI. On the equivalence and
containment problems for unambiguous regular expressions,
regular grammars and finite automata. SIAM Journal on
Computing, 14(3):598-611, 1985. doi: 10.1137/0214044.

[41] K. Tangwongsan, M. Hirzel, and S. Schneider.
Constant-time sliding window aggregation. Technical Report RC25574 (WAT1511-030), IBM Research,
2015. URL: http://hirzels.com/martin/papers/
tri5-rc25574-daba. pdf.

[42] K. Tangwongsan, M. Hirzel, S. Schneider, and K.-L. Wu.
General incremental sliding-window aggregation. Proceedings
of the VLDB Endowment, 8(7):702-713, 2015. doi:10.
14778/2752939 .2752940.

[43] P. Tucker, K. Tufte, V. Papadimos, and D. Maier. NEXMark:
A benchmark for queries over data streams. Available at http:
//datalab.cs.pdx.edu/niagara/NEXMark/, 2002.

[44] P. A. Tucker, D. Maier, T. Sheard, and L. Fegaras. Exploiting
punctuation semantics in continuous data streams. JEEE
Transactions on Knowledge and Data Engineering, 15(3):555568, 2003. doi:10.1109/TKDE. 2003. 1198390.

[45] M. Vaziri, O. Tardieu, R. Rabbah, P. Suter, and M. Hirzel.
Stream processing with a spreadsheet. In Proceedings of the
28th European Conference on Object-Oriented Programming
(ECOOP ’14), pages 360-384. Springer, 2014. doi:10.1007/
978-3-662-44202-9_15.

[46] M. Veanes, P. de Halleux, and N. Tillmann. Rex: Symbolic regular expression explorer. In Proceedings of the
3rd International Conference on Software Testing, Verification and Validation (ICST ’10), pages 498-507. IEEE, 2010.
doi:10.1109/ICST. 2010.15,

[47] M. Veanes, P. Hooimeijer, B. Livshits, D. Molnar, and
N. Bjorner. Symbolic finite state transducers: Algorithms
and applications. In Proceedings of the 39th Annual ACM
SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 712, pages 137-150, 2012. doi:
10.1145/2103656 . 2103674.

[48] E. Wu, Y. Diao, and S. Rizvi. High-performance complex
event processing over streams. In Proceedings of the 2006
ACM SIGMOD International Conference on Management
of Data, SIGMOD ’06, pages 407-418. ACM, 2006. doi:
10.1145/1142473 .1142520.

[49] FE Zemke, A. Witkowski, M. Cherniack, and L. Colby. Pattern
matching in sequences of rows. Technical report, 2007. ANSI
Standard Proposal.

