[1] L. Lamport, “How to Make a Multiprocessor Computer That
Correctly Executes Multiprocess Programs,” IEEE Transactions on Computers, vol. C-28, p. 690, 1979.

[2] K. C. Yeager, “The MIPS R10000 Superscalar Microprocessor,”
IEEE Micro, vol. 16, p. 28, Apr 1996.

[3] P. S. Sindhu et al., Scalable Shared Memory Multiprocessors
Springer, 1992, ch. Formal Specification of Memory Models,
p. 25.

[4] S. Owens et al., “A better x86 memory model: x86-TSO,”
TPHOL 2009.

[5] SUN Microsystems, “SPARC Architecture Reference Manual
V8,” 1990.

[6] S. Sarkar et al., “Understanding POWER Multiprocessors,”
PLDI 2011.

[7] IBM, “Power ISA, Version 2.07B,” 2015.

[8] ARM Ltd., “ARM Architecture Reference Manual: ARMv8,
for ARMv8-A architecture profile (beta),” 2013.

[9] J. Alglave et al., “GPU Concurrency: Weak Behaviours and.
Programming Assumptions,” ASPLOS 2015.

[10] M. Dubois et al., “Memory Access Buffering in Multiprocessors,” ISCA 1986.

[11] K. Gharachorloo et al., “Memory Consistency and Event
Ordering in Scalable Shared-memory Multiprocessors,” ISCA
1990.

[12] J. Sanders and E. Kandrot, CUDA by example: an introduction
to general-purpose GPU programming Addison-Wesley, 2010.

[13] B. A. Hechtman and D. J. Sorin, “Exploring Memory Consistency for Massively-threaded Throughput-oriented Processors,”
ISCA 2013.

[14] A. Singh et al., “Efficiently Enforcing Strong Memory Ordering in GPUs,” MICRO 2015.

[15] I. Singh et al., “Cache coherence for GPU architectures,”
HPCA 2013.

[16] NVIDIA, “NVIDIA’s Next Generation CUDA Compute Architecture: Fermi,” 2009.

[17] ——, “NVIDIA’s Next Generation CUDA Compute Architecture: Kepler GK110,” 2012.

[18] “AMD Graphics Cores Next (GCN) Architecture,” June 2012.

[19] J. Power et al., “Heterogeneous System Coherence for Integrated CPU-GPU Systems,” MICRO 2013.
Appears in the Proceedings of the 23rd International Symposium on High Performance Compuier Architecture (HPCA), 2017

[20] L. Lamport, “Time, Clocks, and the Ordering of Events in a
Distributed System,” Commun. ACM, vol. 21, p. 558, 1978.

[21] C. Lin et al., “Efficient Sequential Consistency via Conflict
Ordering,” ASPLOS 2012.

[22] D. Gope and M. H. Lipasti, “Atomic SC for simple in-order
processors,” HPCA 2014.

[23] X. Yu and S. Devadas, “TARDIS: Timestamp-based Coherence
Algorithm for Distributed Shared Memory,” PACT 2015.

[24] X. Yu et al., “Tardis 2.0: Optimized Time Traveling Coherence
for Relaxed Consistency Models,’ PACT 2016.

[25] D. J. Sorin et al, “A Primer on Memory Consistency
and Cache Coherence,” Synthesis Lectures on Computer
Architecture, vol. 6, p. 1, 2011.

[26] J. Manson et al., “The Java Memory Model,” POPL 2005.

[27] H.-J. Boehm and S. V. Adve, “Foundations of the C++
Concurrency Memory Model,” PLDI 2008.

[28] S. V. Adve and M. D. Hill, “Weak Ordering—a New Definition,” ISCA 1990.

[29] D. R. Hower et al., “Heterogeneous-race-free Memory Models,”
ASPLOS 2014.

[30] J. F Cantin et al., “The Complexity of Verifying Memory
Coherence,” SPAA 2003.

[31] A. Meixner and D. J. Sorin, “Dynamic Verification of Memory Consistency in Cache-Coherent Multithreaded Computer
Architectures,’ DSN 2006.

[32] M. Harris and L. Nyland, “Inside Pascal: NVIDIA’s Newest
Computing Platform,” GTC 2016.

[33] P. Singh et al., “AMD Platform Coherency and SoC Verification Challenges,” SOCC 2013.

[34] I. Rickards and E. Sgrgard, “Integrating CPU & GPU: the
ARM methodology,” GDC 2013.

[35] K. S. Shim et al., “Library Cache Coherence,” MIT, Tech.
Rep. MIT-CSAIL-TR-2011-027, 2011.

[36] S. Kumar et al., “Fusion: Design Tradeoffs in Coherent Cache
Hierarchies for Accelerators,” ISCA 2015.

[37] X. Yu et al., “A Proof of Correctness for the Tardis Cache
Coherence Protocol,” arXiv preprint arXiv:1505.06459, 2015.

[38] H. Wong et al., “Demystifying GPU microarchitecture through
microbenchmarking,” ISPASS 2010.

[39] J.-P. Schoellkopf, “SRAM memory device with flash clear and
corresponding flash clear method,” 2008, US Patent 7,333,380.

[40] A. Bakhoda et al., “Analyzing CUDA workloads using a
detailed GPU simulator,’ ISPASS 2009.

[41] M. Burtscher and K. Pingali, “An Efficient CUDA Implementation of the Tree-Based Barnes Hut n-Body Algorithm,”
in GPU Computing Gems Emerald Edition, W. Hwu, Ed.
Elsevier, 2011.

[42] A. Brownsword, “Cloth in OpenCL,”’ GDC 2009.

[43] D. Cederman and P. Tsigas, “On Dynamic Load Balancing
on Graphics Processors,” GH 2008.

[44] S. Xiao and W. C. Feng, “Inter-block GPU communication
via fast barrier synchronization,” IPDPS 2010.

[45] J. Rose et al., “The VTR Project: Architecture and CAD for
FPGAs from Verilog to Routing,” FPGA 2012.

[46] S. Che et al., “Rodinia: A benchmark suite for heterogeneous
computing,” ISWC 2009.

[47] N. Binkert et al., “The Gem5 Simulator,’ SIGARCH Comput.
Archit. News, vol. 39, pp. 1-7, 2011.

[48] N. Agarwal et al., “GARNET: A detailed on-chip network
model inside a full-system simulator,’ ISPASS 2009.

[49] A. B. Kahng et al., “ORION 2.0: A Fast and Accurate
NoC Power and Area Model for Early-stage Design Space
Exploration,” DATE 2009.

[50] SPARC International, “The SPARC Architecture Manual,
Version 9,” 1994.

[51] D. A. Wood et al., “Verifying a multiprocessor cache controller
using random test generation,” IEEE Design & Test of
Computers, vol. 7, pp. 13-25, 1990.

[52] B. Bentley, “Validating the Intel® Pentium® 4 microprocessor,”
DSN 2001.

[53] D. Dill et al., “Protocol verification as a hardware design aid,”
ICCD 1992.

[54] F. Pong et al., “Verifying distributed directory-based cache
coherence protocols: $3.mp, a case study,” EURO-PAR 1995.

[55] E. M. Clarke et al., “Verification of the Futurebus+ cache
coherence protocol,” Formal Methods in System Design, vol. 6,
p. 217, 1995.

[56] S. Burckhardt et al., “Verifying Safety of a Token Coherence
Implementation by Parametric Compositional Refinement,”
VMCAIT 2005.

[57] M. D. Sinclair et al., “Efficient GPU Synchronization Without
Scopes: Saying No to Complex Consistency Models,” MICRO
2015.

[58] B. Choi et al., “DeNovo: Rethinking the Memory Hierarchy
for Disciplined Parallelism,’ PACT 2011.

[59] B. A. Hechtman et al., “QuickRelease: A throughput-oriented
approach to release consistency on GPUs,” HPCA 2014.

[60] K. Gharachorloo et al., “Two techniques to enhance the
performance of memory consistency models,” ICPP 1991.

[61] P. Ranganathan et al., “Using Speculative Retirement and
Larger Instruction Windows to Narrow the Performance Gap
Between Memory Consistency Models,” SPAA 1997.

[62] C. Gniady et al., “Is SC + ILP = RC?’ ISCA 1999.

[63] C. Gniady and B. Falsafi, “Speculative Sequential Consistency
with Little Custom Storage,” PACT 2002.

[64] L. Hammond et al., “Programming with Transactional Coherence and Consistency (TCC),” ASPLOS 2004.

[65] T. F. Wenisch et al., “Mechanisms for Store-wait-free Multiprocessors,” ISCA 2007.

[66] L. Ceze et al., “BulkSC: Bulk Enforcement of Sequential

Consistency,” ISCA 2007.

[67] C. Blundell et al., “InvisiFence: Performance-transparent

Memory Ordering in Conventional Multiprocessors,” ISCA

2009.

[68] A. Singh et al., “End-to-end Sequential Consistency,” ISCA

2012.

[69] S. Aga et al., “zFENCE: Data-less Coherence for Efficient

Fences,” ICS 2015.

[70] S. K. Nandy and R. Narayan, “An Incessantly Coherent Cache

Scheme for Shared Memory Multithreaded Systems,” MIT

LCS CSG Memo 356.

[71] Y. Yao et al., “Efficient Timestamp-Based Cache Coherence
Protocol for Many-Core Architectures,” ICS 2016.

[72] B. Sinharoy et al., “POWERS system microarchitecture,” IBM
Journal of Research and Development, vol. 49, pp. 505-521,
July 2005.

[73] H. Q. Le et al., “IBM POWER6 microarchitecture,” [BM
Journal of Research and Development, vol. 51, p. 639, 2007.

[74] M. M. K. Martin et al., “Timestamp Snooping: An Approach
for Extending SMPs,” ASPLOS 2000.

[75] N. Agarwal et al., “In-Network Snoop Ordering (INSO):
Snoopy coherence on unordered interconnects,” HPCA 2009.
