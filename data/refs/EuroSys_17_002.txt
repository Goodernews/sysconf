[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. Controlflow integrity. In Proc. of the 12th ACM conference on Computer and communications security, pages 340-353, 2005.
[2] L. O. Andersen. Program analysis and specialization for
the C programming language. PhD thesis, University of
Cophenhagen, 1994.

[3] K. M. Audenaert and L. J. Levrouw. Interrupt replay: a debugging method for parallel programs with interrupts. Microprocessors and Microsystems, 18(10):601-612, 1994.

[4] A. Aviram, S.-C. Weng, S. Hu, and B. Ford. Efficient systemenforced deterministic parallelism. Communications of the
ACM, 55(5):111-119, 2012.

[5] V. Bartenev. Thread pools in nginx boost performance 9x! https: //www.nginx.com/blog/
thread-pools-boost-performance-9x/, 2015.

[6] C. Basile, Z. Kalbarczyk, and R. Iyer. A preemptive deterministic scheduling algorithm for multithreaded replicas. In Proc.
IEEE Int’! Conf. Dependable Systems and Networks, pages
149-158, 2002.

[7] C. Basile, Z. Kalbarczyk, and R. Iyer. Active replication
of multithreaded applications. [EEE Trans. on Parallel and
Distributed Systems, 17(5):448—-465, 2006. ISSN 1045-9219.

[8] A. Basu, J. Bobba, and M. D. Hill. Karma: scalable deterministic record-replay. In Proc. Int’l Conf: on Supercomputing,
pages 359-368, 2011.

[9] T. Bergan, O. Anderson, J. Devietti, L. Ceze, and D. Grossman. CoreDet: a compiler and runtime system for deterministic multithreaded execution. ACM SIGARCH Computer Architecture News, 38(1):53-64, 2010.

[10] T. Bergan, N. Hunt, L. Ceze, and S. D. Gribble. Deterministic
process groups in dOS. In Proc. OSDI, pages 177-192, 2010.

[11] E. Berger, T. Yang, T. Liu, and G. Novark. Grace: safe multithreaded programming for C/C++. ACM Sigplan Notices, 44
(10):81-96, 2009.

[12] L. Cavallaro. Comprehensive Memory Error Protection via
Diversity and Taint-Tracking. PhD thesis, Univ. Degli Studi
Di Milano, 2007.

[13] B. Cox, D. Evans, A. Filipi, J. Rowanhill, W. Hu, J. Davidson,
J. Knight, A. Nguyen-Tuong, and J. Hiser. N-variant systems:
A secretless framework for security through diversity. In Proc.
15th USENIX Security Symp., pages 105-120, 2006.

[14] H. Cui, J. Simsa, Y.-H. Lin, H. Li, B. Blum, X. Xu, J. Yang,
G. A. Gibson, and R. E. Bryant. Parrot: a practical runtime
for deterministic, stable, and reliablethreads. In Proc. ACM
Symp. Operating Systems Principles, pages 388-405, 2013.

[15] J. Devietti, B. Lucia, L. Ceze, and M. Oskin. Dmp: deterministic shared memory multiprocessing. ACM SIGARCH Computer Architecture News, 37(1):85-96, 2009.

[16] J. Devietti, J. Nelson, T. Bergan, L. Ceze, and D. Grossman.
RCDC: a relaxed consistency deterministic computer. ACM
SIGPLAN Notices, 46(3):67-78, 2011.

[17] I. O. for Standardization. Iso/iec 9899:2011: C11 standard,
2011.

[18] P. Hosek and C. Cadar. Safe software updates via multiversion execution. In Proceedings of the 2013 International
Conference on Software Engineering, pages 612-621, 2013.

[19] P. Hosek and C. Cadar. VARAN the unbelievable: An efficient
n-version execution framework. In Proc. Int’! Conf. on Archi
tectural Support for Programming Languages and Operating
Systems, pages 339-353, 2015.

[20] D. R. Hower, P. Dudnik, M. D. Hill, and D. A. Wood. Calvin:
Deterministic or not? free will to choose. In High Performance Computer Architecture (HPCA), 2011 IEEE 17th International Symposium on, pages 333-334, 2011.

[21] K. Koning, H. Bos, and C. Giuffrida. Secure and efficient
multi-variant execution using hardware-assisted process virtualization. In JEEE/IFIP International Conference on Dependable Systems and Networks, 2016.

[22] L. Lamport. Time, clocks, and the ordering of events in a
distributed system. Comm. of the ACM, 21(7):558-565, 1978.

[23] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. Sok:
Automated software diversity. In 2014 IEEE Symposium on
Security and Privacy (SP), pages 276-291, 2014.

[24] C. Lattner and V. Adve. Automatic pool allocation: improving
performance by controlling data structure layout in the heap.
In ACM Sigplan Notices, volume 40, pages 129-142, 2005.

[25] D. Lee, B. Wester, K. Veeraraghavan, S. Narayanasamy, P. M.
Chen, and J. Flinn. Respec: efficient online multiprocessor replayvia speculation and external determinism. ACM
SIGARCH Computer Architecture News, 38(1):77-90, 2010.

[26] Linux Programmer’s Manual. Id.so(8)-Linux Manual Page, .
[27] Linux Programmer’s Manual. shmat(2)-Linux Manual Page, .

[28] T. Liu, C. Curtsinger, and E. Berger. DTHREADS: efficient
deterministic multithreading. In Proc. ACM Symp. on Operating System Principles, pages 327-336, 2011.

[29] K. Lu, X. Zhou, T. Bergan, and X. Wang. Efficient deterministic multithreading without global barriers. In Proc. 19th ACM
SIGPLAN Symposium on Principles and Practice of Parallel
Programming, pages 287-300, 2014.

[30] M. Maurer and D. Brumley. Tachyon: Tandem execution for
efficient live patch testing. In USENIX Security Symposium,
pages 617-630, 2012.

(31] T. Merrifield and J. Eriksson. Conversion: Multi-version concurrency control for main memory segments. In Proc. ACM
European Conf. on Computer Systems, pages 127-139, 2013.

[32] M. Olszewski, J. Ansel, and S. Amarasinghe. Kendo: efficient deterministic multithreading in software. ACM Sigplan
Notices, 44(3):97-108, 2009.

[33] PaX Team. PaX non-executable pages design & implemen
tation. http: //pax.grsecurity .net/docs/noexec.txt,
2004.

[34] H. Reiser, J. Domaschka, F. J. Hauck, R. Kapitza, and
W. Schréder-Preikschat. Consistent replication of multithreaded distributed objects. In Proc. IEEE Symp. Reliable
Distributed Systems, pages 257-266, 2006.

[35] M. Ronsse and K. De Bosschere. RecPlay: a fully integrated
practical record/replay system. ACM Trans. on Computer
Systems, 17(2):133-152, 1999.

[36] M. Russinovich and B. Cogswell. Replay for concurrent
non-deterministic shared-memory applications. In Proc. ACM
Conf: on Programming language design and implementation.
ACM, 1996.
[37] B. Salamat, T. Jackson, A. Gal, and M. Franz. Orchestra:
intrusion detection using parallel execution and monitoring of
program variants in user-space. In Proc. EuroSys Conf., pages
33-46, 2009.

[38] C. Segulja and T. S$. Abdelrahman. What is the cost of weak
determinism? In Proc. Int’l Conf. Parallel architectures and
compilation, pages 99-112, 2014.

[39] B. Steensgaard. Points-to analysis in almost linear time. In
Proc. 23rd ACM SIGPLAN-SIGACT symposium on Principles
of Programming Languages, pages 32-41. ACM, 1996.

[40] Y. Sui and J. Xue. SVF: interprocedural static value-flow
analysis in Ilvm. In Proc. 25th International Conference on
Compiler Construction, pages 265-266. ACM, 2016.

[41] F. J. Torres-Rojas and M. Ahamad. Plausible clocks: constant
size logical clocks for distributed systems. Distributed Computing, 12(4):179-195, 1999. ISSN 0178-2770.

[42] Using the GNU Compiler Collection (GCC). atomic
builtins. https://gcec.gnu.org/onlinedocs/gcc/_005f _005fatomic-Builtins .htm1, 2016.

[43] S. Volckaert, B. De Sutter, T. De Baets, and K. De Bosschere.
GHUMVEE: efficient, effective, and flexible replication. In
Proc. Int’! Symp. on Foundations and practice of security,
pages 261-277, 2013.

[44] S. Volckaert, B. Coppens, and B. De Sutter. Cloning your gadgets: Complete ROP attack immunity with multi-variant exe
cution. IEEE Trans. on Dependable and Secure Computing,
13(4):437-450, 2015.

[45] S. Volckaert, B. Coppens, A. Voulimeneas, A. Homescu,
P. Larsen, B. D. Sutter, and M. Franz. Secure and efficient
application monitoring and replication. In USENIX Technical
Conference, pages 167-179. USENIX, 2016.

[46] X. Zhou, K. Lu, X. Wang, and X. Li. Exploiting parallelism
in deterministic shared memory multiprocessing. Journal of
Parallel and Distributed Computing, 72(5):716-727, 2012.