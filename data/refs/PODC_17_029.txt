[1] H. Attiya, A. Bar-Noy, D. Dolev, D. Koller, D. Peleg, and R. Reischuk. Renaming
in an asynchronous environment. Journal of the Association for Computing
Machinery, 37(3):524–548, July 1990.
[2] H. Attiya and F. Ellen. Impossibility Results for Distributed Computing. Synthesis
Lectures on Distributed Computing Theory. Morgan&Claypool, 2014. 162 pages.
[3] H. Attiya and A. Fouren. Algorithms adapting to point contention. Journal of
the ACM, 50(4):144–468, 2003.
[4] A. Bar-Noy and D. Dolev. Shared memory versus message-passing in an asynchronous distributed environment. In Proc. 8th ACM Symp. on Principles of
Distributed Computing, pages 307–318, 1989.
[5] J. Bowman. Obstruction-free snapshot, obstruction-free consensus, and fetchand-add modulo k. Technical Report Technical Report TR2011-681, Dartmouth
College, 2011.
[6] A. Brodsky, F. Ellen, and P. Woelfel. Fully-adaptive algorithms for long-lived
renaming. Distributed Computing, 24(2):119–134, 2011.
[7] J. E. Burns and A. N. Lynch. Mutual exclusion using indivisible reads and writes.
In 18th annual allerton conference on communication, control and computing, pages
833–842, October 1980.
[8] J. N. Burns and N. A. Lynch. Bounds on shared-memory for mutual exclusion.
Information and Computation, 107(2):171–184, December 1993.
[9] A. Castaneda, S. Rajsbaum, and M. Raynal. The renaming problem in shared
memory systems: An introduction. Computer Science Review, 5(3):229–251, 2011.
[10] E. W. Dijkstra. Solution of a problem in concurrent programming control. Communications of the ACM, 8(9):569, 1965.
[11] M. J. Fischer, N. A. Lynch, and M. S. Paterson. Impossibility of distributed
consensus with one faulty process. Journal of the ACM, 32(2):374–382, 1985.
[12] E. Gafni, M. Merritt, and G. Taubenfeld. The concurrency hierarchy, and algorithms for unbounded concurrency. In Proc. 20th ACM Symp. on Principles of
Distributed Computing, pages 161–169, August 2001.
[13] D.S. Greenberg, G. Taubenfeld, and Da-Wei Wang Choice coordination with
multiple alternatives. In Proc. of the 6th International workshop on distributed
algorithms, LNCS 647, pages 54–68, 1992.
[14] M. P. Herlihy. Wait-free synchronization. ACM Trans. on Programming Languages
and Systems, 13(1):124–149, January 1991.
[15] M. P. Herlihy, V. Luchangco, and M. Moir. Obstruction-free synchronization:
Double-ended queues as an example. In Proc. of the 23rd International Conference
on Distributed Computing Systems, page 522, 2003.
[16] M.C. Loui and H. Abu-Amara. Memory requirements for agreement among
unreliable asynchronous processes. Advances in Computing Research, 4:163–183,
1987.
[17] M. Merritt and G. Taubenfeld. Computing with infinitely many processes. Information and Computation, 233:12 – 31, 2013.
[18] M. Moir and J. H. Anderson. Wait-free algorithms for fast, long-lived renaming.
Science of Computer Programming, 25(1):1–39, October 1995.
[19] S. Moran and Y. Wolfstahl. Extended impossibility results for asynchronous
complete networks. Information Processing Letters, 26(3):145–151, 1987.
[20] M. Pease, R. Shostak, and L. Lamport. Reaching agreement in the presence of
faults. Journal of the ACM, 27(2):228–234, 1980.
[21] M. O. Rabin. The choice coordination problem. Acta Informatica, 17:121–134,
1982.
[22] M. Raynal. Algorithms for mutual exclusion. The MIT Press, 1986. Translation of:
Algorithmique du parallélisme, 1984.
[23] E. Styer and G. L. Peterson. Tight bounds for shared memory symmetric mutual exclusion problems. In Proc. 8th ACM Symp. on Principles of Distributed
Computing, pages 177–191, August 1989.
[24] G. Taubenfeld. Synchronization Algorithms and Concurrent Programming. Pearson
/ Prentice-Hall, 2006. ISBN 0-131-97259-6, 423 pages.
[25] G. Taubenfeld. Obstruction-free consensus for unbounded concurrency. Unpublished manuscript, 2017.
[26] G. Taubenfeld and S. Moran. Possibility and impossibility results in a shared
memory environment. Acta Informatica, 33(1):1–20, 1996.
[27] L. Zhu. A tight space bound for consensus. In Proceedings of the Forty-eighth
Annual ACM Symposium on Theory of Computing, STOC ’16, pages 345–350, 2016.
