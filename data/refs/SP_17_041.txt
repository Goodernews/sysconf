[1] B. P. Miller, L. Fredriksen, and B. So, “An empirical study of the
reliability of unix utilities,” Commun. ACM, vol. 33, no. 12, pp. 32–44,
1990.
[2] Sdl process: Veriﬁcation. [Online]. Available: https://www.microsoft.
com/en-us/sdl/process/veriﬁcation.aspx
[3] C. Evans, M. Moore, and T. Ormandy. (2011) Google online
security blog – fuzzing at scale. [Online]. Available: https:
//security.googleblog.com/2011/08/fuzzing-at-scale.html
[4] B. Arkin. (2009) Adobe reader and acrobat security initiative. [Online].
Available: http://blogs.adobe.com/security/2009/05/adobe reader and
acrobat secur.html
[5] C. Miller and Z. N. Peterson, “Analysis of mutation and generationbased fuzzing,” Independent Security Evaluators, Baltimore, Maryland,
Tech. Rep., 2007.
[6] A. Rebert, S. K. Cha, T. Avgerinos, J. Foote, D. Warren, G. Grieco,
and D. Brumley, “Optimizing seed selection for fuzzing,” in USENIX
Security, 2014, pp. 861–875.
[7] American fuzzy lop. [Online]. Available: http://lcamtuf.coredump.cx/aﬂ/
[8] V. Ganesh, T. Leek, and M. Rinard, “Taint-based directed whitebox
fuzzing,” in ICSE, 2009, pp. 474–484.
[9] T. Wang, T. Wei, G. Gu, and W. Zou, “Taintscope: A checksum-aware
directed fuzzing tool for automatic software vulnerability detection,” in
SP, 2010, pp. 497–512.
[10] D. Babić, L. Martignoni, S. McCamant, and D. Song, “Statically-directed
dynamic automated test generation,” in ISSTA, 2011, pp. 12–22.
[11] P. Godefroid, M. Y. Levin, and D. Molnar, “Automated whitebox fuzz
testing,” in NDSS, 2008.
[12] P. Godefroid, M. Y. Levin, and D. Molnar, “Sage: Whitebox fuzzing
for security testing,” Commun. ACM, vol. 55, no. 3, pp. 40–44, 2012.
[13] I. Haller, A. Slowinska, M. Neugschwandtner, and H. Bos, “Dowsing
for overﬂows: A guided fuzzer to ﬁnd buffer boundary violations,” in
USENIX Security, 2013, pp. 49–64.
[14] M. Neugschwandtner, P. Milani Comparetti, I. Haller, and H. Bos, “The
borg: Nanoprobing binaries for buffer overreads,” in CODASPY, 2015,
pp. 87–97.
[15] Peach fuzzer platform. [Online]. Available: http://www.peachfuzzer.
com/products/peach-platform/

[16] Spike fuzzer platform. [Online]. Available: http://www.immunitysec.
com/
[17] V.-T. Pham, M. Böhme, and A. Roychoudhury, “Model-based whitebox
fuzzing for program binaries,” in ASE, 2016, pp. 543–553.
[18] P. Godefroid, A. Kiezun, and M. Y. Levin, “Grammar-based whitebox
fuzzing,” in PLDI, 2008, pp. 206–215.
[19] X. Yang, Y. Chen, E. Eide, and J. Regehr, “Finding and understanding
bugs in c compilers,” in PLDI, 2011, pp. 283–294.
[20] C. Holler, K. Herzig, and A. Zeller, “Fuzzing with code fragments,” in
USENIX Security, 2012, pp. 445–458.
[21] S. Veggalam, S. Rawat, I. Haller, and H. Bos, “Ifuzzer: An evolutionary
interpreter fuzzer using genetic programming,” in ESORICS, 2016, pp.
581–601.
[22] mangleme. [Online]. Available: http://freecode.com/projects/mangleme/
[23] J. Ruderman. (2007) Introducing jsfunfuzz. [Online]. Available:
http://www.squarefree.com/2007/08/02/introducing-jsfunfuzz
[24] K. Dewey, J. Roesch, and B. Hardekopf, “Language fuzzing using
constraint logic programming,” in ASE, 2014, pp. 725–730.
[25] Xml grammar. [Online]. Available: https://github.com/antlr/
grammars-v4/tree/master/xml
[26] Antlr’s grammar list for different languages. [Online]. Available:
https://github.com/antlr/grammars-v4
[27] Y. LeCun, Y. Bengio, and G. Hinton, “Deep learning,” Nature, vol. 521,
no. 7553, pp. 436–444, 2015.
[28] G. Alliance. (2006) Sablotron. [Online]. Available: http://freecode.com/
projects/sablotron
[29] Gcov: Gnu coverage tool. [Online]. Available: https://gcc.gnu.org/
onlinedocs/gcc-4.8.1/gcc/Gcov.html
a
dynamic
binary
instrumentation
tool.
[30] Pin
[Online].
Available:
https://software.intel.com/en-us/articles/
pin-a-dynamic-binary-instrumentation-tool
[31] G. Mohr, M. Stack, I. Rnitovic, D. Avery, and M. Kimpton, “An
introduction to heritrix,” in 4th International Web Archiving Workshop,
2004.
[32] T. Parr, The Deﬁnitive ANTLR 4 Reference. Pragmatic Bookshelf,
2013.
[33] D. Veillard. (2003) Libxslt – the xslt c library for gnome. [Online].
Available: http://xmlsoft.org/libxslt/
[34] libxml2. [Online]. Available: http://www.xmlsoft.org/
[35] K. Serebryany, D. Bruening, A. Potapenko, and D. Vyukov, “Addresssanitizer: A fast address sanity checker,” in USENIX Annual Technical
Conference, 2012, pp. 309–318.
[36] Gﬂags and pageheap. [Online]. Available: https://msdn.microsoft.com/
en-us/library/windows/hardware/ff549561(v=vs.85).aspx
[37] Google patch reward program rules. [Online]. Available: https://www.
google.com.au/intl/iw/about/appsecurity/patch-rewards/index.html
[38] J. Watson, “Virtualbox: bits and bytes masquerading as machines,” Linux
Journal, vol. 2008, no. 166, 2008.
[39] N. Stephens, J. Grosen, C. Salls, A. Dutcher, R. Wang, J. Corbetta,
Y. Shoshitaishvili, C. Kruegel, and G. Vigna, “Driller: Augmenting
fuzzing through selective symbolic execution,” in NDSS, 2016.
[40] U. Kargén and N. Shahmehri, “Turning programs against each other:
high coverage fuzz-testing using binary-code mutation and dynamic
slicing,” in FSE, 2015, pp. 782–792.
[41] J. Viide, A. Helin, M. Laakso, P. Pietikäinen, M. Seppänen, K. Halunen,
R. Puuperä, and J. Röning, “Experiences with model inference assisted
fuzzing.” in USENIX Security, 2008.
[42] A. Householder and J. Foote, “Probability-based parameter selection
for black-box fuzz testing,” Software Engineering Institute, Carnegie
Mellon University, Tech. Rep. CMU/SEI-2012-TN-019, 2012.
[43] M. Woo, S. K. Cha, S. Gottlieb, and D. Brumley, “Scheduling black-box
mutational fuzzing,” in CCS, 2013, pp. 511–522.
[44] S. K. Cha, M. Woo, and D. Brumley, “Program-adaptive mutational
fuzzing,” in SP, 2015, pp. 725–741.
[45] M. Böhme, V.-T. Pham, and A. Roychoudhury, “Coverage-based greybox
fuzzing as markov chain,” in CCS, 2016, pp. 1032–1043.
