[1] E DGE , J. Namespaces in operation, part 7: Network namespaces.
https://lwn.net/Articles/580893/, 2014.

[2] F RIEBEL , T., AND B IEMUELLER , S. How to deal with lock
holder preemption. Xen Summit North America (2008).
[3] G ORMAN , M. mm: Export unusable free space index via debugfs. https://lkml.org/lkml/2010/4/20/307, 2010.
[4] G ORMAN , M., AND W HITCROFT, A. The what, the why and
the where to of anti-fragmentation. In Ottawa Linux Symposium
(2006), vol. 1, Citeseer, pp. 369–384.
[5] K ATCHER , J. Postmark: A new filesystem benchmark. Tech.
rep., Technical Report TR3022, Network Appliance, 1997.
[6] K ERRISK , M. Namespaces in operation, part 1: namespaces
overview. https://lwn.net/Articles/531114/, 2013.
[7] K IVITY, A., K AMAY, Y., L AOR , D., L UBLIN , U., AND
L IGUORI , A. kvm: the linux virtual machine monitor. In Proceedings of the Linux symposium (2007), vol. 1, pp. 225–230.
[8] M C K ENNEY, P. Priority-Boosting RCU Read-Side Critical Sections. https://lwn.net/Articles/220677, 2007.
[9] M C K ENNEY, P. E. Exploiting Deferred Destructions: An Analysis of Read-Copy-Update Techniques in Operating System kernels. PhD thesis, Oregon Health & Science University, 2004.
[10] M C K ENNEY, P. E. What is RCU? Part 2: Usage. http://lwn.
net/Articles/263130/, 2007.
[11] M C K ENNEY, P. E. Structured deferral: synchronization via procrastination. Commun. ACM 56, 7 (July 2013), 40–49.
[12] M C K ENNEY, P. E., A PPAVOO , J., K LEEN , A., K RIEGER , O.,
RUSSELL , R., S ARMA , D., AND S ONI , M. Read-Copy Update.
In AUUG Conference Proceedings (2001), AUUG, Inc., p. 175.
[13] M C K ENNEY, P. E., AND S LINGWINE , J. D. Read-copy update:
Using execution history to solve concurrency problems. In Parallel and Distributed Computing and Systems (1998), pp. 509–518.
[14] O UYANG , J., AND L ANGE , J. R. Preemptable ticket spinlocks:
Improving consolidated performance in the cloud. In ACM SIGPLAN Notices (2013), vol. 48, ACM, pp. 191–200.
[15] S ARMA , D., AND M C K ENNEY, P. E. Making RCU safe for deep
sub-millisecond response realtime applications. In Proceedings
of the 2004 USENIX Annual Technical Conference (FREENIX
Track) (2004), pp. 182–191.
[16] S HA , L., R AJKUMAR , R., AND L EHOCZKY, J. P. Priority inheritance protocols: An approach to real-time synchronization. IEEE
Transactions on Computers 39, 9 (1990), 1175–1185.
[17] S UKWONG , O., AND K IM , H. S. Is co-scheduling too expensive for SMP VMs? In Proceedings of the Sixth Conference on
Computer Systems (2011), ACM, pp. 257–272.
[18] U HLIG , V., L E VASSEUR , J., S KOGLUND , E., AND DAN NOWSKI , U. Towards scalable multiprocessor virtual machines.
In Virtual Machine Research and Technology Symposium (2004),
pp. 43–56.
[19] WALDSPURGER , C. A. Memory resource management in
VMware ESX server. ACM SIGOPS Operating Systems Review
36, SI (2002), 181–194.
[20] W ELLS , P. M., C HAKRABORTY, K., AND S OHI , G. S. Hardware support for spin management in overcommitted virtual machines. In Proceedings of the 15th International Conference
on Parallel Architectures and Compilation Techniques (2006),
ACM, pp. 124–133.
[21] W ENG , C., L IU , Q., Y U , L., AND L I , M. Dynamic adaptive
scheduling for virtual machines. In Proceedings of the 20th International Symposium on High Performance Distributed Computing (2011), ACM, pp. 239–250.
[22] W ILLIAMS , D., JAMJOOM , H., L IU , Y.-H., AND W EATHER SPOON , H. Overdriver: Handling memory overload in an oversubscribed cloud. In ACM SIGPLAN Notices (2011), vol. 46,
ACM, pp. 205–216.

[23] Z HANG , L., C HEN , Y., D ONG , Y., AND L IU , C. Lock-visor: An
efficient transitory co-scheduling for MP guest. In Proceedings
of the 2012 41st International Conference on Parallel Processing
(Washington, DC, USA, 2012), ICPP ’12, IEEE Computer Society, pp. 88–97.
