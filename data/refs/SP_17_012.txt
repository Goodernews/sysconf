[1] Z. Wang, X. Jiang, W. Cui, X. Wang, and M. Grace, “Reformat:
Automatic reverse engineering of encrypted messages,” in Proceedings
of the 14th European Conference on Research in Computer Security
(ESORICS’09), 2009.

[2] J. Caballero, P. Poosankam, C. Kreibich, and D. Song, “Dispatcher:
Enabling active botnet
inﬁltration using automatic protocol reverse-
engineering,” in Proceedings of the 16th ACM Conference on Computer
and Communications Security (CCS’09), 2009.

[3] J. Calvet, C. R. Davis, and P.-M. Bureau, “Malware authors don’t learn,
and that’s good!” in Proceedings of the 4th International Conference on
Malicious and Unwanted Software (MALWARE’09), 2009.

[4] X. Ugarte-Pedrero, D. Balzarotti, I. Santos, and P. G. Bringas, “SoK:
Deep packer inspection: A longitudinal study of the complexity of run-
time packers,” in Proceedings of the 36th IEEE Symposium on Security
& Privacy, 2015.

[5] K. A. Roundy and B. P. Miller, “Binary-code obfuscations in prevalent

packer tools,” ACM Computing Surveys, vol. 46, no. 1, 2013.

[6] A. Kharraz, W. Robertson, D. Balzarotti, L. Bilge, and E. Kirda, “Cutting
the Gordian Knot: A Look Under the Hood of Ransomware Attacks,”
in Proceedings of the 12th International Conference on Detection of
Intrusions and Malware & Vulnerability Assessment (DIMVA’15), 2015.
[7] Bromium Labs, “Understanding Crypto-Ransomware,” http://www.

bromium.com/sites/default/ﬁles/bromium-report-ransomware.pdf.

[8] F. Leder and T. Werner, “Know your enemy: Containing conﬁcker,” The

[9] P. Porras, H. Saidi, and V. Yegneswaran, “Conﬁcker C P2P Protocol and

Honeynet Project, Tech. Rep., 2009.

Implementation, September 2009.”

[10] G. Tenebro,

“Waledac–an

overview,”

https://www.symantec.com/

connect/blogs/waledac-overview, 2009, Symantec Ofﬁcial Blog.

[11] J. Calvet, J. M. Fernandez, and J.-Y. Marion, “Aligot: Cryptographic
function identiﬁcation in obfuscated binary programs,” in Proceedings of
the 2012 ACM Conference on Computer and Communications Security
(CCS’12), 2012.

[12] F. Gröbert, C. Willems, and T. Holz, “Automated identiﬁcation of
cryptographic primitives in binary programs,” in Proceedings of the 14th
International Conference on Recent Advances in Intrusion Detection
(RAID’11), 2011.

[13] X. Li, X. Wang, and W. Chang, “CipherXRay: Exposing cryptographic
operations and transient secrets from monitored binary execution,” IEEE
Transactions on Dependable and Secure Computing, vol. 11, no. 2,
March 2014.

[14] N. Lutz, “Towards revealing attacker’s intent by automatically decrypt-
ing network trafﬁc,” Mémoire de maıtrise, ETH Zürich, Switzerland,
2008.

[15] P. Lestringant, F. Guihéry, and P.-A. Fouque, “Automated identiﬁcation
of cryptographic primitives in binary code with data ﬂow graph isomor-
phism,” in Proceedings of the 10th ACM Symposium on Information,
Computer and Communications Security (ASIACCS’15), 2015.

[16] C. H. Malin, E. Casey, and J. M. Aquilina, Malware Forensics: Inves-

tigating and Analyzing Malicious Code. Syngress, 2008.

[17] W. Yan, Z. Zhang, and N. Ansari, “Revealing packed malware,” IEEE

Security & Privacy, vol. 6, no. 5, pp. 65–69, 2008.

[18] J. Caballero, P. Poosankam, S. McCamant, D. Babi ´c, and D. Song,
“Input generation via decomposition and re-stitching: Finding bugs in
malware,” in Proceedings of the 17th ACM Conference on Computer
and Communications Security (CCS’10), 2010.

[19] J. Ming, D. Xu, and D. Wu, “Memoized semantics-based binary difﬁng
with application to malware lineage inference,” in Proceedings of the
30th IFIP SEC 2015 International Information Security and Privacy
Conference (IFIP SEC’15), 2015.

[20] ——, “MalwareHunt: semantics-based malware difﬁng speedup by
normalized basic block memoization,” Journal of Computer Virology
and Hacking Techniques, 2016.

[21] P. OKane, S. Sezer, and K. McLaughlin, “Obfuscation: The hidden

malware,” IEEE Security and Privacy, vol. 9, no. 5, 2011.

[22] I. Levin, “Draft Crypto Analyzer (DRACA),” http://www.literatecode.

com/draca.

[23] L. Auriemma, “Signsrch tool,” http://aluigi.altervista.org/mytoolz.htm,

tool for searching signatures inside ﬁles.

[24] F. Matenaar, A. Wichmann, F. Leder, and E. Gerhards-Padilla, “CIS:
The crypto intelligence system for automatic detection and localization
of cryptographic functions in current malware,” in Proceedings of the
7th International Conference on Malicious and Unwanted Software
(MALWARE’12), 2012.

[25] C. Linn and S. Debray, “Obfuscation of executable code to improve
resistance to static disassembly,” in Proceedings of
the 10th ACM
Conference on Computer and Communications Security (CCS’03), 2003.
[26] A. Moser, C. Kruegel, and E. Kirda, “Limits of static analysis for
the 23rd Annual Computer

malware detection,” in Proceedings of
Security Applications Conference (ACSAC’07), 2007.

[27] I. V. Popov, S. K. Debray, and G. R. Andrews, “Binary obfuscation
using signals,” in Proceedings of the 16th USENIX Security Symposium
(USENIX Security’07), 2007.

[28] D. D. Hosfelt, “Automated detection and classiﬁcation of cryptographic
algorithms in binary programs through machine learning,” Master’s
thesis, Johns Hopkins University, March 2015.

[29] R. Zhao, D. Gu, J. Li, and R. Yu, “Detection and analysis of crypto-
graphic data inside software,” in Proceedings of the 14th International
Conference on Information Security (ISC’11), 2011.

[30] C. Collberg and J. Nagra, Surreptitious Software: Obfuscation, Water-
marking, and Tamperprooﬁng for Software Protection. Addison-Wesley
Professional, 2009, ch. 4.4, pp. 258–276.

[31] M. Sikorski and A. Honig, Practical Malware Analysis: The Hands-On
Guide to Dissecting Malicious Software. No Starch Press, 2012, ch. 13,
pp. 269–296.

[32] P. Schmitt, “A Different Kind of Crypto: Crypto Algorithms Designed

[33] J. Grunzweig,for Payload Obfuscation,” BlackHat 2014.
the injection module,”https://www.trustwave.com/Resources/SpiderLabs-Blog/
Digging-Into-the-New-Apache-Injection-Module/, 2013, SpiderLabs
Blog.new apache “Digging into

[34] C. Collberg, C. Thomborson, and D. Low, “A taxonomy of obfuscating
transformations,” The University of Auckland, Tech. Rep., 1997.

[35] C. Wang, J. Davidson, J. Hill, and J. Knight, “Protection of software-
based survivability mechanisms,” in Proceedings of International Con-
ference on Dependable Systems and Networks (DSN’01), 2001.

[36] C. Collberg, C. Thomborson, and D. Low, “Manufacturing cheap, re-
silient, and stealthy opaque constructs,” in Proceedings of the 25th ACM
SIGPLAN-SIGACT symposium on Principles of programming languages
(POPL’98), 1998.

[37] A. Viticchié, L. Regano, M. Torchiano, C. Basile, M. Ceccato, P. Tonella,
and R. Tiella, “Assessment of source code obfuscation techniques,” in
Proceedings of the 16th IEEE International Working Conference on
Source Code Analysis and Manipulation (SCAM’16), 2016.

[38] Z. Lin, X. Zhang, and D. Xu, “Automatic reverse engineering of data
structures from binary execution,” in Proceedings of the 17th Network
and Distributed System Security Symposium (NDSS’10), 2010.

[39] J. Lee, T. Avgerinos, and D. Brumley, “TIE: Principled reverse engineer-
ing of types in binary programs,” in Proceedings of the 18th Network
and Distributed System Security Symposium (NDSS’11), 2011.

[40] J. C. King, “Symbolic execution and program testing,” Commun. ACM,

vol. 19, no. 7, pp. 385–394, Jul. 1976.

[41] P. Godefroid, M. Y. Levin, and D. Molnar., “Automated whitebox fuzz
testing,” in Proceedings of the 15th Annual Network and Distributed
System Security Symposium (NDSS’08), 2008.

[42] J. Vanegue, S. Heelan, and R. Rolles, “SMT solvers for software
security,” in Proceedings of the 6th USENIX Conference on Offensive
Technologies (WOOT’12), 2012.

[43] E. Bounimova, P. Godefroid, and D. Molnar, “Billions and billions of
constraints: Whitebox fuzz testing in production,” in Proceedings of the
International Conference on Software Engineering (ICSE’13), 2013.

[44] C. Cadar, V. Ganesh, P. Pawlowski, D. Dill, and D. Engler.,
“EXE:automatically generating inputs of death,” in Proceedings of the
ACM Conference on Computer and Communications Security (CCS’06),
2006.

[45] C. Cadar, D. Dunbar, and D. Engler., “KLEE: Unassisted and automatic
generation of high-coverage tests for complex systems programs,” in
Proceedings of the USENIX Symposium on Operating Systems Design
and Implementation (OSDI’08), 2008.

[46] D. Brumley, I. Jager, T. Avgerinos, and E. J. Schwartz, “BAP: A binary
analysis platform,” in Proceedings of the 23rd international conference
on computer aided veriﬁcation (CAV’11), 2011.

[47] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. G. Kang,
Z. Liang, J. Newsome, P. Poosankam, and P. Saxena, “BitBlaze: A new
approach to computer security via binary analysis,” in 4th International
Conference on Information Systems Security. Keynote invited paper,
2008.

[48] D. Gao, M. Reiter, and D. Song, “BinHunt: Automatically ﬁnding
semantic differences in binary programs,” in Proceedings of the 10th
International Conference on Information and Communications Security
(ICICS’08), 2008.

[49] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applications
to software plagiarism detection,” in Proceedings of the 22nd ACM SIG-
SOFT International Symposium on Foundations of Software Engineering
(FSE’14), 2014.

[50] M. Egele, M. Woo, P. Chapman, and D. Brumley, “Blanket execution:
Dynamic similarity testing for program binaries and components,” in
23rd USENIX Security Symposium (USENIX Security’14), 2014.

[51] J. Pewny, B. Garmany, R. Gawlik, C. Rossow, and T. Holz, “Cross-
architecture bug search in binary executables,” in Proceedings of the
36th IEEE Symposium on Security and Privacy (S&P’15), 2015.

[52] M. Chandramohan, Y. Xue, Z. Xu, Y. Liu, C. Y. Cho, and T. H. B. Kuan,
“BinGo: Cross-architecture cross-os binary search,” in Proceedings of
the 2016 ACM SIGSOFT International Symposium on the Foundations
of Software Engineering (FSE’16), 2016.

[53] L. Luo, J. Ming, D. Wu, P. Liu, and S. Zhu, “Semantics-based
obfuscation-resilient binary code similarity comparison with applications
to software and algorithm plagiarism detection,” IEEE Transactions on
Software Engineering, 2017.

[54] S. K. Udupa, S. K. Debray, and M. Madou, “Deobfuscation: Reverse
the 12th Working

engineering obfuscated code,” in Proceedings of
Conference on Reverse Engineering (WCRE’05), 2005.

[55] J. Ming, D. Xu, L. Wang, and D. Wu, “LOOP: Logic-oriented opaque
predicate detection in obfuscated binary code,” in Proceedings of the
22nd ACM SIGSAC Conference on Computer and Communications
Security (CCS’15), 2015.

[56] L. Martignoni, M. Christodorescu, and S. Jha, “OmniUnpack: Fast,
generic, and safe unpacking of malware,” in Proceedings of the 23rd
Annual Computer Security Applications Conference(ACSAC’07), 2007.
[57] G. C. Necula, S. McPeak, S. P. Rahul, and W. Weimer, “CIL: In-
termediate language and tools for analysis and transformation of C
programs,” in Proceedings of
the 11th International Conference on
Compiler Construction (CC’02), 2002.

[58] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney,
S. Wallace, V. J. Reddi, and K. Hazelwood, “Pin: building customized
program analysis tools with dynamic instrumentation,” in Proceedings of
the 2005 ACM SIGPLAN conference on Programming language design
and implementation (PLDI’05), 2005.

[59] P. Royal, M. Halpin, D. Dagon, R. Edmonds, and W. Lee, “PolyUnpack:
Automating the hidden-code extraction of unpack-executing malware,”
in Proceedings of the 2006 Annual Computer Security Applications
Conference (ACSAC’06), 2006.

[60] W. Zhu, C. Thomborson, and F.-Y. Wang, “Applications of homomorphic
functions to software obfuscation,” in Proceedings of the 2006 Inter-
national Workshop on Intelligence and Security Informatics (WISI’06),
2006.

[61] V. Ganesh and D. L. Dill, “A decision procedure for bit-vectors and
arrays,” in Proceedings of the International Conference on Computer
Aided Veriﬁcation (CAV’07), 2007.

[62] D. J. Wheeler and R. M. Needham, “Tea, a tiny encryption algorithm,”
in Fast Software Encryption. Springer, 1994, pp. 363–366.

[63] J. Daemen and V. Rijmen, The design of Rijndael: AES–the advanced
encryption standard. Springer Science & Business Media, 2013.

[64] R. Rivest, “The MD5 Message-Digest Algorithm,” http://www.rfc-base.

org/txt/rfc-1321.txt.

[65] R. L. Rivest, A. Shamir, and L. Adleman, “A method for obtaining digital
signatures and public-key cryptosystems,” Communications of the ACM,
vol. 21, no. 2, pp. 120–126, 1978.

[66] Chun, “x3chun’s cryptosearcher,” http://x3chun.reteam.org/, 2004.
[67] I. Guilfanov, “Ida-pro/plugins/ﬁndcrypt2,” https://www.aldeid.com/wiki/

IDA-Pro/plugins/FindCrypt2, 2015, aldeid.

[68] C. Eagle, The IDA pro book: the unofﬁcial guide to the world’s most
popular disassembler. No Starch Press, 2011.

[69] J. R. Ullmann, “An algorithm for subgraph isomorphism,” Journal of
the ACM (JACM), vol. 23, no. 1, pp. 31–42, 1976.

[70] P. Junod, J. Rinaldini, J. Wehrli, and J. Michielin, “Obfuscator-LLVM
– software protection for the masses,” in Proceedings of the IEEE/ACM
1st International Workshop on Software Protection, SPRO’15, Firenze,
Italy, May 19th, 2015, 2015.

[71] I. You and K. Yim, “Malware obfuscation techniques: A brief survey,”
in Proceedings of the 2010 International Conference on Broadband,
Wireless Computing, Communication and Applications, 2010.

[72] D. Williams, “The tiny encryption algorithm (tea),” Network Security,
pp. 1–14, 2008.

[73] A. Moser, C. Kruegel, and E. Kirda, “Exploring multiple execution paths
for malware analysis,” in Proceedings of the 2007 IEEE Symposium of
Security and Privacy, 2007.

[74] Q. Zhao, I. Cutcutache, and W.-F. Wong, “PiPA: Pipelined proﬁling and
analysis on multicore systems,” ACM Transactions on Architecture and
Code Optimization, vol. 7, no. 3, Dec. 2010.

[75] D. Kirat and G. Vigna, “MalGene: Automatic extraction of malware
analysis evasion signature,” in Proceedings of the 22nd ACM SIGSAC
Conference on Computer and Communications Security (CCS’15), 2015.
[76] M. Lindorfer, C. Kolbitsch, and P. M. Comparetti, “Detecting
environment-sensitive malware,” in Proceedings of the 14th Interna-
tional Symposium on Recent Advances in Intrusion Detection (RAID
2011), Menlo Park, CA, USA, September 2011.

[77] D. Kirat, G. Vigna, and C. Kruegel, “BareCloud: Bare-metal analysis-
based evasive malware detection,” in Proceedings of the 23rd USENIX
Conference on Security Symposium, 2014.

[78] A. Dinaburg, P. Royal, M. Sharif, and W. Lee, “Ether: Malware analysis
via hardware virtualization extensions,” in Proceedings of the ACM
Conference on Computer and Communications Security (CCS), 2008.
