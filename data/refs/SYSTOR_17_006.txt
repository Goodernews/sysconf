

[1] Busybox. https://busybox.net. Accessed: 2016-09-23.

[2] hackbench. http://people.redhat.com/mingo/
cfs-scheduler/tools/hackbench.c. Accessed:
2016-09-23.

[3] LTTng. http://Ittng.org. Accessed: 2016-09-23.

[4] perf.
https: / /perf.wiki.kernel.org/index.php/Main_Page.
Accessed: 2017-01-23.

[5] systemtap. https://sourceware.org/systemtap/.
Accessed: 2017-01-23.

[6] N. Binkert, B. Beckmann, G. Black, S. K. Reinhardt,
A. Saidi, A. Basu, J. Hestness, D. R. Hower,

T. Krishna, S. Sardashti, R. Sen, K. Sewell,

M. Shoaib, N. Vaish, M. D. Hill, and D. A. Wood. The
gem5 simulator. SIGARCH Comput. Archit. News,
39(2):1-7, Aug. 2011.

[7] A. Busse, R. Karnapke, and H.-U. Heiss. Cobas:
Introducing a component based scheduling framework.
In 2015 International Symposium on Computer
Architecture and High Performance Computing
Workshop (SBAC-PADW), pages 79-84, Oct. 2015.

[8] J. Corbet. Extending extended bpf.
https: //lwn.net/Articles/603983/, July 2014.
Accessed: 2017-01-23.

[9] M. Desnoyers and M. R. Dagenais. The LT'Tng tracer:
A low impact performance and behavior monitor for
gnu/linux. In Proceedings of the 2006 Linux
Symposium, pages 209-224, July 2006.

[10] F. C. Eigler. Problem solving with systemtap. In
Proceedings of the 2006 Linux Symposium, pages
261-268, July 2006.

[11] E. R. Gansner and S. C. North. An open graph
visualization system and its applications to software
engineering. Softw. Pract. Exper., 30(11):1203-1233,
Sept. 2000.

[12] S. Rostedt. ftrace â€” Function Tracer. https://www.
kernel.org/doc/Documentation/trace/ftrace.txt, 2008.
Accessed: 2017-01-23.

[13] V. M. Weaver. Linux perf_event features and overhead.
Appeared in the 2013 FastPath Workshop, Apr. 2013.

[14] V. M. Weaver. Self-monitoring overhead of the linux
perf_event performance counter interface. In 2015
IEEE International Symposium on Performance
Analysis of Systems and Software (ISPASS), pages
102-111, Mar. 2015.
