[1] R. Allen and K. Kennedy. 2001. Optimizing Compilers for Modern Architectures: A Dependence-based Approach. Morgan

Kaufmann Publishers.



[2] Uday Bondhugula, Albert Hartono, J. Ramanujam, and P. Sadayappan. 2008a. http://pluto-compiler.sourceforge.net.



[3] Uday Bondhugula, Albert Hartono, J. Ramanujam, and P. Sadayappan. 2008b. A Practical Automatic Polyhedral Program

Optimization System. In ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI).



[4] Lam Chi-Chung, P Sadayappan, and Rephael Wenger. 1997. On optimizing a class of multi-dimensional loops with reduction

for parallel execution. Parallel Processing Letters 7, 02 (1997), 157-168.



[5] Keith Cooper, Jason Eckhardt, and Ken Kennedy. 2008. Redundancy elimination revisited. In Proceedings of the 17th

international conference on Parallel architectures and compilation techniques. ACM, 12-21.



[6] Steven J Deitz, Bradford L Chamberlain, and Lawrence Snyder. 2001. Eliminating redundancies in sum-of-product array

computations. In Proceedings of the 15th international conference on Supercomputing. ACM, 65-77.



[7] Yufei Ding, Lin Ning, Hui Guan, and Xipeng Shen. 2017. Generalizations of the theory and deployment of triangular

inequality for compiler-based strength reduction. In Proceedings of the 38th ACM SIGPLAN Conference on Programming

Language Design and Implementation. ACM, 33-48.



[8] Y. Ding, X. Shen, M. Musuvathi, and T. Mytkowicz. 2015. TOP: A Framework for Enabling Algorithmic Optimizations for

Distance-Related Problems. In Proceedings of the 41st International Conference on Very Large Data Bases.



[9] Jonathan Drake and Greg Hamerly. 2012. Accelerated k-means with adaptive distance bounds. In 5th NIPS Workshop on

Optimization for Machine Learning.



[10] Charles Elkan. 2003. Using the triangle inequality to accelerate k-means. In ICML, Vol. 3. 147-153.



[11] AM Fahim, AM Salem, FA Torkey, and MA Ramadan. 2006. An efficient enhanced k-means clustering algorithm. Journal of

Zhejiang University SCIENCE A, Springer 7, 10 (2006), 1626-1633.



[12] Andrew V Goldberg and Chris Harrelson. 2005. Computing the shortest path: A search meets graph theory. In Proceedings

of the sixteenth annual ACM-SIAM. 156-165.



[13] Michael Greenspan, Guy Godin, and Jimmy Talbot. 2000. Acceleration of binning nearest neighbor methods. In Vision

Interface, IEEE. 337-344.



[14] Gautam Gupta and Sanjay V Rajopadhye. 2006. Simplifying reductions.. In POPL, Vol. 6. 30-41.



[15] Ronald J Gutman. 2004. Reach-Based Routing: A New Approach to Shortest Path Algorithms Optimized for Road Networks..

In ALENEX/ANALC. 100-111.



[16] Greg Hamerly. 2010. Making k-means Even Faster.. In SDM, SIAM. 130-140.



[17] Matthew A Hammer, Joshua Dunfield, Kyle Headley, Nicholas Labich, Jeffrey S Foster, Michael Hicks, and David Van Horn.

2015. Incremental Computation with Names. arXiv preprint arXiv:1503.07792 (2015).



[18] Matthew A Hammer, Khoo Yit Phang, Michael Hicks, and Jeffrey S Foster. 2014. Adapton: Composable, demand-driven

incremental computation. In ACM SIGPLAN Notices, Vol. 49. ACM, 156-166.



[19] Albert Hartono, Qingda Lu, Xiaoyang Gao, Sriram Krishnamoorthy, Marcel Nooijen, Gerald Baumgartner, David E Bernholdt,

Venkatesh Choppella, Russell M Pitzer, J Ramanujam, et al. 2006. Identifying cost-effective common subexpressions to

reduce operation count in tensor contraction evaluations. In International Conference on Computational Science. Springer,

267-275.



[20] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 74. Publication date: October 2017.

74:28 Yufei Ding, Xipeng Shen



[21] Albert Hartono, Alexander Sibiryakov, Marcel Nooijen, Gerald Baumgartner, David E Bernholdt, So Hirata, Chi-Chung

Lam, Russell M Pitzer, J Ramanujam, and P Sadayappan. 2005. Automated operation minimization of tensor contraction

expressions in electronic structure calculations. In International Conference on Computational Science. Springer, 155-164.



[22] David Joyner, Ondiej Certik, Aaron Meurer, and Brian E Granger. 2012. Open source computer algebra systems: SymPy.

ACM Communications in Computer Algebra 45, 3/4 (2012), 225-234.



[23] Chris Lattner and Vikram Adve. 2008. http://clang.llvm.org.



[24] Wang Kay Ngai, Ben Kao, Chun Kit Chui, Reynold Cheng, Michael Chau, and Kevin Y Yip. 2006. Efficient clustering of

uncertain data. In Data Mining, 2006. ICDMâ€™06, IEEE. 436-445.



[25] Oswaldo Olivo, Isil Dillig, and Calvin Lin. 2015. Static detection of asymptotic performance bugs in collection traversals. In

ACM SIGPLAN Notices, Vol. 50. ACM, 369-378.



[26] Robert Paige and Shaye Koenig. 1982. Finite differencing of computable expressions. ACM Transactions on Programming

Languages and Systems (TOPLAS) 4, 3, 402-454.



[27] Yonghong Song and Zhiyuan Li. 1999. New tiling techniques to improve cache temporal locality. ACM SIGPLAN Notices 34,

5 (1999), 215-228.



[28] TR. Omitted to Avoid Conflicts with Blind Review, 2017. Generalized Loop Redundancy Elimination upon Formula-Based

Redundancy Removal. In http://goo.gl/j4UKAp.



[29] Jing Wang, Jingdong Wang, Qifa Ke, Gang Zeng, and Shipeng Li. 2012. Fast approximate k-means via cluster closures. In

Computer Vision and Pattern Recognition (CVPR), IEEE. 3037-3044.



[30] Xueyi Wang. 2011. A fast exact k-nearest neighbors algorithm for high dimensional search using k-means clustering and

triangle inequality. In Neural Networks (IJCNN), IEEE. 1293-1299.



[31] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 74. Publication date: October 2017.
