[1] M. Abadi, M. Budiu, U. Erlingsson, and J. Ligatti. 2005. Control-flow Integrity. In CCS.



[2] G. Balakrishnan and T. Reps. 2010. WYSINWYX: What You See Is Not What You eXecute. TOPLAS 32, 6 (2010).



[3] S. Bansal and A. Aiken. 2006. Automatic Generation of Peephole Superoptimizers. In ASPLOS.



[4] S. Bansal and A. Aiken. 2008. Binary Translation Using Peephole Superoptimizers. In OSDI.



[5] D. Brumley, I. Jager, T. Avgerinos, and E. Schwartz. 2011. BAP: A Binary Analysis Platform. In CAV.



[6] B. Dutertre and L. de Moura. 2006. Yices: An SMT Solver. (2006). http://yices.csL sri.com/.



[7] K, ElWazeer, K. Anand, A. Kotha, M. Smithson, and R. Barua. 2013. Scalable Variable and Data Type Detection in a Binary

Rewriter. In PLDI.



[8] U. Erlingsson and F.B. Schneider. 1999. SASI Enforcement of Security Policies: A Retrospective. In Workshop on New Security

Paradigms.



[9] T. Gvero and V. Kuncak. 2015. Synthesizing Java expressions from free-form queries. In OOPSLA.



[10] J. Henning. 2006. SPEC CPU2006 Benchmark Descriptions. SIGARCH Comput. Archit. News 34, 4 (2006), 1-17.



[11] B. Hsu and J. Glass. 2008. Iterative Language Model Estimation: Efficient Data Structure and Algorithms. In Interspeech.



[12] R. Joshi, G. Nelson, and K. Randall. 2002. Denali: A Goal-directed Superoptimizer. In PLDI.



[13] J. Lim, A. Lal, and T. Reps. 2011. Symbolic Analysis via Semantic Reinterpretation. Softw. Tools for Tech. Transfer 13, 1 (2011),

61-87,



[14] J. Lim and T. Reps. 2013. TSL: A system for generating abstract interpreters and its application to machine-code analysis.

TOPLAS 35, 4 (2013).



[15] H. Massalin. 1987. Superoptimizer: A Look at the Smallest Program. In ASPLOS.



[16] F, Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg,

J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning

in Python. Journal of Machine Learning Research 12 (2011), 2825-2830.



[17] P. Phothilimthana, A. Thakur, R. Bodik, and D. Ghurjati. 2016a. GreenThumb: Superoptimizer Construction Framework.

UCB/EECS-2016-8. University of California—Berkeley Tech Report. http://www.eecs.berkeley.edu/Pubs/TechRpts/2016/

EECS-2016-8.pdf



[18] P. Phothilimthana, A. Thakur, R. Bodik, and D. Ghurjati. 2016b. Scaling up Superoptimization. In ASPLOS.



[19] V. Raychev, M. Vechev, and A. Krause. 2015. Predicting Program Properties from“Big Code". In POPL.



[20] V. Raychev, M. Vechev, and E. Yahav. 2014. Code Completion with Statistical Language Models. In PLDI.



[21] H. Saidi. 2008. Logical Foundation for Static Analysis: Application to Binary Static Analysis for Security. ACM SIGAda Ada

Letters 28, 1 (2008), 96-102.



[22] E. Schkufza, R. Sharma, and A. Aiken. 2013. Stochastic Superoptimization. In ASPLOS.



[23] A. Slowinska, T. Stancescu, and H. Bos. 2012. Body Armor for Binaries: Preventing Buffer Overflows Without Recompilation.

In ATC.



[24] D. Song, D. Brumley, H. Yin, J. Caballero, I. Jager, M. Kang, Z. Liang, J. Newsome, P. Poosankam, and P. Saxena. 2008.

BitBlaze: A New Approach to Computer Security via Binary Analysis. In Int. Conf: on Information Systems Security.



[25] V. Srinivasan and T. Reps. 2015a. Partial Evaluation of Machine Code. In OOPSLA.



[26] V. Srinivasan and T. Reps. 2015b. Synthesis of Machine Code from Semantics. In PLDI.



[27] V. Srinivasan and T. Reps. 2016. An Improved Algorithm for Slicing Machince Code. In OOPSLA.



[28] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 61. Publication date: October 2017.

61:26 Venkatesh Srinivasan, Ara Vartanian, and Thomas Reps



[29] V. Srinivasan, T. Sharma, and T. Reps. 2016. Speeding-up Machine-Code Synthesis. In OOPSLA.

B. Yadegari, B. Johannesmeyer, B. Whitely, and S. Debray. 2015. A Generic Approach to Automatic Deobfuscation of

Executable Code. In S&P.



[30] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 61. Publication date: October 2017.
