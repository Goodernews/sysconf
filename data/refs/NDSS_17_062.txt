[1] M. Abadi, M. Budiu, ´U. Erlingsson, and J. Ligatti. Control-ﬂow
integrity. In ACM Conference on Computer and Communications
Security, CCS, 2005.

[2] J. P. Anderson. Computer security technology planning study.

volume 2. Technical report, DTIC Document, 1972.

[3] M. Backes, T. Holz, B. Kollenda, P. Koppe, S. N¨urnberger, and
J. Pewny. You can run but you can’t read: Preventing disclosure
exploits in executable code. In ACM Conference on Computer
and Communications Security, CCS, 2014.

[4] M. Backes and S. N¨urnberger. Oxymoron: Making ﬁne-grained
memory randomization practical by allowing code sharing. In
23rd USENIX Security Symposium, USENIX Sec, 2014.

13

[5] A. Barresi, K. Razavi, M. Payer, and T. R. Gross. CAIN: Silently

Breaking ASLR in the Cloud. In WOOT, 2015.

[6] V. Bartenev.

in nginx boost perfor-
mance 9x, 2015, https://www.nginx.com/blog/thread-pools-boost-
performance-9x/.

Thread pools

[7] D. Bigelow, T. Hobson, R. Rudd, W. Streilein, and H. Okhravi.
Timely rerandomization for mitigating memory disclosures. In
ACM Conference on Computer and Communications Security,
CCS, 2015.

[8] A. Bittau, A. Belay, A. J. Mashtizadeh, D. Mazi`eres, and
D. Boneh. Hacking blind. In 35th IEEE Symposium on Security
and Privacy, S&P, 2014.

[9] E. Bosman, K. Razavi, H. Bos, and C. Giuffrida. Dedup est
machina: Memory deduplication as an advanced exploitation
vector. In 37th IEEE Symposium on Security and Privacy, 2016.
[10] T. Bowden, B. Bauer, J. Nerin, S. Feng, and S. Seibold. The

/proc ﬁlesystem. Linux Kernel Documentation, 2009.

[11] K. Braden, S. Crane, L. Davi, M. Franz, P. Larsen, C. Liebchen,
and A.-R. Sadeghi. Leakage-resilient layout randomization for
mobile devices. In 23rd Annual Network and Distributed System
Security Symposium, NDSS, 2016.

[12] N. Burow, S. A. Carr, S. Brunthaler, M. Payer, J. Nash, P. Larsen,
and M. Franz. Control-ﬂow integrity: Precision, security, and
performance. CoRR, abs/1602.04056, 2016.

[13] P. Chen, J. Xu, Z. Lin, D. Xu, B. Mao, and P. Liu. A practical
approach for adaptive data structure layout randomization. In
20th European Symposium on Research in Computer Security,
ESORICS, 2015.

[14] C. Cowan, S. Beattie, J. Johansen, and P. Wagle. Pointguard:
protecting pointers from buffer overﬂow vulnerabilities. In 12th
USENIX Security Symposium, USENIX Sec, 2003.

[15] S. Crane, C. Liebchen, A. Homescu, L. Davi, P. Larsen, A.-R.
Sadeghi, S. Brunthaler, and M. Franz. Readactor: Practical code
In 36th IEEE
randomization resilient to memory disclosure.
Symposium on Security and Privacy, S&P, 2015.

[16] S. Crane, S. Volckaert, F. Schuster, C. Liebchen, P. Larsen,
L. Davi, A.-R. Sadeghi, T. Holz, B. D. Sutter, and M. Franz. It’s a
TRaP: Table randomization and protection against function-reuse
attacks. In ACM Conference on Computer and Communications
Security, CCS, 2015.

[17] L. Davi, C. Liebchen, A.-R. Sadeghi, K. Z. Snow, and F. Monrose.
Isomeron: Code randomization resilient to (Just-In-Time) return-
oriented programming. In 22nd Annual Network and Distributed
System Security Symposium, NDSS, 2015.

[18] I. Evans, S. Fingeret, J. Gonzalez, U. Otgonbaatar, T. Tang,
H. Shrobe, S. Sidiroglou-Douskos, M. Rinard, and H. Okhravi.
Missing the point(er): On the effectiveness of code pointer
integrity. In 36th IEEE Symposium on Security and Privacy,
S&P, 2015.

[19] I. Evans, F. Long, U. Otgonbaatar, H. Shrobe, M. Rinard,
H. Okhravi, and S. Sidiroglou-Douskos. Control jujutsu: On
the weaknesses of ﬁne-grained control ﬂow integrity. In ACM
Conference on Computer and Communications Security, CCS,
2015.

[20] R. Faulkner and R. Gomes. The process ﬁle system and process
model in unix system v. In USENIX Technical Conference, ATC,
1991.

[21] R. Gawlik, B. Kollenda, P. Koppe, B. Garmany, and T. Holz.
Enabling client-side crash-resistance to overcome diversiﬁcation
and information hiding. In 23rd Annual Network and Distributed
System Security Symposium, NDSS, 2016.

[22] J. Gionta, W. Enck, and P. Ning. HideM: Protecting the contents
of userspace memory in the face of disclosure vulnerabilities.
In 5th ACM Conference on Data and Application Security and
Privacy, CODASPY, 2015.

[23] C. Giuffrida, A. Kuijsten, and A. S. Tanenbaum. Enhanced
operating system security through efﬁcient and ﬁne-grained ad-
dress space randomization. In 21st USENIX Security Symposium,

USENIX Sec, 2012.

[24] E. G¨oktas¸, R. Gawlik, B. Kollenda, E. Athanasopoulos, G. Por-
tokalidis, C. Giuffrida, and H. Bos. Undermining information
In 25th USENIX Security
hiding (and what to do about it).
Symposium, 2016.

[25] J. Hiser, A. Nguyen, M. Co, M. Hall, and J. Davidson. ILR:
Where’d my gadgets go. In 33rd IEEE Symposium on Security
and Privacy, S&P, 2012.

[26] T. Hobson, H. Okhravi, D. Bigelow, R. Rudd, and W. Streilein.
On the Challenges of Effective Movement. In ACM CCS Moving
Target Defense (MTD) Workshop, Nov 2014.

[27] A. Homescu, T. Jackson, S. Crane, S. Brunthaler, P. Larsen, and
M. Franz. Large-scale automated software diversity—program
evolution redux. IEEE Transactions on Dependable and Secure
Computing, PP(99):1, 1 2015. Pre-Print.

[28] R. Hund, C. Willems, and T. Holz. Practical timing side channel
attacks against kernel space ASLR. In 34th IEEE Symposium
on Security and Privacy, S&P, 2013.

[29] Intel.

Intel 64 and IA-32 architectures software developer’s

manual. ch 28, 2015.

[30] S. Jana and V. Shmatikov. Memento: Learning secrets from
process footprints. In 33rd IEEE Symposium on Security and
Privacy, S&P, 2012.

[31] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space
layout permutation (ASLP): towards ﬁne-grained randomization
In 22nd Annual Computer Security
of commodity software.
Applications Conference, ACSAC, 2006.

[32] T. J. Killian. Processes as ﬁles. In USENIX Association Software

Tools Users Group Summer Conference, STUG, 1984.

[33] V. Kuznetsov, L. Szekeres, M. Payer, G. Candea, R. Sekar, and
D. Song. Code-pointer integrity. In 11th USENIX Symposium
on Operating Systems Design and Implementation, OSDI, 2014.
[34] P. Larsen, A. Homescu, S. Brunthaler, and M. Franz. SoK:
In 35th IEEE Symposium on

Automated software diversity.
Security and Privacy, S&P, 2014.

[35] C. Liebchen, M. Negro, P. Larsen, L. Davi, A.-R. Sadeghi,
S. Crane, M. Qunaibit, M. Franz, and M. Conti. Losing control:
On the effectiveness of control-ﬂow integrity under stack attacks.
In ACM Conference on Computer and Communications Security,
CCS, 2015.

[36] Z. Lin, R. D. Riley, and D. Xu. Polymorphing software by
randomizing data structure layout. In 6th International Confer-
ence on Detection of Intrusions and Malware, and Vulnerability
Assessment, DIMVA, 2009.

[37] K. Lu, S. N¨urnberger, M. Backes, and W. Lee. How to Make
ASLR Win the Clone Wars: Runtime Re-Randomization. In 23rd
Annual Network and Distributed System Security Symposium,
NDSS, 2016.

[38] K. Lu, C. Song, B. Lee, S. P. Chung, T. Kim, and W. Lee.
ASLR-Guard: Stopping Address Space Leakage for Code Reuse
Attacks. In ACM Conference on Computer and Communications
Security, CCS, 2015.

[39] G. Maisuradze, M. Backes, and C. Rossow. What Cannot Be
Read, Cannot Be Leveraged? Revisiting Assumptions of JIT-ROP
Defenses. In 25th USENIX Security Symposium, USENIX Sec,
2016.

[40] A. J. Mashtizadeh, A. Bittau, D. Boneh, and D. Mazi`eres.
CCFI: cryptographically enforced control ﬂow integrity. In ACM
Conference on Computer and Communications Security, CCS,
2015.

[41] S. Nagarakatte, J. Zhao, M. M. Martin, and S. Zdancewic.
SoftBound: Highly compatible and complete spatial memory
safety for C. In ACM Conference on Programming Language
Design and Implementation, PLDI, 2009.

[42] A. Oikonomopoulos, E. Athanasopoulos, H. Bos, and C. Giuf-
In 25th USENIX

frida. Poking holes in information hiding.
Security Symposium, USENIX Sec, 2016.

[43] H. Okhravi, T. Hobson, D. Bigelow, and W. Streilein. Finding

14

focus in the blur of moving-target techniques. Security Privacy,
IEEE, 12(2):16–26, Mar 2014.

[44] A. One. Smashing the stack for fun and proﬁt. Phrack magazine,

7, 1996.

[45] V. Pappas, M. Polychronakis, and A. D. Keromytis. Smashing
the gadgets: Hindering return-oriented programming using in-
place code randomization. In 33rd IEEE Symposium on Security
and Privacy, S&P, 2012.

[46] K. Razavi, B. Gras, E. Bosman, B. Preneel, C. Giuffrida, and
H. Bos. Flip feng shui: Hammering a needle in the software
stack. In 25th USENIX Security Symposium, 2016.

[47] F. Schuster, T. Tendyck, C. Liebchen, L. Davi, A.-R. Sadeghi,
and T. Holz. Counterfeit object-oriented programming: On the
difﬁculty of preventing code reuse attacks in C++ applications.
In 36th IEEE Symposium on Security and Privacy, S&P, 2015.
[48] J. Seibert, H. Okhravi, and E. S¨oderstr¨om. Information leaks
without memory disclosures: Remote side channel attacks
In ACM Conference on Computer and
on diversiﬁed code.
Communications Security, CCS, 2014.

[49] F. J. Serna. CVE-2012-0769, the case of the perfect info leak,

2012.

[50] H. Shacham. The geometry of innocent ﬂesh on the bone: return-
into-libc without function calls (on the x86). In ACM Conference
on Computer and Communications Security, CCS, 2007.

[51] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and
D. Boneh. On the effectiveness of address-space randomization.
In Proc. of ACM CCS, pages 298–307, 2004.

[52] R. Skowyra, K. Casteel, H. Okhravi, N. Zeldovich, and
W. Streilein. Systematic Analysis of Defenses Against Return-
Oriented Programming. In 16th International Symposium on
Research in Attacks, Intrusions, and Defenses (RAID’13), LNCS,
pages 82–102, Oct 2013.

[53] K. Z. Snow, F. Monrose, L. Davi, A. Dmitrienko, C. Liebchen,
and A. Sadeghi. Just-in-time code reuse: On the effectiveness of
ﬁne-grained address space layout randomization. In 34th IEEE
Symposium on Security and Privacy, S&P, 2013.

[54] K. Z. Snow, R. Rogowski, J. Werner, H. Koo, F. Monrose, and
M. Polychronakis. Return to the zombie gadgets: Undermining
destructive code reads via code inference attacks. In 37th IEEE
Symposium on Security and Privacy, 2016.

Internet [Nov, 2015]. Available on:

[55] B. Spengler. Grsecurity.
http://grsecurity.net, 2015.

[56] R. Strackx, Y. Younan, P. Philippaerts, F. Piessens, S. Lachmund,
and T. Walter. Breaking the memory secrecy assumption. In
2nd European Workshop on System Security, EUROSEC, 2009.
[57] L. Szekeres, M. Payer, T. Wei, and D. Song. Sok: Eternal war
in memory. In IEEE Symposium on Security and Privacy, 2013.
[58] A. Tang, S. Sethumadhavan, and S. Stolfo. Heisenbyte: Thwarting
memory disclosure attacks using destructive code reads. In ACM
Conference on Computer and Communications Security, CCS,
2015.

[59] V. van der Veen, E. Goktas, M. Contag, A. Pawlowski, X. Chen,
S. Rawat, H. Bos, T. Holz, E. Athanasopoulos, and C. Giuffrida.
A tough call: Mitigating advanced code-reuse attacks at the
binary level. In 37th IEEE Symposium on Security and Privacy,
2016.

[60] R. Wartell, V. Mohan, K. W. Hamlen, and Z. Lin. Binary stirring:
self-randomizing instruction addresses of legacy x86 binary code.
In ACM Conference on Computer and Communications Security,
CCS, 2012.

[61] J. Werner, G. Baltas, R. Dallara, N. Otternes, K. Snow,
F. Monrose, and M. Polychronakis. No-execute-after-read:
In 11th
Preventing code disclosure in commodity software.
ACM Symposium on Information, Computer and Communications
Security, ASIACCS, 2016.

[62] R. Wojtczuk. Subverting the Xen hypervisor. In Blackhat USA,

BH US, 2008.

[63] Q. Xiao, M. K. Reiter, and Y. Zhang. Mitigating storage

In ACM
side channels using statistical privacy mechanisms.
Conference on Computer and Communications Security, CCS,
2015.

[64] K. Zhang and X. Wang. Peeping tom in the neighborhood:
Keystroke eavesdropping on multi-user systems. In 18th USENIX
Security Symposium, USENIX Sec, 2009.