[1] Cachegrind. http://valgrind.org/docs/manual/cg-manual.html



[2] Himeno benchmark. http://accc.riken.jp/en/supercom/himenobmt/



[3] PolyBench. https: //sourceforge.net /projects/polybench/



[4] Collins, J.D., Tullsen, D.M.: Runtime identification of cache conflict misses: the

adaptive miss buffer. ACM Trans. Comput. Syst. 19(4), 413-439 (2001)



[5] Hong, C., et al.: Effective padding of multidimensional arrays to avoid cache conflict

misses. In: Proceedings of the 37th ACM Conference on Programming Language

Design and Implementation, PLDI 2016, pp. 129-144 (2016)



[6] Irazoqui, G., Eisenbarth, T., Sunar, B.: Systematic reverse engineering of cache

slice selection in Intel processors. In: 2015 Euromicro Conference on Digital System

Design (DSD), pp. 629-636, August 2015



[7] Jaleel, A., Cohn, R., Luk, C.-K., Jacob, B.: CMP$im: a pin-based on-the-fly multicore cache simulator. In: Proceedings of the Fourth Annual Workshop on Modeling,

Benchmarking and Simulation (MOBS 2008) (2008)



[8] Li, Z.: Simultaneous minimization of capacity and conflict misses. J. Comput. Sci.

Technol. 22(4), 497-504 (2007)



[9] Luk, C.-K., et al.: Pin: building customized program analysis tools with dynamic

instrumentation. In: Proceedings of the 2005 ACM SIGPLAN Conference on Programming Language Design and Implementation, pp. 190-200 (2005)



[10]  Minami, T., Hibino, M., Hiraishi, T., Iwashita, T., Nakashima, H.: Automatic

parameter tuning of three-dimensional tiled FDTD kernel. In: Dayd√©, M., Marques,

O., Nakajima, K. (eds.) VECPAR 2014. LNCS, vol. 8969, pp. 284-297. Springer,

Cham (2015). doi:10.1007 /978-3-319-17353-5_24



[11]  Nethercote, N., Seward, J.: Valgrind: a framework for heavyweight dynamic binary

instrumentation. In: Proceedings of the 28th ACM Conference on Programming

Language Design and Implementation, PLDI 2007, pp. 89-100 (2007)



[12]  Nikoleris, N., Eklov, D., Hagersten, E.: Extending statistical cache models to support detailed pipeline simulators. In: 2014 IEEE International Symposium on Performance Analysis of Systems and Software, pp. 86-95, March 2014



[13]  Pesterev, A., Zeldovich, N., Morris, R.T.: Locating cache performance bottlenecks



using data profiling. In: Proceedings of the 5th European Conference on Computer



Systems, EuroSys 2010, pp. 335-348 (2010)



[14]  Rivera, G., Tseng, C.-W.: Tiling optimizations for 3D scientific computations. In:

Proceedings of the 2000 ACM/IEEE Conference on Supercomputing, SC 2000

(2000)



[15]  Satish, N., et al.: Can traditional programming bridge the Ninja performance gap

for parallel computing applications? Commun. ACM 58(5), 77-86 (2015)



[16]  Sato, S., Sato, Y., Endo, T.: Investigating potential performance benefits of memory layout optimization based on roofline model. In: Proceedings of the 2nd International Workshop on Software Engineering for Parallel Systems, SEPS 2015, pp.

50-56 (2015)



[17]  Sato, Y., Sato, S., Endo, T.: Exana: an execution-driven application analysis tool

for assisting productive performance tuning. In: Proceedings of the 2nd International Workshop on Software Engineering for Parallel Systems, SEPS 2015, pp.

1-10 (2015)



[18]  Seshadri, V., et al.: The evicted-address filter: a unified mechanism to address

both cache pollution and thrashing. In: 21st International Conference on Parallel

Architectures and Compilation Techniques (PACT), pp. 355-366 (2012)



[19]  Tao, J., Karl, W.: Detailed cache simulation for detecting bottleneck, miss reason

and optimization potentialities. In: Proceedings of the lst International Conference

on Performance Evaluation Methodolgies and Tools, VALUETOOLS 2006 (2006)
