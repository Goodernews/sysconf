[1] A. Moody, G. Bronevetsky, K. Mohror, and B. R. d. Supinski, “Design,
Modeling, and Evaluation of a Scalable Multi-level Checkpointing
System,” in International Conference for High Performance Computing,
Networking, Storage and Analysis (SC), 2010.
[2] X. Dong, N. Muralimanohar, N. Jouppi, R. Kaufmann, and Y. Xie,
“Leveraging 3D PCRAM Technologies to Reduce Checkpoint Overhead
for Future Exascale Systems,” in International Conference on High
Performance Computing Networking, Storage and Analysis (SC), 2009.
[3] L. Bautista-Gomez, S. Tsuboi, D. Komatitsch, F. Cappello,
N. Maruyama, and S. Matsuoka, “FTI: High performance Fault
Tolerance Interface for hybrid systems,” in International Conference
for High Performance Computing, Networking, Storage and Analysis
(SC), 2011.
[4] J. S. Plank and K. Li, “Faster checkpointing with N+1 parity,” in
International Symposium on Fault-Tolerant Computing, 1994.
[5] S. Agarwal, R. Garg, M. S. Gupta, and J. E. Moreira, “Adaptive Incremental Checkpointing for Massively Parallel Systems,” in International
Conference on Supercomputing (ICS), 2004.
[6] C. Wang, F. Mueller, C. Engelmann, and S. L. Scott, “Hybrid Checkpointing for MPI Jobs in HPC Environments,” in International Conference on Parallel and Distributed Systems (ICPADS), 2010.
[7] G. Bronevetsky, D. Marques, K. Pingali, S. A. McKee, and R. Rugina,
“Compiler-enhanced incremental checkpointing for OpenMP applications,” in International Symposium on Parallel and Distributed Processing (IPDPS), 2009.
[8] J. S. Plank, K. Li, and M. A. Puening, “Diskless Checkpointing,” IEEE
Transactions on Parallel and Distributed System, vol. 9, no. 10, 1998.
[9] C.-D. Lu, “Scalable Diskless Checkpointing for Large Parallel Systems,”
Ph.D. dissertation, 2005.
[10] X. Tang, J. Zhai, B. Yu, W. Chen, and W. Zheng, “Self-Checkpoint:
An In-Memory Checkpoint Method Using Less Space and Its Practice
on Fault-Tolerant HPL,” in Symposium on Principles and Practice of
Parallel Programming (PPoPP), 2017.
[11] F. Cappello and G. Bosilca, “DSN 2016 Tutorial: Resilience for Scientific Computing: From Theory to Practice,” in International Conference
on Dependable Systems and Networks Workshops, 2016.
[12] D. Li, J. Vetter, G. Marin, C. McCurdy, C. Cira, Z. Liu, and W. Yu,
“Identifying Opportunities for Byte-Addressable Non-Volatile Memory
in Extreme-Scale Scientific Applications,” in International Parallel and
Distributed Processing Symposium, 2012.
[13] J. Coburn, A. Caulfield, A. Akel, L. Grupp, R. Gupta, R. Jhala, and
S. Swanson, “NV-heaps: Making Persistent Objects Fast and Safe with
Next-generation, Non-volatile Memories,” in Architectural Support for
Programming Languages and Operating Systems (ASPLOS), 2011.
[14] H. Volos, A. J. Tack, and M. M. Swift, “Mnemosyne: Lightweight Persistent Memory,” in Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2011.
[15] Intel NVM Library. http://pmem.io/nvml/libpmem/.
[16] Z. Chen, “Online-ABFT: An Online Algorithm based Fault Tolerance
Scheme for Soft Error Detection in Iterative Methods,” in ACM SIGPLAN Symposium on Principles and Practice of Parallel Programming
(PPoPP), 2013.
[17] T. Davies and Z. Chen, “Correcting Soft Errors Online in LU Factorization,” in HPDC, 2013.
[18] P. Du, A. Bouteiller, G. Bosilca, T. Herault, and J. Dongarra, “Algorithmbased Fault Tolerance for Dense Matrix Factorizations,” in PPoPP, 2012.
[19] P. Wu, C. Ding, L. Chen, T. Davies, C. Karlsson, and Z. Chen, “Online Soft Error Correction in Matrix-Matrix Multiplication,” Journal of
Computational Science, vol. 4, no. 6, pp. 465–472, 2013.
[20] D. Li, Z. Chen, P. Wu, and J. S. Vetter, “Rethinking Algorithm-Based
Fault Tolerance with a Cooperative Software-Hardware Approach,” in
ACM/IEEE International Conference for High Performance Computing,
Networking, Storage and Analysis (SC), 2013.
[21] M. Faverge, J. Herrmann, J. Langou, B. R. Lowery, Y. Robert, and
J. Dongarra, “Designing LU-QR Hybrid Solvers for Performance and
Stability,” in International Parallel and Distributed Processing Symposium (IPDPS), 2014.
[22] M. S. Lam, E. E. Rothberg, and M. E. Wolf, “The Cache Performance
and Optimizations of Blocked Algorithms,” in ASPLOS, 1991.
[23] S. Williams et al., “Optimization of Sparse Matrix-Vector Multiplication
on Emerging Multicore Platforms,” in International Conference for High
Performance Computing, Networking, Storage and Analysis (SC), 2007.

[24] R. Dorrance et al., “A Scalable Sparse Matrix-Vector Multiplication
Kernel for Energy-Efficient Sparse-Blas on FPGAs,” in FPGA, 2014.
[25] E. Garcia et al., “Optimizing the LU Factorization for Energy Efficiency
on a Many-Core Architecture,” in LCPC, 2013.
[26] K. Suzuki and S. Swanson, “The Non-Volatile Memory Technology
Database (NVMDB),” Department of Computer Science & Engineering,
University of California, San Diego, Tech. Rep. CS2015-1011, 2015,
http://nvmdb.ucsd.edu.
[27] S. R. Dulloor, A. Roy, Z. Zhao, N. Sundaram, N. Satish, R. Sankaran,
J. Jackson, and K. Schwan, “Data Tiering in Heterogeneous Memory
Systems,” in Proceedings of the Eleventh European Conference on
Computer Systems (EuroSys), 2016.
[28] R. Chen, Z. Shao, and T. Li, “Bridging the i/o performance gap for
big data workloads: A new nvdimm-based approach,” in IEEE/ACM
International Symposium on Microarchitecture (MICRO), 2016.
[29] M. Giardino, K. Doshi, and B. Ferri, “Soft2LM: Application Guided
Heterogeneous Memory Management,” in International Conference on
Networking, Architecture, and Storage (NAS), 2016.
[30] W. Wei, D. Jiang, S. A. McKee, J. Xiong, and M. Chen, “Exploiting
Program Semantics to Place Data in Hybrid Memory,” in International
Conference on Parallel Architecture and Compilation (PACT), 2015.
[31] S. Gao, B. He, and J. Xu, “Real-Time In-Memory Checkpointing
for Future Hybrid Memory Systems,” in International Conference on
Supercomputing, 2015.
[32] B. Wang, B. Wu, D. Li, X. Shen, W. Yu, Y. Jiao, and J. S. Vetter, “Exploring Hybrid Memory for GPU Energy Efficiency through
Software-Hardware Co-Design,” in International Conference on Parallel
Architectures and Compilation Techniques (PACT), 2013.
[33] H. Yoon, J. Meza, R. Ausavarungnirun, R. Harding, and O. Mutlu,
“Row Buffer Locality Aware Caching Policies for Hybrid Memories,”
in International Conference on Computer Design (ICCD), 2012.
[34] L. Ramos, E. Gorbatov, and R. Bianchini, “Page Placement in Hybrid
Memory Systems,” in International Conference on Supercomputing
(ICS), 2011.
[35] Y. Zhang, J. Yang, A. Memaripour, and S. Swanson, “Mojim: A Reliable
and Highly-Available Non-Volatile Memory System,” in International
Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2015.
[36] C.-K. Luk et al., “Pin: Building customized program analysis tools with
dynamic instrumentation,” in Proceedings of the ACM SIGPLAN conference on Programming language design and implementation, Chicago,
Illinois, June 2005, pp. 190–200.
[37] H. Volos, G. Magalhaes, L. Cherkasova, and J. Li, “Quartz: A
Lightweight Performance Emulator for Persistent Memory Software,”
in Annual Middleware Conference (Middleware), 2015.
[38] A. Bivens, P. Dube, M. Franceschini, J. Karidis, L. Lastras, and M. Tsao,
“Architectural Design for Next Generation Heterogeneous Memory
Systems,” in International Memory Workshop, 2010.
[39] M. K. Qureshi, V. Srinivasan, and J. A. Rivers, “Scalable HighPerformance Main Memory System Using Phase-Change Memory Technology,” in ISCA, 2009.
[40] P. Wu, D. Li, Z. Chen, J. Vetter, and S. Mittal, “Algorithm-Directed
Data Placement in Explicitly Managed No-Volatile Memory,” in ACM
Symposium on High-Performance Parallel and Distributed Computing
(HPDC), 2016.
[41] D. H. Bailey, L. Dagum, E. Barszcz, and H. D. Simon, “Nas parallel
benchmark results,” in ACM/IEEE conference on Supercomputing, 1992.
[42] J. R. Tramm, A. R. Siegel, T. Islam, and M. Schulz, “XSBench the
Development and Verification of a Performance Abstraction for Monte
Carlo Reactor Analysis,” in International Conference on Physics of
Reactors, 2014.
[43] J. Tramm, “XSBench: The Monte Carlo Macroscopic Cross Section
Lookup Benchmark,” 2014, https://github.com/jtramm/XSBench.
[44] A. Rudoff, “Programming Models for Emerging Non-Volatile Memory
Technologies,” ;login: The USENIX Magazine, vol. 38, no. 3, 2013.
[45] A. Chatzistergiou, M. Cintra, and S. D. Viglas, “REWIND: Recovery
Write-ahead System for In-Memory Non-Volatile Data Structures,”
Proceedings of the VLDB Endowment, vol. 8, no. 5, 2015.
[46] J. E. Denny, S. Lee, and J. S. Vetter, “NVL-C: Static Analysis
Techniques for Efficient, Correct Programming of Non-Volatile Main
Memory Systems,” in International Symposium on High-Performance
Parallel and Distributed Computing (HPDC), 2016.

[47] X. Wu and A. L. N. Reddy, “SCMFS: A File System for Storage
Class Memory,” in International Conference for High Performance
Computing, Networking, Storage and Analysis (SC), 2011.
[48] D. R. Chakrabarti, H.-J. Boehm, and K. Bhandari, “Atlas: Leveraging Locks for Non-volatile Memory Consistency,” in International
Conference on Object Oriented Programming Systems Languages &
Applications (OOPSLA), 2014.
[49] J. Zhao, S. Li, D. H. Yoon, Y. Xie, and N. P. Jouppi, “Kiln: closing the
performance gap between systems with and without persistence support,”
in International Symposium on Microarchitecture, 2013.
[50] T. Wang and R. Johnson, “Scalable Logging Through Emerging Nonvolatile Memory,” Proceedings of the VLDB Endowment, vol. 7, no. 10,
2014.
[51] D. Narayanan and O. Hodson, “Whole-system Persistence,” in International Conference on Architectural Support for Programming Languages
and Operating Systems (ASPLOS), 2012.
[52] S. Pelley, P. M. Chen, and T. F. Wenisch, “Memory Persistency,” in
ISCA, 2014.
[53] A. Joshi, V. Nagarajan, M. Cintra, and S. Viglas, “Efficient Persist Barriers for Multicores,” in International Symposium on Microarchitecture,
2015.
[54] A. Kolli, J. Rosen, S. Diestelhorst, A. Saidi, S. Pelley, S. Liu, P. M.
Chen, and T. F. Wenisch, “Delegated persist ordering,” in International
Symposium on Microarchitecture (MICRO), 2016.