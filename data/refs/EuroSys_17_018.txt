[1] Graphviz - Graph Visualization Software. http://www.

graphviz.org
[2] Green-Marl.

Green-Marl.

http://github.com/stanford-ppl/

[3] Intel Memory Latency Checker. https:
//software.intel.com/en-us/articles/
intelr—memory-latency-checker

[4] Intel 64 and JA-32 Architectures Software

Developer Manuals. http://www.intel.
com/content/www/us/en/processors/
architectures-software-—developer-manuals.html.
[5] GNU libgomp.
libgomp/.

http://gec.gnu.org/onlinedocs/

[6] Memory and Thread Placement Optimization Developer’s
Guide. http://docs.oracle.com/cd/E26502_01/
htm1/E35301/toc.html.

[7] OpenMP Application Program Interface, Version 4.0.
July 2013. http://www.openmp.org/mp-documents/
OpenMP4.0.0.pdf.

[8] SPARC T4 Supplement to the Oracle
SPARC Architecture 2011. http://www.
oracle.com/technetwork/server—storage/
sun-sparc-—enterprise/documentation/
sparc—servers—documentation—-163529.html.

[9] U. A. Acar, A. Chargueraud, and M. Rainey. Scheduling Parallel Programs by Work Stealing with Private Deques. PPoPP
"13.

[10] A. Agarwal and M. Cherian. Adaptive Backoff Synchronization Techniques. ISCA ’89.

[11] T. E. Anderson. The Performance of Spin Lock Alternatives
for Shared-Money Multiprocessors. IEEE IPDS *90.

[12] A. Baumann, P. Barham, P.-E. Dagand, T. Harris, R. Isaacs,
S. Peter, T. Roscoe, A. Schtipbach, and A. Singhania. The
Multikernel: A New OS Architecture for Scalable Multicore
Systems. SOSP ’09.

[13] A. Baumann, S. Peter, A. Schiipbach, A. Singhania,
T. Roscoe, P. Barham, and R. Isaacs. Your Computer is Already a Distributed System. Why isn’t Your OS? HotOS ’09.

[14] A. Belay, G. Prekas, A. Klimovic, $. Grossman, C. Kozyrakis,
and E. Bugnion. IX: A Protected Dataplane Operating System
for High Throughput and Low Latency. OSDI ’14.

[15] M. Berezecki, E. Frachtenberg, M. Paleczny, and K. Steele.
Power and Performance Evaluation of Memcached on the
TILEPro64 Architecture. Sustainable Computing: Informatics and Systems *12.

[16] R. D. Blumofe and C. E. Leiserson. Scheduling Multithreaded.
Computations by Work Stealing. JACM ’99.

[17] S. Borkar. Design Challenges Of Technology Scaling. IEEE
Micro ’99.

[18] S. Boyd-Wickizer, H. Chen, R. Chen, Y. Mao, F. Kaashoek,
R. Morris, A. Pesterev, L. Stein, M. Wu, Y. Dai, Y. Zhang,
and Z. Zhang. Corey: An Operating System for Many Cores.
OSDI ’08.

[19] S. Boyd-Wickizer, A. T. Clements, Y. Mao, A. Pesterev, M. F.
Kaashoek, R. Morris, N. Zeldovich, et al. An Analysis of
Linux Scalability to Many Cores. OSDI ’10.

[20] FE Broquedis, J. Clet-Ortega, S. Moreaud, N. Furmento,
B. Goglin, G. Mercier, S. Thibault, and R. Namyst. hwloc: A
generic framework for managing hardware affinities in HPC
applications. PDP *10.

[21] D. J. Brown and C. Reams. Toward Energy-Efficient Computing. CACM ’10.

[22] I. Calciu, D. Dice, Y. Lev, V. Luchangco, V. J. Marathe, and
N. Shavit. NUMA-Aware Reader-Writer Locks. PPoPP 13.

[23] M. Chabbi and J. Mellor-Crummey. Contention-Conscious,
Locality-Preserving Locks. PPoPP 16.

[24] M. Chabbi, M. Fagan, and J. Mellor-Crummey. High Performance Locks for Multi-Level NUMA Systems. PPoPP ’15.

[25] V. Chegu and R. van Riel. Automatic NUMA Balancing. http://events.linuxfoundation.org/sites/
events/files/slides/summit2014_riel_chegu_w_
0340_automatic_numa_balancing_0.pdf

[26] J. Chhugani, A. D. Nguyen, V. W. Lee, W. Macy, M. Hagog,
Y.-K. Chen, A. Baransi, S$. Kumar, and P. Dubey. Efficient
Implementation of Sorting on Multi-Core SIMD CPU Architecture. VLDB ’08.

[27] P. Conway, N. Kalyanasundharam, G. Donley, K. Lepak, and
B. Hughes. Cache Hierarchy and Memory Subsystem of the
AMD Opteron Processor. IEEE Micro ’10.

[28] C. Tapus, 1-H. Chung, and J. K. Hollingsworth. Active
Harmony: Towards Automated Performance Tuning. SC ’02.

[29] M. Dashti, A. Fedorova, J. R. Funston, F. Gaud, R. Lachaize,
B. Lepers, V. Quéma, and M. Roth. Traffic Management: A
Holistic Approach to Memory Placement on NUMA Systems.
ASPLOS 713.

[30] T. David, R. Guerraoui, and V. Trigonakis. Everything You
Always Wanted to Know About Synchronization but Were
Afraid to Ask. SOSP ’ 13.

[31] J. Dean and S. Ghemawat. MapReduce: Simplified Data
Processing on Large Clusters. CACM ’08.

[32] D. Dice, V. Marathe, and N. Shavit. Lock Cohorting: A
General Technique for Designing NUMA Locks. PPoPP ’12.

[33] B. Falsafi, R. Guerraoui, J. Picorel, and V. Trigonakis. Unlocking Energy. USENIX ATC °16.

[34] M. Frigo and S. G. Johnson. The Design and Implementation
of FFTW3. Proceedings of the IEEE, 2005.

[35] B. Gamsa, O. Krieger, J. Appavoo, and M. Stumm. Tornado:
Maximizing Locality and Concurrency in a Shared Memory
Multiprocessor Operating System. OSDI ’99.

[36] J. Giceva, G. Alonso, T. Roscoe, and T. Harris. Deployment
of Query Plans on Multicores. VLDB ’14.

[37] L. Gidra, G. Thomas, J. Sopena, and M. Shapiro. A Study
of the Scalability of Stop-the-World Garbage Collectors on
Multicores. ASPLOS 713.

[38] Gidra, Lokesh and Thomas, Gaél and Sopena, Julien and
Shapiro, Marc and Nguyen, Nhan. Numagic: A Garbage
Collector for Big Data on Big NUMA Machines. In ASPLOS
"15.

[39] H. Guiroux, R. Lachaize, and V. Quéma. Multicore Locks:
The Case Is Not Closed Yet. USENIX ATC ’16.

[40] D. Hackenberg, D. Molka, and W. E. Nagel. Comparing
Cache Architectures and Coherency Protocols on x86-64 Multicore SMP Systems. ACM MICRO ’09.

[41] T. Harris and S. Kaestle. Callisto-RTS: Fine-grain Parallel
Loops. USENIX ATC 715.

[42] S. Hong, H. Chafi, E. Sedlar, and K. Olukotun. Green-Marl:
A DSL for Easy and Efficient Graph Analysis. ASPLOS 712.

[43] H. Inoue and K. Taura. SIMD- and Cache-Friendly Algorithm
for Sorting an Array of Structures. VLDB 715.

[44] R. Johnson, I. Pandis, N. Hardavellas, A. Ailamaki, and
B. Falsafi. Shore-MT: A Scalable Storage Manager for the
Multicore Era. EDBT ’09.

[45] S. Kaestle, R. Achermann, R. Haecki, M. Hoffmann,
S. Ramos, and T. Roscoe. Machine-Aware Atomic Broadcast
Trees for Multicores. OSDI ’16.

[46] S. Kashyap, C. Min, and T. Kim. Scalability in the Clouds!:
A Myth or Reality? APSys 15.

[47] A. Kleen. A NUMA API for Linux. SUSE Labs white paper,
2004.

[48] D. Koufaty, D. Reddy, and S. Hahn. Bias Scheduling in
Heterogeneous Multi-Core Architectures. EuroSys ’10.

[49] B. Lepers, V. Quéma, and A. Fedorova. Thread and Memory Placement on NUMA Systems: Asymmetry Matters.
USENIX ATC 715.

[50] T. Li, D. Baumberger, D. A. Koufaty, and S. Hahn. Efficient
Operating System Scheduling for Performance-Asymmetric
Multi-Core Architectures. SC ’07.

[51] H. Lim, D. Han, D. G. Andersen, and M. Kaminsky. MICA:
A Holistic Approach to Fast In-Memory Key-Value Storage.
NSDI ’14.

[52] Z. Majo and T. R. Gross. A Library for Portable and Composable Data Locality Optimizations for NUMA Systems. PPoPP
"15.

[53] Y. Mao, R. Morris, and M. F, Kaashoek. Optimizing MapReduce for Multicore Architectures. In Computer Science and
Artificial Intelligence Laboratory, Massachusetts Institute of
Technology, Tech. Rep. Citeseer, 2010.

[54] J. Mellor-Crummey and M. Scott. Algorithms for Scalable
Synchronization on Shared-Memory Multiprocessors. TOCS
"91.

[55] A. Merkel, J. Stoess, and F. Bellosa. Resource-Conscious
Scheduling for Energy Efficiency on Multicore Processors.
EuroSys 710.

[56] M. Michael and M. Scott. Simple, Fast, and Practical NonBlocking and Blocking Concurrent Queue Algorithms. PODC
"96.

[57] S. Muralidharan, A. Roy, M. Hall, M. Garland, and P. Rai.
Architecture-Adaptive Code Variant Tuning. ASPLOS ’16.

[58] T. Ogasawara. . NUMA-Aware Memory Manager with
Dominant-Thread-Based Copying GC. OOPSLA ’09.

[59] G. Paoloni. How to Benchmark Code Execution Times on
Intel IA-32 and JA-64 Instruction Set Architectures. Intel
Corporation white paper, 2010.

[60] M. S. Papamarcos and J. H. Patel. A Low-Overhead Coherence Solution for Multiprocessors with Private Cache Memories. ISCA °84.

[61] S. Peter, J. Li, I. Zhang, D. R. K. Ports, D. Woos, A. Krishnamurthy, T. Anderson, and T. Roscoe. Arrakis: The Operating
System is the Control Plane. OSDI 714.

[62] D. Porobic, I. Pandis, M. Branco, P. Téziin, and A. Ailamaki.
OLTP on Hardware Islands. VLDB ’12.

[63] I. Psaroudakis, T. Scheuer, N. May, A. Sellami, and A. Ailamaki. Scaling Up Concurrent Main-Memory Column-Store
Scans: Towards Adaptive NUMA-Aware Data and Task Placement. VLDB ’15.

[64] J. C. Saez, M. Prieto, A. Fedorova, and S. Blagodurov. A
Comprehensive Scheduler for Asymmetric Multicore Systems. EuroSys 710.

[65] A. Schtipbach, S. Peter, A. Baumann, T. Roscoe, P. Barham,
T. Harris, and R. Isaacs. Embracing Diversity in the Barrelfish
Manycore Operating System. MMCS ’08.

[66] J. Singler, P. Sanders, and F. Putze. MCSTL: The Multi-Core
Standard Template Library. Euro-Par ’07.

[67] D. J. Sorin, M. D. Hill, and D. A. Wood. A Primer on Memory
Consistency and Cache Coherence. Synthesis Lectures on
Computer Architecture, 2011.

[68] D. Tam, R. Azimi, and M. Stumm. Thread Clustering:
Sharing-Aware Scheduling on SMP-CMP-SMT Multiprocessors. EuroSys ’07.

[69] J. Treibig, G. Hager, and G. Wellein. LIKWID: A Lightweight
Performance-Oriented Tool Suite for x86 Multicore Environments. PSTI ’10.

[70] D. Wentzlaff and A. Agarwal. Factored Operating Systems
(fos): The Case for a Scalable Operating System for Multicores. SIGOPS ’09.

[71] R. C. Whaley, A. Petitet, and J. J. Dongarra. Automated
Empirical Optimizations of Software and the ATLAS Project.
Parallel Computing ’01.

[72] T. Willhalm, R. Dementiev, and P. Fay. Intel Performance
Counter Monitor-a Better Way to Measure CPU Utilization. http://software.intel.com/en-us/articles/
intel-—performance-counter-monitor.

[73] K. Yotov, K. Pingali, and P. Stodghill, Automatic Measurement of Memory Hierarchy Parameters. SIGMETRICS ’05.

[74] G. Zellweger, S. Gerber, K. Kourtis, and T. Roscoe. Decoupling Cores, Kernels, and Operating Systems. OSDI’ 14.

[75] W. Zheng, S. Tu, E. Kohler, and B. Liskov. Fast Databases
with Fast Durability and Recovery Through Multicore Parallelism. OSDI ’14.

[76] S. Zhuravlev, S. Blagodurov, and A. Fedorova. Addressing Shared Resource Contention in Multicore Processors via
Scheduling. ASPLOS ’10.