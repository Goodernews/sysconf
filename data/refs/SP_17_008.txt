[1] Q. A. Chen, Z. Qian, and Z. M. Mao, “Peeking Into Your App Without
Actually Seeing It: UI State Inference and Novel Android Attacks,” in
Proc. of the USENIX Security Symposium, 2014.

[2] A. Bianchi, J. Corbetta, L. Invernizzi, Y. Fratantonio, C. Kruegel, and
G. Vigna, “What the App is That? Deception and Countermeasures
in the Android User Interface,” in Proc. of the IEEE Symposium on
Security and Privacy, 2015.

[3] C. Ren, Y. Zhang, H. Xue, T. Wei, and P. Liu, “Towards Discovering
and Understanding Task Hijacking in Android,” in Proc. of USENIX
Security Symposium, 2015.

[4] Lookout, “Trojanized adware family abuses accessibility service to
install whatever apps it wants,” https://blog.lookout.com/blog/2015/11/
19/shedun-trojanized-adware/, 2015.

[5] S. Week, “Overwhelming Majority of Android Devices Don’t Have
Latest Security Patches,” http://www.securityweek.com/overwhelming-
majority-android-devices-dont-have-latest-security-patches, 2016.

[6] “Documentation for SYSTEM_ALERT_WINDOW (DRAW_ON_TOP,
https:

informally)
//developer.android.com/reference/android/Manifest.permission.html#
SYSTEM ALERT WINDOW

permission.”

Available:

[Online].

[7] Y. Amit,

“Accessibility Clickjacking

The Next Evolution in
Android Malware that Impacts More Than 500 Million Devices,”
https://www.skycure.com/blog/accessibility-clickjacking/, 2016.

[8] “Documentation

of

AccessibilityEvent.”

[Online].

Available:

https://developer.android.com/reference/android/view/accessibility/
AccessibilityEvent.html

[9] “Documentation

Accessibility’s
[Online].
https://developer.android.com/reference/android/

FLAG RETRIEVE INTERACTIVE WINDOWS
Available:
accessibilityservice/AccessibilityServiceInfo.html#FLAG RETRIEVE
INTERACTIVE WINDOWS

ﬂag.”

of

[10] Google, “Google Authenticator App,” https://play.google.com/store/

apps/details?id=com.google.android.apps.authenticator2&hl=en.

[11] A. P. Felt and D. Wagner, “Phishing on Mobile Devices,” in Proc. of

IEEE Workshop on Web 2.0 Security & Privacy (W2SP), 2011.

[12] M. Niemietz and J. Schwenk, “UI Redressing Attacks on Android

devices,” Black Hat Abu Dhabi, 2012.
“Android

Team,

S.

[13] A.

Security

Bulletins,”

https://source.android.com/security/bulletin/, 2016.

[14] F. Roesner, T. Kohno, A. Moshchuk, B. Parno, H. J. Wang, and
C. Cowan, “User-driven Access Control: Rethinking Permission
Granting in Modern Operating Systems,” in Proc. of
the IEEE
Symposium on Security and Privacy, 2012.

[15] G. Rydstedt, B. Gourdin, E. Bursztein, and D. Boneh, “Framing Attacks
on Smart Phones and Dumb Routers: Tap-jacking and Geo-localization
Attacks,” in Proc. of the USENIX Conference on Offensive Technologies,
2010.

[16] W. Zhou, L. Song, J. Monrad, J. Zeng, and J. Su, “The Latest
Android Overlay Malware Spreading via SMS Phishing in Europe,”
https://www.ﬁreeye.com/blog/threat-research/2016/06/latest-android-
overlay-malware-spreading-in-europe.html, 2016.

[17] T. Seals, “Autorooting, Overlay Malware Are Rising Android Threats,”

http://www.infosecurity-magazine.com/news/autorooting-overlay-
malware-are/, 2016.

[18] T. Spring, “Scourge of android overlay malware on rise,” https:
//threatpost.com/scourge-of-android-overlay-malware-on-rise/117720/,
2016.

[19] M. Zhang, “Android ransomware variant uses clickjacking to become
device administrator,” http://www.symantec.com/connect/blogs/android-
ransomware-variant-uses-clickjacking-become-device-administrator,
2016.

[20] Y. Amit, “95.4 percent of all android devices are susceptible to
accessibility clickjacking exploits,” https://www.skycure.com/blog/95-4-
android-devices-susceptible-accessibility-clickjacking-exploits/, 2016.

[21] S. Lui, “Accessibility Service Helps Malware Bypass Android’s Beefed
http://www.lifehacker.com.au/2016/05/accessibility-

Up
service-helps-malware-bypass-androids-beefed-up-security/, 2016.

Security,”

[22] D.

“Malware

Venkatesan,

androids
ac-
cessibility
enhancements,”
http://www.symantec.com/connect/blogs/malware-may-abuse-android-s-
accessibility-service-bypass-security- enhancements, 2016.

abuse
security

service

bypass

may

to

[23] J. Kraunelis, Y. Chen, Z. Ling, X. Fu, and W. Zhao, “On Malware
Leveraging the Android Accessibility Framework,” in International
Conference on Mobile and Ubiquitous Systems: Computing, Networking,
and Services, 2013.

[24] Y. Jang, C. Song, S. P. Chung, T. Wang, and W. Lee, “A11y Attacks:
the

Exploiting Accessibility in Operating Systems,” in Proc. of
Conference on Computer and Communications Security (CCS), 2014.

[25] L. Malisa, K. Kostiainen, and S. Capkun, “Detecting Mobile Application
Spooﬁng Attacks by Leveraging User Visual Similarity Perception,” in
Cryptology ePrint Archive, Report 2015/709, 2015.

[26] E. Fernandes, Q. A. Chen, J. Paupore, G. Essl, J. A. Halderman, Z. M.
Mao, and A. Prakash, “Android UI Deception Revisited: Attacks and
Defenses,” in Proc. of Financial Cryptography and Data Security (FC),
2016.

[27] C. Ren, P. Liu, and S. Zhu, “WindowGuard: Systematic Protection
of GUI Security in Android,” in Proc. of the Annual Symposium on
Network and Distributed System Security (NDSS), 2017.

[28] T. Ringer, D. Grossman, and F. Roesner, “AUDACIOUS: User-Driven
Access Control with Unmodiﬁed Operating Systems,” in Proc. of the
Conference on Computer and Communications Security (CCS), 2016.

[29] F. Roesner and T. Kohno, “Securing Embedded User Interfaces: Android

and Beyond,” in Proc. of the USENIX Security Symposium, 2013.

[30] Y. Nan, M. Yang, Z. Yang, S. Zhou, G. Gu, and X. Wang, “UIpicker:
User-Input Privacy Identiﬁcation in Mobile Applications,” in Proc. of
the USENIX Security Symposium, 2015.

