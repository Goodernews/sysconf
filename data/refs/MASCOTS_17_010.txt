[1] M. Canini, D. Kostic, J. Rexford, and D. Venzano, “Automating the testing of OpenFlow applications,” in Proceedings of the 1st International
Workshop on Rigorous Protocol Engineering (WRiPE), 2011.
[2] M. Canini, D. Venzano, P. Perešı́ni, D. Kostić, and J. Rexford, “A
nice way to test OpenFlow applications,” in Proceedings of the 9th
USENIX Conference on Networked Systems Design and Implementation,
ser. NSDI’12. USENIX, 2012.
[3] T. Ball, N. Bjørner, A. Gember, S. Itzhaky, A. Karbyshev, M. Sagiv,
M. Schapira, and A. Valadarsky, “Vericon: Towards verifying controller
programs in software-deﬁned networks,” in Proceedings of the 35th
ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’14. ACM, 2014, pp. 282–293.
[4] T. Nelson, A. D. Ferguson, M. J. Scheer, and S. Krishnamurthi, “Tierless
programming and reasoning for software-deﬁned networks,” in 11th
USENIX Symposium on Networked Systems Design and Implementation
(NSDI 14). Seattle, WA: USENIX, 2014, pp. 519–531.
[5] Y. Yakuwa, N. Tomizawa, and T. Tonouchi, “Efﬁcient model checking
of OpenFlow networks using SDPOR-DS,” in 16th Asia-Paciﬁc Network
Operations and Management Symposium (APNOMS). IEEE, 2014.
[6] C. Chen, L. Jia, W. Zhou, and B. T. Loo, “Proof-based veriﬁcation of
software deﬁned networks,” Presented as part of the Open Networking
Summit 2014 (ONS 2014), 2014.
[7] C. Scott, A. Wundsam, B. Raghavan, A. Panda, A. Or, J. Lai, E. Huang,
Z. Liu, A. El-Hassany, S. Whitlock, H. Acharya, K. Zariﬁs, and
S. Shenker, “Troubleshooting blackbox SDN control software with
minimal causal sequences,” in Proceedings of the 2014 ACM Conference
on SIGCOMM. ACM, 2014, pp. 395–406.
[8] D. Lebrun, S. Vissicchio, and O. Bonaventure, “Towards test-driven
software deﬁned networking,” in Network Operations and Management
Symposium (NOMS), 2014. IEEE, 2014, pp. 1–9.
[9] A. El-Hassany, J. Miserez, P. Bielik, L. Vanbever, and M. Vechev,
“Sdnracer: Concurrency analysis for software-deﬁned networks,” in The
37th ACM SIGPLAN Conference on Programming Language Design and
Implementation, ser. PLDI ’16. ACM, 2016, pp. 402–415.
[10] R. W. Skowyra, A. Lapets, A. Bestavros, and A. Kfoury, “Veriﬁablysafe software-deﬁned networks for cps,” in Proceedings of the 2nd ACM
international conference on High conﬁdence networked systems. ACM,
2013, pp. 101–110.
[11] R. Skowyra, A. Lapets, A. Bestavros, and A. Kfoury, “A veriﬁcation
platform for sdn-enabled applications,” in IEEE International Conference on Cloud Engineering, 2014, pp. 337–342.
[12] H. Mai, A. Khurshid, R. Agarwal, M. Caesar, P. Godfrey, and S. T. King,
“Debugging the data plane with anteater,” ACM SIGCOMM Computer
Communication Review, vol. 41, no. 4, pp. 290–301, 2011.
[13] P. Kazemian, G. Varghese, and N. McKeown, “Header space analysis:
Static checking for networks,” in Presented as part of the 9th USENIX
Symposium on Networked Systems Design and Implementation (NSDI
12). San Jose, CA, USA: USENIX, 2012, pp. 113–126.
[14] A. Khurshid, W. Zhou, M. Caesar, and P. Godfrey, “Veriﬂow: Verifying
network-wide invariants in real time,” ACM SIGCOMM Computer
Communication Review, vol. 42, no. 4, pp. 467–472, 2012.
[15] P. Kazemian, M. Chang, H. Zeng, G. Varghese, N. McKeown, and
S. Whyte, “Real time network policy checking using header space
analysis,” in Proceedings of the 10th USENIX Conference on Networked
Systems Design and Implementation, ser. nsdi’13. Berkeley, CA, USA:
USENIX Association, 2013, pp. 99–112.
[16] N. P. Lopes, P. Godefroid, K. Jayaraman, and G. Varghese, “Checking
beliefs in dynamic networks,” in Usenix Conference on Networked
Systems Design and Implementation, 2015, pp. 499–512.
[17] S. K. Fayaz, T. Yu, Y. Tobioka, S. Chaki, and V. Sekar, “Buzz:
Testing context-dependent policies in stateful networks,” in 13th
USENIX Symposium on Networked Systems Design and Implementation
(NSDI 16). Santa Clara, CA: USENIX Association, Mar. 2016,
pp. 275–289. [Online]. Available: https://www.usenix.org/conference/
nsdi16/technical-sessions/presentation/fayaz
[18] R. Stoenescu, M. Popovici, L. Negreanu, and C. Raiciu, “Symnet:scalable symbolic execution for modern networks,” in ACM SIGCOMM Conference, 2016, pp. 314–327.
Available: https://www.usenix.org/conference/nsdi17/technical-sessions/
presentation/panda-mutable-datapaths
[19] A. Panda, O. Lahav, K. Argyraki, M. Sagiv, and S. Shenker, “Verifying
reachability in networks with mutable datapaths,” in 14th USENIX
Symposium on Networked Systems Design and Implementation (NSDI
17). Boston, MA: USENIX Association, 2017, pp. 699–718. [Online].
[20] NOX, “pyswitch,” https://github.com/noxrepo/nox-classic.
[21] T. Nelson, D. Yu, Y. Li, R. Fonseca, and S. Krishnamurthi, “Simon:
Scriptable interactive monitoring for sdns,” in Proceedings of the 1st
ACM SIGCOMM Symposium on Software Deﬁned Networking Research,
ser. SOSR ’15. New York, NY, USA: ACM, 2015, pp. 19:1–19:7.
[Online]. Available: http://doi.acm.org/10.1145/2774993.2774994
[22] ETSI, “Testing and test control notation version 3 (TTCN-3),”
http://www.ttcn-3.org/.
[23] X. Yin, Z. Wang, C. Jing, and X. Shi, “A TTCN-3-based protocol
testing system and its extension,” Science in China Series F: Information
Sciences, vol. 51, no. 11, pp. 1703–1722, 2008.
[24] D. Lee and M. Yannakakis, “Online minimization of transition systems,”
in Proceedings of the twenty-fourth annual ACM symposium on Theory
of computing, 1992, pp. 264–274.
[25] K. El-Fakih, A. Kolomeez, S. Prokopenko, and N. Yevtushenko, “Extended ﬁnite state machine based test derivation driven by user deﬁned
faults,” in International Conference on Software Testing, Veriﬁcation,
and Validation, ICST, 2008, pp. 308–317.
[26] A. S. Kalaji, R. M. Hierons, and S. Swift, “Generating feasible transition
paths for testing from an extended ﬁnite state machine (EFSM),” in International Conference on Software Testing Veriﬁcation and Validation,
ICST, 2009, pp. 230–239.
[27] Floodlight, “LearningSwitch,” https://github.com/ﬂoodlight/ﬂoodlight.
[28] J. Shah, “Implementation and performance analysis of ﬁrewall
on
open
vSwitch,”
https://www.net.in.tum.de/ﬁleadmin/bibtex
/publications/theses/2015-IDP-OpenFlow-Firewall.pdf.
[29] “Ryu SDN Framework,” 2014. [Online]. Available: https://osrg.github.
io/ryu/
[30] N. P. Katta, J. Rexford, and D. Walker, “Logic programming for
software-deﬁned networks,” in XLDI 2012.
[31] D. Sethi, S. Narayana, and S. Malik, “Abstractions for model checking SDN controllers,” in Formal Methods in Computer-Aided Design
(FMCAD), 2013. IEEE, 2013, pp. 145–148.
