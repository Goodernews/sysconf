[1] Miltiadis Allamanis and Charles Sutton. 2013. Mining Source Code Repositories at Massive Scale Using Language Modeling.

In Proceedings of the 10th Working Conference on Mining Software Repositories (MSR ’13). IEEE Press, Piscataway, NJ, USA,



[2] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 106. Publication date: October 2017.

Learning User Friendly Type-Error Messages 106:27



[3] Fig. 12. A comparison of oversampling techniques. We use the short names SMO and SMO-CV for SMOTE

and SMOTE-CV, respectively.

207-216. http://dl.acm.org/citation.cfm?id=2487085.2487 127



[4] Matej Balog, Alexander L. Gaunt, Marc Brockschmidt, Sebastian Nowozin, and Daniel Tarlow. 2016. DeepCoder: Learning

to Write Programs. CoRR abs/1611.01989 (2016). http://arxiv.org/abs/1611.01989



[5] Pavol Bielik, Veselin Raychev, and Martin Vechev. 2016a. PHOG: Probabilistic Model for Code. In Proceedings of the 33rd

International Conference on International Conference on Machine Learning - Volume 48 (ICML’16). JMLR.org, 2933-2942.

http://dlacm.org/citation.cfm?id=3045390.3045699



[6] Pavol Bielik, Veselin Raychev, and Martin T. Vechev. 2016b. Learning a Static Analyzer from Data. CoRR abs/1611.01752

(2016). http://arxiv.org/abs/1611.01752



[7] Christopher Chambers, Sheng Chen, Duc Le, and Christopher Scaffidi. 2012. The function, and dysfunction, of information

sources in learning functional programming. journal of Computing Sciences in Colleges 28, 1 (2012), 220-226.



[8] Nitesh V. Chawla, Kevin W. Bowyer, Lawrence O. Hall, and W. Philip Kegelmeyer. 2002. SMOTE: Synthetic Minority

Over-sampling Technique. J. Artif. Int. Res. 16, 1 June 2002), 321-357. http://dl.acm.org/citation.cfm?id=1622407.1622416



[9] Sheng Chen and Martin Erwig. 2014a. Counter-factual Typing for Debugging Type Errors. In Proceedings of the 41st ACM

SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’14). ACM, New York, NY, USA, 583-594.

DOI: http://dx.doi.org/10.1145/2535838.2535863



[10] S. Chen and M. Erwig. 2014b. Guided Type Debugging. In Int. Symp. on Functional and Logic Programming (LNCS 8475).

35-51,



[11] Sheng Chen, Martin Erwig, and Karl Smeltzer. 2017. Exploiting diversity in type checkers for better error messages. Journal

of Visual Languages & Computing 39 (2017), 10 — 21. DOI: http://dx.doi.org/10.1016/j.jvlc.2016.07.001 Special Issue on

Programming and Modelling Tools.



[12] Olaf Chitil. 2001. Compositional Explanation of Types and Algorithmic Debugging of Type Errors. In ACM Int. Conf: on

Functional Programming. 193-204.



[13] Robert H Creecy, Brij M Masand, Stephen J Smith, and David L Waltz. 1992. Trading MIPS and memory for knowledge

engineering. Commun. ACM 35, 8 (1992), 48-64.



[14] Pedro Domingos. 2000. A unified bias-variance decomposition. In Proceedings of 17th International Conference on Machine

Learning. Stanford CA Morgan Kaufmann. 231-238.



[15] Dominic Duggan and Frederick Bent. 1995. Explaining Type Inference. In Science of Computer Programming. 37-83.



[16] Charles Elkan. 2001. The foundations of cost-sensitive learning. In International joint conference on artificial intelligence,

Vol. 17. Lawrence Erlbaum Associates Ltd, 973-978.



[17] Kevin Ellis, Armando Solar-Lezama, and Joshua B. Tenenbaum. 2015. Unsupervised Learning by Program Synthesis. In

Proceedings of the 28th International Conference on Neural Information Processing Systems (NIPS’15). MIT Press, Cambridge,

MA, USA, 973-981. http://dl.acm.org/citation.cfm?id=2969239.2969348



[18] Hyunjun Eo, Oukseh Lee, and Kwangkeun Yi. 2004. Proofs of a set of hybrid let-polymorphic type inference algorithms.

New Generation Computing 22, 1 (2004), 1-36. DOL : http://dx.doi.org/10.1007/BF03037279



[19] Stuart Geman, Elie Bienenstock, and René Doursat. 1992. Neural networks and the bias/variance dilemma. Neural computation

4, 1(1992), 1-58,



[20] Christian Haack and J. B. Wells. 2003. Type error slicing in implicitly typed higher-order languages. In European Symposium

on Programming. 284-301.



[21] Jurriaan Hage and Bastiaan Heeren. 2007. Heuristics for Type Error Discovery and Recovery. In Implementation and

Application of Functional Languages. 199-216.



[22] Jurriaan Hage and Peter Van Keeken. 2006. Mining for Helium. Technical report UU-CS 2006-047 (2006).



[23] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 106. Publication date: October 2017.

106:28 Baijun Wu, John Peter Campora III, and Sheng Chen



[24] Jurriaan Hage and Peter van Keeken. 2009. Neon: A Library for Language Usage Analysis. In Software Language Engineering.

Lecture Notes in Computer Science, Vol. 5452, 35-53.



[25] Stefan Harmeling. 2000. Solving Satisfiability Problems with Genetic Algorithms. (2000).



[26] Haibo He and Edwardo A Garcia. 2009. Learning from imbalanced data. IEEE Transactions on knowledge and data engineering

21, 9 (2009), 1263-1284,



[27] Bastiaan Heeren, Daan Leijen, and Arjan van JJzendoorn. 2003. Helium, for learning Haskell. In Proceedings of the 2003 ACM

SIGPLAN workshop on Haskeil (Haskell ’03). ACM, New York, NY, USA, 62-71. DOI: http://dx.doi.org/10.1145/871895.

871902



[28] Bastiaan J. Heeren. 2005. Top Quality Type Error Messages. Ph.D. Dissertation. Universiteit Utrecht, The Netherlands.

http://www.cs.uu.nl/people/bastiaan/phdthesis



[29] Stefan Heule, Eric Schkufza, Rahul Sharma, and Alex Aiken. 2016. Stratified Synthesis: Automatically Learning the x86-64

Instruction Set. SIGPLAN Not. 51, 6 (June 2016), 237-250. DOL: http://dx.doi.org/10.1145/2980983.2908121



[30] Taeho Jo and Nathalie Japkowicz. 2004. Class imbalances versus small disjuncts. ACM Sigkdd Explorations Newsletter 6, 1

(2004), 40-49,



[31] Gregory F. Johnson and Janet A. Walz. 1986. Amaximum-flow approach to anomaly isolation in unification-based incremental

type inference. In ACM Symp. on Principles of Programming Languages. 44-57. DOI : http://dx.doi.org/10.1145/512644.

512649



[32] Michael J. Kearns and Umesh V. Vazirani. 1994, An Introduction to Computational Learning Theory. MIT Press, Cambridge,

MA, USA.



[33] Ron Kohavi and others. 1995. A study of cross-validation and bootstrap for accuracy estimation and model selection. In

Tjcai, Vol. 14. Stanford, CA, 1137-1145.



[34] Oukseh Lee and Kwangkeun Yi. 1998. Proofs about a folklore let-polymorphic type inference algorithm. ACM Trans. on

Programming Languages and Systems 20, 4 (July 1998), 707-723. DOT : http://dx.doi.org/10.1145/291891.291892



[35] Oukseh Lee and Kwangkeun Yi. 2000. A Generalized Let-Polymorphic Type Inference Algorithm. Technical Report. Technical Memorandum ROPAS-2000-5, Research on Program Analysis System, Korea Advanced Institute of Science and

Technology.



[36] B. Lerner, M. Flower, Dan Grossman, and Craig Chambers. 2007. Searching for type-error messages. In ACM Int. Conf. on

Programming Language Design and Implementation. 425-434. DOI: http://dx.doi.org/10.1145/1250734.1250783



[37] Xu-Ying Liu, Jianxin Wu, and Zhi-Hua Zhou. 2009. Exploratory undersampling for class-imbalance learning. [EEE

Transactions on Systems, Man, and Cybernetics, Part B (Cybernetics) 39, 2 (2009), 539-550.



[38] Calvin Loncaric, Satish Chandra, Cole Schlesinger, and Manu Sridharan. 2016. A Practical Framework for Type Inference

Error Explanation. In OOPSLA. 781-799.



[39] Bruce McAdam. 2002a. Trends in Functional Programming. Intellect Books, Exeter, UK, UK, Chapter How to Repair Type

Errors Automatically, 87-98. http://dl.acm.org/citation.cim?id=644403.644412



[40] Bruce J McAdam. 2002b. Reporting Type Errors in Functional Programs, Ph.D. Dissertation. Larboratory for Foundations of

Computer Science, The University of Edinburgh.



[41] Takao Mohri and Hidehiko Tanaka. 1994. An Optimal Weighting Criterion of Case Indexing for Both Numeric and Symbolic

Attributes. In In D. W. Aha (Ed.), Case-Based Reasoning: Papers from the 1994 Workshop, Technical Report WS-94-01. Menlo

Park, CA: Alf, AAAI Press, 123-127.



[42] Ankur Moitra. 2014. Algorithmic Aspects of Machine Learning. (2014).



[43] Matthias Neubauer and Peter Thiemann. 2003. Discriminative sum types locate the source of type errors. In ACM Int. Conf:

on Functional Programming. 15-26. DOI : http://dx.doi.org/10.1145/944705.944708



[44] Zvonimir Pavlinovic, Tim King, and Thomas Wies. 2014. Finding Minimum Type Error Sources. In OOPSLA. 525-542.



[45] Zvonimir Pavlinovic, Tim King, and Thomas Wies. 2015. Practical SMT-based Type Error Localization. In ICFP, 412-423.



[46] F, Pedregosa, G. Varoquaux, A. Gramfort, V. Michel, B. Thirion, O. Grisel, M. Blondel, P. Prettenhofer, R. Weiss, V. Dubourg,

J. Vanderplas, A. Passos, D. Cournapeau, M. Brucher, M. Perrot, and E. Duchesnay. 2011. Scikit-learn: Machine Learning

in Python. Journal of Machine Learning Research 12 (2011), 2825-2830.



[47] Simon Peyton Jones. 2003. Haskell 98 language and libraries: the revised report. Cambridge University Press.



[48] Claude E Shannon. 2001. A mathematical theory of communication. ACM SIGMOBILE Mobile Computing and Communications

Review 5, 1 (2001), 3-55.



[49] A, Sheneamer and J. Kalita. 2016. Semantic Clone Detection Using Machine Learning. In 2016 15th IEEE International

Conference on Machine Learning and Applications (ICMLA). 1024-1028. DOL : http://dx.doi.org/10.1109/ICMLA.2016.0185



[50] Peter J. Stuckey, Martin Sulzmann, and Jeremy Wazny. 2003. Interactive type debugging in Haskell. In ACM SIGPLAN

Workshop on Haskell. 72-83. DOI: http://dx.doi.org/10.1145/87 1895.87 1903



[51] Peter J. Stuckey, Martin Sulzmann, and Jeremy Wazny. 2004. Improving type error diagnosis. In ACM SIGPLAN Workshop on

Haskell. 80-91. DOL: http://dx.doi.org/10.1145/1017472.1017486



[52] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 106. Publication date: October 2017.

Learning User Friendly Type-Error Messages 106:29



[53] Kai Ming Ting. 2002. An instance-weighting method to induce cost-sensitive trees. IEEE Transactions on Knowledge and

Data Engineering 14, 3 (2002), 659-665.



[54] Ville Tirronen, SAMUEL UUSI-MAKELA, and VILLE ISOMOTTONEN. 2015. Understanding beginners’ mistakes with

Haskell. Journal of Functional Programming 25 (2015), e11.



[55] Mitchell Wand. 1986. Finding the source of type errors. In ACM Symp. on Principles of Programming Languages. 38—43. DOL:

http://dx.doi.org/10.1145/512644.512648



[56] BX Wang and Nathalie Japkowicz. 2004. Imbalanced data set learning with synthetic samples. In Proc. IRIS Machine Learning

Workshop, Vol. 19.



[57] Jeremy Richard Wazny. 2006. Type inference and type error diagnosis for Hindley/Milner with extensions, Ph.D. Dissertation.

The University of Melbourne.



[58] Baijun Wu and Sheng Chen. 2017. How Type Errors Were Fixed and What Students Did? Proc. ACM Program. Lang. 1,

OOPSLA, Article 105 (2017), 1 — 27.



[59] Jun Yang. 2000. Explaining Type Errors by Finding the Source of a Type Conflict. In Trends in Functional Programming.

Intellect Books, 58-66.



[60] Danfeng Zhang, Andrew C. Myers, Dimitrios Vytiniotis, and Simon Peyton-Jones. 2015. Diagnosing Type Errors with Class.

In ACM SIGPLAN Conference on Programming Language Design and Implementation. 12-21.



[61] He Zhu, Gustavo Petri, and Suresh Jagannathan. 2016. Automatically Learning Shape Specifications. In Proceedings of the

37th ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’16). ACM, New York, NY,

USA, 491-507. DOI : http://dx.doi.org/10.1145/2908080.2908125



[62] Proceedings of the ACM on Programming Languages, Vol. 1, No. OOPSLA, Article 106. Publication date: October 2017.
