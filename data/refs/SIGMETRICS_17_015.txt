[1] DIVA-DRAM Simulation Model and Experimental Data. https://github.com/CMU-SAFARI/DIVA-DRAM.
[2] Ramulator. https://github.com/CMU-SAFARI/ramulator.
[3] J. Ahn, S. Hong, S. Yoo, O. Mutlu, and K. Choi. A Scalable Processing-in-Memory Accelerator for Parallel Graph Processing. In ISCA,
2015.
[4] J. Ahn, S. Yoo, O. Mutlu, and K. Choi. PIM-Enabled Instructions: A Low-Overhead, Locality-Aware Processing-in-Memory Architecture.
In ISCA, 2015.
[5] A. Ailamaki, D. J. DeWitt, M. D. Hill, and D. A. Wood. DBMSs on a Modern Processor: Where Does Time Go? In VLDB, 1999.
[6] A. R. Alameldeen, I. Wagner, Z. Chishti, W. Wu, C. Wilkerson, and S.-L. Lu. Energy-Efficient Cache Design Using Variable-Strength
Error-Correcting Codes. In ISCA, 2011.
[7] Arizona State Univ. Predictive Technology Model. http://ptm.asu.edu/, 2012.
[8] K. Arndt, C. Narayan, A. Brintzinger, W. Guthrie, D. Lachtrupp, J. Mauger, D. Glimmer, S. Lawn, B. Dinkel, and A. Mitwalsky. Reliability
of Laser Activated Metal Fuses in DRAMs. In IEMT, 1999.
[9] S. Borkar and A. A. Chien. The Future of Microprocessors. In CACM, 2011.
[10] A. Boroumand, S. Ghose, B. Lucia, K. Hsieh, K. Malladi, H. Zheng, and O. Mutlu. LazyPIM: An Efficient Cache Coherence Mechanism
for Processing-in-Memory. In IEEE CAL, 2016.
[11] S. Cha, S. O, H. Shin, S. Hwang, K. Park, S. Jang, J. Choi, G. Jin, Y. Son, H. Cho, J. Ahn, and N. Kim. Defect Analysis and Cost Effective
Resilience Architecture for Future DRAM Devices. In HPCA, 2017.
[12] K. Chandrasekar, S. Goossens, C. Weis, M. Koedam, B. Akesson, N. Wehn, and K. Goossens. Exploiting Expendable Process-Margins in
DRAMs for Run-Time Performance Optimization. In DATE, 2014.
[13] K. K. Chang. Understanding and Improving Latency of DRAM-Based Memory Systems. PhD thesis, Carnegie Mellon University, 2017.
[14] K. K. Chang, A. Kashyap, H. Hassan, S. Ghose, K. Hsieh, D. Lee, T. Li, G. Pekhimenko, S. Khan, and O. Mutlu. Understanding Latency
Variation in Modern DRAM Chips: Experimental Characterization, Analysis, and Optimization. In SIGMETRICS, 2016.
[15] K. K. Chang, D. Lee, Z. Chishti, A. Alameldeen, C. Wilkerson, Y. Kim, and O. Mutlu. Improving DRAM Performance by Parallelizing
Refreshes with Accesses. In HPCA, 2014.
[16] K. K. Chang, P. J. Nair, S. Ghose, D. Lee, M. K. Qureshi, and O. Mutlu. Low-Cost Inter-Linked Subarrays (LISA): Enabling Fast
Inter-Subarray Data Movement in DRAM. In HPCA, 2016.
[17] K. K. Chang, A. G. Yaglikci, A. Agrawal, N. Chatterjee, S. Ghose, A. Kashyap, H. Hassan, D. Lee, M. O’Connor, and O. Mutlu.
Understanding Reduced-Voltage Operation in Modern DRAM Devices: Experimental Characterization, Analysis, and Mechanisms. In
SIGMETRICS, 2017.
[18] C. Elm, M. Klein, and D. Tavangarian. Automatic On-Line Memory Tests in Workstations. In MTDT, 1994.
[19] S. Eyerman and L. Eeckhout. System-Level Performance Metrics for Multiprogram Workloads. In IEEE Micro, 2008.
[20] A. Farmahini-Farahani, J. H. Ahn, K. Morrow, and N. S. Kim. NDA: Near-DRAM Acceleration Architecture Leveraging Commodity
DRAM Devices and Standard Memory Modules. In HPCA, 2015.
[21] M. Gao, G. Ayers, and C. Kozyrakis. Practical Near-Data Processing for In-Memory Analytics Frameworks. In PACT, 2015.
[22] Q. Guo, N. Alachiotis, B. Akin, F. Sadi, G. Xu, T. M. Low, L. Pileggi, J. C. Hoe, and F. Franchetti. 3D-Stacked Memory-Side Acceleration:
Accelerator and System Design. In WoNDP, 2014.
[23] H. Hassan, G. Pekhimenko, N. Vijaykumar, V. Seshadri, D. Lee, O. Ergin, and O. Mutlu. ChargeCache: Reducing DRAM Latency by
Exploiting Row Access Locality. In HPCA, 2016.

[24] H. Hassan, N. Vijaykumar, S. Khan, S. Ghose, K. Chang, G. Pekhimenko, D. Lee, O. Ergin, and O. Mutlu. SoftMC: A Flexible and
Practical Open-Source Infrastructure for Enabling Experimental DRAM Studies. In HPCA, 2017.
[25] M. Horiguchi and K. Itoh. Nanoscale Memory Repair. Springer, 2013.
[26] HPC Challenge. GUPS. http://icl.cs.utk.edu/projectsfiles/hpcc/RandomAccess/.
[27] K. Hsieh, E. Ebrahimi, G. Kim, N. Chatterjee, M. O’Connor, N. Vijaykumar, O. Mutlu, and S. W. Keckler. Transparent Offloading and
Mapping (TOM): Enabling Programmer-Transparent Near-Data Processing in GPU Systems. In ISCA, 2016.
[28] K. Hsieh, S. Khan, N. Vijaykumar, K. K. Chang, A. Boroumand, S. Ghose, and O. Mutlu. Accelerating Pointer Chasing in 3D-Stacked
Memory: Challenges, Mechanisms, Evaluation. In ICCD, 2016.
[29] A. A. Hwang, I. A. Stefanovici, and B. Schroeder. Cosmic Rays Don’t Strike Twice: Understanding the Nature of DRAM Errors and the
Implications for System Design. In ASPLOS, 2012.
[30] M. Inoue, T. Yamada, H. Kotani, H. Yamauchi, A. Fujiwara, J. Matsushima, H. Akamatsu, M. Fukumoto, M. Kubota, I. Nakao, N. Aoi,
G. Fuse, S. Ogawa, S. Odanaka, A. Ueno, and H. Yamamoto. A 16-Mbit DRAM with a Relaxed Sense-Amplifier-Pitch Open-Bit-Line
Architecture. In JSSC, 1988.
[31] JEDEC Solid State Technology Assn. JESD79-3F: DDR3 SDRAM Standard, 2012.
[32] T. S. Jung. Memory technology and solutions roadmap. http://www.sec.co.kr/images/corp/ir/irevent/techforum_01.pdf, 2005.
[33] U. Kang, H.-S. Yu, C. Park, H. Zheng, J. Halbert, K. Bains, S. Jang, and J. Choi. Co-Architecting Controllers and DRAM to Enhance
DRAM Process Scaling. In The Memory Forum, 2014.
[34] B. Keeth, R. J. Baker, B. Johnson, and F. Lin. DRAM Circuit Design: Fundamental and High-Speed Topics. Wiley-IEEE Press, 2007.
[35] S. Khan, D. Lee, Y. Kim, A. R. Alameldeen, C. Wilkerson, and O. Mutlu. The Efficacy of Error Mitigation Techniques for DRAM
Retention Failures: A Comparative Experimental Study. In SIGMETRICS, 2014.
[36] S. Khan, D. Lee, and O. Mutlu. PARBOR: An Efficient System-Level Technique to Detect Data-Dependent Failures in DRAM. In DSN,
2016.
[37] S. Khan, C. Wilkerson, D. Lee, A. R. Alameldeen, and O. Mutlu. A Case for Memory Content-Based Detection and Mitigation of
Data-Dependent Failures in DRAM. In IEEE CAL, 2016.
[38] J. Kim, M. Sullivan, and M. Erez. Bamboo ECC: Strong, Safe, and Flexible Codes for Reliable Computer Memory. In HPCA, 2015.
[39] K. Kim and J. Lee. A New Investigation of Data Retention Time in Truly Nanoscaled DRAMs. In EDL, 2009.
[40] Y. Kim. Architectural Techniques to Enhance DRAM Scaling. PhD thesis, Carnegie Mellon University, 2015.
[41] Y. Kim, R. Daly, J. Kim, C. Fallin, J. H. Lee, D. Lee, C. Wilkerson, K. Lai, and O. Mutlu. Flipping Bits in Memory Without Accessing
Them: An Experimental Study of DRAM Disturbance Errors. In ISCA, 2014.
[42] Y. Kim, V. Seshadri, D. Lee, J. Liu, and O. Mutlu. A Case for Exploiting Subarray-Level Parallelism (SALP) in DRAM. In ISCA, 2012.
[43] Y. Kim, W. Yang, and O. Mutlu. Ramulator: A Fast and Extensible DRAM Simulator. In IEEE CAL, 2015.
[44] O. Kocberber, B. Grot, J. Picorel, B. Falsafi, K. Lim, and P. Ranganathan. Meet the Walkers: Accelerating Index Traversals for In-Memory
Databases. In MICRO, 2013.
[45] P. M. Kogge. EXECUBE-A New Architecture for Scaleable MPPs. In ICPP, 1994.
[46] D. Lee. Reducing DRAM Latency at Low Cost by Exploiting Heterogeneity. PhD thesis, Carnegie Mellon University, 2016.
[47] D. Lee, S. M. Khan, L. Subramanian, R. Ausavarungnirun, G. Pekhimenko, V. Seshadri, S. Ghose, and O. Mutlu. Reducing DRAM
Latency by Exploiting Design-Induced Latency Variation in Modern DRAM Chips. In CoRR abs/1610.09604, 2016.
[48] D. Lee, Y. Kim, G. Pekhimenko, S. Khan, V. Seshadri, K. Chang, and O. Mutlu. Adaptive-Latency DRAM: Optimizing DRAM Timing for
the Common-Case. In HPCA, 2015.
[49] D. Lee, Y. Kim, V. Seshadri, J. Liu, L. Subramanian, and O. Mutlu. Tiered-Latency DRAM: A Low Latency and Low Cost DRAM
Architecture. In HPCA, 2013.
[50] D. Lee, L. Subramanian, R. Ausavarungnirun, J. Choi, and O. Mutlu. Decoupled Direct Memory Access: Isolating CPU and IO Traffic by
Leveraging a Dual-Data-Port DRAM. In PACT, 2015.
[51] X. Li, K. Shen, M. C. Huang, and L. Chu. A Memory Soft Error Measurement on Production Systems. In USENIX ATC, 2007.
[52] J. Liu, B. Jaiyen, Y. Kim, C. Wilkerson, and O. Mutlu. An Experimental Study of Data Retention Behavior in Modern DRAM Devices:
Implications for Retention Time Profiling Mechanisms. In ISCA, 2013.
[53] J. Liu, B. Jaiyen, R. Veras, and O. Mutlu. RAIDR: Retention-Aware Intelligent DRAM Refresh. In ISCA, 2012.
[54] C.-K. Luk, R. Cohn, R. Muth, H. Patil, A. Klauser, G. Lowney, S. Wallace, V. J. Reddi, and K. Hazelwood. Pin: Building Customized
Program Analysis Tools with Dynamic Instrumentation. In PLDI, 2005.
[55] Y. Luo, S. Govindan, B. Sharma, M. Santaniello, J. Meza, A. Kansal, J. Liu, B. Khessib, K. Vaid, and O. Mutlu. Characterizing Application
Memory Error Vulnerability to Optimize Datacenter Cost via Heterogeneous-Reliability Memory. In DSN, 2014.
[56] J. D. McCalpin. STREAM Benchmark. http://www.streambench.org/.
[57] J. Meza, Q. Wu, S. Kumar, and O. Mutlu. Revisiting Memory Errors in Large-Scale Production Data Centers: Analysis and Modeling of
New Trends from the Field. In DSN, 2015.
[58] Micron Technology, Inc. RLDRAM 2 and 3 Specifications. http://www.micron.com/products/dram/rldram-memory.

[59] Micron Technology, Inc. 4Gb DDR3 SDRAM (MT41J512M8), 2012.
[60] K.-S. Min, J.-T. Park, S.-P. Lee, Y.-H. Kim, T.-H. Yang, J.-D. Joo, K.-M. Lee, J.-K. Wee, and J.-Y. Chung. A Post-Package Bit-Repair Scheme
Using Static Latches with Bipolar-Voltage Programmable Antifuse Circuit for High-Density DRAMs. In VLSI, 2001.
[61] N. S. Mirzadeh, O. Kocberber, B. Falsafi, and B. Grot. Sort vs. Hash Join Revisited for Near-Memory Execution. In ASBD, 2015.
[62] Y. Mori, K. Ohyu, K. Okonogi, and R.-I. Yamada. The Origin of Variable Retention Time in DRAM. In IEDM, 2005.
[63] T. Moscibroda and O. Mutlu. Memory Performance Attacks: Denial of Memory Service in Multi-Core Systems. In USENIX Security,
2007.
[64] O. Mutlu. Memory Scaling: A Systems Architecture Perspective. In IMW, 2013.
[65] O. Mutlu. The RowHammer Problem and Other Issues We May Face as Memory Becomes Denser. In DATE, 2017.
[66] O. Mutlu, J. Stark, C. Wilkerson, and Y. N. Patt. Runahead Execution: An Alternative to Very Large Instruction Windows for Out-of-Order
Processors. In HPCA, 2003.
[67] O. Mutlu and L. Subramanian. Research Problems and Opportunities in Memory Systems. In SUPERFRI, 2014.
[68] P. J. Nair, D.-H. Kim, and M. K. Qureshi. ArchShield: Architectural Framework for Assisting DRAM Scaling by Tolerating High Error
Rates. In ISCA, 2013.
[69] M. Patel, J. Kim, and O. Mutlu. The Reach Profiler (REAPER): Enabling the Mitigation of DRAM Retention Failures via Profiling at
Aggressive Conditions. In ISCA, 2017.
[70] H. Patil, R. Cohn, M. Charney, R. Kapoor, A. Sun, and A. Karunanidhi. Pinpointing Representative Portions of Large Intel Itanium
Programs with Dynamic Instrumentation. In MICRO, 2004.
[71] D. Patterson, T. Anderson, N. Cardwell, R. Fromm, K. Keeton, C. Kozyrakis, R. Thomas, and K. Yelick. A Case for Intelligent RAM. In
IEEE Micro, 1997.
[72] D. A. Patterson. Latency Lags Bandwidth. In CACM, 2004.
[73] A. Pattnaik, X. Tang, A. Jog, O. Kayiran, A. K. Mishra, M. T. Kandemir, O. Mutlu, and C. R. Das. Scheduling Techniques for GPU
Architectures with Processing-in-Memory Capabilities. In PACT, 2016.
[74] M. Qureshi, D.-H. Kim, S. Khan, P. Nair, and O. Mutlu. AVATAR: A Variable-Retention-Time (VRT) Aware Refresh for DRAM Systems.
In DSN, 2015.
[75] M. Rahman, B. Childers, and S. Cho. COMeT: Continuous Online Memory Test. In PRDC, 2011.
[76] P. J. Restle, J. W. Park, and B. F. Lloyd. DRAM Variable Retention Time. In IEDM, 1992.
[77] S. Rixner, W. J. Dally, U. J. Kapasi, P. Mattson, and J. D. Owens. Memory Access Scheduling. In ISCA, 2000.
[78] B. Schroeder and G. Gibson. A Large-Scale Study of Failures in High-Performance Computing Systems. In TDSC, 2010.
[79] B. Schroeder, E. Pinheiro, and W.-D. Weber. DRAM Errors in the Wild: A Large-Scale Field Study. In SIGMETRICS, 2009.
[80] V. Seshadri, K. Hsieh, A. Boroumand, D. Lee, M. Kozuch, O. Mutlu, P. Gibbons, and T. Mowry. Fast Bulk Bitwise AND and OR in
DRAM. In IEEE CAL, 2015.
[81] V. Seshadri, Y. Kim, C. Fallin, D. Lee, R. Ausavarungnirun, G. Pekhimenko, Y. Luo, O. Mutlu, P. B. Gibbons, M. A. Kozuch, and T. C.
Mowry. RowClone: Fast and Energy-Efficient In-DRAM Bulk Data Copy and Initialization. In MICRO, 2013.
[82] V. Seshadri, D. Lee, T. Mullins, H. Hassan, A. Boroumand, J. Kim, M. A. Kozuch, O. Mutlu, P. B. Gibbons, and T. C. Mowry. Buddy-RAM:
Improving the Performance and Efficiency of Bulk Bitwise Operations Using DRAM. In CoRR abs/1605.06483, 2016.
[83] V. Seshadri, T. Mullins, A. Boroumand, O. Mutlu, P. B. Gibbons, M. A. Kozuch, and T. C. Mowry. Gather-Scatter DRAM: In-DRAM
Address Translation to Improve the Spatial Locality of Non-Unit Strided Accesses. In MICRO, 2015.
[84] W. Shin, J. Yang, J. Choi, and L.-S. Kim. NUAT: A Non-Uniform Access Time Memory Controller. In HPCA, 2014.
[85] A. Singh, D. Bose, and S. Darisala. Software Based In-System Memory Test for Highly Available Systems. In MTDT, 2005.
[86] A. Snavely and D. M. Tullsen. Symbiotic Jobscheduling for a Simultaneous Multithreaded Processor. In ASPLOS, 2000.
[87] Y. H. Son, O. Seongil, Y. Ro, J. W. Lee, and J. H. Ahn. Reducing Memory Access Latency with Asymmetric DRAM Bank Organizations.
In ISCA, 2013.
[88] V. Sridharan and D. Liberty. A Study of DRAM Failures in the Field. In SC, 2012.
[89] V. Sridharan, J. Stearley, N. DeBardeleben, S. Blanchard, and S. Gurumurthi. Feng Shui of Supercomputer Memory: Positional Effects
in DRAM and SRAM Faults. In SC, 2013.
[90] Standard Performance Evaluation Corp. SPEC CPU2006. http://www.spec.org/cpu2006.
[91] H. S. Stone. A Logic-in-Memory Computer. In IEEE TC, 1970.
[92] A. Tanabe, T. Takeshima, H. Koike, Y. Aimoto, M. Takada, T. Ishijima, N. Kasai, H. Hada, K. Shibahara, T. Kunio, T. Tanigawa, T. Saeki,
M. Sakao, H. Miyamoto, H. Nozue, S. Ohya, T. Murotani, K. Koyama, and T. Okuda. A 30-ns 64-Mb DRAM with Built-In Self-Test and
Self-Repair Function. In JSSC, 1992.
[93] Transaction Processing Performance Council. TPC Benchmark. http://www.tpc.org/.
[94] A. J. van de Goor and I. Schanstra. Address and Data Scrambling: Causes and Impact on Memory Tests. In DELTA, 2002.
[95] R. Venkatesan, S. Herr, and E. Rotenberg. Retention-Aware Placement in DRAM (RAPID): Software Methods for Quasi-Non-Volatile
DRAM. HPCA, 2006.

[96] T. Vogelsang. Understanding the Energy Consumption of Dynamic Random Access Memories. In MICRO, 2010.
[97] J.-K. Wee, W. Yang, E.-K. Ryou, J.-S. Choi, S.-H. Ahn, J.-Y. Chung, and S.-C. Kim. An Antifuse EPROM Circuitry Scheme for FieldProgrammable Repair in DRAM. In JSSC, 2000.
[98] C. Wilkerson, A. R. Alameldeen, Z. Chishti, W. Wu, D. Somasekhar, and S.-l. Lu. Reducing Cache Power with Low-Cost, Multi-Bit
Error-Correcting Codes. In ISCA, 2010.
[99] Xilinx, Inc. Virtex-6 FPGA Integrated Block for PCI Express, 2011. http://www.xilinx.com/support/documentation/ip_documentation/
mig/v3_92/ug406.pdf.
[100] Xilinx, Inc. ML605 Hardware User Guide, 2012. http://www.xilinx.com/support/documentation/boards_and_kits/ug534.pdf.
[101] Xilinx, Inc. Virtex-6 FPGA Memory Interface Solutions, 2013. http://www.xilinx.com/support/documentation/ip_documentation/mig/
v3_92/ug406.pdf.
[102] D. Yaney, C. Y. Lu, R. Kohler, M. J. Kelly, and J. Nelson. A Meta-Stable Leakage Phenomenon in DRAM Charge Storage - Variable Hold
Time. In IEDM, 1987.
[103] W. Zhao and Y. Cao. New Generation of Predictive Technology Model for Sub-45nm Design Exploration. In ISQED, 2006.
[104] W. K. Zuravleff and T. Robinson. Controller for a Synchronous DRAM That Maximizes Throughput by Allowing Memory Requests
and Commands to Be Issued Out of Order. U.S. Patent No. 5630096, 1997.

