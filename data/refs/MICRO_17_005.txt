[1] “STREAM Benchmark,” http://www.streambench.org/.
[2] “Oral history of Joel Karp,” Computer History Museum, 2003.
[3] J. Ahn et al., “A Scalable Processing-in-Memory Accelerator for Parallel
Graph Processing,” in ISCA, 2015.
[4] J. Ahn et al., “PIM-Enabled Instructions: A Low-Overhead, LocalityAware Processing-in-Memory Architecture,” in ISCA, 2015.
[5] Z. Al-Ars et al., “Effects of bit line coupling on the faulty behavior of
DRAMs,” in VTS, 2004.
[6] B. Arnold, Pareto distributions. Chapman & Hall/CRC Monographs on
Statistics & Applied Probability, 1983.
[7] A. Bacchini et al., “Characterization of data retention faults in DRAM
devices,” in DFT, 2014.
[8] Y. Bao et al., “HMTT: A platform independent full-system memory trace
monitoring system,” in SIGMETRICS, 2008.
[9] R. E. Barlow et al., “Properties of probability distributions with monotone
hazard rate,” The Annals of Mathematical Statistics, 1963.
[10] G. B. Bell et al., “Characterization of silent stores,” in PACT, 2000.
[11] S. Cha et al., “Defect analysis and cost-effective resilience architecture
for future DRAM devices,” in HPCA, 2017.
[12] K. Chandrasekar et al., “Exploiting Expendable Process-margins in
DRAMs for Run-time Performance Optimization,” in DATE, 2014.
[13] K. K. Chang, “Understanding and improving the latency of DRAM-based
memory systems,” Ph.D. dissertation, CMU, 2017.
[14] K. K. Chang et al., “Understanding Latency Variation in Modern DRAM
Chips: Experimental Characterization, Analysis, and Optimization,” in
SIGMETRICS, 2016.
[15] K. K. Chang et al., “Improving DRAM performance by parallelizing refreshes with accesses,” in HPCA, 2014.
[16] K. K. Chang et al., “Low-Cost Inter-Linked Subarrays (LISA): Enabling
Fast Inter-Subarray Data Movement in DRAM,” in HPCA, 2016.
[17] K. K. Chang et al., “Understanding reduced-voltage operation in modern
DRAM devices: Experimental characterization, analysis, and mechanisms,” in SIGMETRICS, 2017.
[18] M. E. Crovella and A. Bestavros, “Self-similarity in world wide web traffic:
Evidence and possible causes,” IEEE/ACM Trans. Netw., 1997.
[19] M. Harchol-Balter and A. B. Downey, “Exploiting process lifetime distributions for dynamic load balancing,” in SIGMETRICS, 1996.
[20] H. Hassan et al., “ChargeCache: Reducing DRAM Latency by Exploiting
Row Access Locality,” in HPCA, 2016.
[21] H. Hassan et al., “SoftMC: A Flexible and Practical Open-Source Infrastructure for Enabling Experimental DRAM Studies,” in HPCA, 2017.
[22] M. Horiguchi and K. Itoh, Repair for Nanoscale Memories. Springer, 2011.
[23] K. Hsieh et al., “Accelerating pointer chasing in 3D-stacked memory:
Challenges, mechanisms, evaluation,” in ICCD, 2016.
[24] A. A. Hwang et al., “Cosmic Rays Don’t Strike Twice: Understanding
the Nature of DRAM Errors and the Implications for System Design,” in
ASPLOS, 2012.
[25] C. Isen and L. John, “ESKIMO - Energy savings using semantic knowledge
of inconsequential memory occupancy for DRAM subsystem,” in ISCA,
2009.
[26] JEDEC, JEDEC Standard: Low Power Double Data Rate 2 (LPDDR2), 2010.
[27] JEDEC, Standard No. 79-3F. DDR3 SDRAM Specification, 2012.
[28] JEDEC, Standard No. 79-4B. DDR4 SDRAM Specification, 2017.
[29] M. Jung et al., “Reverse engineering of DRAMs: Row hammer with
crosshair,” in MEMSYS, 2016.
[30] U. Kang et al., “Co-Architecting Controllers and DRAM to Enhance DRAM
Process Scaling,” in The Memory Forum, 2014.
[31] S. Khan et al., “PARBOR: An Efficient System-Level Technique to Detect
Data-Dependent Failures in DRAM,” in DSN, 2016.
[32] S. Khan et al., “The Efficacy of Error Mitigation Techniques for DRAM
Retention Failures: A Comparative Experimental Study,” in SIGMETRICS,
2014.
[33] S. Khan et al., “A case for memory content-based detection and mitigation
of data-dependent failures in DRAM,” in IEEE CAL, 2016.
[34] S. Khan et al., MEMCON Data Repository, https://github.com/samirakhan/
MEMCON-data, 2017.
[35] K. Kim, “Technology for sub-50nm DRAM and NAND flash manufacturing,” in IEDM, 2005.
[36] Y. Kim et al., “Ramulator: A Fast and Extensible DRAM Simulator,” in
IEEE CAL, 2015.
[37] Y. Kim et al., Ramulator Repository, https://github.com/CMU-SAFARI/
ramulator, 2015.
[38] Y. Kim, “Architectural techniques to enhance DRAM scaling,” Ph.D. dissertation, CMU, 2015.
[39] Y. Kim et al., “Flipping Bits in Memory Without Accessing Them: An
Experimental Study of DRAM Disturbance Errors,” in ISCA, 2014.
[40] Y. Kim et al., “ATLAS: A scalable and high-performance scheduling algorithm for multiple memory controllers.” in HPCA, 2010.
[41] Y. Kim et al., “A Case for Exploiting Subarray-Level Parallelism (SALP)
in DRAM,” in ISCA, 2012.
[42] D. Lee et al., “Decoupled Direct Memory Access: Isolating CPU and IO
Traffic by Leveraging a Dual-Data-Port DRAM,” in PACT, 2015.
[43] D. Lee, “Reducing DRAM latency at low cost by exploiting heterogeneity,”
Ph.D. dissertation, CMU, 2015.
[44] D. Lee et al., “Reducing DRAM latency by exploiting design-induced
latency variation in modern DRAM chips,” in ArXiv, 2016.
[45] D. Lee et al., “Design-induced latency variation in modern DRAM chips:
Characterization, analysis, and latency reduction mechanisms,” in SIGMETRICS, 2017.
[46] D. Lee et al., “Adaptive-latency DRAM: Optimizing DRAM timing for the
common-case,” in HPCA, 2015.
[47] D. Lee et al., “Tiered-latency DRAM: A low latency and low cost DRAM
architecture,” in HPCA, 2013.
[48] K. M. Lepak and M. H. Lipasti, “Silent stores for free,” in MICRO, 2000.
[49] K. M. Lepak and M. H. Lipasti, “On the value locality of store instructions,”
in ISCA, 2000.
[50] K. M. Lepak and M. H. Lipasti, “Temporally silent stores,” in ASPLOS,
2002.
[51] J. Liu et al., “An Experimental Study of Data Retention Behavior in Modern
DRAM Devices: Implications for Retention Time Profiling Mechanisms,”
in ISCA, 2013.
[52] J. Liu et al., “RAIDR: Retention-Aware Intelligent DRAM Refresh,” in ISCA,
2012.
[53] S. Liu et al., “Flikker: Saving DRAM Refresh-power Through Critical Data
Partitioning,” in ASPLOS, 2011.
[54] C.-K. Luk et al., “Pin: Building customized program analysis tools with
dynamic instrumentation,” in PLDI, 2005.
[55] Y. Luo et al., “Characterizing application memory error vulnerability to
optimize datacenter cost via heterogeneous-reliability memory,” in DSN,
2014.
[56] J. A. Mandelman et al., “Challenges and future directions for the scaling
of dynamic random-access memory (DRAM),” IBM J. of Res. and Dev.,
2002.
[57] J. Meza et al., “Enabling efficient and scalable hybrid memories using
fine-granularity DRAM cache management,” IEEE CAL, vol. 11, 2012.
[58] J. Meza et al., “Revisiting Memory Errors in Large-Scale Production Data
Centers: Analysis and Modeling of New Trends from the Field,” in DSN,
2015.
[59] W. Mueller et al., “Challenges for the DRAM cell scaling to 40nm,” in
IEDM, 2005.
[60] J. Mukundan et al., “Understanding and mitigating refresh overheads in
high-density DDR4 DRAM systems,” in ISCA, 2013.
[61] O. Mutlu, “The rowhammer problem and other issues we may face as
memory becomes denser,” in DATE, 2017.
[62] O. Mutlu, “Memory scaling: A systems architecture perspective,” IMW,
2013.
[63] O. Mutlu and L. Subramanian, “Research problems and opportunities in
memory systems,” SUPERFRI, 2014.
[64] P. Nair et al., “A case for refresh pausing in DRAM memory systems,” in
HPCA, 2013.
[65] P. Nair et al., “ArchShield: Architectural framework for assisting DRAM
scaling by tolerating high error rates,” in ISCA, 2013.
[66] Y. Nakagome et al., “The impact of data-line interference noise on DRAM
scaling,” JSSC, 1988.
[67] M. Patel et al., “The reach profiler (REAPER): Enabling the mitigation of
DRAM retention failures via profiling at aggressive conditions,” in ISCA,
2017.
[68] V. Paxson and S. Floyd, “Wide area traffic: The failure of Poisson modeling,” IEEE/ACM Transactions on Networking, 1995.
[69] E. Perelman et al., “Using SimPoint for accurate and efficient simulation,”
in SIGMETRICS, 2003.
[70] M. Qureshi et al., “AVATAR: A Variable-Retention-Time (VRT) Aware
Refresh for DRAM Systems,” in DSN, 2015.
[71] M. Qureshi and G. H. Loh, “Fundamental latency trade-off in architecting
DRAM caches: Outperforming impractical SRAM-Tags with a simple and
practical design,” in MICRO, 2012.
[72] M. Redeker et al., “An investigation into crosstalk noise in DRAM structures,” in MTDT, 2002.
[73] B. Schroeder and M. Harchol-Balter, “Evaluation of task assignment
policies for supercomputing servers: The case for load unbalancing and
fairness,” Cluster Computing, vol. 7, no. 2, Apr. 2004.
[74] B. Schroeder et al., “DRAM errors in the wild: A large-scale field study,”
in SIGMETRICS, 2009.
[75] V. Seshadri et al., “Fast bulk bitwise AND and OR in dram,” in IEEE CAL,
2015.
[76] V. Seshadri et al., “RowClone: Fast and Energy-efficient in-DRAM Bulk
Data Copy and Initialization,” in MICRO, 2013.
[77] V. Seshadri et al., “Ambit: In-memory accelerator for bulk bitwise operations using commodity DRAM technology,” in MICRO, 2017.
[78] V. Seshadri et al., “Gather-scatter DRAM: In-DRAM address translation
to improve the spatial locality of non-unit strided accesses,” in MICRO,
2015.
[79] V. Seshadri and O. Mutlu, Simple Operations in Memory to Reduce Data
Movement. Advances in Computers, 2016.
[80] SPEC CPU2006, “Standard Performance Evaluation Corporation,”
http://www.spec.org/cpu2006.
[81] V. Sridharan et al., “Memory errors in modern systems: The good, the
bad, and the ugly,” in ASPLOS, 2015.
[82] V. Sridharan and D. Liberty, “A Study of DRAM Failures in the Field,” in
SC, 2012.
[83] J. Stuecheli et al., “Elastic refresh: Techniques to mitigate refresh penalties
in high density memory,” in ISCA, 2010.
[84] Transaction Processing Performance Council, “TPC 2011,”
http://www.tpc.org/.
[85] A. J. van de Goor and I. Schanstra, “Address and Data Scrambling: Causes
and Impact on Memory Tests,” in DELTA, 2002.
[86] R. Venkatesan et al., “Retention-Aware Placement in DRAM (RAPID):
Software Methods for Quasi-Non-Volatile DRAM,” in HPCA, 2006.
[87] Xilinx, ML605 Hardware User Guide, 2012.
[88] D. H. Yoon and M. Erez, “Virtualized and Flexible ECC for Main Memory,”
in ASPLOS, 2010.
[89] X. Yu et al., “Banshee: Bandwidth-efficient DRAM caching via software/hardware cooperation,” in MICRO, 2017.
