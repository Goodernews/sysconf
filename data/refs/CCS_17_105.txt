[1] Andrea Allievi and Holger Unterbrink. 2015. CryptoWall 4 The Evolution Con-

[2] Magal Baz and Or Safran. 2017. Dridex’s Cold War: Enter AtomBombing. (2017).
[3] Fabrice Bellard. 2005. QEMU, a Fast and Portable Dynamic Translator. In Pro-
ceedings of the Annual Conference on USENIX Annual Technical Conference (ATEC
’05). USENIX Association, Berkeley, CA, USA, 41–41. http://dl.acm.org/citation.
cfm?id=1247360.1247401
[4] Tyler Bletsch, Xuxian Jiang, Vince W. Freeh, and Zhenkai Liang. 2011. Jump-
oriented Programming: A New Class of Code-reuse Attack. In Proceedings of
the 6th ACM Symposium on Information, Computer and Communications Security
(ASIACCS ’11). ACM, New York, NY, USA, 30–40. https://doi.org/10.1145/1966913.
1966919
[5] Guillaume Bonfante, Jose Fernandez, Jean-Yves Marion, Benjamin Rouxel, Fab-
rice Sabatier, and Aur´elien Thierry. 2015. CoDisasm: Medium Scale Con-
catic Disassembly of Self-Modifying Binaries with Overlapping Instructions.
In Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Com-
munications Security (CCS ’15). ACM, New York, NY, USA, 745–756. https:
//doi.org/10.1145/2810103.2813627
[6] Erik Buchanan, Ryan Roemer, Hovav Shacham, and Stefan Savage. 2008. When
Good Instructions Go Bad: Generalizing Return-oriented Programming to RISC.
In Proceedings of the 15th ACM Conference on Computer and Communications
Security (CCS ’08). ACM, New York, NY, USA, 27–38. https://doi.org/10.1145/
1455770.1455776
[7] Lorenzo Cavallaro, Prateek Saxena, and R. Sekar. 2008. On the Limits of Informa-
tion Flow Techniques for Malware Analysis and Containment. In Proceedings of
the 5th International Conference on Detection of Intrusions and Malware, and Vul-
nerability Assessment (DIMVA ’08). Springer-Verlag, Berlin, Heidelberg, 143–163.
https://doi.org/10.1007/978-3-540-70542-0 8
[8] Stephen Checkoway, Ariel J. Feldman, Brian Kantor, J. Alex Halderman, Ed-
ward W. Felten, and Hovav Shacham. 2009. Can DREs Provide Long-lasting
Security? The Case of Return-oriented Programming and the AVC Advantage. In
Proceedings of the 2009 Conference on Electronic Voting Technology/Workshop on
Trustworthy Elections (EVT/WOTE’09). USENIX Association, Berkeley, CA, USA,
6–6.
[9] Vitaly Chipounov, Volodymyr Kuznetsov, and George Candea. 2012. The S2E
Platform: Design, Implementation, and Applications. ACM Trans. Comput. Syst.
30, 1, Article 2 (Feb. 2012), 49 pages. https://doi.org/10.1145/2110356.2110358
[10] Lucas Davi, Ahmad-Reza Sadeghi, Daniel Lehmann, and Fabian Monrose. 2014.
Stitching the Gadgets: On the Ineffectiveness of Coarse-grained Control-flow
Integrity Protection. In Proceedings of the 23rd USENIX Conference on Security
Symposium (SEC’14). USENIX Association, Berkeley, CA, USA, 401–416. http:
//dl.acm.org/citation.cfm?id=2671225.2671251
[11] Cuckoo developers. 2017. Cuckoo Sandbox. (2017). https://www.cuckoosandbox.

[12] Artem Dinaburg, Paul Royal, Monirul Sharif, and Wenke Lee. 2008. Ether:
Malware Analysis via Hardware Virtualization Extensions. In Proceedings of the
15th ACM Conference on Computer and Communications Security (CCS ’08). ACM,
New York, NY, USA, 51–62. https://doi.org/10.1145/1455770.1455779
[13] Manuel Egele, Christopher Kruegel, Engin Kirda, Heng Yin, and Dawn Song.
2007. Dynamic Spyware Analysis. In 2007 USENIX Annual Technical Conference
on Proceedings of the USENIX Annual Technical Conference (ATC’07). USENIX
Association, Berkeley, CA, USA, Article 18, 14 pages. http://dl.acm.org/citation.
cfm?id=1364385.1364403

[14] William Enck, Peter Gilbert, Byung-Gon Chun, Landon P. Cox, Jaeyeon Jung,
Patrick McDaniel, and Anmol N. Sheth. 2010. TaintDroid: An Information-flow
Tracking System for Realtime Privacy Monitoring on Smartphones. In Proceedings
of the 9th USENIX Conference on Operating Systems Design and Implementation
(OSDI’10). USENIX Association, Berkeley, CA, USA, 393–407. http://dl.acm.org/
citation.cfm?id=1924943.1924971
[15] Volatility Foundation. Volatility - Open Source Memory Forensics. (????). http:

//www.volatilityfoundation.org/

[16] Enes G¨oktas¸, Elias Athanasopoulos, Michalis Polychronakis, Herbert Bos, and
Georgios Portokalidis. 2014. Size Does Matter: Why Using Gadget-Chain
Length to Prevent Code-Reuse Attacks is Hard. In 23rd USENIX Security
Symposium (USENIX Security 14). USENIX Association, San Diego, CA, 417–
432. https://www.usenix.org/conference/usenixsecurity14/technical-sessions/
presentation/goktas

org/

(2016).

[19]

[17] Mariano Graziano, Davide Balzarotti, and Alain Zidouemba. 2016. ROPMEMU: A
Framework for the Analysis of Complex Code-Reuse Attacks. In Proceedings of the
11th ACM on Asia Conference on Computer and Communications Security (ASIA
CCS ’16). ACM, New York, NY, USA, 47–58. https://doi.org/10.1145/2897845.
2897894
(2015). https:

[18] Pin Yahoo Groups. 2015. Failure to instrument process tree.

//groups.yahoo.com/neo/groups/pinheads/conversations/topics/12019
Jan Gustafsson, Adam Betts, Andreas Ermedahl, and Bj¨orn Lisper. 2010. The
M¨alardalen WCET benchmarks: Past, present and future. In OASIcs-OpenAccess
Series in Informatics, Vol. 15. Schloss Dagstuhl-Leibniz-Zentrum fuer Informatik.
[20] Andrew Henderson, Aravind Prakash, Lok Kwong Yan, Xunchao Hu, Xujiewen
Wang, Rundong Zhou, and Heng Yin. 2014. Make It Work, Make It Right, Make
It Fast: Building a Platform-neutral Whole-system Dynamic Binary Analysis
Platform. In Proceedings of the 2014 International Symposium on Software Testing
and Analysis (ISSTA 2014). ACM, New York, NY, USA, 248–258. https://doi.org/
10.1145/2610384.2610407
[21] Andrew Henderson, Lok Kwong Yan, Xunchao Hu, Aravind Prakash, Heng
Yin, and Stephen McCamant. 2017. DECAF: A Platform-Neutral Whole-System
Dynamic Binary Analysis Platform. IEEE Trans. Softw. Eng. 43, 2 (Feb. 2017),
164–184. https://doi.org/10.1109/TSE.2016.2589242
[22] Min Gyung Kang, Pongsin Poosankam, and Heng Yin. 2007. Renovo: A Hidden
Code Extractor for Packed Executables. In Proceedings of the 2007 ACM Workshop
on Recurring Malcode (WORM ’07). ACM, New York, NY, USA, 46–53. https:
//doi.org/10.1145/1314389.1314399
[23] Thomas Kittel, Sebastian Vogl, Julian Kirsch, and Claudia Eckert. 2015. Counter-
acting Data-Only Malware with Code Pointer Examination. Springer International
Publishing, Cham, 177–197. https://doi.org/10.1007/978-3-319-26362-5 9
[24] D. Korczynski. 2016. RePEconstruct: reconstructing binaries with self-modifying
code and import address table destruction. In 2016 11th International Conference
on Malicious and Unwanted Software (MALWARE). 1–8. https://doi.org/10.1109/
MALWARE.2016.7888727

[25] Peter Kruse. 2012. W32.Tinba (TinyBanker) The Turkish Incident. (2012).
[26] Persistence Labs. 2013. Semtrax. (2013). http://www.persistencelabs.com/blog
[27] Tal Liberman. 2016. AtomBombing: Brand New Code Injection for Windows.

[28] Tal Liberman. 2017. BSidesSF 2017, AtomBombing: Injecting Code Using Win-

dows’ Atoms. (2017). https://www.youtube.com/watch?v=9HV69QGiBAU

[29] Wayne Low. 2012. Code injection via return-oriented programming. Virus
Bulletin (2012).
[30] Lorenzo Martignoni, Mihai Christodorescu, and Somesh Jha. 2007. Omniunpack:
Fast, generic, and safe unpacking of malware. In In Proceedings of the Annual
Computer Security Applications Conference (ACSAC.
[31] Monnappa22. HollowFind. (????). https://github.com/monnappa22/HollowFind
[32] Andreas Moser, Christopher Kruegel, and Engin Kirda. 2007. Exploring Multiple
Execution Paths for Malware Analysis. In Proceedings of the 2007 IEEE Symposium
on Security and Privacy (SP ’07). IEEE Computer Society, Washington, DC, USA,
231–245. https://doi.org/10.1109/SP.2007.17

[33] PaloAlto Networks. 2013. The Modern Malware Review. (2013).
[34] Michalis Polychronakis and Angelos D. Keromytis. 2011. ROP Payload Detection
Using Speculative Code Execution. In Proceedings of the 2011 6th International
Conference on Malicious and Unwanted Software (MALWARE ’11). IEEE Computer
Society, Washington, DC, USA, 58–65. https://doi.org/10.1109/MALWARE.2011.
6112327

[35] Symantec Security Response. 2015. W32.Ramnit analysis. (2015).
[36] Eugene Rodionov and Aleksandr Matrosov. 2016. Mind the Gapz: The Most

Complex Bootkiv Ever Analyzed? (2016).

[37] Paul Royal, Mitch Halpin, David Dagon, Robert Edmonds, and Wenke Lee. 2006.
PolyUnpack: Automating the Hidden-Code Extraction of Unpack-Executing
Malware. In Proceedings of the 22Nd Annual Computer Security Applications
Conference (ACSAC ’06). IEEE Computer Society, Washington, DC, USA, 289–300.
https://doi.org/10.1109/ACSAC.2006.38
[38] Hovav Shacham. 2007. The Geometry of Innocent Flesh on the Bone: Return-
into-libc Without Function Calls (on the x86). In Proceedings of the 14th ACM
Conference on Computer and Communications Security (CCS ’07). ACM, New York,
NY, USA, 552–561. https://doi.org/10.1145/1315245.1315313
[39] Dawn Song, David Brumley, Heng Yin, Juan Caballero, Ivan Jager, Min Gyung
Kang, Zhenkai Liang, James Newsome, Pongsin Poosankam, and Prateek Saxena.
2008. BitBlaze: A New Approach to Computer Security via Binary Analysis. In
Proceedings of the 4th International Conference on Information Systems Security
(ICISS ’08). Springer-Verlag, Berlin, Heidelberg, 1–25. https://doi.org/10.1007/
978-3-540-89862-7 1
[40] Xabier Ugarte-pedrero, Davide Balzarotti, Igor Santos, and Pablo G. Bringas. SoK:
Deep Packer Inspection: A Longitudinal Study of the Complexity of Run-Time
Packers. (????).

[41] Sebastian Vogl, Jonas Pfoh, Thomas Kittel, and Claudia Eckert. 2014. Persistent
Data-only Malware: Function Hooks without Code. In Proceedings of the 21th
Annual Network and Distributed System Security Symposium (NDSS).

Session H2:  Code Reuse AttacksCCS’17, October 30-November 3, 2017, Dallas, TX, USA1706[42] Andrew White, Bradley Schatz, and Ernest Foo. 2013. Integrity verification of

[43] Lok Yan and Heng Yin. 2017.

user space code. Digital Investigation (2013).
Dynamic Taint Analysis.
cs260-winter2017/formaltaint.pdf

SoK: On the Soundness and Precision of
(2017). http://www.cs.ucr.edu/„heng/teaching/

[44] Lok Kwong Yan and Heng Yin. 2012. DroidScope: Seamlessly Reconstructing
the OS and Dalvik Semantic Views for Dynamic Android Malware Analysis. In
Proceedings of the 21st USENIX Conference on Security Symposium (Security’12).
USENIX Association, Berkeley, CA, USA, 29–29. http://dl.acm.org/citation.cfm?
id=2362793.2362822

[45] Udi Yavo and Tomer Bitton. 2015. Injection on Steroids: Code-less Code Injections

and 0-Day Techniques. (2015).

[46] Heng Yin, Dawn Song, Manuel Egele, Christopher Kruegel, and Engin Kirda.
2007. Panorama: Capturing System-wide Information Flow for Malware De-
tection and Analysis. In Proceedings of the 14th ACM Conference on Computer
and Communications Security (CCS ’07). ACM, New York, NY, USA, 116–127.
https://doi.org/10.1145/1315245.1315261

