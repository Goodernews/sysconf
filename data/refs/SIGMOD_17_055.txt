[1] 15.5.2 InnoDB Transaction Model. http://dev.mysql.
com/doc/refman/5.7/en/innodb-transaction-model.
html.

[2] Google Cloud SQL. http://code.google.com/apis/sql.

[3] MariaDB source repository.  https://github.com/
MariaDB/server /pull/248.

[4] Oracle database cloud service. http://cloud.oracle.com.

[5] Program2 Two-Phase Locking (2PL) vs. Timestamp
Ordering (TSO) vs. A Real Protocol. http://cobweb.
cs.uga.edu/~ shasha/course/csci8370/prog2/prog2.pdf.

[6] XtraDB Performance Improvements for 1/OBound Highly-Concurrent Workloads. https:
/ /www.percona.com/doc/percona-server/5.7/
performance/xtradb_performance_improvements_
for_io-bound_highly-concurrent_workloads.html.

[7] SQL Server Locking and You! https://www.brentozar.
com/archive/2011/06 /sql-server-locking/, 2011.

[8] MT LRU flusher. https://blueprints.launchpad.net/
percona-server/+spec/mt-lru, 2016.

[9] MySQL ‘Transaction Lock Manager Source Code.
https: //github.com/mysql/mysql-server/blob/5.7/
storage/innobase/lock/lockOlock.cc, 2016.

[10] Parallel  doublewrite _ buffer. https://

blueprints.launchpad.net /percona-server /+-spec/

parallel-doublewrite, 2016.

[11] Percona Server 5.7: multithreaded LRU  flush
ing. https: //www.percona.com/blog/2016/05/05/

percona-server-5-7-multi-threaded-lru-flushing/, 2016.

[12] Postgre Transaction Lock Manager Source Code.

https: //github.com/postgres/postgres/blob/master/

src/backend/storage/Imgr/proc.c, 2016.

[13] R. K. Abbott and H. Garcia-Molina. Scheduling real
time transactions: A performance evaluation. TODS,

1992.

[14] R. Agrawal. A parallel logging algorithm for multipro
cessor database machines. In Database Machines. 1985.

[15] R. Agrawal and D. J. DeWitt. Recovery architectures

for multiprocessor database machines. ACM, 1985.

[16] M. Armbrust, K. Curtis, T. Kraska, A. Fox, M. J.

Franklin, and D. A. Patterson. Piql: Success-tolerant

query processing in the cloud. PVEDB, 5, 2011.

[17] M. Armbrust, E. Liang, T. Kraska, A. Fox, M. J.

Franklin, and D. A. Patterson. Generalized scale in
dependence through incremental precomputation. In

SIGMOD, 2013.

[18] J. Arulraj, A. Pavlo, and S. R. Dulloor. Let’s talk

about storage; recovery methods for non-volatile mem
ory database systems. In STGMOD, 2015.

[19] S. Arumugam, A. Dobra, C. M. Jermaine, N. Pansare,
and L. Perez. The datapath system: a data-centric
analytic processing engine for large data warehouses.
In SIGMOD, 2010.

[20] Attariyan et al. X-ray: Automating root-cause diagnosis of performance anomalies in production software. In
OSDI, 2012.

[21] P. D. Bailis. Coordination Avoidance in Distributed
Databases. PhD thesis, UC Berkeley, 2015.

[22] Bector et al. V-shape property of optimal sequence of
jobs about a common due date on a single machine.
Computers & operations research, 1989.

[23] A. R. Bernat and B. P. Miller. Incremental call-path
profiling. Concurrency and Computation: Practice and

 

 

[45] W. Kubiak.

 

Experience, 2007.

[24] Bhatia et al. Lightweight, high-resolution monitoring

for troubleshooting production systems. In OSDJ, 2008.

[25] G. Candea, N. Polyzotis, and R. Vingralek. A scal
able, predictable join operator for highly concurrent
data warehouses. PVLDB, 2009.

[26] S. Chaudhuri, H. Lee, and V. R. Narasayya. Variance

aware optimization of parameterized queries. In SIGMOD, 2010.

[27] Chen et al. Sequencing heuristic for bicriteria schedul
ing in asingle machine problem. Journal of Information
and Optimization Sciences, 2006.

[28] S. Chen. Flashlogging: exploiting flash devices for syn
chronous logging performance. In SIGMOD, 2009.

[29] F. Chu et al. Least expected cost query optimization:

An exercise in utility. In PODS, 1999.

[30] B. F. Cooper et al. Benchmarking cloud serving systems

with yesb. In SoCC, 2010.

[31] P. De et al. On the minimization of completion time

variance with a bicriteria extension. Operations Research, 1992.

[32] D. E. Difallah, A. Pavlo, C. Curino, and P. Cudre
Mauroux. Oltp-bench: An extensible testbed for benchmarking relational databases. PVLDB, 7, 2013.

[33] Eilon et al. Minimising waiting time variance in the

single machine problem. Management Science, 1977.

[34] D. Florescu and D. Kossmann. Rethinking cost and

performance of database systems. Sigmod Record, 2009.

[35] G. Giannikis, G. Alonso, and D. Kossmann. Shareddb:

killing one thousand queries with one stone. PVLDB,
2012.

[36] S. L. Graham et al. Gprof: A call graph execution

profiler. In Sigplan Notices, 1982.

[37] B. Gregg. DTrace pid Provider return. http://tinyurl.

com/jzpphne, 2011.

[38] R. J. Hall. Call path profiling. In ICSE, 1992.
[39] S. Harizopoulos, D. J. Abadi, S. Madden, and M. Stone
braker. OLTP through the looking glass, and what we
found there. In SIGMOD, 2008.

[40] S. Harizopoulos, V. Shkapenyuk, and A. Ailamaki.

Qpipe: a simultaneously pipelined relational query engine. In SIGMOD, 2005.

[41] P. Helland, H. Sammer, J. Lyon, R. Carr, P. Garrett,

and A. Reuter. Group commit timers and high volume
transaction systems. In HPTS. 1989.

[42] J. Huang, B. Mozafari, and T. Wenisch. Statistical anal
ysis of latency through semantic profiling. In EuroSys,
2017.

[43] Y.-K. Kim and S. H. Son. Supporting predictability in

real-time database systems. In RTAS, 1996.

[44] W. Kubiak. Completion time variance minimization

on a single machine is difficult. Operations Research
Letters, 1993.

New results on the completion time
variance minimization. Discrete Applied Mathematics,
1995.

[46] W. Kubiak et al. Fast fully polynomial approximation

schemes for minimizing completion time variance. Fur.
Journal of Operational Research, 2002.

[47] T. Lahiri, M.A. Neimat, and 8. Folkman. Oracle

timesten: An in-memory database for enterprise applications. JEEE Data Eng. Bull., 2013.

[48] P. Massa and P. Avesani. An experimental study on
 

 

epinions.com community. In NCAIJ, 2005.

[49] B. Mozafari, C. Curino, A. Jindal, and S. Madden. Per
formance and resource modeling in highly-concurrent

OLTP workloads. In STGMOD, 2013.

[50] B. Mozafari, C. Curino, and S. Madden. DBSeer: Re
source and performance prediction for building a next

generation database cloud. In CIDR, 2013.

[51] B. Mozafari, E. Z. Y. Goh, and D. Y. Yoon. CliffGuard:

A principled framework for finding robust database de
signs. In SIGMOD, 2015.

[52] B. Mozafari, E. Z. Y. Goh, and D. Y. Yoon. Cliffguard:

An extended report. Technical report, University of

Michigan, Ann Arbor, 2015.

[53] V. Narasayya, I. Menache, M. Singh, F. Li, M. Syamala,

and S. Chaudhuri. Sharing buffer pool memory in multi
tenant relational database-as-a-service. PVLDB, 2015.

[54] V. R. Narasayya, S. Das, M. Syamala, B. Chandramouli, and S. Chaudhuri. SQLVM: performance isolation in multi-tenant relational database-as-a-service.
In CIDR, 2013.

[55] P. O’Neil et al. A two-phase approach to predictably

scheduling real-time transactions., 1996.

[56] S. Pelley et al. Storage management in the nvram era.

PVLDB, 2013.

[57] M. Pinedo. Scheduling: theory, algorithms, and sys
tems. Springer Science, 2012.

[58] L. Qiao, V. Raman, F. Reiss, P. Haas, and

G. Lohman. Main-memory scan sharing for multi-core

cpus. PVEDB, 2008.

[59] V. Raman, G. Swart, L. Qiao, F. Reiss, V. Dialani,

D. Kossmann, I. Narang, and R. Sidle. Constant-time

query processing. In ICDE, 2008.

[60] M. Sadoghi, K. A. Ross, M. Canim, and B. Bhat
tacharjee. Making updates disk-i/o friendly using ssds.

PVLDB, 2013.

[61] J. M. Spivey. Fast, accurate call graph profiling. Soft
ware: Practice and Experience, 2004.

[62] M. Stonebraker and A. Pavlo. The seats airline ticketing

systems benchmark.

[63] R. Strom and 8S. Yemini. Optimistic recovery in dis
tributed systems. TODS, 1985.

[64] Z. Szebenyi et al. Space-efficient time-series call-path

profiling of parallel applications. In SC'09, 2009.

[65] P. Unterbrunner et al. Predictable performance for un
predictable workloads. PVEDB, 2009.

[66] M. Wainwright. Chapter 2: Basic tail and concentra
tion bounds. http://www.stat.berkeley.edu/~mjwain/

stat210b/Chap2_TailBounds_Jan22_2015.pdf.

[67| T. Wang and R. Johnson. Scalable logging through

emerging non-volatile memory. PVEDB, 2014.

[68] A. Wolski. Tatp benchmark description, 2009.

[69] R. J. Yang and Q. Luo. PTL: Partitioned logging for

database storage on flash solid state drives. In WAIM.

2012.

[70] N. Ye, X. Li, T. Farley, and X. Xu. Job scheduling

methods for reducing waiting time variance. Computers

& Operations Research, 2007.

[71] D. Y. Yoon, B. Mozafari, and D. P. Brown. DBSeer:

Pain-free database administration through workload in
telligence. PVLDB, 2015.

[72] D. Y. Yoon, N. Niu, and B. Mozafari. DBSherlock: A performance diagnostic tool for transactional
databases. In ACM Swecial Interest Groups on Man
agement of Data (SIGMOD), 2016.

[73] X. Yu, G. Bezerra, A. Pavlo, S. Devadas, and M. Stonebraker. Staring into the abyss: An evaluation of concurrency control with one thousand cores. PVEDB, 2014.

