[1] Nightmare, 2014. https://github.com/joxeankoret/nightmare.
[2] zzuf, 2016. https://github.com/samhocevar/zzuf.
[3] Pwn2Own2017:ChromeRemainstheWinnerinBrowserSecurity,2017.https:// securityzap.com/pwn2own- 2017- chrome- remains- winner- browser- security/.
[4] B. Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. OpLog: a library for scaling update-heavy data structures. CSAIL Technical Report (2013).
[5] Baumann, A., Barham, P., Dagand, P.-E., Harris, T., Isaacs, R., Peter, S., Roscoe, T., Schüpbach, A., and Singhania, A. The Multikernel: A New OS Architecture for Scalable Multicore Systems. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (San Diego, CA, Dec. 2008).
[6] Bittau, A., Marchenko, P., Handley, M., and Karp, B. Wedge: Splitting Appli- cations into Reduced-Privilege Compartments. In Proceedings of the 5th USENIX Symposium on Networked Systems Design and Implementation (NSDI) (San Fran- cisco, CA, Apr. 2008).
[7] Böhme, M., Pham, V.-T., and Roychoudhury, A. Coverage-based greybox fuzzing as markov chain. In Proceedings of the 23rd ACM Conference on Computer and Communications Security (CCS) (Vienna, Austria, Oct. 2016).
[8] Boyd-Wickizer,S.,Chen,H.,Chen,R.,Mao,Y.,Kaashoek,M.F.,Morris,R., Pesterev, A., Stein, L., Wu, M., Dai, Y., Zhang, Y., and Zhang, Z. Corey: An Operating System for Many Cores. In Proceedings of the 8th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (San Diego, CA, Dec. 2008).
[9] Boyd-Wickizer,S.,Clements,A.T.,Mao,Y.,Pesterev,A.,Kaashoek,M.F., Morris, R., and Zeldovich, N. An Analysis of Linux Scalability to Many Cores. In Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (Vancouver, Canada, Oct. 2010).
[10] Boyd-Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. Non- scalable locks are dangerous. In Proceedings of the Linux Symposium (Ottawa, Canada, July 2012).
[11] Boyd-Wickizer, S., Kaashoek, M. F., Morris, R., and Zeldovich, N. OpLog: a library for scaling update-heavy data structures.
[12] CENSUS. Choronzon - An evolutionary knowledge-based fuzzer. ZeroNights Conference.
[13] Cha, S. K., Avgerinos, T., Rebert, A., and Brumley, D. Unleashing MAYHEM on binary code. In Proceedings of the 33rd IEEE Symposium on Security and Privacy (Oakland) (San Francisco, CA, May 2012).
[14] Chang, O., Arya, A., Serebryany, K., and Armour, J. OSS-Fuzz: Five months later, and rewarding projects, 2017. https://security.googleblog.com/2017/05/ oss- fuzz- five- months- later- and.html.
[15] Chen, Y., Reymondjohnson, S., Sun, Z., and Lu, L. Shreds: Fine-grained execu- tion units with private memory. In Proceedings of the 37th IEEE Symposium on Security and Privacy (Oakland) (San Jose, CA, May 2016).
[16] Clements, A. T., Kaashoek, M. F., and Zeldovich, N. Scalable Address Spaces Using RCU Balanced Trees. In Proceedings of the 17th ACM International Confer- ence on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (London, UK, Mar. 2012).
[17] Clements, A. T., Kaashoek, M. F., and Zeldovich, N. RadixVM: Scalable Address Spaces for Multithreaded Applications. In Proceedings of the 8th European Conference on Computer Systems (EuroSys) (Prague, Czech Republic, Apr. 2013).
[18] Clements,A.T.,Kaashoek,M.F.,Zeldovich,N.,Morris,R.T.,andKohler, E. The Scalable Commutativity Rule: Designing Scalable Software for Multicore Processors. In Proceedings of the 24th ACM Symposium on Operating Systems Principles (SOSP) (Farmington, PA, Nov. 2013).
[19] Engler, D. R., Kaashoek, M. F., and O’Toole, Jr., J. Exokernel: An Operating System Architecture for Application-level Resource Management. In Proceedings of the 15th ACM Symposium on Operating Systems Principles (SOSP) (Copper Mountain, CO, Dec. 1995), pp. 251–266.
[20] Google. Fuzzing for Security, 2012. https://blog.chromium.org/2012/04/ fuzzing-for-security.html.
[21] Google. Honggfuzz, 2016. https://google.github.io/honggfuzz/.
[22] Google. OSS-Fuzz - Continuous Fuzzing for Open Source Software, 2016. https: //github.com/google/oss- fuzz.
[23] Google. syzkaller - linux syscall fuzzer, 2016. https://github.com/google/ syzkaller.
[24] Google. fuzzer-test-suite: Set of tests for fuzzing engines, 2017. https://github. com/google/fuzzer- test- suite.
[25] iSEC. PeachFarmer, 2014. http://github.com/iSECPartners/PeachFarmer.
[26] Kashyap, S., Min, C., and Kim, T. Scalable NUMA-aware Blocking Synchroniza- tion Primitives. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC) (Santa Clara, CA, July 2017).
[27] Kim,S.Y.,Lee,S.,Yun,I.,Xu,W.,Lee,B.,Yun,Y.,andKim,T.CAB-Fuzz:Practical Concolic Testing Techniques for COTS Operating Systems. In Proceedings of the 2017 USENIX Annual Technical Conference (ATC) (Santa Clara, CA, July 2017).
[28] Litton,J.,Vahldiek-Oberwagner,A.,Elnikety,E.,Garg,D.,Bhattacharjee, B., and Druschel, P. Light-weight contexts: an OS abstraction for safety and performance. In Proceedings of the 12th USENIX Symposium on Operating Systems Design and Implementation (OSDI) (Savannah, GA, Nov. 2016).
[29] LLVM. libFuzzer - a library for coverage-guided fuzz testing, 2017. http://llvm. org/docs/LibFuzzer.html.
[30] Madhavapeddy,A.,Mortier,R.,Rotsos,C.,Scott,D.,Singh,B.,Gazagnaire, T., Smith, S., Hand, S., and Crowcroft, J. Unikernels: Library Operating Systems for the Cloud. In Proceedings of the 18th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (Houston, TX, Mar. 2013), pp. 461–472.
[31] Microsoft. Microsoft previews Project Springfield, a cloud-based bug detector, 2016. https://blogs.microsoft.com/next/2016/09/26/ microsoft- previews- project- springfield- cloud- based- bug- detector.
[32] Min,C.,Kashyap,S.,Maass,S.,Kang,W.,andKim,T.UnderstandingManycore Scalability of File Systems. In Proceedings of the 2016 USENIX Annual Technical Conference (ATC) (Denver, CO, June 2016).
[33] Porter, D. E., Boyd-Wickizer, S., Howell, J., Olinsky, R., and Hunt, G. C. Rethinking the Library OS from the Top Down. In Proceedings of the 16th ACM International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (Newport Beach, CA, Mar. 2011), pp. 291–304.
[34] Rawat, S., Jain, V., Kumar, A., Cojocar, L., Giuffrida, C., and Bos, H. VUzzer: Application-aware Evolutionary Fuzzing. In Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS) (San Diego, CA, Feb.–Mar. 2017).
[35] Ruderman, J. Releasing jsfunfuzz and domfuzz, 2015. http://www.squarefree. com/2015/07/28/releasing- jsfunfuzz- and- domfuzz/.
[36] Stephens, N., Grosen, J., Salls, C., Dutcher, A., Wang, R., Corbetta, J., Shoshi- taishvili, Y., Kruegel, C., and Vigna, G. Driller: Augmenting fuzzing through selective symbolic execution. In Proceedings of the 2016 Annual Network and Distributed System Security Symposium (NDSS) (San Diego, CA, Feb. 2016).
[37] The Clang Team. Clang 5 documentation - SanitizerCoverage, 2017. http: //clang.llvm.org/docs/SanitizerCoverage.html.
[38] Veggalam, S., Rawat, S., Haller, I., and Bos, H. IFuzzer: An Evolutionary Interpreter Fuzzer Using Genetic Programming. In Proceedings of the 21th Eu- ropean Symposium on Research in Computer Security (ESORICS) (Crete, Greece, Sept. 2016).
[39] Zalewski, M. Fuzzing random programs without execve(), 2014. https://lcamtuf. blogspot.com/2014/10/fuzzing- binaries- without- execve.html.
[40] Zalewski, M. AFL starting test cases), 2017. https://github.com/mirrorer/afl/ tree/master/testcases.
[41] Zalewski, M. american fuzzy lop (2.41b), 2017. http://lcamtuf.coredump.cx/afl/.
[42] Zalewski, M. Technical "whitepaper" for afl-fuzz), 2017. https://github.com/ mirrorer/afl/blob/master/docs/technical_details.txt.
[43] Zalewski, M. Tips for performance optimization, 2017. https://github.com/ mirrorer/afl/blob/master/docs/perf_tips.txt.
