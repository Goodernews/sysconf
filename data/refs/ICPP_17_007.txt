[1] H. Fu, J. Liao, J. Yang, L. Wang, Z. Song, X. Huang, C. Yang, W. Xue,
F. Liu, F. Qiao, W. Zhao, X. Yin, C. Hou, C. Zhang, W. Ge, J. Zhang,
Y. Wang, C. Zhou, and G. Yang, “The sunway taihulight supercomputer:
system and applications,” Science China Information Sciences, vol. 59,
no. 7, p. 072001, 2016.
[2] “TOP500 Supercomputer Sites,” www.top500.org/, June 2016.
[3] “Pthreads API,” computing.llnl.gov/tutorials/pthreads/.
[4] L. Dagum and R. Menon, “Openmp: an industry standard api for sharedmemory programming,” IEEE computational science and engineering,
vol. 5, no. 1, pp. 46–55, 1998.
[5] BSC, “The OmpSs programming model,” http://pm.bsc.es/ompss/.
[6] D. Stein and D. Shah, “Implementing lightweight threads.” in USENIX
Summer, 1992.
[7] Microsoft MSDN Library, “Fibers.”
[8] “Programming with Solaris Threads,” docs.oracle.com/cd/E19455-01/
806-5257/6je9h033n/index.html.
[9] L. V. Kalé, M. A. Bhandarkar, N. Jagathesan, S. Krishnan, and J. Yelon,
“Converse: An interoperable framework for parallel programming,” in
Proceedings of the 10th International Parallel Processing Symposium
(IPPS), April 1996, pp. 212–217.
[10] BSC, “Nanos++,” pm.bsc.es/projects/nanox/.
[11] L. V. Kale and S. Krishnan, CHARM++: A portable concurrent object
oriented system based on C++. ACM, 1993, vol. 28, no. 10.
[12] J. Nakashima and K. Taura, “MassiveThreads: A thread library for high
productivity languages,” in Concurrent Objects and Beyond, ser. Lecture
Notes in Computer Science, 2014, vol. 8665, pp. 222–238.

[13] K. B. Wheeler, R. C. Murphy, and D. Thain, “Qthreads: An API for
programming with millions of lightweight threads,” in Proceedings of
Workshop on Multithreaded Architectures and Applications, April 2008.
[14] S. Seo, A. Amer, P. Balaji, C. Bordage, G. Bosilca, A. Brooks,
P. Carns, A. Castelló, D. Genet, T. Herault, P. Jindal, L. V. Kalé,
S. Krishnamoorthy, J. Lifflander, H. Lu, E. Meneses, M. Snir, Y. Sun, and
P. Beckman, “Argobots: A lightweight threading/tasking framework,”
2016, https://collab.cels.anl.gov/display/ARGOBOTS/.
[15] “Generic Lightweight Threads API,” github.com/adcastel/GLT.
[16] A. Castelló, S. Seo, R. Mayo, P. Balaji, E. S. Quintana-Ortı́, and
A. J. Peña, “GLT: A unified API for lightweight thread libraries,” in
Proceedings of the IEEE International European Conference on Parallel
and Distributed Computing, Santiago de Compostela, Spain, August
2017.
[17] “BOLT: A Lightning-Fast OpenMP Implementation,” bolt-omp.org/.
[18] “LLVM project,” http://openmp.llvm.org/.
[19] “Intel OpenMP Runtime Library,” https://www.openmprtl.org/.
[20] C. Wang, S. Chandrasekaran, and B. Chapman, “An openmp 3.1
validation testsuite,” in Int. Workshop on OpenMP, 2012, pp. 237–249.
[21] OpenMP Architecture Review Board, OpenMP Application
Programming Interface Version 4.5, http://www.openmp.org/wpcontent/uploads/openmp-4.5.pdf, Nov. 2015.
[22] “PGI Compilers & Tools,” http://www.pgroup.com/.
[23] C. Liao, O. Hernandez, B. Chapman, W. Chen, and W. Zheng, “Openuh:
an optimizing, portable openmp compiler,” Concurrency and Computation: Practice and Experience, vol. 19, no. 18, pp. 2317–2332, 2007.
[24] A. Castelló, A. J. Peña, S. Seo, R. Mayo, P. Balaji, and E. S. QuintanaOrtı́, “A review of lightweight thread approaches for high performance
computing,” in Proceedings of the IEEE International Conference on
Cluster Computing, Taipei, Taiwan, September 2016.
[25] P. E. Hadjidoukas and V. V. Dimakopoulos, “Nested parallelism in
the ompi openmp/c compiler,” in European Conference on Parallel
Processing. Springer, 2007, pp. 662–671.
[26] Y. Tanaka, K. Taura, M. Sato, and A. Yonezawa, “Performance evaluation of openmp applications with nested parallelism,” in International
Workshop on Languages, Compilers, and Run-Time Systems for Scalable
Computers. Springer, 2000, pp. 100–112.
[27] F. Broquedis, N. Furmento, B. Goglin, P.-A. Wacrenier, and R. Namyst,
“Forestgomp: an efficient openmp environment for numa architectures,”
International Journal of Parallel Programming, vol. 38, no. 5, pp. 418–
439, 2010.
[28] S. L. Olivier, A. K. Porterfield, K. B. Wheeler, and J. F. Prins, “Scheduling task parallelism on multi-socket multicore systems,” in Proceedings
of the 1st International Workshop on Runtime and Operating Systems
for Supercomputers. ACM, 2011, pp. 49–56.
[29] P. Chang and W. Hwu, “Inline function expansion for compiling c
programs,” in Procedings of the ACM SIGPLAN 1989 Conference on
Programming Language Design and Implementation. ACM, 1989, pp.
246–257.
[30] “Clang project,” http://clang.llvm.org/.
[31] S. Olivier, J. Huan, J. Liu, J. Prins, J. Dinan, P. Sadayappan, and
C. Tseng, “UTS: An unbalanced tree search benchmark,” in Languages
and Compilers for Parallel Computing. Springer, 2006, pp. 235–250.
[32] “The Unbalanced Tree Search (UTS) benchmark,” https://sourceforge.
net/projects/uts-benchmark/.
[33] “CloverLeaf miniapp,” http://uk-mac.github.io/CloverLeaf/.
[34] J. I. Aliaga, H. Anzt, M. Castillo, J. C. Fernández, G. León, J. Pérez,
and E. S. Quintana-Ortı́, “Unveiling the performance-energy trade-off in
iterative linear system solvers for multithreaded processors,” Conc. and
Comp.: Practice and Experience, vol. 27, no. 4, pp. 885–904, 2015.
[35] “Intel Math Kernel Library,” https://software.intel.com/en-us/intel-mkl.
[36] “GLTO: Generic Lightweight Thread OpenMP,” github.com/adcastel/
glto-runtime.