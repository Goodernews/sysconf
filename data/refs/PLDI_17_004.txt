[1] AFL: American Fuzzy Lop. http://lcamtuf.coredump.cx/ afl/. Retrieved: 01 Novermber, 2016.
[2] Clang: a C language family frontend for LLVM. http: //clang.llvm.org/. Retrieved: 24 March 2016.
[3] Class StrictMath of Java SE 8. https://docs.oracle.com/ javase/8/docs/api/java/lang/StrictMath.html. Re- trieved: 09 Novermber, 2016.
[4] Code coverage analysis tool for AFL. https://github.com/ mrash/afl-cov. Retrieved: 01 Novermber, 2016.
[5] An extended version of this paper. https://arxiv.org/pdf/ 1704.03394.
[6] Fdlibm: Freely Distributed Math Library. http://www. netlib.org/fdlibm/. Retrieved: 01 Nov, 2016.
[7] Gcov: GNU compiler collection tool. https://gcc.gnu.org/ onlinedocs/gcc/Gcov.html/. Retrieved: 24 March 2016.
[8] klee-dev mailing list. http://www.mail-archive.com/ klee-dev@imperial.ac.uk/msg02334.html. Retrieved: 09 Novermber, 2016.
[9] llvm::pass class reference. http://llvm.org/docs/doxygen/ html/classllvm_1_1Pass.html. Retrieved: 24 March 2016.
[10] Scipy optimization package. http://docs.scipy.org/doc/ scipy-dev/reference/optimize.html. Retrieved: 24 March 2016.
[11] Christophe Andrieu, Nando de Freitas, Arnaud Doucet, and Michael I. Jordan. An introduction to MCMC for machine learning. Machine Learning, 50(1-2):5–43, 2003.
[12] Arthur Baars, Mark Harman, Youssef Hassoun, Kiran Lakhotia, Phil McMinn, Paolo Tonella, and Tanja Vos. Symbolic search- based testing. In Proceedings of the 2011 26th IEEE/ACM International Conference on Automated Software Engineering, ASE ’11, pages 53–62, Washington, DC, USA, 2011.
[13] Earl T. Barr, Thanh Vo, Vu Le, and Zhendong Su. Automatic detection of floating-point exceptions. In POPL, pages 549– 560, 2013.
[14] D. L. Bird and C. U. Munoz. Automatic generation of random self-checking test cases. IBM Syst. J., 22(3):229–245, 1983.
[15] Jacob Burnim and Koushik Sen. Heuristics for scalable dynamic test generation. In 23rd IEEE/ACM International Conference on Automated Software Engineering (ASE 2008), 15-19 September 2008, L’Aquila, Italy, pages 443–446, 2008.
[16] Cristian Cadar, Daniel Dunbar, and Dawson Engler. Klee: Unassisted and automatic generation of high-coverage tests for complex systems programs. In Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, OSDI’08, pages 209–224, Berkeley, CA, USA, 2008.
[17] Cristian Cadar and Koushik Sen. Symbolic execution for software testing: three decades later. Commun. ACM, 56(2):82– 90, 2013.
[18] Peter Collingbourne, Cristian Cadar, and Paul HJ Kelly. Sym- bolic crosschecking of floating-point and simd code. In Pro- ceedings of the sixth conference on Computer systems, pages 315–328, 2011.
[19] John E Dennis Jr and Robert B Schnabel. Numerical meth- ods for unconstrained optimization and nonlinear equations, volume 16. 1996.
[20] Jonathan Eckstein and Dimitri P Bertsekas. On the Dou- glas—Rachford splitting method and the proximal point al- gorithm for maximal monotone operators. Mathematical Pro- gramming, 55(1-3):293–318, 1992.
[21] Roger Ferguson and Bogdan Korel. The chaining approach for software test data generation. ACM Trans. Softw. Eng. Methodol., 5(1):63–86, 1996.
[22] Vijay Ganesh and David L Dill. A decision procedure for bit- vectors and arrays. In International Conference on Computer Aided Verification, pages 519–531. Springer, 2007.
[23] Patrice Godefroid, Nils Klarlund, and Koushik Sen. DART: directed automated random testing. In Proceedings of the ACM SIGPLAN 2005 Conference on Programming Language Design and Implementation, Chicago, IL, USA, pages 213–223, 2005.
[24] James C. King. Symbolic execution and program testing. Commun. ACM, 19(7):385–394, 1976.
[25] B. Korel. Automated software test data generation. IEEE Trans. Softw. Eng., 16(8):870–879, 1990.
[26] Kiran Lakhotia, Mark Harman, and Hamilton Gross. Austin: An open source tool for search based software testing of C programs. Information and Software Technology, 55(1):112– 125, 2013.
[27] Kiran Lakhotia, Phil McMinn, and Mark Harman. An em- pirical investigation into branch coverage for C programs us- ing CUTE and AUSTIN. Journal of Systems and Software, 83(12):2379–2391, 2010.
[28] Kiran Lakhotia, Nikolai Tillmann, Mark Harman, and Jonathan De Halleux. FloPSy: Search-based floating point constraint solving for symbolic execution. ICTSS’10, pages 142–157, Berlin, Heidelberg, 2010.
[29] DM Leitner, C Chakravarty, RJ Hinde, and DJ Wales. Global optimization by basin-hopping and the lowest energy structures of lennard-jones clusters containing up to 110 atoms. Phys. Rev. E, 56:363, 1997.
[30] Z. Li and H. A. Scheraga. Monte Carlo-minimization approach to the multiple-minima problem in protein folding. Proceed- ings of the National Academy of Sciences of the United States of America, 84(19):6611–6615, 1987.
[31] Phil McMinn. Search-based software test data generation: A survey: Research articles. Softw. Test. Verif. Reliab., 14(2):105– 156, 2004.
[32] W. Miller and D. L. Spooner. Automatic generation of floating- point test data. IEEE Trans. Softw. Eng., 2(3):223–226, 1976.
[33] Glenford J. Myers. The art of software testing (2nd ed.). pages I–XV, 1–234, 2004.
[34] Jorge Nocedal and Stephen J. Wright. Numerical Optimization. 2006.
[35] Hristina Palikareva and Cristian Cadar. Multi-solver support in symbolic execution. In Computer Aided Verification, pages 53–68. Springer, 2013.
[36] Jan Peleska, Elena Vorobev, and Florian Lapschies. Automated test case generation with smt-solving and abstract interpreta- tion. NFM’11, pages 298–312, Berlin, Heidelberg, 2011.
[37] William H. Press, Saul A. Teukolsky, William T. Vetterling, and Brian P. Flannery. Numerical Recipes 3rd Edition: The Art of Scientific Computing. New York, NY, USA, 2007.
[38] Herbert Robbins and Sutton Monro. A stochastic approxi- mation method. The annals of mathematical statistics, pages 400–407, 1951.
[39] Koushik Sen, Darko Marinov, and Gul Agha. CUTE: A concolic unit testing engine for C. ESEC/FSE-13, pages 263– 272, New York, NY, USA, 2005.
[40] Chayanika Sharma, Sangeeta Sabharwal, and Ritu Sibal. A survey on software testing techniques using genetic algorithm. arXiv:1411.1154, 2014.
[41] Dawn Song, D Brumley, H Yin, J Caballero, I Jager, MG Kang, Z Liang, J Newsome, P Poosankam, and P Saxena. Bitblaze: Binary analysis for computer security, 2013.
[42] Nikolai Tillmann and Jonathan De Halleux. Pex: White box test generation for .net. TAP’08, pages 134–153, Berlin, Heidelberg, 2008.
[43] Mark Utting, Alexander Pretschner, and Bruno Legeard. A taxonomy of model-based testing approaches. Software Testing, Verification and Reliability, 22(5):297–312, 2012.
[44] G. Zoutendijk. Mathematical programming methods. North- Holland, Amsterdam, 1976.
