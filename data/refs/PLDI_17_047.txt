[1] C. S. Ananian. The static single information form. Master’s
thesis, MIT, 1999.

[2] Atmel Inc. AVR32 architecture document, Apr. 2011. URL
http: //www.atmel.com/images/doc32000 . pdf.

[3] G. Barthe, D. Demange, and D. Pichardie. Formal verification
of an SSA-based middle-end for CompCert. ACM Trans.
Program. Lang. Syst., 36(1):4:1-4:35, Mar. 2014.

[4] M. Braun, S. Buchwald, and A. Zwinkau. Firm—a graph-based
intermediate representation. Technical Report 35, Karlsruhe
Institute of Technology, 2011. URL http://digbib.ubka.
uni-karlsruhe .de/volltexte/1000025470.

[5] S. Chakraborty and V. Vafeiadis. Formalizing the concurrency
semantics of an LLVM fragment. In CGO, 2017.

[6] R. Cytron, J. Ferrante, B. K. Rosen, M. N. Wegman, and F. K.
Zadeck. Efficiently computing static single assignment form
and the control dependence graph. ACM Trans. Program. Lang.
Syst., 13(4):451-490, Oct. 1991.

[7] W. Dietz, P. Li, J. Regehr, and V. Adve. Understanding integer
overflow in C/C++. In ICSE, 2012.

[8] V. D’Silva, M. Payer, and D. Song. The correctness-security
gap in compiler optimization. In SPW, 2015.

[9] M. A. Ertl. What every compiler writer should know about
programmers. In KPS, 2015.

[10] G. Gange, J. A. Navas, P. Schachte, H. Sgndergaard, and P. J.
Stuckey. Horn clauses as an intermediate representation for
program analysis and transformation. Theory and Practice of
Logic Programming, 15(4-5):526-542, July 2015.

[11] S. Grebenshchikov, N. P. Lopes, C. Popeea, and A. Rybalchenko. Synthesizing software verifiers from proof rules.
In PLDI, 2012.

[12] C. Hathhorn, C. Ellison, and G. Rogu. Defining the undefinedness of C. In PLDI, 2015.

[13] H. Jordan, S. Pellegrini, P. Thoman, K. Kofler, and T. Fahringer.
INSPIRE: The Insieme parallel intermediate representation. In
PACT, 2013.

[14] J. Kang, C.-K. Hur, W. Mansky, D. Garbuzov, S. Zdancewic,
and V. Vafeiadis. A formal C memory model supporting
integer-pointer casts. In PLDI, 2015.

[15] D. Khaldi, P. Jouvelot, F. Irigoin, C. Ancourt, and B. Chapman.
LLVM parallel intermediate representation: design and evaluation using OpenSHMEM communications. In Workshop on
the LLVM Compiler Infrastructure in HPC, 2015.

[16] X. Leroy. Formal verification of a realistic compiler. Commun.
ACM, 52(7):107-115, July 2009.

[17] N. P. Lopes, D. Menendez, S. Nagarakatte, and J. Regehr.
Provably correct peephole optimizations with Alive. In PLDI,
2015.

[18] K. Memarian, J. Matthiesen, J. Lingard, K. Nienhuis, D. Chisnall, R. N. M. Watson, and P. Sewell. Into the depths of C:
Elaborating the de facto standards. In PLDI, 2016.

[19] E. Mullen, D. Zuniga, Z. Tatlock, and D. Grossman. Verified
peephole optimizations for CompCert. In PLDT, 2016.

[20] D. Novillo. Memory SSA — a unified approach for sparsely representing memory operations. In Proc. of the GCC Developers’
Summit, 2007.

[21] K. J. Ottenstein, R. A. Ballance, and A. B. MacCabe. The
program dependence web: A representation supporting control, data-, and demand-driven interpretation of imperative languages. In PLDI, 1990.

[22] F. Peschanski. Parallel computing with the pi-calculus. In
DAMP, 2011.

[23] T. B. Schardl, W. S. Moses, and C. E. Leiserson. Tapir:
Embedding fork-join parallelism into LLVM’s intermediate
representation. In LCPC, 2016.

[24] M. Sperber, R. K. Dybvig, M. Flatt, A. van Straaten, R. Kelsey,
W. Clinger, J. Rees, R. B. Findler, and J. Matthews. Revised®
report on the algorithmic language Scheme, Sept. 2007. URL
http: //www.r6rs.org/final/r6rs. pdf.

[25] B. Steensgaard. Sparse functional stores for imperative programs. In ACM SIGPLAN Workshop on Intermediate Representations, 1995.

[26] X. Wang, N. Zeldovich, M. F. Kaashoek, and A. Solar-Lezama.
Towards optimization-safe systems: analyzing the impact of
undefined behavior. In SOSP, 2013.

[27] J. Zhao, S. Nagarakatte, M. M. Martin, and S. Zdancewic.
Formalizing the LLVM intermediate representation for verified
program transformations. In POPL, 2012.
