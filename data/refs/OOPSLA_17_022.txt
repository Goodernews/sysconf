[1] Alexander Aiken and Edward L. Wimmers. 1992. Solving systems of set constraints. Proceedings of the Seventh Annual

IEEE Symposium on Logic in Computer Science (1992), 329-340. http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?

arnumber=185545



[2] Alexander Aiken, Edward L. Wimmers, and T. K. Lakshman. 1994. Soft Typing with Conditional Types. In Proceedings of the

21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL 94). ACM, New York, NY, USA,

163-173.



[3] Davide Ancona and Andrea Corradi. 2016. Semantic subtyping for imperative object-oriented languages. Proceedings of the

2016 ACM SIGPLAN International Conference on Object-Oriented Programming, Systems, Languages, and Applications OOPSLA 2016, 568-587.



[4] Christopher Anderson, Paola Giannini, and Sophia Drossopoulou. 2005. Towards Type Inference for Javascript. In Proceedings

of the 19th European Conference on Object-Oriented Programming (ECOOP’05). Springer-Verlag, Berlin, Heidelberg, 428452.



[5] Esben Andreasen and Anders Moller. 2014. Determinacy in Static Analysis for jQuery. In Proceedings of the 2014 ACM

International Conference on Object Oriented Programming Systems Languages & Applications (OOPSLA ’14). ACM, New

York, NY, USA, 17-31.



[6] Gavin Bierman, Martin Abadi, and Mads Torgersen. 2014. Understanding TypeScript. In ECOOP 2014 — Object-Oriented

Programming: 28th European Conference, Uppsala, Sweden, fuly 28 — August 1, 2014. Proceedings, Richard Jones (Ed.).

Springer Berlin Heidelberg, Berlin, Heidelberg, 257-281.



[7] Giuseppe Castagna and Victor Lanvin. 2017. Gradual Typing with Union and Intersection Types. In Proceedings of ICFP.



[8] Giuseppe Castagna, Tommaso Petrucciani, and Kim Nguyen. 2016. Set-theoretic Types for Polymorphic Variants. In

Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming (ICFP 2016). ACM, New York,

NY, USA, 378-391.



[9] Satish Chandra, Colin S. Gordon, Jean-Baptiste Jeannin, Cole Schlesinger, Manu Sridharan, Frank Tip, and Youngil Choi. 2016.

Type Inference for Static Compilation of JavaScript. In Proceedings of the 2016 ACM SIGPLAN International Conference on

Object-Oriented Programming, Systems, Languages, and Applications (OOPSLA 2016). ACM, New York, NY, USA, 410-429.



[10] Avik Chaudhuri, Panagiotis Vekris, Sam Goldman, Marshall Roch, and Gabriel Levi. 2017. Fast and Precise Type Checking

for JavaScript (Extended version). https://arxiv.org/abs/1708.08021. (2017).



[11] Wontae Choi, Satish Chandra, George C. Necula, and Koushik Sen. 2015. SJS: A Type System for JavaScript with Fixed

Object Layout. In SAS (Lecture Notes in Computer Science), Vol. 9291. Springer, 181-198.



[12] Ravi Chugh, David Herman, and Ranjit Jhala. 2012. Dependent Types for JavaScript. In Proceedings of the ACM International

Conference on Object Oriented Programming Systems Languages and Applications (OOPSLA ’12). ACM, New York, NY,

USA, 587-606.



[13] Closure. 2009. Closure Compiler. https://developers.google.com/closure/compiler/. (2009). Accessed: 2016-11-15.



[14] Yann Collet. 2011. LZ4-Extremely fast compression. (2011). https://github.com/1z4/1z4.



[15] Dart. 2011. Dart Language Specification. https://www.dartlang.org/guides/language/spec. (2011). Accessed: 2016-11-15.



[16] Stephen Dolan and Alan Mycroft. 2017. Polymorphism, Subtyping, and Type Inference in MLsub. In Proceedings of the 44th

ACM SIGPLAN Symposium on Principles of Programming Languages - POPL 2017. ACM Press, New York, New York, USA,

60-72,



[17] Jonathan Eifrig, Scott Smith, and Valery Trifonov. 1995. Sound Polymorphic Type Inference for Objects. SIGPLAN Not. 30,

10 (Oct. 1995), 169-184.



[18] Manuel Fahndrich and Alex Aiken. 1996. Making Set-Constraint Program Analyses Scale. Technical Report. Berkeley, CA,

USA.



[19] Manuel Fahndrich, Jeffrey S. Foster, Zhendong Su, and Alexander Aiken. 1998. Partial Online Cycle Elimination in

Inclusion Constraint Graphs. In Proceedings of the ACM SIGPLAN 1998 Conference on Programming Language Design and

Implementation (PLDI ’98). ACM, New York, NY, USA, 85-96.



[20] Cormac Flanagan. 1997. Effective Static Debugging via Componential Set-Based Analysis. Ph.D. Dissertation. Rice University.



[21] Cormac Flanagan and Matthias Felleisen. 1999. Componential Set-based Analysis. ACM Trans. Program. Lang. Syst. 21, 2

(March 1999), 370-416,



[22] Alain Frisch, Giuseppe Castagna, and Véronique Benzaken. 2008. Semantic Subtyping: Dealing Set-theoretically with

Function, Union, Intersection, and Negation Types. 3, ACM 55, 4, Article 19 (Sept. 2008), 64 pages.



[23] Arjun Guha, Claudiu Saftoiu, and Shriram Krishnamurthi. 2011. Typing Local Control and State Using Flow Analysis. In

Proceedings of the 20th European Conference on Programming Languages and Systems: Part of the Joint European Conferences

on Theory and Practice of Software (ESOP’11/ETAPS’11). Springer-Verlag, Berlin, Heidelberg, 256-275.



[24] Hack. 2014. Hack Language Specification. https://github.com/hhvm/hack-langspec. (2014). Accessed: 2016-11-15.



[25] Thomas S. Heinze, Anders Moller, and Fabio Strocco. 2016. Type Safety Analysis for Dart. In Proceedings of the 12th

Symposium on Dynamic Languages (DLS 2016). ACM, New York, NY, USA, 1-12.



[26] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 48, Publication date: October 2017.

48:30 Avik Chaudhuri, Panagiotis Vekris, Sam Goldman, Marshall Roch, and Gabriel Levi



[27] Simon Holm Jensen, Magnus Madsen, and Anders Meller. 2011. Modeling the HTML DOM and Browser API in Static

Analysis of JavaScript Web Applications. In Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European

Conference on Foundations of Software Engineering (ESEC/FSE ’11). ACM, New York, NY, USA, 59-69.



[28] Simon Holm Jensen, Anders Meller, and Peter Thiemann. 2009. Type analysis for JavaScript. Lecture Notes in Computer

Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics) 5673 LNCS (2009),

238-255.



[29] Simon Holm Jensen, Anders Moller, and Peter Thiemann. 2010. Interprocedural Analysis with Lazy Propagation. In

Proceedings of the 17th International Conference on Static Analysis (SAS’10). Springer-Verlag, Berlin, Heidelberg, 320-339.



[30] Vineeth Kashyap, Kyle Dewey, Ethan A. Kuefner, John Wagner, Kevin Gibbons, John Sarracino, Ben Wiedermann, and Ben

Hardekopf. 2014. JSAI: A Static Analysis Platform for JavaScript. In Proceedings of the 22Nd ACM SIGSOFT International

Symposium on Foundations of Software Engineering (FSE 2014). ACM, New York, NY, USA, 121-132.



[31] Hongki Lee, Sooncheol Won, Joonho Jin, Junhee Cho, and Sukyoung Ryu. 2012. SAFE: Formal specification and implementation of a scalable analysis framework for ECMAScript. In International Workshop on Foundations of Object-Oriented

Languages (FOOL), Vol. 10.



[32] Benjamin S. Lerner, Joe Gibbs Politz, Arjun Guha, and Shriram Krishnamurthi. 2013. TeJaS: Retrofitting Type Systems for

JavaScript. Proceedings of the 9th symposium on Dynamic languages - DLS ’13, 1-16.



[33] Changhee Park and Sukyoung Ryu. 2015. Scalable and Precise Static Analysis of JavaScript Applications via LoopSensitivity. In 29th European Conference on Object-Oriented Programming (ECOOP 2015) (Leibniz International Proceedings

in Informatics (LIPIcs)), John Tang Boyland (Ed.), Vol. 37. Schloss Dagstuhl—Leibniz-Zentrum fuer Informatik, Dagstuhl,

Germany, 735-756.



[34] Francois Pottier. 1998. Type Inference in the Presence of Subtyping: from Theory to Practice. Research Report 3483. INRIA.

http://hal inria.fr/docs/00/07/32/05/PDF/RR- 3483.pdf



[35] Francois Pottier. 2001. Simplifying Subtyping Constraints: a Theory. Information & Computation 170, 2 (Nov. 2001), 153-183.



[36] Aseem Rastogi, Nikhil Swamy, Cédric Fournet, Gavin Bierman, and Panagiotis Vekris. 2015. Safe & Efficient Gradual Typing

for TypeScript. In Proceedings of the 42Nd Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming

Languages (POPL 15). ACM, New York, NY, USA, 167-180.



[37] Patrick M. Rondon, Ming Kawaguci, and Ranjit Jhala. 2008. Liquid Types. In Proceedings of the 29th ACM SIGPLAN Conference

on Programming Language Design and Implementation (PLDI ’08). ACM, New York, NY, USA, 159-169.



[38] Frederick Smith, David Walker, and J. Gregory Morrisett. 2000. Alias Types. In Proceedings of the 9th European Symposium

on Programming Languages and Systems (ESOP ’00). Springer-Verlag, London, UK, UK, 366-381.



[39] Zhendong Su, Alexander Aiken, Joachim Niehren, Tim Priesnitz, and Ralf Treinen. 2002. The First-order Theory of Subtyping

Constraints. In Proceedings of the 29th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL

’02), ACM, New York, NY, USA, 203-216.



[40] Zhendong Su, Manuel Fahndrich, and Alexander Aiken. 2000. Projection Merging: Reducing Redundancies in Inclusion

Constraint Graphs. In Proceedings of the 27th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages

(POPL ’00). ACM, New York, NY, USA, 81-95.



[41] Peter Thiemann. 2005. Towards a Type System for Analyzing Javascript Programs. In Proceedings of the 14th European

Conference on Programming Languages and Systems (ESOP’05). Springer-Verlag, Berlin, Heidelberg, 408-422.



[42] Sam Tobin-Hochstadt and Matthias Felleisen. 2008. The Design and Implementation of Typed Scheme. In Proceedings of the

35th Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL ’08). ACM, New York,

NY, USA, 395-406.



[43] Valery Trifonov and Scott Smith. 1996. Subtyping Constrained Types. SAS ’96: Proceedings of the 3rd International Symposium

on Static Analysis (1996), 349-365.



[44] TypeScript. 2012. TypeScript Design Goals. https://github.com/Microsoft/TypeScript/wiki/TypeScript-Design-Goals. (2012).

Accessed: 2016-11-15.



[45] Dimitris Vardoulakis. 2012. CFA2: Pushdown Flow Analysis for Higher-Order Languages. Ph.D. Dissertation. Northeastern

University.



[46] Panagiotis Vekris, Benjamin Cosman, and Ranjit Jhala. 2016. Refinement Types for TypeScript. In Proceedings of the 37th

ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI ’16). ACM, New York, NY, USA,

310-325.



[47] AK. Wright and M. Felleisen. 1994. A Syntactic Approach to Type Soundness. Inf: Comput. 115, 1 (Nov. 1994), 38-94.



[48] Proc. ACM Program. Lang., Vol. 1, No. OOPSLA, Article 48. Publication date: October 2017.
