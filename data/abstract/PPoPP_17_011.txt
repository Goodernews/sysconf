
While hardware transactional memory (HTM) has recently
been adopted to construct efficient concurrent search tree
structures, such designs fail to deliver scalable performance
under contention. In this paper, we first conduct a detailed
analysis on an HTM-based concurrent B+Tree, which uncovers several reasons for excessive HTM aborts induced
by both false and true conflicts under contention. Based
on the analysis, we advocate Eunomia, a design pattern
for search trees which contains several principles to reduce
HTM aborts, including splitting HTM regions with versionbased concurrency control to reduce HTM working sets,
partitioned data layout to reduce false conflicts, proactively
detecting and avoiding true conflicts, and adaptive concurrency control. To validate their effectiveness, we apply
such designs to construct a scalable concurrent B+Tree
using HTM. Evaluation using key-value store benchmarks
on a 20-core HTM-capable multi-core machine shows that
Eunomia leads to 5X-11X speedup under high contention,
while incurring small overhead under low contention.
