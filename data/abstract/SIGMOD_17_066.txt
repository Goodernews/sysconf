

Modern computing tasks such as real-time analytics require
refresh of query results under high update rates. Incremental View Maintenance (IVM) approaches this problem by
materializing results in order to avoid recomputation. IVM
naturally induces a trade-off between the space needed to
maintain the materialized results and the time used to process updates. In this paper, we show that the full materialization of results is a barrier for more general optimization
strategies. In particular, we present a new approach for
evaluating queries under updates. Instead of the materialization of results, we require a data structure that allows: (1)
linear time maintenance under updates, (2) constant-delay
enumeration of the output, (3) constant-time lookups in the
output, while (4) using only linear space in the size of the
database. We call such a structure a Dynamic Constantdelay Linear Representation (DCLR) for the query. We
show that DyN, a dynamic version of the Yannakakis algorithm, yields DCLRs for the class of free-connex acyclic
CQs. We show that this is optimal in the sense that no
DCLR can exist for CQs that are not free-connex acyclic.
Moreover, we identify a sub-class of queries for which DYN
features constant-time update per tuple and show that this
class is maximal. Finally, using the TPC-H and TPC-DS
benchmarks, we experimentally compare DYN and a higherorder IVM (HIVM) engine. Our approach is not only more
efficient in terms of memory consumption (as expected), but
is also consistently faster in processing updates.
