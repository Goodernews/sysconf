
Semi-structured data emerge in many domains, especially in
web analytics and business intelligence. However, querying
such data is inherently sequential due to the nested structure
of input data. Existing solutions pessimistically enumerate
all execution paths to circumvent dependencies, yielding
sub-optimal performance and limited scalability.
This paper presents GAP, a parallelization scheme that,
for the first time, leverages the grammar of the input data
to boost the parallelization efficiency. GAP leverages static
analysis to infer feasible execution paths for specific contexts based on the grammar of the semi-structured data. It
can eliminate unnecessary paths without compromising the
correctness. In the absence of a pre-defined grammar, GAP
switches into a speculative execution mode and takes potentially incomplete grammar extracted from prior inputs.
Together, the dual-mode GAP reduces the execution paths
from all paths to a minimum, therefore maximizing the parallelization efficiency and scalability. The benefits of path
elimination go beyond reducing extra computation â€“ it also
enables the use of more efficient data structures, which further improves the efficiency. An evaluation on a large set of
standard benchmarks with diverse queries shows that GAP
yields significant efficiency increase and boosts the speedup
of the state-of-the-art from 2.9X to 17.6X on a 20-core machine for a set of 200 queries.
