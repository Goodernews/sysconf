
The popularity of Non-Uniform Memory Access (NUMA)
architectures has led to numerous locality-preserving hierarchical lock designs, such as HCLH, HMCS, and cohort
locks. Locality-preserving locks trade fairness for higher
throughput. Hence, some instances of acquisitions can incur long latencies, which may be intolerable for certain applications. Few locks admit a waiting thread to abandon its
protocol on a timeout. State-of-the-art abortable locks are
not fully locality aware, introduce high overheads, and unsuitable for frequent aborts. Enhancing locality-aware locks
with lightweight timeout capability is critical for their adoption. In this paper, we design and evaluate the HMCS-T
lock, a Hierarchical MCS (HMCS) lock variant that admits a
timeout. HMCS-T maintains the locality benefits of HMCS
while ensuring aborts to be lightweight. HMCS-T offers
the progress guarantee missing in most abortable queuing
locks. Our evaluations show that HMCS-T offers the timeout feature at a moderate overhead over its HMCS analog.
HMCS-T, used in an MPI runtime lock, mitigated the poor
scalability of an MPI+OpenMP BFS code and resulted in
4.3x superior scaling.


