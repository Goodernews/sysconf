
Finite State Machine (FSM) is the key kernel behind many
popular applications, including regular expression matching, text tokenization, and Huffman decoding. Parallelizing
FSMs is extremely difficult because of the strong dependencies and unpredictable memory accesses. Previous efforts
have largely focused on multi-core parallelization, and used
different approaches, including speculative and enumerative
execution, both of which have been effective but also have
limitations. With increasing width and improving flexibility
in SIMD instruction sets, this paper focuses on combining
SIMD and multi/many-core parallelism for FSMs. We have
developed a novel strategy, called enumerative speculation.
Instead of speculating on a single state as in speculative execution or enumerating all possible states as in enumerative
execution, our strategy speculates transitions from several
possible states, reducing the prediction overheads of speculation approach and the large amount of redundant work
in the enumerative approach. A simple lookback approach
produces a set of guessed states to achieve high speculation
success rates in our enumerative speculation. We evaluate
our method with four popular FSM applications: Huffman
decoding, regular expression matching, HTML tokenization,
and Div7. We obtain up to 2.5x speedup using SIMD on one
core and up to 95x combining SIMD with 60 cores of an
Intel Xeon Phi. On a single core, we outperform the best
single-state speculative execution version by an average of
1.6x, and in combining SIMD and many-core parallelism,
outperform enumerative execution by an average of 2x.
