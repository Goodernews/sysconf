
This paper studies the feasibility of efficiently
combining both a software component model and a taskbased model. Task based models are known to enable efficient
executions on recent HPC computing nodes while component
models ease the separation of concerns of application and
thus improve their modularity and adaptability. This paper
describes a prototype version of the COMET programming
model combining concepts of task-based and component models, and a preliminary version of the COMET runtime built
on top of StarPU and L2C. Evaluations of the approach have
been conducted on a real-world use-case analysis of a subpart of the production application GYSELA. Results show that
the approach is feasible and that it enables easy composition
of independent software codes without introducing overheads.
Performance results are equivalent to those obtained with a
plain OpenMP based implementation.

Keywords-HPC; Software Component Model; Task-Based
Model; Task scheduling; Multi-cores; Shared-memory;

