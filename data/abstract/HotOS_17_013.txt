

The public cloud is moving to a Platform-as-a-Service model where
services such as data management, machine learning or image
classification are provided by the cloud operator while applications
are written in high-level languages and leverage these services.

Managed languages such as Java, Python or Scala are widely
used in this setting. However, while these languages can increase
productivity, they are often associated with problems such as unpredictable garbage collection pauses or warm-up overheads.

We argue that the reason for these problems is that current
language runtime systems were not initially designed for the cloud
setting. To address this, we propose seven tenets for designing future
language runtime systems for cloud data centers. We then outline
the design of a general substrate for building such runtime systems,
based on these seven tenets.

