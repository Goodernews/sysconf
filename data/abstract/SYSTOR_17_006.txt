
Tracing and profiling low-level kernel functions (e.g. as
found in the process scheduler) is a challenging task, though,
necessary in both research and production in order to acquire detailed insights and achieve peak performance. Several kernel functions are known to be not traceable because
of architectural limitations, whereas tracking other functions
causes side effects and skews profiling results.

In this paper, we present a novel, simulation-based approach to analyze the behavior and performance of kernel
functions. Kernel code is executed on a simulated hardware
platform avoiding the bias caused by collecting the tracing
data within the system under observation. From the flat
call trace generated by the simulator, we reconstruct the entire call graph and enrich it with detailed profiling statistics.
Specifying regions of interest enables developers to systematically explore the system behavior and identify performance
bottlenecks. As case study, we analyze the process scheduler of the Linux kernel. We are interested in quantifying
the synchronization overhead caused by a growing number
of CPU cores in a custom, semi-partitioned scheduler design. Conventional tracing methods were not able to obtain
measurements with the required accuracy and granularity.
