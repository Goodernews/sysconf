

Domain-Specific Modelling Languages (DSLs) allow domain
experts to create models using abstractions they are most
familiar with. A DSL’s syntax is specified in two parts: the syntax defines the language’s concepts and their
allowed combinations, and the concrete syntax defines how
those concepts are presented to the user (typically using
a graphical or textual notation). However important concrete syntax is for the usability of the language, current
modelling tools offer limited possibilities for defining the
mapping between abstract and concrete syntax. Often, the
language designer is restricted to defining a single icon representation of each concept, which is then rendered to the
user in a (fixed) graphical interface. This paper presents a
framework that explicitly models the bi-directional mapping
between the abstract and concrete syntax, thereby making
these restrictions easy to overcome. It is more flexible and
allows, amongst others, for a model to be represented in
multiple front-ends, using multiple representation formats,
and multiple mappings. Our approach is evaluated with an
implementation in our prototype tool, the Modelverse, and
by applying it on an example language.
