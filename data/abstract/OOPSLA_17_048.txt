
Recent research has identified significant performance hurdles that sound gradual typing needs to overcome.
These performance hurdles stem from the fact that the run-time checks gradual type systems insert into code
can cause significant overhead. We propose that designing a type system for a gradually typed language hand
in hand with its implementation from scratch is a possible way around these and several other hurdles on
the way to efficient sound gradual typing. Such a design process also highlights the type-system restrictions
required for efficient composition with gradual typing. We formalize the core of a nominal object-oriented
language that fulfills a variety of desirable properties for gradually typed languages, and present evidence that
an implementation of this language suffers minimal overhead even in adversarial benchmarks identified in
earlier work.
