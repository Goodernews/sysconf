

Optimization of disjunctive predicates is a very challenging
task which has been vastly neglected by the research community and commercial databases. In this work, we focus
on the complex problem of optimizing disjunctive predicates
by means of the bypass processing technique. In bypass processing, selection operators split the input tuple stream into
two disjoint output streams: the true-stream with tuples
that satisfy the selection predicate and the false-stream with
tuples that do not. Bypass processing is crucial in avoiding expensive predicates whenever the outcome of the query
predicate can be determined by evaluating the less expensive
ones.

In main memory databases, CPU architectural characteristics, such as the branch misprediction penalty, become a
prominent cost factor which cannot be ignored. Our algorithm takes into account the branch misprediction penalty,
and, in addition, it eliminates common subexpressions.

The current literature relies on two assumptions: (1) predicate costs are assumed to be constant, (2) predicate selectivities are assumed to be independent. Since both assumptions do not hold in practice, our approach is not based on
any of them.
