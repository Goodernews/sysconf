

While much of the research on transaction processing has focused on improving overall performance in terms of throughput and mean latency, surprisingly less attention has been
given to performance predictability: how often individual
transactions exhibit execution latency far from the mean.
Performance predictability is increasingly important when
transactions lie on the critical path of latency-sensitive applications, enterprise software, or interactive web services.
In this paper, we focus on understanding and mitigating
the sources of performance unpredictability in today’s transactional databases. We conduct the first quantitative study
of major sources of variance in MySQL, Postgres (two of
the largest and most popular open-source products on the
market), and VoltDB (a non-conventional database). We
carry out our study with a tool called TProfiler that, given
the source code of a database system and programmer annotations indicating the start and end of a transaction, is
able to identify the dominant sources of variance in transaction latency. Based on our findings, we investigate alternative algorithms, implementations, and tuning strategies to reduce latency variance without compromising mean
latency or throughput. Most notably, we propose a new
lock scheduling algorithm, called Variance-Aware Transaction Scheduling (VATS), and a lazy buffer pool replacement
policy. In particular, our modified MySQL exhibits signif
icantly lower variance and 99th percentile latencies by up
to 5.6x and 6.3x, respectively. Our proposal has been welcomed by the open-source community, and our VATS algorithm has already been adopted as of MySQL’s 5.7.17 release
(and been made the default scheduling policy in MariaDB).

