

Network provenance, which records the execution history
of network events as meta-data, is becoming increasingly
important for network accountability and failure diagnosis.
For example, network provenance may be used to trace the
path that a message traversed in a network, or to reveal
how a particular routing entry was derived and the parties
involved in its derivation. A challenge when storing the
provenance of a live network is that the large number of arriving messages may incur substantial storage overhead. In
this paper, we explore techniques to dynamically compress
distributed provenance stored at scale. Logically, compression is achieved by grouping equivalent provenance trees
and maintaining only one concrete copy for each equivalence class. To efficiently identify the equivalent provenance,
we (1) introduce distributed event-based linear programs
(DELPs) to specify distributed network applications, and
(2) statically analyze DELPs to allow for quick detection
of provenance equivalence at runtime. Our experimental
results demonstrate that our approach leads to significant
storage reduction and query latency improvement over alternative approaches.

