
Today, big data applications can generate largescale data sets at an unprecedented rate; and scientists have
turned to parallel and distributed systems for data analysis.
Although many big data processing systems provide advanced
mechanisms to partition data and tackle the computational
skew, it is difficult to efficiently implement skew-resistant
mechanisms, because the runtime of different partitions not
only depends on input data size but also algorithms that
will be applied on data. As a result, many research efforts
have been undertaken to explore user-defined partitioning
methods for different types of applications and algorithms.
However, manually writing application-specific partitioning
methods requires significant coding effort, and finding the
optimal data partitioning strategy is particularly challenging
even for developers that have mastered sufficient application
knowledge.

In this paper, we propose PaPar, a Parallel data Partitioning
framework for big data applications, to simplify the implementations of data partitioning algorithms. PaPar provides a
set of computational operators and distribution strategies for
programmers to describe desired data partitioning methods.
Taking an input data configuration file and a workflow configuration file as the input, PaPar can automatically generate
the parallel partitioning codes by formalizing the user-defined
workflow as a sequence of key-value operations and matrixvector multiplications, and efficiently mapping to the parallel
implementations with MPI and MapReduce. We apply our
approach on two applications: muBLAST, a MPI implementation of BLAST algorithms for biological sequence search; and
PowerLyra, a computation and partitioning method for skewed
graphs. The experimental results show that compared to the
partitioning methods of applications, the codes generated by
PaPar can produce the same data partitions with comparable
or less partitioning time.

