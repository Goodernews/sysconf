
Fault tolerance is increasingly important in high performance
computing due to the substantial growth of system scale and
decreasing system reliability. In-memory/diskless checkpoint
has gained extensive attention as a solution to avoid the
IO bottleneck of traditional disk-based checkpoint methods.
However, applications using previous in-memory checkpoint
suffer from little available memory space. To provide high
reliability, previous in-memory checkpoint methods either
need to keep two copies of checkpoints to tolerate failures
while updating old checkpoints or trade performance for
space by flushing in-memory checkpoints into disk.
In this paper, we propose a novel in-memory checkpoint
method, called self-checkpoint, which can not only achieve
the same reliability of previous in-memory checkpoint methods, but also increase the available memory space for applications by almost 50%. To validate our method, we apply the
self-checkpoint to an important problem, fault tolerant HPL.
We implement a scalable and fault tolerant HPL based on this
new method, called SKT-HPL, and validate it on two largescale systems. Experimental results with 24,576 processes
show that SKT-HPL achieves over 95% of the performance of
the original HPL. Compared to the state-of-the-art in-memory
checkpoint method, it improves the available memory size by
47% and the performance by 5%.
