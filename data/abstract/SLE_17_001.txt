
Domain-Specific Languages (DSLâ€™s) offer language-level abstractions that General-Purpose Languages do not offer, thus
speeding up the implementation of the solution of problems
within a specific domain. Developers have the choice of developing a DSL by building an interpreter/compiler for it,
which is a hard and time-consuming task, or embedding it in
a host language, thus speeding up the development process
but losing several advantages that having a dedicated compiler might bring. In this work we present a meta-compiler
called Metacasanova, whose meta-language is based on operational semantics. Then, we propose a language extension
with functors and modules that allows to embed the type
system of a language definition inside the meta-type system
of Metacasanova and improves the performance of manipulating data structures at run-time. Our results show that
Metacasanova dramatically reduces the code lines required
to develop a compiler, and that the running time of the Metaprogram is improved by embedding the host language type
system in the meta-type system with the use of functors in
the meta-language.
