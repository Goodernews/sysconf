
Applications written to run on conventional operating systems
typically depend on OS abstractions like processes, pipes,
signals, sockets, and a shared file system. Porting these
applications to the web currently requires extensive rewriting
or hosting significant portions of code server-side because
browsers present a nontraditional runtime environment that
lacks OS functionality.

This paper presents BROWSIX, a framework that bridges
the considerable gap between conventional operating systems and the browser, enabling unmodified programs expecting a Unix-like environment to run directly in the browser.
BROWSIX comprises two core parts: (1) a JavaScript-only
system that makes core Unix features (including pipes, concurrent processes, signals, sockets, and a shared file system)
available to web applications; and (2) extended JavaScript runtimes for C, C++, Go, and Node.js that support running programs written in these languages as processes in the browser.
BROWSIX supports running a POSIX shell, making it straightforward to connect applications together via pipes.

We illustrate BROWSIX’s capabilities via case studies that
demonstrate how it eases porting legacy applications to the
browser and enables new functionality. We demonstrate a
Brows Ix-enabled I4TpX editor that operates by executing
unmodified versions of pdfLaTeX and BibTeX. This browseronly MTpX editor can render documents in seconds, making
it fast enough to be practical. We further demonstrate how
BROWSIX lets us port a client-server application to run
entirely in the browser for disconnected operation. Creating
these applications required less than 50 lines of glue code and
no code modifications, demonstrating how easily BROWSIX
can be used to build sophisticated web applications from
existing parts without modification.



CCS Concepts «Information systems — Browsers;
¢ Software and its engineering — Operating systems

Keywords Browsix, browser, operating system, JavaScript
